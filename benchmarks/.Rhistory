# createCharts(
#  c("parallel-dynamic", "hamstersjs"),
#  c("Monte Carlo Math.random 100k", "Monte Carlo Math.random 1m"),
#  "Monte Carlo simjs"
#)
#createCharts(
#  c("parallel-es", "paralleljs", "threadsjs"),
#  c("Monte Carlo simjs 100k", "Monte Carlo simjs 1m"),
#  "Monte Carlo Math.random"
#)
require( tikzDevice )
percent <- function(x, digits = 2, format = "f", ...) {
ifelse(is.na(x), "", paste0(formatC(100 * x, format = format, digits = digits, ...)))
}
dir.create(file.path("charts"), showWarnings=FALSE)
data <- read.csv("./benchmarks.csv")
computeRelativeMean <- function (record) {
syncBaseLine <- data[data$OS == record["OS"] & data$OS.Version == record["OS.Version"] & data$Browser == record["Browser"] & data$Browser.Version==record["Browser.Version"] & data$Set == "sync" & data$Name == record["Name"],]
as.numeric(record["Mean..s."]) / syncBaseLine[1, "Mean..s."]
}
plotChart <- function (plotData, notSync, environmentTitle=NULL) {
colours <- gray.colors(nrow(plotData), start=0.5, end=0.8)
barDensity <- c(-10, 50, 30, 20)
shadeAngle <- c(0, 45, -45, 45)
# Reduce margin, mainly for latex output
# par(mar=c(2,2.5,2,2))
bb <- barplot(plotData, beside=TRUE, main=environmentTitle, ylab="Relative to Sync (%)", col=colours, ylim = c(0, max(1, max(plotData, na.rm=TRUE))), density = barDensity, angle=shadeAngle)
legend("topleft", legend = rownames(plotData), bty="n", fill=colours, density = barDensity, angle=shadeAngle)
text(bb, plotData, percent(plotData, digits = 1), pos = 3, cex = 1, col="black")
text(bb, 0, formatC(notSync$Mean..s., digits=2), pos=3)
}
data$RelativeMean <- apply(data, 1, computeRelativeMean)
data <- data[!is.na(data$RelativeMean), ]
createCharts <- function (sets, tests) {
relevant <- data[data$Set %in% sets & data$Name %in% tests, ]
for(os in unique(relevant$OS)) {
byOS <- relevant[relevant$OS==os,]
for (osVersion in unique(byOS$OS.Version)) {
byOSVersion <- byOS[byOS$OS.Version == osVersion, ]
for (browser in unique(byOSVersion$Browser)) {
byBrowser <- byOSVersion[byOSVersion$Browser==browser, ]
for (browserVersion in unique(byBrowser$Browser.Version)) {
byBrowserVersion <- byBrowser[byBrowser$Browser.Version==browserVersion, ]
osName <- paste0(os, " ", osVersion);
dir.create(file.path("charts", osName), showWarnings=FALSE)
environmentTitle = paste(os, osVersion, browser, browserVersion)
notSync <- byBrowserVersion[byBrowserVersion$Set!="sync", ]
pictureName <- paste0(browser, "-", browserVersion)
fullName <- paste0("charts/", osName, "/", pictureName)
tmp <- byBrowserVersion[, c("Set", "Name", "RelativeMean")]
plotData <- with(tmp, {
out <- matrix(nrow=nlevels(tmp$Set), ncol=nlevels(tmp$Name),
dimnames=list(levels(tmp$Set), levels(tmp$Name)))
out[cbind(tmp$Set, tmp$Name)] <- tmp$RelativeMean
out <- out[rowSums(is.na(out)) != ncol(out),]
out <- out[, colSums(is.na(out)) != nrow(out)]
out
})
means <- with(plotData, {
out <- matrix(nrow=length(rownames(plotData)), ncol=length(colnames(plotData)),
dimnames=list(rownames(plotData), colnames(plotData)))
out[cbind(tmp$Set, tmp$Name)] <- byBrowserVersion$Mean..s.
out
})
png(paste0(fullName, ".png"), height=16, width=ncol(plotData) * 9, units="cm", res=300)
plotChart(plotData, notSync, environmentTitle)
dev.off()
# tikz(paste0(fullName, ".tex"), height=2.5, sanitize = TRUE, engine="pdftex")
# plotChart(plotData, notSync)
# dev.off()
}
}
}
}
}
createCharts(
c("parallel-es", "hamstersjs", "threadsjs", "paralleljs"),
c("Knights Tour (5x5)", "Knights Tour (6x6)", "Mandelbrot", "Monte Carlo")
)
# createCharts(
#  c("parallel-dynamic", "hamstersjs"),
#  c("Monte Carlo Math.random 100k", "Monte Carlo Math.random 1m"),
#  "Monte Carlo simjs"
#)
#createCharts(
#  c("parallel-es", "paralleljs", "threadsjs"),
#  c("Monte Carlo simjs 100k", "Monte Carlo simjs 1m"),
#  "Monte Carlo Math.random"
#)
debugSource('~/git/parallel-es-example/benchmarks/charts.R', echo=TRUE)
debugSource('~/git/parallel-es-example/benchmarks/charts.R', echo=TRUE)
require( tikzDevice )
percent <- function(x, digits = 2, format = "f", ...) {
ifelse(is.na(x), "", paste0(formatC(100 * x, format = format, digits = digits, ...)))
}
dir.create(file.path("charts"), showWarnings=FALSE)
data <- read.csv("./benchmarks.csv")
computeRelativeMean <- function (record) {
syncBaseLine <- data[data$OS == record["OS"] & data$OS.Version == record["OS.Version"] & data$Browser == record["Browser"] & data$Browser.Version==record["Browser.Version"] & data$Set == "sync" & data$Name == record["Name"],]
as.numeric(record["Mean..s."]) / syncBaseLine[1, "Mean..s."]
}
plotChart <- function (plotData, notSync, environmentTitle=NULL) {
colours <- gray.colors(nrow(plotData), start=0.5, end=0.8)
barDensity <- c(-10, 50, 30, 20)
shadeAngle <- c(0, 45, -45, 45)
# Reduce margin, mainly for latex output
# par(mar=c(2,2.5,2,2))
bb <- barplot(plotData, beside=TRUE, main=environmentTitle, ylab="Relative to Sync (%)", col=colours, ylim = c(0, max(1, max(plotData, na.rm=TRUE))), density = barDensity, angle=shadeAngle)
legend("topleft", legend = rownames(plotData), bty="n", fill=colours, density = barDensity, angle=shadeAngle)
text(bb, plotData, percent(plotData, digits = 1), pos = 3, cex = 1, col="black")
text(bb, 0, formatC(notSync$Mean..s., digits=2), pos=3)
}
data$RelativeMean <- apply(data, 1, computeRelativeMean)
data <- data[!is.na(data$RelativeMean), ]
createCharts <- function (sets, tests) {
relevant <- data[data$Set %in% sets & data$Name %in% tests, ]
for(os in unique(relevant$OS)) {
byOS <- relevant[relevant$OS==os,]
for (osVersion in unique(byOS$OS.Version)) {
byOSVersion <- byOS[byOS$OS.Version == osVersion, ]
for (browser in unique(byOSVersion$Browser)) {
byBrowser <- byOSVersion[byOSVersion$Browser==browser, ]
for (browserVersion in unique(byBrowser$Browser.Version)) {
byBrowserVersion <- byBrowser[byBrowser$Browser.Version==browserVersion, ]
osName <- paste0(os, " ", osVersion);
dir.create(file.path("charts", osName), showWarnings=FALSE)
environmentTitle = paste(os, osVersion, browser, browserVersion)
notSync <- byBrowserVersion[byBrowserVersion$Set!="sync", ]
pictureName <- paste0(browser, "-", browserVersion)
fullName <- paste0("charts/", osName, "/", pictureName)
tmp <- byBrowserVersion[, c("Set", "Name", "RelativeMean")]
plotData <- with(tmp, {
out <- matrix(nrow=nlevels(tmp$Set), ncol=nlevels(tmp$Name),
dimnames=list(levels(tmp$Set), levels(tmp$Name)))
out[cbind(tmp$Set, tmp$Name)] <- tmp$RelativeMean
out <- out[rowSums(is.na(out)) != ncol(out),]
out <- out[, colSums(is.na(out)) != nrow(out)]
out
})
means <- with(plotData, {
out <- matrix(nrow=length(rownames(plotData)), ncol=length(colnames(plotData)),
dimnames=list(rownames(plotData), colnames(plotData)))
out[cbind(byBrowserVersion$Set, byBrowserVersion$Name)] <- byBrowserVersion$Mean..s.
out
})
png(paste0(fullName, ".png"), height=16, width=ncol(plotData) * 9, units="cm", res=300)
plotChart(plotData, notSync, environmentTitle)
dev.off()
# tikz(paste0(fullName, ".tex"), height=2.5, sanitize = TRUE, engine="pdftex")
# plotChart(plotData, notSync)
# dev.off()
}
}
}
}
}
createCharts(
c("parallel-es", "hamstersjs", "threadsjs", "paralleljs"),
c("Knights Tour (5x5)", "Knights Tour (6x6)", "Mandelbrot", "Monte Carlo")
)
# createCharts(
#  c("parallel-dynamic", "hamstersjs"),
#  c("Monte Carlo Math.random 100k", "Monte Carlo Math.random 1m"),
#  "Monte Carlo simjs"
#)
#createCharts(
#  c("parallel-es", "paralleljs", "threadsjs"),
#  c("Monte Carlo simjs 100k", "Monte Carlo simjs 1m"),
#  "Monte Carlo Math.random"
#)
debugSource('~/git/parallel-es-example/benchmarks/charts.R', echo=TRUE)
debugSource('~/git/parallel-es-example/benchmarks/charts.R', echo=TRUE)
rownames(plotData)
length(rownames(plotData))
length(colnames(plotData))
rownames(plotData)
colnames(plotData)
out <- matrix(nrow=length(rownames(plotData)), ncol=length(colnames(plotData)),
dimnames=list(rownames(plotData), colnames(plotData)))
out
out[cbind(byBrowserVersion$Set, byBrowserVersion$Name)] <- byBrowserVersion$Mean..s.
tmp <- byBrowserVersion[byBrowserVersion$Set %in% rownames(plotData) & byBrowserVersion$Name %in% colnames(plotData),]
View(tmp)
debugSource('~/git/parallel-es-example/benchmarks/charts.R', echo=TRUE)
out <- matrix(nrow=length(rownames(plotData)), ncol=length(colnames(plotData)),
dimnames=list(rownames(plotData), colnames(plotData)))
tmp <- byBrowserVersion[byBrowserVersion$Set %in% rownames(plotData) & byBrowserVersion$Name %in% colnames(plotData),]
out[cbind(tmp$Set, tmp$Name)] <- tmp$Mean..s.
out <- matrix(nrow=length(rownames(plotData)), ncol=length(colnames(plotData)),
dimnames=list(rownames(plotData), colnames(plotData)))
tmp <- byBrowserVersion[byBrowserVersion$Set %in% rownames(plotData) & byBrowserVersion$Name %in% colnames(plotData),]
tmp$Set
$tmp
tmp
View(tmp)
debugSource('~/git/parallel-es-example/benchmarks/charts.R', echo=TRUE)
out <- matrix(nrow=length(rownames(plotData)), ncol=length(colnames(plotData)),
dimnames=list(rownames(plotData), colnames(plotData)))
tmp2 <- byBrowserVersion[byBrowserVersion$Set %in% rownames(plotData) & byBrowserVersion$Name %in% colnames(plotData),]
View(tmp2)
out[cbind(tmp2$Set, tmp2$Name)] <- tmp$Mean..s.
debugSource('~/git/parallel-es-example/benchmarks/charts.R', echo=TRUE)
out <- matrix(nrow=nlevels(byBrowserVersion$Set), ncol=nlevels(byBrowserVersion$Name),
dimnames=list(levels(byBrowserVersion), levels(byBrowserVersion$Name)))
out[cbind(byBrowserVersion$Set, byBrowserVersion$Name)] <- byBrowserVersion$Mean..s.
out <- out[out %in% rownames(plotData),]
out <- out[, out %in% colnames(plotData)]
out <- matrix(nrow=nlevels(byBrowserVersion$Set), ncol=nlevels(byBrowserVersion$Name),
dimnames=list(levels(byBrowserVersion), levels(byBrowserVersion$Name)))
out[cbind(byBrowserVersion$Set, byBrowserVersion$Name)] <- byBrowserVersion$Mean..s.
out <- matrix(nrow=nlevels(byBrowserVersion$Set), ncol=nlevels(byBrowserVersion$Name),
dimnames=list(levels(byBrowserVersion), levels(byBrowserVersion$Name)))
out[cbind(byBrowserVersion$Set, byBrowserVersion$Name)] <- byBrowserVersion$Mean..s.
debugSource('~/git/parallel-es-example/benchmarks/charts.R', echo=TRUE)
out <- matrix(nrow=nlevels(byBrowserVersion$Set), ncol=nlevels(byBrowserVersion$Name),
dimnames=list(levels(byBrowserVersion$Set), levels(byBrowserVersion$Name)))
out[cbind(byBrowserVersion$Set, byBrowserVersion$Name)] <- byBrowserVersion$Mean..s.
out <- out[out %in% rownames(plotData),]
out <- out[, out %in% colnames(plotData)]
out <- matrix(nrow=nlevels(byBrowserVersion$Set), ncol=nlevels(byBrowserVersion$Name),
dimnames=list(levels(byBrowserVersion$Set), levels(byBrowserVersion$Name)))
out[cbind(byBrowserVersion$Set, byBrowserVersion$Name)] <- byBrowserVersion$Mean..s.
View(plotData)
View(out)
debugSource('~/git/parallel-es-example/benchmarks/charts.R', echo=TRUE)
out <- matrix(nrow=nlevels(byBrowserVersion$Set), ncol=nlevels(byBrowserVersion$Name),
dimnames=list(levels(byBrowserVersion$Set), levels(byBrowserVersion$Name)))
out[cbind(byBrowserVersion$Set, byBrowserVersion$Name)] <- byBrowserVersion$Mean..s.
out <- out[rowSums(is.na(out)) != ncol(out),]
out <- out[, colSums(is.na(out)) != nrow(out)]
out
out <- matrix(nrow=nlevels(byBrowserVersion$Set), ncol=nlevels(byBrowserVersion$Name),
dimnames=list(levels(byBrowserVersion$Set), levels(byBrowserVersion$Name)))
require( tikzDevice )
percent <- function(x, digits = 2, format = "f", ...) {
ifelse(is.na(x), "", paste0(formatC(100 * x, format = format, digits = digits, ...)))
}
dir.create(file.path("charts"), showWarnings=FALSE)
data <- read.csv("./benchmarks.csv")
computeRelativeMean <- function (record) {
syncBaseLine <- data[data$OS == record["OS"] & data$OS.Version == record["OS.Version"] & data$Browser == record["Browser"] & data$Browser.Version==record["Browser.Version"] & data$Set == "sync" & data$Name == record["Name"],]
as.numeric(record["Mean..s."]) / syncBaseLine[1, "Mean..s."]
}
plotChart <- function (plotData, byBrowserVersion, environmentTitle=NULL) {
colours <- gray.colors(nrow(plotData), start=0.5, end=0.8)
barDensity <- c(-10, 50, 30, 20)
shadeAngle <- c(0, 45, -45, 45)
# Reduce margin, mainly for latex output
# par(mar=c(2,2.5,2,2))
bb <- barplot(plotData, beside=TRUE, main=environmentTitle, ylab="Relative to Sync (%)", col=colours, ylim = c(0, max(1, max(plotData, na.rm=TRUE))), density = barDensity, angle=shadeAngle)
legend("topleft", legend = rownames(plotData), bty="n", fill=colours, density = barDensity, angle=shadeAngle)
text(bb, plotData, percent(plotData, digits = 1), pos = 3, cex = 1, col="black")
means <- with(plotData, {
out <- matrix(nrow=nlevels(byBrowserVersion$Set), ncol=nlevels(byBrowserVersion$Name),
dimnames=list(levels(byBrowserVersion$Set), levels(byBrowserVersion$Name)))
out[cbind(byBrowserVersion$Set, byBrowserVersion$Name)] <- byBrowserVersion$Mean..s.
out <- out[rowSums(is.na(out)) != ncol(out),]
out <- out[, colSums(is.na(out)) != nrow(out)]
out
})
text(bb, 0, formatC(means., digits=2), pos=3)
}
data$RelativeMean <- apply(data, 1, computeRelativeMean)
data <- data[!is.na(data$RelativeMean), ]
createCharts <- function (sets, tests) {
relevant <- data[data$Set %in% sets & data$Name %in% tests, ]
for(os in unique(relevant$OS)) {
byOS <- relevant[relevant$OS==os,]
for (osVersion in unique(byOS$OS.Version)) {
byOSVersion <- byOS[byOS$OS.Version == osVersion, ]
for (browser in unique(byOSVersion$Browser)) {
byBrowser <- byOSVersion[byOSVersion$Browser==browser, ]
for (browserVersion in unique(byBrowser$Browser.Version)) {
byBrowserVersion <- byBrowser[byBrowser$Browser.Version==browserVersion, ]
osName <- paste0(os, " ", osVersion);
dir.create(file.path("charts", osName), showWarnings=FALSE)
environmentTitle = paste(os, osVersion, browser, browserVersion)
pictureName <- paste0(browser, "-", browserVersion)
fullName <- paste0("charts/", osName, "/", pictureName)
tmp <- byBrowserVersion[, c("Set", "Name", "RelativeMean")]
plotData <- with(tmp, {
out <- matrix(nrow=nlevels(tmp$Set), ncol=nlevels(tmp$Name),
dimnames=list(levels(tmp$Set), levels(tmp$Name)))
out[cbind(tmp$Set, tmp$Name)] <- tmp$RelativeMean
out <- out[rowSums(is.na(out)) != ncol(out),]
out <- out[, colSums(is.na(out)) != nrow(out)]
out
})
png(paste0(fullName, ".png"), height=16, width=ncol(plotData) * 9, units="cm", res=300)
plotChart(plotData, byBrowserVersion, environmentTitle)
dev.off()
# tikz(paste0(fullName, ".tex"), height=2.5, sanitize = TRUE, engine="pdftex")
# plotChart(plotData, notSync)
# dev.off()
}
}
}
}
}
createCharts(
c("parallel-es", "hamstersjs", "threadsjs", "paralleljs"),
c("Knights Tour (5x5)", "Knights Tour (6x6)", "Mandelbrot", "Monte Carlo")
)
# createCharts(
#  c("parallel-dynamic", "hamstersjs"),
#  c("Monte Carlo Math.random 100k", "Monte Carlo Math.random 1m"),
#  "Monte Carlo simjs"
#)
#createCharts(
#  c("parallel-es", "paralleljs", "threadsjs"),
#  c("Monte Carlo simjs 100k", "Monte Carlo simjs 1m"),
#  "Monte Carlo Math.random"
#)
debugSource('~/git/parallel-es-example/benchmarks/charts.R', echo=TRUE)
debugSource('~/git/parallel-es-example/benchmarks/charts.R', echo=TRUE)
debugSource('~/git/parallel-es-example/benchmarks/charts.R', echo=TRUE)
debugSource('~/git/parallel-es-example/benchmarks/charts.R', echo=TRUE)
debugSource('~/git/parallel-es-example/benchmarks/charts.R', echo=TRUE)
debugSource('~/git/parallel-es-example/benchmarks/charts.R', echo=TRUE)
debugSource('~/git/parallel-es-example/benchmarks/charts.R', echo=TRUE)
debugSource('~/git/parallel-es-example/benchmarks/charts.R', echo=TRUE)
debugSource('~/git/parallel-es-example/benchmarks/charts.R', echo=TRUE)
debugSource('~/git/parallel-es-example/benchmarks/charts.R', echo=TRUE)
debugSource('~/git/parallel-es-example/benchmarks/charts.R', echo=TRUE)
debugSource('~/git/parallel-es-example/benchmarks/charts.R', echo=TRUE)
debugSource('~/git/parallel-es-example/benchmarks/charts.R', echo=TRUE)
debugSource('~/git/parallel-es-example/benchmarks/charts.R', echo=TRUE)
debugSource('~/git/parallel-es-example/benchmarks/charts.R', echo=TRUE)
debugSource('~/git/parallel-es-example/benchmarks/charts.R', echo=TRUE)
debugSource('~/git/parallel-es-example/benchmarks/charts.R', echo=TRUE)
debugSource('~/git/parallel-es-example/benchmarks/charts.R', echo=TRUE)
debugSource('~/git/parallel-es-example/benchmarks/charts.R', echo=TRUE)
debugSource('~/git/parallel-es-example/benchmarks/charts.R', echo=TRUE)
debugSource('~/git/parallel-es-example/benchmarks/charts.R')
debugSource('~/git/parallel-es-example/benchmarks/charts.R')
debugSource('~/git/parallel-es-example/benchmarks/charts.R')
debugSource('~/git/parallel-es-example/benchmarks/charts.R')
debugSource('~/git/parallel-es-example/benchmarks/charts.R')
debugSource('~/git/parallel-es-example/benchmarks/charts.R')
debugSource('~/git/parallel-es-example/benchmarks/charts.R')
require( tikzDevice )
percent <- function(x, digits = 2, format = "f", ...) {
ifelse(is.na(x), "", paste0(formatC(100 * x, format = format, digits = digits, ...)))
}
dir.create(file.path("charts"), showWarnings=FALSE)
data <- read.csv("./benchmarks.csv")
computeRelativeMean <- function (record) {
syncBaseLine <- data[data$OS == record["OS"] & data$OS.Version == record["OS.Version"] & data$Browser == record["Browser"] & data$Browser.Version==record["Browser.Version"] & data$Set == "sync" & data$Name == record["Name"],]
as.numeric(record["Mean..s."]) / syncBaseLine[1, "Mean..s."]
}
plotChart <- function (plotData, byBrowserVersion, environmentTitle=NULL) {
colours <- gray.colors(nrow(plotData), start=0.5, end=0.8)
barDensity <- c(-10, 50, 30, 20)
shadeAngle <- c(0, 45, -45, 45)
# Reduce margin, mainly for latex output
# par(mar=c(2,2.5,2,2))
bb <- barplot(plotData, beside=TRUE, main=environmentTitle, ylab="Relative to Sync (%)", col=colours, ylim = c(0, max(1, max(plotData, na.rm=TRUE))), density = barDensity, angle=shadeAngle)
legend("topleft", legend = rownames(plotData), bty="n", fill=colours, density = barDensity, angle=shadeAngle)
text(bb, plotData, percent(plotData, digits = 1), pos = 3, cex = 1, col="black")
means <- with(plotData, {
out <- matrix(nrow=nlevels(byBrowserVersion$Set), ncol=nlevels(byBrowserVersion$Name),
dimnames=list(levels(byBrowserVersion$Set), levels(byBrowserVersion$Name)))
out[cbind(byBrowserVersion$Set, byBrowserVersion$Name)] <- byBrowserVersion$Mean..s.
out <- out[rowSums(is.na(out)) != ncol(out),]
out <- out[, colSums(is.na(out)) != nrow(out)]
out
})
text(bb, 0, formatC(means., digits=2), pos=3)
}
data$RelativeMean <- apply(data, 1, computeRelativeMean)
data <- data[!is.na(data$RelativeMean), ]
createCharts <- function (sets, tests) {
relevant <- data[data$Set %in% sets & data$Name %in% tests, ]
for(os in unique(relevant$OS)) {
byOS <- relevant[relevant$OS==os,]
for (osVersion in unique(byOS$OS.Version)) {
byOSVersion <- byOS[byOS$OS.Version == osVersion, ]
for (browser in unique(byOSVersion$Browser)) {
byBrowser <- byOSVersion[byOSVersion$Browser==browser, ]
for (browserVersion in unique(byBrowser$Browser.Version)) {
byBrowserVersion <- byBrowser[byBrowser$Browser.Version==browserVersion, ]
osName <- paste0(os, " ", osVersion);
dir.create(file.path("charts", osName), showWarnings=FALSE)
environmentTitle = paste(os, osVersion, browser, browserVersion)
pictureName <- paste0(browser, "-", browserVersion)
fullName <- paste0("charts/", osName, "/", pictureName)
tmp <- byBrowserVersion[, c("Set", "Name", "RelativeMean")]
plotData <- with(tmp, {
out <- matrix(nrow=nlevels(tmp$Set), ncol=nlevels(tmp$Name),
dimnames=list(levels(tmp$Set), levels(tmp$Name)))
out[cbind(tmp$Set, tmp$Name)] <- tmp$RelativeMean
out <- out[rowSums(is.na(out)) != ncol(out),]
out <- out[, colSums(is.na(out)) != nrow(out)]
out
})
png(paste0(fullName, ".png"), height=16, width=ncol(plotData) * 9, units="cm", res=300)
plotChart(plotData, byBrowserVersion, environmentTitle)
dev.off()
# tikz(paste0(fullName, ".tex"), height=2.5, sanitize = TRUE, engine="pdftex")
# plotChart(plotData, byBrowserVersion)
# dev.off()
}
}
}
}
}
createCharts(
c("parallel-es", "hamstersjs", "threadsjs", "paralleljs"),
c("Knights Tour (5x5)", "Knights Tour (6x6)", "Mandelbrot", "Monte Carlo")
)
# createCharts(
#  c("parallel-dynamic", "hamstersjs"),
#  c("Monte Carlo Math.random 100k", "Monte Carlo Math.random 1m"),
#  "Monte Carlo simjs"
#)
#createCharts(
#  c("parallel-es", "paralleljs", "threadsjs"),
#  c("Monte Carlo simjs 100k", "Monte Carlo simjs 1m"),
#  "Monte Carlo Math.random"
#)
require( tikzDevice )
percent <- function(x, digits = 2, format = "f", ...) {
ifelse(is.na(x), "", paste0(formatC(100 * x, format = format, digits = digits, ...)))
}
dir.create(file.path("charts"), showWarnings=FALSE)
data <- read.csv("./benchmarks.csv")
computeRelativeMean <- function (record) {
syncBaseLine <- data[data$OS == record["OS"] & data$OS.Version == record["OS.Version"] & data$Browser == record["Browser"] & data$Browser.Version==record["Browser.Version"] & data$Set == "sync" & data$Name == record["Name"],]
as.numeric(record["Mean..s."]) / syncBaseLine[1, "Mean..s."]
}
plotChart <- function (plotData, byBrowserVersion, environmentTitle=NULL) {
colours <- gray.colors(nrow(plotData), start=0.5, end=0.8)
barDensity <- c(-10, 50, 30, 20)
shadeAngle <- c(0, 45, -45, 45)
# Reduce margin, mainly for latex output
# par(mar=c(2,2.5,2,2))
bb <- barplot(plotData, beside=TRUE, main=environmentTitle, ylab="Relative to Sync (%)", col=colours, ylim = c(0, max(1, max(plotData, na.rm=TRUE))), density = barDensity, angle=shadeAngle)
legend("topleft", legend = rownames(plotData), bty="n", fill=colours, density = barDensity, angle=shadeAngle)
text(bb, plotData, percent(plotData, digits = 1), pos = 3, cex = 1, col="black")
means <- with(plotData, {
out <- matrix(nrow=nlevels(byBrowserVersion$Set), ncol=nlevels(byBrowserVersion$Name),
dimnames=list(levels(byBrowserVersion$Set), levels(byBrowserVersion$Name)))
out[cbind(byBrowserVersion$Set, byBrowserVersion$Name)] <- byBrowserVersion$Mean..s.
out <- out[rowSums(is.na(out)) != ncol(out),]
out <- out[, colSums(is.na(out)) != nrow(out)]
out
})
text(bb, 0, formatC(means., digits=2), pos=3)
}
data$RelativeMean <- apply(data, 1, computeRelativeMean)
data <- data[!is.na(data$RelativeMean), ]
createCharts <- function (sets, tests) {
relevant <- data[data$Set %in% sets & data$Name %in% tests, ]
for(os in unique(relevant$OS)) {
byOS <- relevant[relevant$OS==os,]
for (osVersion in unique(byOS$OS.Version)) {
byOSVersion <- byOS[byOS$OS.Version == osVersion, ]
for (browser in unique(byOSVersion$Browser)) {
byBrowser <- byOSVersion[byOSVersion$Browser==browser, ]
for (browserVersion in unique(byBrowser$Browser.Version)) {
byBrowserVersion <- byBrowser[byBrowser$Browser.Version==browserVersion, ]
osName <- paste0(os, " ", osVersion);
dir.create(file.path("charts", osName), showWarnings=FALSE)
environmentTitle = paste(os, osVersion, browser, browserVersion)
pictureName <- paste0(browser, "-", browserVersion)
fullName <- paste0("charts/", osName, "/", pictureName)
tmp <- byBrowserVersion[, c("Set", "Name", "RelativeMean")]
plotData <- with(tmp, {
out <- matrix(nrow=nlevels(tmp$Set), ncol=nlevels(tmp$Name),
dimnames=list(levels(tmp$Set), levels(tmp$Name)))
out[cbind(tmp$Set, tmp$Name)] <- tmp$RelativeMean
out <- out[rowSums(is.na(out)) != ncol(out),]
out <- out[, colSums(is.na(out)) != nrow(out)]
out
})
png(paste0(fullName, ".png"), height=16, width=ncol(plotData) * 9, units="cm", res=300)
plotChart(plotData, byBrowserVersion, environmentTitle)
dev.off()
# tikz(paste0(fullName, ".tex"), height=2.5, sanitize = TRUE, engine="pdftex")
# plotChart(plotData, byBrowserVersion)
# dev.off()
}
}
}
}
}
createCharts(
c("parallel-es", "hamstersjs", "threadsjs", "paralleljs"),
c("Knights Tour (5x5)", "Knights Tour (6x6)", "Mandelbrot", "Monte Carlo")
)
# createCharts(
#  c("parallel-dynamic", "hamstersjs"),
#  c("Monte Carlo Math.random 100k", "Monte Carlo Math.random 1m"),
#  "Monte Carlo simjs"
#)
#createCharts(
#  c("parallel-es", "paralleljs", "threadsjs"),
#  c("Monte Carlo simjs 100k", "Monte Carlo simjs 1m"),
#  "Monte Carlo Math.random"
#)
debugSource('~/git/parallel-es-example/benchmarks/charts.R')
debugSource('~/git/parallel-es-example/benchmarks/charts.R')
debugSource('~/git/parallel-es-example/benchmarks/charts.R')
debugSource('~/git/parallel-es-example/benchmarks/charts.R')
debugSource('~/git/parallel-es-example/benchmarks/charts.R')
debugSource('~/git/parallel-es-example/benchmarks/charts.R')
debugSource('~/git/parallel-es-example/benchmarks/charts.R')
debugSource('~/git/parallel-es-example/benchmarks/charts.R')
debugSource('~/git/parallel-es-example/benchmarks/charts.R')
debugSource('~/git/parallel-es-example/benchmarks/charts.R')
debugSource('~/git/parallel-es-example/benchmarks/charts.R')
debugSource('~/git/parallel-es-example/benchmarks/charts.R')
