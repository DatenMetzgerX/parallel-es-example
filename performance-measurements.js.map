{"version":3,"sources":["webpack:///performance-measurements.js","webpack:///(webpack)/buildin/global.js","webpack:///./~/lodash/lodash.js","webpack:///./~/eventemitter3/index.js","webpack:///./~/process/browser.js","webpack:///./~/Hamsters.js/src/es6/hamsters.js","webpack:///./~/paralleljs/lib/parallel.js","webpack:///./~/threads/lib/config.js","webpack:///./~/timers-browserify/main.js","webpack:///./~/threads/lib/index.js","webpack:///./src/util.ts","webpack:///./lib/simjs-random.js","webpack:///./~/threads/lib/defaults.js","webpack:///(webpack)/buildin/module.js","webpack:///./src/hamstersjs/knights-tour.ts","webpack:///./src/hamstersjs/mandelbrot.ts","webpack:///./src/hamstersjs/monte-carlo.ts","webpack:///./src/paralleljs/knights-tour.ts","webpack:///./src/paralleljs/mandelbrot.ts","webpack:///./src/paralleljs/monte-carlo.ts","webpack:///./src/threads/knights-tour.ts","webpack:///./src/threads/mandelbrot.ts","webpack:///./src/threads/monte-carlo.ts","webpack:///./~/benchmark/benchmark.js","webpack:///./~/platform/platform.js","webpack:///./~/paralleljs/lib/eval.js","webpack:///./~/native-promise-only/lib/npo.src.js","webpack:///./~/threads/lib/defaults.browser.js","webpack:///./~/threads/lib/defaults.node.js","webpack:///./~/threads/lib/job.js","webpack:///./~/threads/lib/pool.js","webpack:///./~/threads/lib/worker.browser/slave-code-uri.js","webpack:///./~/threads/lib/worker.browser/slave-code.js","webpack:///./~/threads/lib/worker.browser/worker.js","webpack:///./~/threads/lib/worker.js","webpack:///./~/threads/lib/worker.node/worker.js","webpack:///./src/performance-measurement.ts"],"names":["webpackJsonp","module","exports","g","this","Function","eval","e","window","__webpack_require__","global","__WEBPACK_AMD_DEFINE_RESULT__","addMapEntry","map","pair","set","addSetEntry","value","add","apply","func","thisArg","args","length","call","arrayAggregator","array","setter","iteratee","accumulator","index","arrayEach","arrayEachRight","arrayEvery","predicate","arrayFilter","resIndex","result","arrayIncludes","baseIndexOf","arrayIncludesWith","comparator","arrayMap","Array","arrayPush","values","offset","arrayReduce","initAccum","arrayReduceRight","arraySome","asciiToArray","string","split","asciiWords","match","reAsciiWord","baseFindKey","collection","eachFunc","key","baseFindIndex","fromIndex","fromRight","strictIndexOf","baseIsNaN","baseIndexOfWith","baseMean","baseSum","NAN","baseProperty","object","undefined","basePropertyOf","baseReduce","baseSortBy","comparer","sort","current","baseTimes","n","baseToPairs","props","baseUnary","baseValues","cacheHas","cache","has","charsStartIndex","strSymbols","chrSymbols","charsEndIndex","countHolders","placeholder","escapeStringChar","chr","stringEscapes","getValue","hasUnicode","reHasUnicode","test","hasUnicodeWord","reHasUnicodeWord","iteratorToArray","iterator","data","next","done","push","mapToArray","size","forEach","overArg","transform","arg","replaceHolders","PLACEHOLDER","setToArray","setToPairs","strictLastIndexOf","stringSize","unicodeSize","asciiSize","stringToArray","unicodeToArray","reUnicode","lastIndex","unicodeWords","reUnicodeWord","VERSION","LARGE_ARRAY_SIZE","CORE_ERROR_TEXT","FUNC_ERROR_TEXT","HASH_UNDEFINED","MAX_MEMOIZE_SIZE","BIND_FLAG","BIND_KEY_FLAG","CURRY_BOUND_FLAG","CURRY_FLAG","CURRY_RIGHT_FLAG","PARTIAL_FLAG","PARTIAL_RIGHT_FLAG","ARY_FLAG","REARG_FLAG","FLIP_FLAG","UNORDERED_COMPARE_FLAG","PARTIAL_COMPARE_FLAG","DEFAULT_TRUNC_LENGTH","DEFAULT_TRUNC_OMISSION","HOT_COUNT","HOT_SPAN","LAZY_FILTER_FLAG","LAZY_MAP_FLAG","LAZY_WHILE_FLAG","INFINITY","MAX_SAFE_INTEGER","MAX_INTEGER","MAX_ARRAY_LENGTH","MAX_ARRAY_INDEX","HALF_MAX_ARRAY_LENGTH","wrapFlags","argsTag","arrayTag","asyncTag","boolTag","dateTag","domExcTag","errorTag","funcTag","genTag","mapTag","numberTag","nullTag","objectTag","promiseTag","proxyTag","regexpTag","setTag","stringTag","symbolTag","undefinedTag","weakMapTag","weakSetTag","arrayBufferTag","dataViewTag","float32Tag","float64Tag","int8Tag","int16Tag","int32Tag","uint8Tag","uint8ClampedTag","uint16Tag","uint32Tag","reEmptyStringLeading","reEmptyStringMiddle","reEmptyStringTrailing","reEscapedHtml","reUnescapedHtml","reHasEscapedHtml","RegExp","source","reHasUnescapedHtml","reEscape","reEvaluate","reInterpolate","reIsDeepProp","reIsPlainProp","reLeadingDot","rePropName","reRegExpChar","reHasRegExpChar","reTrim","reTrimStart","reTrimEnd","reWrapComment","reWrapDetails","reSplitDetails","reEscapeChar","reEsTemplate","reFlags","reIsBadHex","reIsBinary","reIsHostCtor","reIsOctal","reIsUint","reLatin","reNoMatch","reUnescapedString","rsAstralRange","rsComboMarksRange","rsComboSymbolsRange","rsDingbatRange","rsLowerRange","rsMathOpRange","rsNonCharRange","rsPunctuationRange","rsSpaceRange","rsUpperRange","rsVarRange","rsBreakRange","rsApos","rsAstral","rsBreak","rsCombo","rsDigits","rsDingbat","rsLower","rsMisc","rsFitz","rsModifier","rsNonAstral","rsRegional","rsSurrPair","rsUpper","rsZWJ","rsMiscLower","rsMiscUpper","rsOptContrLower","rsOptContrUpper","reOptMod","rsOptVar","rsOptJoin","join","rsOrdLower","rsOrdUpper","rsSeq","rsEmoji","rsSymbol","reApos","reComboMark","contextProps","templateCounter","typedArrayTags","cloneableTags","deburredLetters","À","Á","Â","Ã","Ä","Å","à","á","â","ã","ä","å","Ç","ç","Ð","ð","È","É","Ê","Ë","è","é","ê","ë","Ì","Í","Î","Ï","ì","í","î","ï","Ñ","ñ","Ò","Ó","Ô","Õ","Ö","Ø","ò","ó","ô","õ","ö","ø","Ù","Ú","Û","Ü","ù","ú","û","ü","Ý","ý","ÿ","Æ","æ","Þ","þ","ß","Ā","Ă","Ą","ā","ă","ą","Ć","Ĉ","Ċ","Č","ć","ĉ","ċ","č","Ď","Đ","ď","đ","Ē","Ĕ","Ė","Ę","Ě","ē","ĕ","ė","ę","ě","Ĝ","Ğ","Ġ","Ģ","ĝ","ğ","ġ","ģ","Ĥ","Ħ","ĥ","ħ","Ĩ","Ī","Ĭ","Į","İ","ĩ","ī","ĭ","į","ı","Ĵ","ĵ","Ķ","ķ","ĸ","Ĺ","Ļ","Ľ","Ŀ","Ł","ĺ","ļ","ľ","ŀ","ł","Ń","Ņ","Ň","Ŋ","ń","ņ","ň","ŋ","Ō","Ŏ","Ő","ō","ŏ","ő","Ŕ","Ŗ","Ř","ŕ","ŗ","ř","Ś","Ŝ","Ş","Š","ś","ŝ","ş","š","Ţ","Ť","Ŧ","ţ","ť","ŧ","Ũ","Ū","Ŭ","Ů","Ű","Ų","ũ","ū","ŭ","ů","ű","ų","Ŵ","ŵ","Ŷ","ŷ","Ÿ","Ź","Ż","Ž","ź","ż","ž","Ĳ","ĳ","Œ","œ","ŉ","ſ","htmlEscapes","&","<",">","\"","'","htmlUnescapes","&amp;","&lt;","&gt;","&quot;","&#39;","\\","\n","\r"," "," ","freeParseFloat","parseFloat","freeParseInt","parseInt","freeGlobal","Object","freeSelf","self","root","freeExports","nodeType","freeModule","moduleExports","freeProcess","process","nodeUtil","binding","nodeIsArrayBuffer","isArrayBuffer","nodeIsDate","isDate","nodeIsMap","isMap","nodeIsRegExp","isRegExp","nodeIsSet","isSet","nodeIsTypedArray","isTypedArray","deburrLetter","escapeHtmlChar","unescapeHtmlChar","runInContext","context","lodash","isObjectLike","isArray","LazyWrapper","LodashWrapper","hasOwnProperty","wrapperClone","baseLodash","chainAll","__wrapped__","__actions__","__chain__","__index__","__values__","__dir__","__filtered__","__iteratees__","__takeCount__","__views__","lazyClone","copyArray","lazyReverse","clone","lazyValue","dir","isArr","isRight","arrLength","view","getView","start","end","iteratees","iterLength","takeCount","nativeMin","baseWrapperValue","outer","iterIndex","type","computed","Hash","entries","clear","entry","hashClear","__data__","nativeCreate","hashDelete","hashGet","hashHas","hashSet","ListCache","listCacheClear","listCacheDelete","assocIndexOf","pop","splice","listCacheGet","listCacheHas","listCacheSet","MapCache","mapCacheClear","hash","Map","mapCacheDelete","getMapData","mapCacheGet","get","mapCacheHas","mapCacheSet","SetCache","setCacheAdd","setCacheHas","Stack","stackClear","stackDelete","stackGet","stackHas","stackSet","pairs","arrayLikeKeys","inherited","isArg","isArguments","isBuff","isBuffer","isType","skipIndexes","String","isIndex","arraySample","baseRandom","arraySampleSize","shuffleSelf","baseClamp","arrayShuffle","assignInDefaults","objValue","srcValue","eq","objectProto","assignMergeValue","baseAssignValue","assignValue","baseAggregator","baseEach","baseAssign","copyObject","keys","defineProperty","configurable","enumerable","writable","baseAt","paths","skip","number","lower","upper","baseClone","isDeep","isFull","customizer","stack","isObject","initCloneArray","tag","getTag","isFunc","cloneBuffer","initCloneObject","copySymbols","initCloneByTag","stacked","getAllKeys","subValue","baseConforms","baseConformsTo","baseDelay","wait","TypeError","setTimeout","baseDifference","includes","isCommon","valuesLength","valuesIndex","baseEvery","baseExtremum","isSymbol","baseFill","toInteger","toLength","baseFilter","baseFlatten","depth","isStrict","isFlattenable","baseForOwn","baseFor","baseForOwnRight","baseForRight","baseFunctions","isFunction","baseGet","path","isKey","castPath","toKey","baseGetAllKeys","keysFunc","symbolsFunc","baseGetTag","symToStringTag","getRawTag","objectToString","baseGt","other","baseHas","baseHasIn","baseInRange","nativeMax","baseIntersection","arrays","othLength","othIndex","caches","maxLength","Infinity","seen","baseInverter","baseInvoke","parent","last","baseIsArguments","baseIsArrayBuffer","baseIsDate","baseIsEqual","bitmask","baseIsEqualDeep","equalFunc","objIsArr","othIsArr","objTag","othTag","objIsObj","othIsObj","isSameTag","equalArrays","equalByTag","objIsWrapped","othIsWrapped","objUnwrapped","othUnwrapped","equalObjects","baseIsMap","baseIsMatch","matchData","noCustomizer","baseIsNative","isMasked","pattern","reIsNative","toSource","baseIsRegExp","baseIsSet","baseIsTypedArray","isLength","baseIteratee","identity","baseMatchesProperty","baseMatches","property","baseKeys","isPrototype","nativeKeys","baseKeysIn","nativeKeysIn","isProto","baseLt","baseMap","isArrayLike","getMatchData","matchesStrictComparable","isStrictComparable","hasIn","baseMerge","srcIndex","baseMergeDeep","newValue","keysIn","mergeFunc","isTyped","isArrayLikeObject","cloneTypedArray","isPlainObject","toPlainObject","baseNth","baseOrderBy","orders","getIteratee","criteria","compareMultiple","basePick","basePickBy","basePropertyDeep","basePullAll","indexOf","basePullAt","indexes","previous","nativeFloor","nativeRandom","baseRange","step","nativeCeil","baseRepeat","baseRest","setToString","overRest","baseSample","baseSampleSize","baseSet","nested","baseShuffle","baseSlice","baseSome","baseSortedIndex","retHighest","low","high","mid","baseSortedIndexBy","valIsNaN","valIsNull","valIsSymbol","valIsUndefined","othIsDefined","othIsNull","othIsReflexive","othIsSymbol","setLow","baseSortedUniq","baseToNumber","baseToString","symbolToString","baseUniq","createSet","seenIndex","baseUnset","baseUpdate","updater","baseWhile","isDrop","actions","action","baseXor","baseZipObject","assignFunc","valsLength","castArrayLikeObject","castFunction","stringToPath","castSlice","buffer","slice","allocUnsafe","constructor","copy","cloneArrayBuffer","arrayBuffer","byteLength","Uint8Array","cloneDataView","dataView","byteOffset","cloneMap","cloneFunc","cloneRegExp","regexp","exec","cloneSet","cloneSymbol","symbol","symbolValueOf","typedArray","compareAscending","valIsDefined","valIsReflexive","objCriteria","othCriteria","ordersLength","order","composeArgs","partials","holders","isCurried","argsIndex","argsLength","holdersLength","leftIndex","leftLength","rangeLength","isUncurried","composeArgsRight","holdersIndex","rightIndex","rightLength","isNew","getSymbols","createAggregator","initializer","createAssigner","assigner","sources","guard","isIterateeCall","createBaseEach","iterable","createBaseFor","createBind","wrapper","fn","Ctor","isBind","arguments","createCtor","createCaseFirst","methodName","toString","charAt","trailing","createCompounder","callback","words","deburr","replace","thisBinding","baseCreate","prototype","createCurry","arity","getHolder","createRecurry","createHybrid","createFind","findIndexFunc","createFlow","flatRest","funcs","prereq","thru","reverse","getFuncName","funcName","getData","isLaziable","plant","partialsRight","holdersRight","argPos","ary","holdersCount","newHolders","isBindKey","reorder","isFlip","isAry","createInverter","toIteratee","createMathOperation","operator","defaultValue","createOver","arrayFunc","createPadding","chars","charsLength","createPartial","createRange","toFinite","createRelationalOperation","toNumber","wrapFunc","isCurry","newHoldersRight","newPartials","newPartialsRight","newData","setData","setWrapToString","createRound","Math","precision","createToPairs","createWrap","mergeData","baseSetData","isPartial","arrValue","othValue","compared","name","message","convert","objProps","objLength","othProps","skipCtor","objCtor","othCtor","flatten","getAllKeysIn","getSymbolsIn","realNames","otherFunc","isKeyable","getNative","isOwn","unmasked","nativeObjectToString","transforms","getWrapDetails","hasPath","hasFunc","input","getPrototype","insertWrapDetails","details","spreadableSymbol","maskSrcKey","proto","memoizeCapped","memoize","srcBitmask","newBitmask","isCombo","mergeDefaults","otherArgs","oldArray","reference","updateWrapDetails","shortOut","count","lastCalled","stamp","nativeNow","remaining","rand","funcToString","chunk","compact","concat","drop","dropRight","dropRightWhile","dropWhile","fill","findIndex","findLastIndex","flattenDeep","flattenDepth","fromPairs","head","initial","separator","nativeJoin","lastIndexOf","nth","pullAll","pullAllBy","pullAllWith","remove","nativeReverse","sortedIndex","sortedIndexBy","sortedIndexOf","sortedLastIndex","sortedLastIndexBy","sortedLastIndexOf","sortedUniq","sortedUniqBy","tail","take","takeRight","takeRightWhile","takeWhile","uniq","uniqBy","uniqWith","unzip","group","unzipWith","zipObject","zipObjectDeep","chain","tap","interceptor","wrapperChain","wrapperCommit","wrapperNext","toArray","wrapperToIterator","wrapperPlant","wrapperReverse","wrapped","wrapperValue","every","filter","flatMap","flatMapDeep","flatMapDepth","forEachRight","baseEachRight","isString","orderBy","reduce","reduceRight","reject","negate","sample","sampleSize","shuffle","some","after","before","curry","curryRight","debounce","options","invokeFunc","time","lastArgs","lastThis","lastInvokeTime","leadingEdge","timerId","timerExpired","leading","remainingWait","timeSinceLastCall","lastCallTime","timeSinceLastInvoke","maxing","maxWait","shouldInvoke","now","trailingEdge","cancel","clearTimeout","flush","debounced","isInvoking","flip","resolver","memoized","Cache","once","rest","spread","throttle","unary","wrap","partial","castArray","cloneWith","cloneDeep","cloneDeepWith","conformsTo","isBoolean","isElement","isEmpty","isEqual","isEqualWith","isError","isFinite","nativeIsFinite","isInteger","isMatch","isMatchWith","isNaN","isNumber","isNative","isMaskable","Error","isNull","isNil","objectCtorString","isSafeInteger","isUndefined","isWeakMap","isWeakSet","symIterator","sign","remainder","valueOf","isBinary","toSafeInteger","create","properties","findKey","findLastKey","forIn","forInRight","forOwn","forOwnRight","functions","functionsIn","mapKeys","mapValues","omitBy","pickBy","setWith","isArrLike","unset","update","updateWith","valuesIn","clamp","inRange","random","floating","temp","capitalize","upperFirst","toLowerCase","endsWith","target","position","escape","escapeRegExp","pad","strLength","padEnd","padStart","radix","nativeParseInt","repeat","limit","startsWith","template","settings","templateSettings","assignInWith","isEscaping","isEvaluating","imports","importsKeys","importsValues","interpolate","reDelimiters","evaluate","sourceURL","escapeValue","interpolateValue","esTemplateValue","evaluateValue","variable","attempt","toLower","toUpper","toUpperCase","trim","trimEnd","trimStart","truncate","omission","search","substring","newEnd","unescape","cond","conforms","constant","defaultTo","matches","matchesProperty","mixin","methodNames","noConflict","_","oldDash","noop","nthArg","propertyOf","stubArray","stubFalse","stubObject","stubString","stubTrue","times","toPath","uniqueId","prefix","id","idCounter","max","maxBy","mean","meanBy","min","minBy","sum","sumBy","defaults","pick","Date","arrayProto","funcProto","coreJsData","uid","IE_PROTO","Buffer","Symbol","getPrototypeOf","objectCreate","propertyIsEnumerable","isConcatSpreadable","toStringTag","ctxClearTimeout","ctxNow","ctxSetTimeout","ceil","floor","nativeGetSymbols","getOwnPropertySymbols","nativeIsBuffer","DataView","Promise","Set","WeakMap","metaMap","dataViewCtorString","mapCtorString","promiseCtorString","setCtorString","weakMapCtorString","symbolProto","baseSetToString","castRest","ArrayBuffer","resolve","ctorString","quote","difference","differenceBy","differenceWith","intersection","mapped","intersectionBy","intersectionWith","pull","pullAt","union","unionBy","unionWith","without","xor","xorBy","xorWith","zip","zipWith","wrapperAt","countBy","find","findLast","groupBy","invokeMap","isProp","keyBy","partition","sortBy","bind","bindKey","defer","delay","overArgs","funcsLength","partialRight","rearg","gt","gte","lt","lte","assign","assignIn","assignWith","at","defaultsDeep","mergeWith","invert","invertBy","invoke","merge","omit","toPairs","toPairsIn","camelCase","word","kebabCase","lowerCase","lowerFirst","snakeCase","startCase","upperCase","bindAll","flow","flowRight","method","methodOf","over","overEvery","overSome","range","rangeRight","augend","addend","divide","dividend","divisor","multiply","multiplier","multiplicand","round","subtract","minuend","subtrahend","entriesIn","extend","extendWith","each","eachRight","first","filtered","isFilter","takeName","dropName","checkIteratee","isTaker","lodashFunc","retUnwrapped","isLazy","useLazy","isHybrid","isUnwrapped","onlyLazy","chainName","names","commit","toJSON","Events","EE","EventEmitter","_events","_eventsCount","__proto__","eventNames","events","listeners","event","exists","evt","available","i","l","ee","emit","a1","a2","a3","a4","a5","len","removeListener","j","on","listener","removeAllListeners","off","addListener","setMaxListeners","prefixed","defaultSetTimout","defaultClearTimeout","runTimeout","fun","cachedSetTimeout","runClearTimeout","marker","cachedClearTimeout","cleanUpNextTick","draining","currentQueue","queue","queueIndex","drainQueue","timeout","run","Item","nextTick","title","browser","env","argv","version","versions","cwd","chdir","umask","_typeof","obj","hamsters","debug","persistence","maxThreads","navigator","hardwareConcurrency","tools","wheel","legacy","node","shell","worker","ie10","transferrable","running","pending","tasks","errors","uri","isIE","userAgent","setupEnv","importScripts","reactNative","hamster","Worker","terminate","URL","createObjectURL","createBlob","giveHamsterWork","SharedWorker","checkErrors","msg","total","splitArray","subarray","loop","console","error","threads","params","init","startIndex","incrementBy","dataType","rtn","output","parseJson","JSON","parse","stringifyJson","json","stringify","randomArray","compareArrays","array1","array2","el","checkCache","item","sessionStorage","equals","processDataType","inputArray","setItem","eve","spawnHamsters","types","uint32","Uint32Array","uint16","Uint16Array","uint8","uint8clamped","Uint8ClampedArray","int32","Int32Array","int16","Int16Array","int8","Int8Array","float32","Float32Array","float64","Float64Array","addEventListener","port","ports","success","postMessage","results","onmessage","arr","a","b","workers","aggregate","task","newTask","_ret","taskid","v","work","workArray","food","newWheel","cb","trackInput","threadid","hamsterfood","workerid","getTime","trackThread","poolThread","agg","legacyProcessor","textContent","Blob","BlobBuilder","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","blob","append","getBlob","bufferLength","getOutput","processQueue","clean","trainHamster","info","timeStamp","prepareToMemoize","shift","normalizeArray","onerror","lineno","filename","processData","feedHamster","ie","buffers","from","to","Operation","_callbacks","_errCallbacks","_resolved","_result","Parallel","operation","requiredScripts","requiredFunctions","isCommonJS","isNode","setImmediate","require","__dirname","webkitURL","_supports","err","res","iE","then","errCb","evalPath","maxWorkers","cpus","synchronous","envNamespace","isSupported","getWorkerSource","preStr","ns","_spawnWorker","wrk","src","url","spawn","that","newOp","_spawnMapWorker","doneOps","startedOps","_spawnReduceWorker","runningWorkers","retData","configDeepMerge","destObj","srcObj","ancestorProps","propKey","ancestorPropsAndThis","getConfig","config","setConfig","__esModule","configuration","basepath","web","fallback","slaveScriptUrl","newConfig","default","clearImmediate","Timeout","clearFn","_id","_clearFn","immediateIds","nextImmediateId","setInterval","clearInterval","close","unref","ref","enroll","msecs","_idleTimeoutId","_idleTimeout","unenroll","_unrefActive","active","_onTimeout","_interopRequireDefault","runnable","_worker2","Pool","_config","_config2","_defaults","_defaults2","_pool","_pool2","_worker","toFullQualifiedURL","document","createElement","href","p","webpackPolyfill","deprecate","children","knightTours","moves","x","y","boardSize","numberOfFields","board","startPath","pos","coordinate","fieldIndex","_stack","_fieldIndex","_i","move","successor","accessible","computeTours","successors","computeStartFields","_iterator","_isArray","_i2","_ref","directSuccessor","_iterator2","_isArray2","_i3","_ref2","indirectSuccessor","promise","rej","startFields","__WEBPACK_IMPORTED_MODULE_0_Hamsters_js__","aggregateTours","memo","parallelKnightTours","computeMandelbrotLine","calculateZ","c","z","real","iterations","pow","zI","line","imageWidth","cI","scalingFactor","base","mandelbrot","__WEBPACK_IMPORTED_MODULE_1_lodash__","imageHeight","initializeOptions","investmentAmount","liquidity","numRuns","numYears","performance","projects","seed","volatility","runSimulation","createMonteCarloEnvironment","simulateOutcomes","cashFlows","toAbsoluteIndices","indices","currentPortfolioValue","previousYearIndex","relativeYear","currentYearIndex","cashFlowStartOfYear","year","randomPerformance","_year","projectsToCashFlows","projectsByThisYear","projectsByStartYear","cashFlow","project","totalAmount","calculateNoInterestReferenceLine","noInterestReferenceLine","investmentAmountLeft","startYear","projectsToSimulate","simulatedValues","calculateProject","environment","groupForValue","groups","createGroups","requiredAmount","noInterestReference","description","percentage","calculateRequiredAmount","amount","projectsSameYear","otherProject","median","half","NUMBER_OF_BUCKETS","simulatedValuesThisYear","valuesByGroup","bucketSize","buckets","bucket","Number","MIN_SAFE_INTEGER","subBuckets","_iterator3","_isArray3","_ref3","_group","subBucket","MIN_VALUE","MAX_VALUE","_iterator4","_isArray4","_i4","_ref4","groupName","_subBucket","nonEmptyGroups","oneSixth","twoThird","parallelMonteCarlo","userOptions","parallelJSKnightTours","startField","toursPerRun","parallelJSMandelbrot","mandelbrotOptions","lines","__WEBPACK_IMPORTED_MODULE_0_lodash__","normal","Random","parallelJSMonteCarlo","__WEBPACK_IMPORTED_MODULE_0__util__","simulation","threadsKnightTours","pool","_resolve","_reject","totalTours","job","tours","send","transfer","threadsMandelbrot","promises","all","_project","_ref5","threadsMonteCarlo","jobs","_iterator5","_isArray5","_i5","_ref6","Benchmark","bench","setOptions","counter","stats","Deferred","deferred","benchmark","clock","Event","Suite","suite","createFunction","body","anchor","freeDefine","amd","prop","runScript","support","_timerId","destroyElement","element","trash","appendChild","innerHTML","getFirstArgument","getMean","getSource","isStringable","decompilation","isHostType","rePrimitive","freeRequire","code","define","script","doc","sibling","getElementsByTagName","parentNode","createTextNode","cloneNode","text","insertBefore","_original","aborted","teardown","cycle","cycles","compiled","timer","stop","hz","moe","compare","formatNumber","benches","execute","async","isAsync","getNext","complete","cycleEvent","eventProps","onCycle","raiseIndex","onComplete","queued","currentTarget","onStart","separator1","separator2","arrayLike","abortSuite","resetting","calledBy","resetSuite","cancelled","reset","cloneSuite","filterSuite","aborting","abort","runSuite","getScore","xA","sampleB","xB","getU","sampleA","getZ","u","size1","size2","sqrt","critical","zStat","sample1","sample2","maxSize","minSize","u1","u2","abs","uTable","changes","destination","changed","currValue","toStringBench","pm","errorStr","toFixed","rme","createCompiled","decompilable","fnArg","templateData","uidCounter","setup","unit","begin","getRes","measured","microseconds","timers","stringable","minTime","funcBody","elapsed","chrome","chromium","Interval","processObject","hrtime","microtimeObject","compute","enqueue","initCount","df","sd","sem","variance","period","maxedOut","minSamples","maxTime","varOf","tTable","infinity","deviation","clocked","divisors","arrayRef","log","unshift","req","onAbort","onError","onReset","platform","layout","product","manufacturer","os","prerelease","objectTypes","function","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","cleanupOS","label","10.0","6.4","6.3","6.2","6.1","6.0","5.2","5.1","5.01","5.0","4.0","4.90","format","maxSafeInteger","getClassOf","qualify","ua","getLayout","guesses","guess","getManufacturer","getName","getOS","getProduct","getVersion","patterns","toStringPlatform","isCustomContext","nav","isSpecialCasedOS","isModuleScope","oldRoot","likeChrome","objectClass","airRuntimeClass","enviroClass","javaClass","java","phantomClass","rhino","alpha","beta","opera","operamini","operaClass","reOpera","arch","useFeatures","Apple","iPad","iPhone","iPod","Archos","Amazon","Kindle","Kindle Fire","Asus","Transformer","Barnes & Noble","Nook","BlackBerry","PlayBook","Google","Google TV","Nexus","HP","TouchPad","HTC","LG","Microsoft","Xbox","Xbox One","Motorola","Xoom","Nintendo","Wii U","Wii","Nokia","Lumia","Samsung","Galaxy S","Galaxy S2","Galaxy S3","Galaxy S4","Sony","PlayStation 4","PlayStation 3","PlayStation Vita","lang","System","getProperty","system","runtime","flash","Capabilities","phantom","major","minor","patch","documentMode","appMinorVersion","external","architecture","family","cpuClass","definition","schedule","scheduling_queue","drain","isThenable","o","_then","o_type","notify","notifyIsolated","state","failure","ret","triggered","def","def_wrapper","MakeDefWrapper","iteratePromises","Constructor","rejecter","idx","MakeDef","executor","__NPO__","builtInProp","ToString","val","f","PromisePrototype","msgs","_os","_classCallCheck","instance","_possibleConstructorReturn","ReferenceError","_inherits","subClass","superClass","setPrototypeOf","_eventemitter","_eventemitter2","Job","_EventEmitter","_this","thread","runArgs","sendArgs","_len","_key","_len2","_key2","executeOn","_thread$once$once$run","_thread$once$once","_this2","_job","_job2","idleThreads","jobQueue","handleNewJob","dequeue","killAll","kill","queueJob","handleJobSuccess","_len3","_key3","handleJobError","_this3","lastCreatedJob","_len4","responseArgs","_key4","handleJobDone","_this4","threadCount","threadIndex","_slaveCode","_slaveCode2","slaveCodeDataUri","encodeURI","createBlobURL","blobBuilder","joinPaths","path1","path2","prependScriptUrl","scriptUrl","convertToArray","outputArray","logError","fileName","substr","_slaveCodeUri","_slaveCodeUri2","initialScript","currentRunnable","currentImportScripts","initWorker","handleMessage","handleError","toRun","alreadyInitializedToRun","runMethod","runScripts","methodStr","initByMethod","scripts","initByScripts","param","transferables","doRun","resolved","rejected","runnablesMatch","importScriptsMatch","progress","handleProgress","response","preventDefault","_child_process","_child_process2","_path","_path2","initialRunnable","slave","fork","prefixedScriptPath","initByScript","addAsyncTest","optionsOrTitle","asyncFn","addThreadJsTest","_fn","argsWithPool","__WEBPACK_IMPORTED_MODULE_14_threads__","addKnightBoardTests","boardSizes","knightRunner6x6","checked","_loop","__WEBPACK_IMPORTED_MODULE_3__transpiled_knights_tour__","__WEBPACK_IMPORTED_MODULE_5__dynamic_knights_tour__","__WEBPACK_IMPORTED_MODULE_10__paralleljs_knights_tour__","__WEBPACK_IMPORTED_MODULE_13__threads_knights_tour__","__WEBPACK_IMPORTED_MODULE_16__hamstersjs_knights_tour__","addMonteCarloTest","runOptions","createProjects","numberOfProjects","configName","toLocaleString","__WEBPACK_IMPORTED_MODULE_7__dynamic_monte_carlo__","__WEBPACK_IMPORTED_MODULE_4__transpiled_monte_carlo__","__WEBPACK_IMPORTED_MODULE_9__paralleljs_monte_carlo__","__WEBPACK_IMPORTED_MODULE_11__threads_monte_carlo__","__WEBPACK_IMPORTED_MODULE_17__hamstersjs_monte_carlo__","addMonteCarloTests","oneMillionRuns","querySelector","monteCarloOptions","runs","_arr","addMandelbrotTests","mandelbrotHeight","mandelbrotWidth","mandelbrotIterations","onlyDefaultScheduling","__WEBPACK_IMPORTED_MODULE_6__dynamic_mandelbrot__","taskSizes","_loop2","valuesPerTask","parallelOptions","maxValuesPerTask","minValuesPerTask","__WEBPACK_IMPORTED_MODULE_2__transpiled_mandelbrot__","_ret2","__WEBPACK_IMPORTED_MODULE_8__paralleljs_mandelbrot__","__WEBPACK_IMPORTED_MODULE_12__threads_mandelbrot__","__WEBPACK_IMPORTED_MODULE_15__hamstersjs_mandelbrot__","measure","runMonteCarlo","runMandelbrot","runKnightTour","allTestsSuite","setCheckboxes","checkbox","parts","appendTestResults","benchmarks","jsonOutputField","runButton","disabled","initResultTable","clearOutputTable","outputTable","tBodies","removeChild","createTBody","row","insertRow","_suite$name$split","nameParts","insertCell","columns","tHead","rows","cells","__WEBPACK_IMPORTED_MODULE_1_benchmark__","querySelectorAll"],"mappings":"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40C,MAAA,QAAA50C,QAAA,OACP,UACO40C,MAAA,gBAAA50C,QAAA,mBACA40C,MAAA,UAAA50C,QAAA,0BACA40C,MAAA,kBAAA50C,QAAA,UACA40C,MAAA,KAAA50C,QAAA,aACA40C,MAAA,KAAA50C,QAAA,QACP,WAIAuyC,QAAA6D,aACOxB,MAAA,aAAA50C,QAAA,QACP,cACO40C,MAAA,WAAA50C,QAAA,aACA40C,MAAA,YAAA50C,QAAA,aACA40C,MAAA,YAAA50C,QAAA,aACA40C,MAAA,YAAA50C,QAAA,YACP,YACA,QACA,OACA,OACA,SACA,UACO40C,MAAA,cAAA50C,QAAA,+BACP,QACA,OACA,WACA,gBACA,gBACA,mBACA,WACA,eACO40C,MAAA,QAAA50C,QAAA,QACP,MACA,YACO40C,MAAA,WAAA50C,QAAA,QACP,SAIAwyC,aAAAyD,iBACA4B,OAAgBC,KAAA,EAAAC,OAAA,EAAAC,KAAA,GAChBC,UACAC,QAAiBC,OAAA,EAAAC,cAAA,GACjBC,MAAeC,YAAA,GACfC,kBAAyBC,KAAA,GACzBC,YAAqBC,SAAA,GACrBC,QAAiBC,YAAA,EAAAC,MAAA,GACjBC,IAAaC,SAAA,GACbC,OACAC,MACAC,WAAoBC,KAAA,EAAAC,WAAA,GACpBC,UAAmBC,KAAA,GACnBC,UAAmBC,QAAA,EAAAC,IAAA,GACnBC,OAAgBC,MAAA,GAChBC,SAAkBC,WAAA,EAAAC,YAAA,EAAAC,YAAA,EAAAC,YAAA,GAClBC,MAAeC,gBAAA,EAAAC,gBAAA,EAAAC,mBAAA,KAIf3H,GAAA0D,OACA,gBACA,UACA,UACOvB,MAAA,YAAA50C,QAAA,QACP,SACA,SACA,UACA,SACA,QACA,UACA,aACA,UACA,UACA,OACA,SACA,UACA,SACA,aACA,QACA,SACA,QACA,YACA,QACA,WACA,YACA,MACA,cACA,YAoPA,IAnHAsyC,0BAGAE,eAAAD,UACAA,QAAA6D,YAAA5D,iBAGAl6D,KAAA,gBAAAivB,KAAAgrC,YACAA,QAAAj6D,KAAA,IAGA,iBAAAL,KAAA49D,MACAtD,yBAAA,qBAGA,cAAAt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","file":"performance-measurements.js","sourcesContent":["webpackJsonp([0],[\n/* 0 */\n/***/ function(module, exports) {\n\nvar g;\r\n\r\n// This works in non-strict mode\r\ng = (function() { return this; })();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n/***/ },\n/* 1 */,\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(global, module) {var __WEBPACK_AMD_DEFINE_RESULT__;/**\n * @license\n * lodash <https://lodash.com/>\n * Copyright JS Foundation and other contributors <https://js.foundation/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n;(function() {\n\n  /** Used as a safe reference for `undefined` in pre-ES5 environments. */\n  var undefined;\n\n  /** Used as the semantic version number. */\n  var VERSION = '4.16.6';\n\n  /** Used as the size to enable large array optimizations. */\n  var LARGE_ARRAY_SIZE = 200;\n\n  /** Error message constants. */\n  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://github.com/es-shims.',\n      FUNC_ERROR_TEXT = 'Expected a function';\n\n  /** Used to stand-in for `undefined` hash values. */\n  var HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n  /** Used as the maximum memoize cache size. */\n  var MAX_MEMOIZE_SIZE = 500;\n\n  /** Used as the internal argument placeholder. */\n  var PLACEHOLDER = '__lodash_placeholder__';\n\n  /** Used to compose bitmasks for function metadata. */\n  var BIND_FLAG = 1,\n      BIND_KEY_FLAG = 2,\n      CURRY_BOUND_FLAG = 4,\n      CURRY_FLAG = 8,\n      CURRY_RIGHT_FLAG = 16,\n      PARTIAL_FLAG = 32,\n      PARTIAL_RIGHT_FLAG = 64,\n      ARY_FLAG = 128,\n      REARG_FLAG = 256,\n      FLIP_FLAG = 512;\n\n  /** Used to compose bitmasks for comparison styles. */\n  var UNORDERED_COMPARE_FLAG = 1,\n      PARTIAL_COMPARE_FLAG = 2;\n\n  /** Used as default options for `_.truncate`. */\n  var DEFAULT_TRUNC_LENGTH = 30,\n      DEFAULT_TRUNC_OMISSION = '...';\n\n  /** Used to detect hot functions by number of calls within a span of milliseconds. */\n  var HOT_COUNT = 800,\n      HOT_SPAN = 16;\n\n  /** Used to indicate the type of lazy iteratees. */\n  var LAZY_FILTER_FLAG = 1,\n      LAZY_MAP_FLAG = 2,\n      LAZY_WHILE_FLAG = 3;\n\n  /** Used as references for various `Number` constants. */\n  var INFINITY = 1 / 0,\n      MAX_SAFE_INTEGER = 9007199254740991,\n      MAX_INTEGER = 1.7976931348623157e+308,\n      NAN = 0 / 0;\n\n  /** Used as references for the maximum length and index of an array. */\n  var MAX_ARRAY_LENGTH = 4294967295,\n      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,\n      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;\n\n  /** Used to associate wrap methods with their bit flags. */\n  var wrapFlags = [\n    ['ary', ARY_FLAG],\n    ['bind', BIND_FLAG],\n    ['bindKey', BIND_KEY_FLAG],\n    ['curry', CURRY_FLAG],\n    ['curryRight', CURRY_RIGHT_FLAG],\n    ['flip', FLIP_FLAG],\n    ['partial', PARTIAL_FLAG],\n    ['partialRight', PARTIAL_RIGHT_FLAG],\n    ['rearg', REARG_FLAG]\n  ];\n\n  /** `Object#toString` result references. */\n  var argsTag = '[object Arguments]',\n      arrayTag = '[object Array]',\n      asyncTag = '[object AsyncFunction]',\n      boolTag = '[object Boolean]',\n      dateTag = '[object Date]',\n      domExcTag = '[object DOMException]',\n      errorTag = '[object Error]',\n      funcTag = '[object Function]',\n      genTag = '[object GeneratorFunction]',\n      mapTag = '[object Map]',\n      numberTag = '[object Number]',\n      nullTag = '[object Null]',\n      objectTag = '[object Object]',\n      promiseTag = '[object Promise]',\n      proxyTag = '[object Proxy]',\n      regexpTag = '[object RegExp]',\n      setTag = '[object Set]',\n      stringTag = '[object String]',\n      symbolTag = '[object Symbol]',\n      undefinedTag = '[object Undefined]',\n      weakMapTag = '[object WeakMap]',\n      weakSetTag = '[object WeakSet]';\n\n  var arrayBufferTag = '[object ArrayBuffer]',\n      dataViewTag = '[object DataView]',\n      float32Tag = '[object Float32Array]',\n      float64Tag = '[object Float64Array]',\n      int8Tag = '[object Int8Array]',\n      int16Tag = '[object Int16Array]',\n      int32Tag = '[object Int32Array]',\n      uint8Tag = '[object Uint8Array]',\n      uint8ClampedTag = '[object Uint8ClampedArray]',\n      uint16Tag = '[object Uint16Array]',\n      uint32Tag = '[object Uint32Array]';\n\n  /** Used to match empty string literals in compiled template source. */\n  var reEmptyStringLeading = /\\b__p \\+= '';/g,\n      reEmptyStringMiddle = /\\b(__p \\+=) '' \\+/g,\n      reEmptyStringTrailing = /(__e\\(.*?\\)|\\b__t\\)) \\+\\n'';/g;\n\n  /** Used to match HTML entities and HTML characters. */\n  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,\n      reUnescapedHtml = /[&<>\"']/g,\n      reHasEscapedHtml = RegExp(reEscapedHtml.source),\n      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);\n\n  /** Used to match template delimiters. */\n  var reEscape = /<%-([\\s\\S]+?)%>/g,\n      reEvaluate = /<%([\\s\\S]+?)%>/g,\n      reInterpolate = /<%=([\\s\\S]+?)%>/g;\n\n  /** Used to match property names within property paths. */\n  var reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n      reIsPlainProp = /^\\w*$/,\n      reLeadingDot = /^\\./,\n      rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n  /**\n   * Used to match `RegExp`\n   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n   */\n  var reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g,\n      reHasRegExpChar = RegExp(reRegExpChar.source);\n\n  /** Used to match leading and trailing whitespace. */\n  var reTrim = /^\\s+|\\s+$/g,\n      reTrimStart = /^\\s+/,\n      reTrimEnd = /\\s+$/;\n\n  /** Used to match wrap detail comments. */\n  var reWrapComment = /\\{(?:\\n\\/\\* \\[wrapped with .+\\] \\*\\/)?\\n?/,\n      reWrapDetails = /\\{\\n\\/\\* \\[wrapped with (.+)\\] \\*/,\n      reSplitDetails = /,? & /;\n\n  /** Used to match words composed of alphanumeric characters. */\n  var reAsciiWord = /[^\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\x7f]+/g;\n\n  /** Used to match backslashes in property paths. */\n  var reEscapeChar = /\\\\(\\\\)?/g;\n\n  /**\n   * Used to match\n   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).\n   */\n  var reEsTemplate = /\\$\\{([^\\\\}]*(?:\\\\.[^\\\\}]*)*)\\}/g;\n\n  /** Used to match `RegExp` flags from their coerced string values. */\n  var reFlags = /\\w*$/;\n\n  /** Used to detect bad signed hexadecimal string values. */\n  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n  /** Used to detect binary string values. */\n  var reIsBinary = /^0b[01]+$/i;\n\n  /** Used to detect host constructors (Safari). */\n  var reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n  /** Used to detect octal string values. */\n  var reIsOctal = /^0o[0-7]+$/i;\n\n  /** Used to detect unsigned integer values. */\n  var reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n  /** Used to match Latin Unicode letters (excluding mathematical operators). */\n  var reLatin = /[\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\xff\\u0100-\\u017f]/g;\n\n  /** Used to ensure capturing order of template delimiters. */\n  var reNoMatch = /($^)/;\n\n  /** Used to match unescaped characters in compiled string literals. */\n  var reUnescapedString = /['\\n\\r\\u2028\\u2029\\\\]/g;\n\n  /** Used to compose unicode character classes. */\n  var rsAstralRange = '\\\\ud800-\\\\udfff',\n      rsComboMarksRange = '\\\\u0300-\\\\u036f\\\\ufe20-\\\\ufe23',\n      rsComboSymbolsRange = '\\\\u20d0-\\\\u20f0',\n      rsDingbatRange = '\\\\u2700-\\\\u27bf',\n      rsLowerRange = 'a-z\\\\xdf-\\\\xf6\\\\xf8-\\\\xff',\n      rsMathOpRange = '\\\\xac\\\\xb1\\\\xd7\\\\xf7',\n      rsNonCharRange = '\\\\x00-\\\\x2f\\\\x3a-\\\\x40\\\\x5b-\\\\x60\\\\x7b-\\\\xbf',\n      rsPunctuationRange = '\\\\u2000-\\\\u206f',\n      rsSpaceRange = ' \\\\t\\\\x0b\\\\f\\\\xa0\\\\ufeff\\\\n\\\\r\\\\u2028\\\\u2029\\\\u1680\\\\u180e\\\\u2000\\\\u2001\\\\u2002\\\\u2003\\\\u2004\\\\u2005\\\\u2006\\\\u2007\\\\u2008\\\\u2009\\\\u200a\\\\u202f\\\\u205f\\\\u3000',\n      rsUpperRange = 'A-Z\\\\xc0-\\\\xd6\\\\xd8-\\\\xde',\n      rsVarRange = '\\\\ufe0e\\\\ufe0f',\n      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;\n\n  /** Used to compose unicode capture groups. */\n  var rsApos = \"['\\u2019]\",\n      rsAstral = '[' + rsAstralRange + ']',\n      rsBreak = '[' + rsBreakRange + ']',\n      rsCombo = '[' + rsComboMarksRange + rsComboSymbolsRange + ']',\n      rsDigits = '\\\\d+',\n      rsDingbat = '[' + rsDingbatRange + ']',\n      rsLower = '[' + rsLowerRange + ']',\n      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',\n      rsFitz = '\\\\ud83c[\\\\udffb-\\\\udfff]',\n      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',\n      rsNonAstral = '[^' + rsAstralRange + ']',\n      rsRegional = '(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}',\n      rsSurrPair = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]',\n      rsUpper = '[' + rsUpperRange + ']',\n      rsZWJ = '\\\\u200d';\n\n  /** Used to compose unicode regexes. */\n  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',\n      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',\n      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',\n      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',\n      reOptMod = rsModifier + '?',\n      rsOptVar = '[' + rsVarRange + ']?',\n      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',\n      rsOrdLower = '\\\\d*(?:(?:1st|2nd|3rd|(?![123])\\\\dth)\\\\b)',\n      rsOrdUpper = '\\\\d*(?:(?:1ST|2ND|3RD|(?![123])\\\\dTH)\\\\b)',\n      rsSeq = rsOptVar + reOptMod + rsOptJoin,\n      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,\n      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';\n\n  /** Used to match apostrophes. */\n  var reApos = RegExp(rsApos, 'g');\n\n  /**\n   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and\n   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).\n   */\n  var reComboMark = RegExp(rsCombo, 'g');\n\n  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */\n  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');\n\n  /** Used to match complex or compound words. */\n  var reUnicodeWord = RegExp([\n    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',\n    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',\n    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,\n    rsUpper + '+' + rsOptContrUpper,\n    rsOrdUpper,\n    rsOrdLower,\n    rsDigits,\n    rsEmoji\n  ].join('|'), 'g');\n\n  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */\n  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboMarksRange + rsComboSymbolsRange + rsVarRange + ']');\n\n  /** Used to detect strings that need a more robust regexp to match words. */\n  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;\n\n  /** Used to assign default `context` object properties. */\n  var contextProps = [\n    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',\n    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',\n    'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',\n    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',\n    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'\n  ];\n\n  /** Used to make template sourceURLs easier to identify. */\n  var templateCounter = -1;\n\n  /** Used to identify `toStringTag` values of typed arrays. */\n  var typedArrayTags = {};\n  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\n  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\n  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\n  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\n  typedArrayTags[uint32Tag] = true;\n  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =\n  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\n  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\n  typedArrayTags[errorTag] = typedArrayTags[funcTag] =\n  typedArrayTags[mapTag] = typedArrayTags[numberTag] =\n  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =\n  typedArrayTags[setTag] = typedArrayTags[stringTag] =\n  typedArrayTags[weakMapTag] = false;\n\n  /** Used to identify `toStringTag` values supported by `_.clone`. */\n  var cloneableTags = {};\n  cloneableTags[argsTag] = cloneableTags[arrayTag] =\n  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\n  cloneableTags[boolTag] = cloneableTags[dateTag] =\n  cloneableTags[float32Tag] = cloneableTags[float64Tag] =\n  cloneableTags[int8Tag] = cloneableTags[int16Tag] =\n  cloneableTags[int32Tag] = cloneableTags[mapTag] =\n  cloneableTags[numberTag] = cloneableTags[objectTag] =\n  cloneableTags[regexpTag] = cloneableTags[setTag] =\n  cloneableTags[stringTag] = cloneableTags[symbolTag] =\n  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\n  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\n  cloneableTags[errorTag] = cloneableTags[funcTag] =\n  cloneableTags[weakMapTag] = false;\n\n  /** Used to map Latin Unicode letters to basic Latin letters. */\n  var deburredLetters = {\n    // Latin-1 Supplement block.\n    '\\xc0': 'A',  '\\xc1': 'A', '\\xc2': 'A', '\\xc3': 'A', '\\xc4': 'A', '\\xc5': 'A',\n    '\\xe0': 'a',  '\\xe1': 'a', '\\xe2': 'a', '\\xe3': 'a', '\\xe4': 'a', '\\xe5': 'a',\n    '\\xc7': 'C',  '\\xe7': 'c',\n    '\\xd0': 'D',  '\\xf0': 'd',\n    '\\xc8': 'E',  '\\xc9': 'E', '\\xca': 'E', '\\xcb': 'E',\n    '\\xe8': 'e',  '\\xe9': 'e', '\\xea': 'e', '\\xeb': 'e',\n    '\\xcc': 'I',  '\\xcd': 'I', '\\xce': 'I', '\\xcf': 'I',\n    '\\xec': 'i',  '\\xed': 'i', '\\xee': 'i', '\\xef': 'i',\n    '\\xd1': 'N',  '\\xf1': 'n',\n    '\\xd2': 'O',  '\\xd3': 'O', '\\xd4': 'O', '\\xd5': 'O', '\\xd6': 'O', '\\xd8': 'O',\n    '\\xf2': 'o',  '\\xf3': 'o', '\\xf4': 'o', '\\xf5': 'o', '\\xf6': 'o', '\\xf8': 'o',\n    '\\xd9': 'U',  '\\xda': 'U', '\\xdb': 'U', '\\xdc': 'U',\n    '\\xf9': 'u',  '\\xfa': 'u', '\\xfb': 'u', '\\xfc': 'u',\n    '\\xdd': 'Y',  '\\xfd': 'y', '\\xff': 'y',\n    '\\xc6': 'Ae', '\\xe6': 'ae',\n    '\\xde': 'Th', '\\xfe': 'th',\n    '\\xdf': 'ss',\n    // Latin Extended-A block.\n    '\\u0100': 'A',  '\\u0102': 'A', '\\u0104': 'A',\n    '\\u0101': 'a',  '\\u0103': 'a', '\\u0105': 'a',\n    '\\u0106': 'C',  '\\u0108': 'C', '\\u010a': 'C', '\\u010c': 'C',\n    '\\u0107': 'c',  '\\u0109': 'c', '\\u010b': 'c', '\\u010d': 'c',\n    '\\u010e': 'D',  '\\u0110': 'D', '\\u010f': 'd', '\\u0111': 'd',\n    '\\u0112': 'E',  '\\u0114': 'E', '\\u0116': 'E', '\\u0118': 'E', '\\u011a': 'E',\n    '\\u0113': 'e',  '\\u0115': 'e', '\\u0117': 'e', '\\u0119': 'e', '\\u011b': 'e',\n    '\\u011c': 'G',  '\\u011e': 'G', '\\u0120': 'G', '\\u0122': 'G',\n    '\\u011d': 'g',  '\\u011f': 'g', '\\u0121': 'g', '\\u0123': 'g',\n    '\\u0124': 'H',  '\\u0126': 'H', '\\u0125': 'h', '\\u0127': 'h',\n    '\\u0128': 'I',  '\\u012a': 'I', '\\u012c': 'I', '\\u012e': 'I', '\\u0130': 'I',\n    '\\u0129': 'i',  '\\u012b': 'i', '\\u012d': 'i', '\\u012f': 'i', '\\u0131': 'i',\n    '\\u0134': 'J',  '\\u0135': 'j',\n    '\\u0136': 'K',  '\\u0137': 'k', '\\u0138': 'k',\n    '\\u0139': 'L',  '\\u013b': 'L', '\\u013d': 'L', '\\u013f': 'L', '\\u0141': 'L',\n    '\\u013a': 'l',  '\\u013c': 'l', '\\u013e': 'l', '\\u0140': 'l', '\\u0142': 'l',\n    '\\u0143': 'N',  '\\u0145': 'N', '\\u0147': 'N', '\\u014a': 'N',\n    '\\u0144': 'n',  '\\u0146': 'n', '\\u0148': 'n', '\\u014b': 'n',\n    '\\u014c': 'O',  '\\u014e': 'O', '\\u0150': 'O',\n    '\\u014d': 'o',  '\\u014f': 'o', '\\u0151': 'o',\n    '\\u0154': 'R',  '\\u0156': 'R', '\\u0158': 'R',\n    '\\u0155': 'r',  '\\u0157': 'r', '\\u0159': 'r',\n    '\\u015a': 'S',  '\\u015c': 'S', '\\u015e': 'S', '\\u0160': 'S',\n    '\\u015b': 's',  '\\u015d': 's', '\\u015f': 's', '\\u0161': 's',\n    '\\u0162': 'T',  '\\u0164': 'T', '\\u0166': 'T',\n    '\\u0163': 't',  '\\u0165': 't', '\\u0167': 't',\n    '\\u0168': 'U',  '\\u016a': 'U', '\\u016c': 'U', '\\u016e': 'U', '\\u0170': 'U', '\\u0172': 'U',\n    '\\u0169': 'u',  '\\u016b': 'u', '\\u016d': 'u', '\\u016f': 'u', '\\u0171': 'u', '\\u0173': 'u',\n    '\\u0174': 'W',  '\\u0175': 'w',\n    '\\u0176': 'Y',  '\\u0177': 'y', '\\u0178': 'Y',\n    '\\u0179': 'Z',  '\\u017b': 'Z', '\\u017d': 'Z',\n    '\\u017a': 'z',  '\\u017c': 'z', '\\u017e': 'z',\n    '\\u0132': 'IJ', '\\u0133': 'ij',\n    '\\u0152': 'Oe', '\\u0153': 'oe',\n    '\\u0149': \"'n\", '\\u017f': 's'\n  };\n\n  /** Used to map characters to HTML entities. */\n  var htmlEscapes = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;'\n  };\n\n  /** Used to map HTML entities to characters. */\n  var htmlUnescapes = {\n    '&amp;': '&',\n    '&lt;': '<',\n    '&gt;': '>',\n    '&quot;': '\"',\n    '&#39;': \"'\"\n  };\n\n  /** Used to escape characters for inclusion in compiled string literals. */\n  var stringEscapes = {\n    '\\\\': '\\\\',\n    \"'\": \"'\",\n    '\\n': 'n',\n    '\\r': 'r',\n    '\\u2028': 'u2028',\n    '\\u2029': 'u2029'\n  };\n\n  /** Built-in method references without a dependency on `root`. */\n  var freeParseFloat = parseFloat,\n      freeParseInt = parseInt;\n\n  /** Detect free variable `global` from Node.js. */\n  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n  /** Detect free variable `self`. */\n  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n  /** Used as a reference to the global object. */\n  var root = freeGlobal || freeSelf || Function('return this')();\n\n  /** Detect free variable `exports`. */\n  var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n  /** Detect free variable `module`. */\n  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n  /** Detect the popular CommonJS extension `module.exports`. */\n  var moduleExports = freeModule && freeModule.exports === freeExports;\n\n  /** Detect free variable `process` from Node.js. */\n  var freeProcess = moduleExports && freeGlobal.process;\n\n  /** Used to access faster Node.js helpers. */\n  var nodeUtil = (function() {\n    try {\n      return freeProcess && freeProcess.binding('util');\n    } catch (e) {}\n  }());\n\n  /* Node.js helper references. */\n  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,\n      nodeIsDate = nodeUtil && nodeUtil.isDate,\n      nodeIsMap = nodeUtil && nodeUtil.isMap,\n      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,\n      nodeIsSet = nodeUtil && nodeUtil.isSet,\n      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Adds the key-value `pair` to `map`.\n   *\n   * @private\n   * @param {Object} map The map to modify.\n   * @param {Array} pair The key-value pair to add.\n   * @returns {Object} Returns `map`.\n   */\n  function addMapEntry(map, pair) {\n    // Don't return `map.set` because it's not chainable in IE 11.\n    map.set(pair[0], pair[1]);\n    return map;\n  }\n\n  /**\n   * Adds `value` to `set`.\n   *\n   * @private\n   * @param {Object} set The set to modify.\n   * @param {*} value The value to add.\n   * @returns {Object} Returns `set`.\n   */\n  function addSetEntry(set, value) {\n    // Don't return `set.add` because it's not chainable in IE 11.\n    set.add(value);\n    return set;\n  }\n\n  /**\n   * A faster alternative to `Function#apply`, this function invokes `func`\n   * with the `this` binding of `thisArg` and the arguments of `args`.\n   *\n   * @private\n   * @param {Function} func The function to invoke.\n   * @param {*} thisArg The `this` binding of `func`.\n   * @param {Array} args The arguments to invoke `func` with.\n   * @returns {*} Returns the result of `func`.\n   */\n  function apply(func, thisArg, args) {\n    switch (args.length) {\n      case 0: return func.call(thisArg);\n      case 1: return func.call(thisArg, args[0]);\n      case 2: return func.call(thisArg, args[0], args[1]);\n      case 3: return func.call(thisArg, args[0], args[1], args[2]);\n    }\n    return func.apply(thisArg, args);\n  }\n\n  /**\n   * A specialized version of `baseAggregator` for arrays.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} setter The function to set `accumulator` values.\n   * @param {Function} iteratee The iteratee to transform keys.\n   * @param {Object} accumulator The initial aggregated object.\n   * @returns {Function} Returns `accumulator`.\n   */\n  function arrayAggregator(array, setter, iteratee, accumulator) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    while (++index < length) {\n      var value = array[index];\n      setter(accumulator, value, iteratee(value), array);\n    }\n    return accumulator;\n  }\n\n  /**\n   * A specialized version of `_.forEach` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns `array`.\n   */\n  function arrayEach(array, iteratee) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    while (++index < length) {\n      if (iteratee(array[index], index, array) === false) {\n        break;\n      }\n    }\n    return array;\n  }\n\n  /**\n   * A specialized version of `_.forEachRight` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns `array`.\n   */\n  function arrayEachRight(array, iteratee) {\n    var length = array == null ? 0 : array.length;\n\n    while (length--) {\n      if (iteratee(array[length], length, array) === false) {\n        break;\n      }\n    }\n    return array;\n  }\n\n  /**\n   * A specialized version of `_.every` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} predicate The function invoked per iteration.\n   * @returns {boolean} Returns `true` if all elements pass the predicate check,\n   *  else `false`.\n   */\n  function arrayEvery(array, predicate) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    while (++index < length) {\n      if (!predicate(array[index], index, array)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * A specialized version of `_.filter` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} predicate The function invoked per iteration.\n   * @returns {Array} Returns the new filtered array.\n   */\n  function arrayFilter(array, predicate) {\n    var index = -1,\n        length = array == null ? 0 : array.length,\n        resIndex = 0,\n        result = [];\n\n    while (++index < length) {\n      var value = array[index];\n      if (predicate(value, index, array)) {\n        result[resIndex++] = value;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * A specialized version of `_.includes` for arrays without support for\n   * specifying an index to search from.\n   *\n   * @private\n   * @param {Array} [array] The array to inspect.\n   * @param {*} target The value to search for.\n   * @returns {boolean} Returns `true` if `target` is found, else `false`.\n   */\n  function arrayIncludes(array, value) {\n    var length = array == null ? 0 : array.length;\n    return !!length && baseIndexOf(array, value, 0) > -1;\n  }\n\n  /**\n   * This function is like `arrayIncludes` except that it accepts a comparator.\n   *\n   * @private\n   * @param {Array} [array] The array to inspect.\n   * @param {*} target The value to search for.\n   * @param {Function} comparator The comparator invoked per element.\n   * @returns {boolean} Returns `true` if `target` is found, else `false`.\n   */\n  function arrayIncludesWith(array, value, comparator) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    while (++index < length) {\n      if (comparator(value, array[index])) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * A specialized version of `_.map` for arrays without support for iteratee\n   * shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns the new mapped array.\n   */\n  function arrayMap(array, iteratee) {\n    var index = -1,\n        length = array == null ? 0 : array.length,\n        result = Array(length);\n\n    while (++index < length) {\n      result[index] = iteratee(array[index], index, array);\n    }\n    return result;\n  }\n\n  /**\n   * Appends the elements of `values` to `array`.\n   *\n   * @private\n   * @param {Array} array The array to modify.\n   * @param {Array} values The values to append.\n   * @returns {Array} Returns `array`.\n   */\n  function arrayPush(array, values) {\n    var index = -1,\n        length = values.length,\n        offset = array.length;\n\n    while (++index < length) {\n      array[offset + index] = values[index];\n    }\n    return array;\n  }\n\n  /**\n   * A specialized version of `_.reduce` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @param {*} [accumulator] The initial value.\n   * @param {boolean} [initAccum] Specify using the first element of `array` as\n   *  the initial value.\n   * @returns {*} Returns the accumulated value.\n   */\n  function arrayReduce(array, iteratee, accumulator, initAccum) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    if (initAccum && length) {\n      accumulator = array[++index];\n    }\n    while (++index < length) {\n      accumulator = iteratee(accumulator, array[index], index, array);\n    }\n    return accumulator;\n  }\n\n  /**\n   * A specialized version of `_.reduceRight` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @param {*} [accumulator] The initial value.\n   * @param {boolean} [initAccum] Specify using the last element of `array` as\n   *  the initial value.\n   * @returns {*} Returns the accumulated value.\n   */\n  function arrayReduceRight(array, iteratee, accumulator, initAccum) {\n    var length = array == null ? 0 : array.length;\n    if (initAccum && length) {\n      accumulator = array[--length];\n    }\n    while (length--) {\n      accumulator = iteratee(accumulator, array[length], length, array);\n    }\n    return accumulator;\n  }\n\n  /**\n   * A specialized version of `_.some` for arrays without support for iteratee\n   * shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} predicate The function invoked per iteration.\n   * @returns {boolean} Returns `true` if any element passes the predicate check,\n   *  else `false`.\n   */\n  function arraySome(array, predicate) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    while (++index < length) {\n      if (predicate(array[index], index, array)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Gets the size of an ASCII `string`.\n   *\n   * @private\n   * @param {string} string The string inspect.\n   * @returns {number} Returns the string size.\n   */\n  var asciiSize = baseProperty('length');\n\n  /**\n   * Converts an ASCII `string` to an array.\n   *\n   * @private\n   * @param {string} string The string to convert.\n   * @returns {Array} Returns the converted array.\n   */\n  function asciiToArray(string) {\n    return string.split('');\n  }\n\n  /**\n   * Splits an ASCII `string` into an array of its words.\n   *\n   * @private\n   * @param {string} The string to inspect.\n   * @returns {Array} Returns the words of `string`.\n   */\n  function asciiWords(string) {\n    return string.match(reAsciiWord) || [];\n  }\n\n  /**\n   * The base implementation of methods like `_.findKey` and `_.findLastKey`,\n   * without support for iteratee shorthands, which iterates over `collection`\n   * using `eachFunc`.\n   *\n   * @private\n   * @param {Array|Object} collection The collection to inspect.\n   * @param {Function} predicate The function invoked per iteration.\n   * @param {Function} eachFunc The function to iterate over `collection`.\n   * @returns {*} Returns the found element or its key, else `undefined`.\n   */\n  function baseFindKey(collection, predicate, eachFunc) {\n    var result;\n    eachFunc(collection, function(value, key, collection) {\n      if (predicate(value, key, collection)) {\n        result = key;\n        return false;\n      }\n    });\n    return result;\n  }\n\n  /**\n   * The base implementation of `_.findIndex` and `_.findLastIndex` without\n   * support for iteratee shorthands.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {Function} predicate The function invoked per iteration.\n   * @param {number} fromIndex The index to search from.\n   * @param {boolean} [fromRight] Specify iterating from right to left.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function baseFindIndex(array, predicate, fromIndex, fromRight) {\n    var length = array.length,\n        index = fromIndex + (fromRight ? 1 : -1);\n\n    while ((fromRight ? index-- : ++index < length)) {\n      if (predicate(array[index], index, array)) {\n        return index;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} value The value to search for.\n   * @param {number} fromIndex The index to search from.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function baseIndexOf(array, value, fromIndex) {\n    return value === value\n      ? strictIndexOf(array, value, fromIndex)\n      : baseFindIndex(array, baseIsNaN, fromIndex);\n  }\n\n  /**\n   * This function is like `baseIndexOf` except that it accepts a comparator.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} value The value to search for.\n   * @param {number} fromIndex The index to search from.\n   * @param {Function} comparator The comparator invoked per element.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function baseIndexOfWith(array, value, fromIndex, comparator) {\n    var index = fromIndex - 1,\n        length = array.length;\n\n    while (++index < length) {\n      if (comparator(array[index], value)) {\n        return index;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * The base implementation of `_.isNaN` without support for number objects.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\n   */\n  function baseIsNaN(value) {\n    return value !== value;\n  }\n\n  /**\n   * The base implementation of `_.mean` and `_.meanBy` without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} array The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {number} Returns the mean.\n   */\n  function baseMean(array, iteratee) {\n    var length = array == null ? 0 : array.length;\n    return length ? (baseSum(array, iteratee) / length) : NAN;\n  }\n\n  /**\n   * The base implementation of `_.property` without support for deep paths.\n   *\n   * @private\n   * @param {string} key The key of the property to get.\n   * @returns {Function} Returns the new accessor function.\n   */\n  function baseProperty(key) {\n    return function(object) {\n      return object == null ? undefined : object[key];\n    };\n  }\n\n  /**\n   * The base implementation of `_.propertyOf` without support for deep paths.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @returns {Function} Returns the new accessor function.\n   */\n  function basePropertyOf(object) {\n    return function(key) {\n      return object == null ? undefined : object[key];\n    };\n  }\n\n  /**\n   * The base implementation of `_.reduce` and `_.reduceRight`, without support\n   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.\n   *\n   * @private\n   * @param {Array|Object} collection The collection to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @param {*} accumulator The initial value.\n   * @param {boolean} initAccum Specify using the first or last element of\n   *  `collection` as the initial value.\n   * @param {Function} eachFunc The function to iterate over `collection`.\n   * @returns {*} Returns the accumulated value.\n   */\n  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {\n    eachFunc(collection, function(value, index, collection) {\n      accumulator = initAccum\n        ? (initAccum = false, value)\n        : iteratee(accumulator, value, index, collection);\n    });\n    return accumulator;\n  }\n\n  /**\n   * The base implementation of `_.sortBy` which uses `comparer` to define the\n   * sort order of `array` and replaces criteria objects with their corresponding\n   * values.\n   *\n   * @private\n   * @param {Array} array The array to sort.\n   * @param {Function} comparer The function to define sort order.\n   * @returns {Array} Returns `array`.\n   */\n  function baseSortBy(array, comparer) {\n    var length = array.length;\n\n    array.sort(comparer);\n    while (length--) {\n      array[length] = array[length].value;\n    }\n    return array;\n  }\n\n  /**\n   * The base implementation of `_.sum` and `_.sumBy` without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} array The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {number} Returns the sum.\n   */\n  function baseSum(array, iteratee) {\n    var result,\n        index = -1,\n        length = array.length;\n\n    while (++index < length) {\n      var current = iteratee(array[index]);\n      if (current !== undefined) {\n        result = result === undefined ? current : (result + current);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * The base implementation of `_.times` without support for iteratee shorthands\n   * or max array length checks.\n   *\n   * @private\n   * @param {number} n The number of times to invoke `iteratee`.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns the array of results.\n   */\n  function baseTimes(n, iteratee) {\n    var index = -1,\n        result = Array(n);\n\n    while (++index < n) {\n      result[index] = iteratee(index);\n    }\n    return result;\n  }\n\n  /**\n   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array\n   * of key-value pairs for `object` corresponding to the property names of `props`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @param {Array} props The property names to get values for.\n   * @returns {Object} Returns the key-value pairs.\n   */\n  function baseToPairs(object, props) {\n    return arrayMap(props, function(key) {\n      return [key, object[key]];\n    });\n  }\n\n  /**\n   * The base implementation of `_.unary` without support for storing metadata.\n   *\n   * @private\n   * @param {Function} func The function to cap arguments for.\n   * @returns {Function} Returns the new capped function.\n   */\n  function baseUnary(func) {\n    return function(value) {\n      return func(value);\n    };\n  }\n\n  /**\n   * The base implementation of `_.values` and `_.valuesIn` which creates an\n   * array of `object` property values corresponding to the property names\n   * of `props`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @param {Array} props The property names to get values for.\n   * @returns {Object} Returns the array of property values.\n   */\n  function baseValues(object, props) {\n    return arrayMap(props, function(key) {\n      return object[key];\n    });\n  }\n\n  /**\n   * Checks if a `cache` value for `key` exists.\n   *\n   * @private\n   * @param {Object} cache The cache to query.\n   * @param {string} key The key of the entry to check.\n   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n   */\n  function cacheHas(cache, key) {\n    return cache.has(key);\n  }\n\n  /**\n   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol\n   * that is not found in the character symbols.\n   *\n   * @private\n   * @param {Array} strSymbols The string symbols to inspect.\n   * @param {Array} chrSymbols The character symbols to find.\n   * @returns {number} Returns the index of the first unmatched string symbol.\n   */\n  function charsStartIndex(strSymbols, chrSymbols) {\n    var index = -1,\n        length = strSymbols.length;\n\n    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}\n    return index;\n  }\n\n  /**\n   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol\n   * that is not found in the character symbols.\n   *\n   * @private\n   * @param {Array} strSymbols The string symbols to inspect.\n   * @param {Array} chrSymbols The character symbols to find.\n   * @returns {number} Returns the index of the last unmatched string symbol.\n   */\n  function charsEndIndex(strSymbols, chrSymbols) {\n    var index = strSymbols.length;\n\n    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}\n    return index;\n  }\n\n  /**\n   * Gets the number of `placeholder` occurrences in `array`.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} placeholder The placeholder to search for.\n   * @returns {number} Returns the placeholder count.\n   */\n  function countHolders(array, placeholder) {\n    var length = array.length,\n        result = 0;\n\n    while (length--) {\n      if (array[length] === placeholder) {\n        ++result;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A\n   * letters to basic Latin letters.\n   *\n   * @private\n   * @param {string} letter The matched letter to deburr.\n   * @returns {string} Returns the deburred letter.\n   */\n  var deburrLetter = basePropertyOf(deburredLetters);\n\n  /**\n   * Used by `_.escape` to convert characters to HTML entities.\n   *\n   * @private\n   * @param {string} chr The matched character to escape.\n   * @returns {string} Returns the escaped character.\n   */\n  var escapeHtmlChar = basePropertyOf(htmlEscapes);\n\n  /**\n   * Used by `_.template` to escape characters for inclusion in compiled string literals.\n   *\n   * @private\n   * @param {string} chr The matched character to escape.\n   * @returns {string} Returns the escaped character.\n   */\n  function escapeStringChar(chr) {\n    return '\\\\' + stringEscapes[chr];\n  }\n\n  /**\n   * Gets the value at `key` of `object`.\n   *\n   * @private\n   * @param {Object} [object] The object to query.\n   * @param {string} key The key of the property to get.\n   * @returns {*} Returns the property value.\n   */\n  function getValue(object, key) {\n    return object == null ? undefined : object[key];\n  }\n\n  /**\n   * Checks if `string` contains Unicode symbols.\n   *\n   * @private\n   * @param {string} string The string to inspect.\n   * @returns {boolean} Returns `true` if a symbol is found, else `false`.\n   */\n  function hasUnicode(string) {\n    return reHasUnicode.test(string);\n  }\n\n  /**\n   * Checks if `string` contains a word composed of Unicode symbols.\n   *\n   * @private\n   * @param {string} string The string to inspect.\n   * @returns {boolean} Returns `true` if a word is found, else `false`.\n   */\n  function hasUnicodeWord(string) {\n    return reHasUnicodeWord.test(string);\n  }\n\n  /**\n   * Converts `iterator` to an array.\n   *\n   * @private\n   * @param {Object} iterator The iterator to convert.\n   * @returns {Array} Returns the converted array.\n   */\n  function iteratorToArray(iterator) {\n    var data,\n        result = [];\n\n    while (!(data = iterator.next()).done) {\n      result.push(data.value);\n    }\n    return result;\n  }\n\n  /**\n   * Converts `map` to its key-value pairs.\n   *\n   * @private\n   * @param {Object} map The map to convert.\n   * @returns {Array} Returns the key-value pairs.\n   */\n  function mapToArray(map) {\n    var index = -1,\n        result = Array(map.size);\n\n    map.forEach(function(value, key) {\n      result[++index] = [key, value];\n    });\n    return result;\n  }\n\n  /**\n   * Creates a unary function that invokes `func` with its argument transformed.\n   *\n   * @private\n   * @param {Function} func The function to wrap.\n   * @param {Function} transform The argument transform.\n   * @returns {Function} Returns the new function.\n   */\n  function overArg(func, transform) {\n    return function(arg) {\n      return func(transform(arg));\n    };\n  }\n\n  /**\n   * Replaces all `placeholder` elements in `array` with an internal placeholder\n   * and returns an array of their indexes.\n   *\n   * @private\n   * @param {Array} array The array to modify.\n   * @param {*} placeholder The placeholder to replace.\n   * @returns {Array} Returns the new array of placeholder indexes.\n   */\n  function replaceHolders(array, placeholder) {\n    var index = -1,\n        length = array.length,\n        resIndex = 0,\n        result = [];\n\n    while (++index < length) {\n      var value = array[index];\n      if (value === placeholder || value === PLACEHOLDER) {\n        array[index] = PLACEHOLDER;\n        result[resIndex++] = index;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Converts `set` to an array of its values.\n   *\n   * @private\n   * @param {Object} set The set to convert.\n   * @returns {Array} Returns the values.\n   */\n  function setToArray(set) {\n    var index = -1,\n        result = Array(set.size);\n\n    set.forEach(function(value) {\n      result[++index] = value;\n    });\n    return result;\n  }\n\n  /**\n   * Converts `set` to its value-value pairs.\n   *\n   * @private\n   * @param {Object} set The set to convert.\n   * @returns {Array} Returns the value-value pairs.\n   */\n  function setToPairs(set) {\n    var index = -1,\n        result = Array(set.size);\n\n    set.forEach(function(value) {\n      result[++index] = [value, value];\n    });\n    return result;\n  }\n\n  /**\n   * A specialized version of `_.indexOf` which performs strict equality\n   * comparisons of values, i.e. `===`.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} value The value to search for.\n   * @param {number} fromIndex The index to search from.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function strictIndexOf(array, value, fromIndex) {\n    var index = fromIndex - 1,\n        length = array.length;\n\n    while (++index < length) {\n      if (array[index] === value) {\n        return index;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * A specialized version of `_.lastIndexOf` which performs strict equality\n   * comparisons of values, i.e. `===`.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} value The value to search for.\n   * @param {number} fromIndex The index to search from.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function strictLastIndexOf(array, value, fromIndex) {\n    var index = fromIndex + 1;\n    while (index--) {\n      if (array[index] === value) {\n        return index;\n      }\n    }\n    return index;\n  }\n\n  /**\n   * Gets the number of symbols in `string`.\n   *\n   * @private\n   * @param {string} string The string to inspect.\n   * @returns {number} Returns the string size.\n   */\n  function stringSize(string) {\n    return hasUnicode(string)\n      ? unicodeSize(string)\n      : asciiSize(string);\n  }\n\n  /**\n   * Converts `string` to an array.\n   *\n   * @private\n   * @param {string} string The string to convert.\n   * @returns {Array} Returns the converted array.\n   */\n  function stringToArray(string) {\n    return hasUnicode(string)\n      ? unicodeToArray(string)\n      : asciiToArray(string);\n  }\n\n  /**\n   * Used by `_.unescape` to convert HTML entities to characters.\n   *\n   * @private\n   * @param {string} chr The matched character to unescape.\n   * @returns {string} Returns the unescaped character.\n   */\n  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);\n\n  /**\n   * Gets the size of a Unicode `string`.\n   *\n   * @private\n   * @param {string} string The string inspect.\n   * @returns {number} Returns the string size.\n   */\n  function unicodeSize(string) {\n    var result = reUnicode.lastIndex = 0;\n    while (reUnicode.test(string)) {\n      ++result;\n    }\n    return result;\n  }\n\n  /**\n   * Converts a Unicode `string` to an array.\n   *\n   * @private\n   * @param {string} string The string to convert.\n   * @returns {Array} Returns the converted array.\n   */\n  function unicodeToArray(string) {\n    return string.match(reUnicode) || [];\n  }\n\n  /**\n   * Splits a Unicode `string` into an array of its words.\n   *\n   * @private\n   * @param {string} The string to inspect.\n   * @returns {Array} Returns the words of `string`.\n   */\n  function unicodeWords(string) {\n    return string.match(reUnicodeWord) || [];\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Create a new pristine `lodash` function using the `context` object.\n   *\n   * @static\n   * @memberOf _\n   * @since 1.1.0\n   * @category Util\n   * @param {Object} [context=root] The context object.\n   * @returns {Function} Returns a new `lodash` function.\n   * @example\n   *\n   * _.mixin({ 'foo': _.constant('foo') });\n   *\n   * var lodash = _.runInContext();\n   * lodash.mixin({ 'bar': lodash.constant('bar') });\n   *\n   * _.isFunction(_.foo);\n   * // => true\n   * _.isFunction(_.bar);\n   * // => false\n   *\n   * lodash.isFunction(lodash.foo);\n   * // => false\n   * lodash.isFunction(lodash.bar);\n   * // => true\n   *\n   * // Create a suped-up `defer` in Node.js.\n   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;\n   */\n  var runInContext = (function runInContext(context) {\n    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));\n\n    /** Built-in constructor references. */\n    var Array = context.Array,\n        Date = context.Date,\n        Error = context.Error,\n        Function = context.Function,\n        Math = context.Math,\n        Object = context.Object,\n        RegExp = context.RegExp,\n        String = context.String,\n        TypeError = context.TypeError;\n\n    /** Used for built-in method references. */\n    var arrayProto = Array.prototype,\n        funcProto = Function.prototype,\n        objectProto = Object.prototype;\n\n    /** Used to detect overreaching core-js shims. */\n    var coreJsData = context['__core-js_shared__'];\n\n    /** Used to resolve the decompiled source of functions. */\n    var funcToString = funcProto.toString;\n\n    /** Used to check objects for own properties. */\n    var hasOwnProperty = objectProto.hasOwnProperty;\n\n    /** Used to generate unique IDs. */\n    var idCounter = 0;\n\n    /** Used to detect methods masquerading as native. */\n    var maskSrcKey = (function() {\n      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n      return uid ? ('Symbol(src)_1.' + uid) : '';\n    }());\n\n    /**\n     * Used to resolve the\n     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n     * of values.\n     */\n    var nativeObjectToString = objectProto.toString;\n\n    /** Used to infer the `Object` constructor. */\n    var objectCtorString = funcToString.call(Object);\n\n    /** Used to restore the original `_` reference in `_.noConflict`. */\n    var oldDash = root._;\n\n    /** Used to detect if a method is native. */\n    var reIsNative = RegExp('^' +\n      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n      .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n    );\n\n    /** Built-in value references. */\n    var Buffer = moduleExports ? context.Buffer : undefined,\n        Symbol = context.Symbol,\n        Uint8Array = context.Uint8Array,\n        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,\n        getPrototype = overArg(Object.getPrototypeOf, Object),\n        objectCreate = Object.create,\n        propertyIsEnumerable = objectProto.propertyIsEnumerable,\n        splice = arrayProto.splice,\n        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,\n        symIterator = Symbol ? Symbol.iterator : undefined,\n        symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n    var defineProperty = (function() {\n      try {\n        var func = getNative(Object, 'defineProperty');\n        func({}, '', {});\n        return func;\n      } catch (e) {}\n    }());\n\n    /** Mocked built-ins. */\n    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,\n        ctxNow = Date && Date.now !== root.Date.now && Date.now,\n        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;\n\n    /* Built-in method references for those with the same name as other `lodash` methods. */\n    var nativeCeil = Math.ceil,\n        nativeFloor = Math.floor,\n        nativeGetSymbols = Object.getOwnPropertySymbols,\n        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n        nativeIsFinite = context.isFinite,\n        nativeJoin = arrayProto.join,\n        nativeKeys = overArg(Object.keys, Object),\n        nativeMax = Math.max,\n        nativeMin = Math.min,\n        nativeNow = Date.now,\n        nativeParseInt = context.parseInt,\n        nativeRandom = Math.random,\n        nativeReverse = arrayProto.reverse;\n\n    /* Built-in method references that are verified to be native. */\n    var DataView = getNative(context, 'DataView'),\n        Map = getNative(context, 'Map'),\n        Promise = getNative(context, 'Promise'),\n        Set = getNative(context, 'Set'),\n        WeakMap = getNative(context, 'WeakMap'),\n        nativeCreate = getNative(Object, 'create');\n\n    /** Used to store function metadata. */\n    var metaMap = WeakMap && new WeakMap;\n\n    /** Used to lookup unminified function names. */\n    var realNames = {};\n\n    /** Used to detect maps, sets, and weakmaps. */\n    var dataViewCtorString = toSource(DataView),\n        mapCtorString = toSource(Map),\n        promiseCtorString = toSource(Promise),\n        setCtorString = toSource(Set),\n        weakMapCtorString = toSource(WeakMap);\n\n    /** Used to convert symbols to primitives and strings. */\n    var symbolProto = Symbol ? Symbol.prototype : undefined,\n        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,\n        symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a `lodash` object which wraps `value` to enable implicit method\n     * chain sequences. Methods that operate on and return arrays, collections,\n     * and functions can be chained together. Methods that retrieve a single value\n     * or may return a primitive value will automatically end the chain sequence\n     * and return the unwrapped value. Otherwise, the value must be unwrapped\n     * with `_#value`.\n     *\n     * Explicit chain sequences, which must be unwrapped with `_#value`, may be\n     * enabled using `_.chain`.\n     *\n     * The execution of chained methods is lazy, that is, it's deferred until\n     * `_#value` is implicitly or explicitly called.\n     *\n     * Lazy evaluation allows several methods to support shortcut fusion.\n     * Shortcut fusion is an optimization to merge iteratee calls; this avoids\n     * the creation of intermediate arrays and can greatly reduce the number of\n     * iteratee executions. Sections of a chain sequence qualify for shortcut\n     * fusion if the section is applied to an array of at least `200` elements\n     * and any iteratees accept only one argument. The heuristic for whether a\n     * section qualifies for shortcut fusion is subject to change.\n     *\n     * Chaining is supported in custom builds as long as the `_#value` method is\n     * directly or indirectly included in the build.\n     *\n     * In addition to lodash methods, wrappers have `Array` and `String` methods.\n     *\n     * The wrapper `Array` methods are:\n     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`\n     *\n     * The wrapper `String` methods are:\n     * `replace` and `split`\n     *\n     * The wrapper methods that support shortcut fusion are:\n     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,\n     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,\n     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`\n     *\n     * The chainable wrapper methods are:\n     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,\n     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,\n     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,\n     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,\n     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,\n     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,\n     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,\n     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,\n     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,\n     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,\n     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,\n     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,\n     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,\n     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,\n     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,\n     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,\n     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,\n     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,\n     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,\n     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,\n     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,\n     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,\n     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,\n     * `zipObject`, `zipObjectDeep`, and `zipWith`\n     *\n     * The wrapper methods that are **not** chainable by default are:\n     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,\n     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,\n     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,\n     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,\n     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,\n     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,\n     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,\n     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,\n     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,\n     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,\n     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,\n     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,\n     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,\n     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,\n     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,\n     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,\n     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,\n     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,\n     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,\n     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,\n     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,\n     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,\n     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,\n     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,\n     * `upperFirst`, `value`, and `words`\n     *\n     * @name _\n     * @constructor\n     * @category Seq\n     * @param {*} value The value to wrap in a `lodash` instance.\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var wrapped = _([1, 2, 3]);\n     *\n     * // Returns an unwrapped value.\n     * wrapped.reduce(_.add);\n     * // => 6\n     *\n     * // Returns a wrapped value.\n     * var squares = wrapped.map(square);\n     *\n     * _.isArray(squares);\n     * // => false\n     *\n     * _.isArray(squares.value());\n     * // => true\n     */\n    function lodash(value) {\n      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {\n        if (value instanceof LodashWrapper) {\n          return value;\n        }\n        if (hasOwnProperty.call(value, '__wrapped__')) {\n          return wrapperClone(value);\n        }\n      }\n      return new LodashWrapper(value);\n    }\n\n    /**\n     * The base implementation of `_.create` without support for assigning\n     * properties to the created object.\n     *\n     * @private\n     * @param {Object} proto The object to inherit from.\n     * @returns {Object} Returns the new object.\n     */\n    var baseCreate = (function() {\n      function object() {}\n      return function(proto) {\n        if (!isObject(proto)) {\n          return {};\n        }\n        if (objectCreate) {\n          return objectCreate(proto);\n        }\n        object.prototype = proto;\n        var result = new object;\n        object.prototype = undefined;\n        return result;\n      };\n    }());\n\n    /**\n     * The function whose prototype chain sequence wrappers inherit from.\n     *\n     * @private\n     */\n    function baseLodash() {\n      // No operation performed.\n    }\n\n    /**\n     * The base constructor for creating `lodash` wrapper objects.\n     *\n     * @private\n     * @param {*} value The value to wrap.\n     * @param {boolean} [chainAll] Enable explicit method chain sequences.\n     */\n    function LodashWrapper(value, chainAll) {\n      this.__wrapped__ = value;\n      this.__actions__ = [];\n      this.__chain__ = !!chainAll;\n      this.__index__ = 0;\n      this.__values__ = undefined;\n    }\n\n    /**\n     * By default, the template delimiters used by lodash are like those in\n     * embedded Ruby (ERB). Change the following template settings to use\n     * alternative delimiters.\n     *\n     * @static\n     * @memberOf _\n     * @type {Object}\n     */\n    lodash.templateSettings = {\n\n      /**\n       * Used to detect `data` property values to be HTML-escaped.\n       *\n       * @memberOf _.templateSettings\n       * @type {RegExp}\n       */\n      'escape': reEscape,\n\n      /**\n       * Used to detect code to be evaluated.\n       *\n       * @memberOf _.templateSettings\n       * @type {RegExp}\n       */\n      'evaluate': reEvaluate,\n\n      /**\n       * Used to detect `data` property values to inject.\n       *\n       * @memberOf _.templateSettings\n       * @type {RegExp}\n       */\n      'interpolate': reInterpolate,\n\n      /**\n       * Used to reference the data object in the template text.\n       *\n       * @memberOf _.templateSettings\n       * @type {string}\n       */\n      'variable': '',\n\n      /**\n       * Used to import variables into the compiled template.\n       *\n       * @memberOf _.templateSettings\n       * @type {Object}\n       */\n      'imports': {\n\n        /**\n         * A reference to the `lodash` function.\n         *\n         * @memberOf _.templateSettings.imports\n         * @type {Function}\n         */\n        '_': lodash\n      }\n    };\n\n    // Ensure wrappers are instances of `baseLodash`.\n    lodash.prototype = baseLodash.prototype;\n    lodash.prototype.constructor = lodash;\n\n    LodashWrapper.prototype = baseCreate(baseLodash.prototype);\n    LodashWrapper.prototype.constructor = LodashWrapper;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.\n     *\n     * @private\n     * @constructor\n     * @param {*} value The value to wrap.\n     */\n    function LazyWrapper(value) {\n      this.__wrapped__ = value;\n      this.__actions__ = [];\n      this.__dir__ = 1;\n      this.__filtered__ = false;\n      this.__iteratees__ = [];\n      this.__takeCount__ = MAX_ARRAY_LENGTH;\n      this.__views__ = [];\n    }\n\n    /**\n     * Creates a clone of the lazy wrapper object.\n     *\n     * @private\n     * @name clone\n     * @memberOf LazyWrapper\n     * @returns {Object} Returns the cloned `LazyWrapper` object.\n     */\n    function lazyClone() {\n      var result = new LazyWrapper(this.__wrapped__);\n      result.__actions__ = copyArray(this.__actions__);\n      result.__dir__ = this.__dir__;\n      result.__filtered__ = this.__filtered__;\n      result.__iteratees__ = copyArray(this.__iteratees__);\n      result.__takeCount__ = this.__takeCount__;\n      result.__views__ = copyArray(this.__views__);\n      return result;\n    }\n\n    /**\n     * Reverses the direction of lazy iteration.\n     *\n     * @private\n     * @name reverse\n     * @memberOf LazyWrapper\n     * @returns {Object} Returns the new reversed `LazyWrapper` object.\n     */\n    function lazyReverse() {\n      if (this.__filtered__) {\n        var result = new LazyWrapper(this);\n        result.__dir__ = -1;\n        result.__filtered__ = true;\n      } else {\n        result = this.clone();\n        result.__dir__ *= -1;\n      }\n      return result;\n    }\n\n    /**\n     * Extracts the unwrapped value from its lazy wrapper.\n     *\n     * @private\n     * @name value\n     * @memberOf LazyWrapper\n     * @returns {*} Returns the unwrapped value.\n     */\n    function lazyValue() {\n      var array = this.__wrapped__.value(),\n          dir = this.__dir__,\n          isArr = isArray(array),\n          isRight = dir < 0,\n          arrLength = isArr ? array.length : 0,\n          view = getView(0, arrLength, this.__views__),\n          start = view.start,\n          end = view.end,\n          length = end - start,\n          index = isRight ? end : (start - 1),\n          iteratees = this.__iteratees__,\n          iterLength = iteratees.length,\n          resIndex = 0,\n          takeCount = nativeMin(length, this.__takeCount__);\n\n      if (!isArr || arrLength < LARGE_ARRAY_SIZE ||\n          (arrLength == length && takeCount == length)) {\n        return baseWrapperValue(array, this.__actions__);\n      }\n      var result = [];\n\n      outer:\n      while (length-- && resIndex < takeCount) {\n        index += dir;\n\n        var iterIndex = -1,\n            value = array[index];\n\n        while (++iterIndex < iterLength) {\n          var data = iteratees[iterIndex],\n              iteratee = data.iteratee,\n              type = data.type,\n              computed = iteratee(value);\n\n          if (type == LAZY_MAP_FLAG) {\n            value = computed;\n          } else if (!computed) {\n            if (type == LAZY_FILTER_FLAG) {\n              continue outer;\n            } else {\n              break outer;\n            }\n          }\n        }\n        result[resIndex++] = value;\n      }\n      return result;\n    }\n\n    // Ensure `LazyWrapper` is an instance of `baseLodash`.\n    LazyWrapper.prototype = baseCreate(baseLodash.prototype);\n    LazyWrapper.prototype.constructor = LazyWrapper;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a hash object.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [entries] The key-value pairs to cache.\n     */\n    function Hash(entries) {\n      var index = -1,\n          length = entries == null ? 0 : entries.length;\n\n      this.clear();\n      while (++index < length) {\n        var entry = entries[index];\n        this.set(entry[0], entry[1]);\n      }\n    }\n\n    /**\n     * Removes all key-value entries from the hash.\n     *\n     * @private\n     * @name clear\n     * @memberOf Hash\n     */\n    function hashClear() {\n      this.__data__ = nativeCreate ? nativeCreate(null) : {};\n      this.size = 0;\n    }\n\n    /**\n     * Removes `key` and its value from the hash.\n     *\n     * @private\n     * @name delete\n     * @memberOf Hash\n     * @param {Object} hash The hash to modify.\n     * @param {string} key The key of the value to remove.\n     * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n     */\n    function hashDelete(key) {\n      var result = this.has(key) && delete this.__data__[key];\n      this.size -= result ? 1 : 0;\n      return result;\n    }\n\n    /**\n     * Gets the hash value for `key`.\n     *\n     * @private\n     * @name get\n     * @memberOf Hash\n     * @param {string} key The key of the value to get.\n     * @returns {*} Returns the entry value.\n     */\n    function hashGet(key) {\n      var data = this.__data__;\n      if (nativeCreate) {\n        var result = data[key];\n        return result === HASH_UNDEFINED ? undefined : result;\n      }\n      return hasOwnProperty.call(data, key) ? data[key] : undefined;\n    }\n\n    /**\n     * Checks if a hash value for `key` exists.\n     *\n     * @private\n     * @name has\n     * @memberOf Hash\n     * @param {string} key The key of the entry to check.\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n     */\n    function hashHas(key) {\n      var data = this.__data__;\n      return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n    }\n\n    /**\n     * Sets the hash `key` to `value`.\n     *\n     * @private\n     * @name set\n     * @memberOf Hash\n     * @param {string} key The key of the value to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns the hash instance.\n     */\n    function hashSet(key, value) {\n      var data = this.__data__;\n      this.size += this.has(key) ? 0 : 1;\n      data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n      return this;\n    }\n\n    // Add methods to `Hash`.\n    Hash.prototype.clear = hashClear;\n    Hash.prototype['delete'] = hashDelete;\n    Hash.prototype.get = hashGet;\n    Hash.prototype.has = hashHas;\n    Hash.prototype.set = hashSet;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates an list cache object.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [entries] The key-value pairs to cache.\n     */\n    function ListCache(entries) {\n      var index = -1,\n          length = entries == null ? 0 : entries.length;\n\n      this.clear();\n      while (++index < length) {\n        var entry = entries[index];\n        this.set(entry[0], entry[1]);\n      }\n    }\n\n    /**\n     * Removes all key-value entries from the list cache.\n     *\n     * @private\n     * @name clear\n     * @memberOf ListCache\n     */\n    function listCacheClear() {\n      this.__data__ = [];\n      this.size = 0;\n    }\n\n    /**\n     * Removes `key` and its value from the list cache.\n     *\n     * @private\n     * @name delete\n     * @memberOf ListCache\n     * @param {string} key The key of the value to remove.\n     * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n     */\n    function listCacheDelete(key) {\n      var data = this.__data__,\n          index = assocIndexOf(data, key);\n\n      if (index < 0) {\n        return false;\n      }\n      var lastIndex = data.length - 1;\n      if (index == lastIndex) {\n        data.pop();\n      } else {\n        splice.call(data, index, 1);\n      }\n      --this.size;\n      return true;\n    }\n\n    /**\n     * Gets the list cache value for `key`.\n     *\n     * @private\n     * @name get\n     * @memberOf ListCache\n     * @param {string} key The key of the value to get.\n     * @returns {*} Returns the entry value.\n     */\n    function listCacheGet(key) {\n      var data = this.__data__,\n          index = assocIndexOf(data, key);\n\n      return index < 0 ? undefined : data[index][1];\n    }\n\n    /**\n     * Checks if a list cache value for `key` exists.\n     *\n     * @private\n     * @name has\n     * @memberOf ListCache\n     * @param {string} key The key of the entry to check.\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n     */\n    function listCacheHas(key) {\n      return assocIndexOf(this.__data__, key) > -1;\n    }\n\n    /**\n     * Sets the list cache `key` to `value`.\n     *\n     * @private\n     * @name set\n     * @memberOf ListCache\n     * @param {string} key The key of the value to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns the list cache instance.\n     */\n    function listCacheSet(key, value) {\n      var data = this.__data__,\n          index = assocIndexOf(data, key);\n\n      if (index < 0) {\n        ++this.size;\n        data.push([key, value]);\n      } else {\n        data[index][1] = value;\n      }\n      return this;\n    }\n\n    // Add methods to `ListCache`.\n    ListCache.prototype.clear = listCacheClear;\n    ListCache.prototype['delete'] = listCacheDelete;\n    ListCache.prototype.get = listCacheGet;\n    ListCache.prototype.has = listCacheHas;\n    ListCache.prototype.set = listCacheSet;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a map cache object to store key-value pairs.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [entries] The key-value pairs to cache.\n     */\n    function MapCache(entries) {\n      var index = -1,\n          length = entries == null ? 0 : entries.length;\n\n      this.clear();\n      while (++index < length) {\n        var entry = entries[index];\n        this.set(entry[0], entry[1]);\n      }\n    }\n\n    /**\n     * Removes all key-value entries from the map.\n     *\n     * @private\n     * @name clear\n     * @memberOf MapCache\n     */\n    function mapCacheClear() {\n      this.size = 0;\n      this.__data__ = {\n        'hash': new Hash,\n        'map': new (Map || ListCache),\n        'string': new Hash\n      };\n    }\n\n    /**\n     * Removes `key` and its value from the map.\n     *\n     * @private\n     * @name delete\n     * @memberOf MapCache\n     * @param {string} key The key of the value to remove.\n     * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n     */\n    function mapCacheDelete(key) {\n      var result = getMapData(this, key)['delete'](key);\n      this.size -= result ? 1 : 0;\n      return result;\n    }\n\n    /**\n     * Gets the map value for `key`.\n     *\n     * @private\n     * @name get\n     * @memberOf MapCache\n     * @param {string} key The key of the value to get.\n     * @returns {*} Returns the entry value.\n     */\n    function mapCacheGet(key) {\n      return getMapData(this, key).get(key);\n    }\n\n    /**\n     * Checks if a map value for `key` exists.\n     *\n     * @private\n     * @name has\n     * @memberOf MapCache\n     * @param {string} key The key of the entry to check.\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n     */\n    function mapCacheHas(key) {\n      return getMapData(this, key).has(key);\n    }\n\n    /**\n     * Sets the map `key` to `value`.\n     *\n     * @private\n     * @name set\n     * @memberOf MapCache\n     * @param {string} key The key of the value to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns the map cache instance.\n     */\n    function mapCacheSet(key, value) {\n      var data = getMapData(this, key),\n          size = data.size;\n\n      data.set(key, value);\n      this.size += data.size == size ? 0 : 1;\n      return this;\n    }\n\n    // Add methods to `MapCache`.\n    MapCache.prototype.clear = mapCacheClear;\n    MapCache.prototype['delete'] = mapCacheDelete;\n    MapCache.prototype.get = mapCacheGet;\n    MapCache.prototype.has = mapCacheHas;\n    MapCache.prototype.set = mapCacheSet;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     *\n     * Creates an array cache object to store unique values.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [values] The values to cache.\n     */\n    function SetCache(values) {\n      var index = -1,\n          length = values == null ? 0 : values.length;\n\n      this.__data__ = new MapCache;\n      while (++index < length) {\n        this.add(values[index]);\n      }\n    }\n\n    /**\n     * Adds `value` to the array cache.\n     *\n     * @private\n     * @name add\n     * @memberOf SetCache\n     * @alias push\n     * @param {*} value The value to cache.\n     * @returns {Object} Returns the cache instance.\n     */\n    function setCacheAdd(value) {\n      this.__data__.set(value, HASH_UNDEFINED);\n      return this;\n    }\n\n    /**\n     * Checks if `value` is in the array cache.\n     *\n     * @private\n     * @name has\n     * @memberOf SetCache\n     * @param {*} value The value to search for.\n     * @returns {number} Returns `true` if `value` is found, else `false`.\n     */\n    function setCacheHas(value) {\n      return this.__data__.has(value);\n    }\n\n    // Add methods to `SetCache`.\n    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\n    SetCache.prototype.has = setCacheHas;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a stack cache object to store key-value pairs.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [entries] The key-value pairs to cache.\n     */\n    function Stack(entries) {\n      var data = this.__data__ = new ListCache(entries);\n      this.size = data.size;\n    }\n\n    /**\n     * Removes all key-value entries from the stack.\n     *\n     * @private\n     * @name clear\n     * @memberOf Stack\n     */\n    function stackClear() {\n      this.__data__ = new ListCache;\n      this.size = 0;\n    }\n\n    /**\n     * Removes `key` and its value from the stack.\n     *\n     * @private\n     * @name delete\n     * @memberOf Stack\n     * @param {string} key The key of the value to remove.\n     * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n     */\n    function stackDelete(key) {\n      var data = this.__data__,\n          result = data['delete'](key);\n\n      this.size = data.size;\n      return result;\n    }\n\n    /**\n     * Gets the stack value for `key`.\n     *\n     * @private\n     * @name get\n     * @memberOf Stack\n     * @param {string} key The key of the value to get.\n     * @returns {*} Returns the entry value.\n     */\n    function stackGet(key) {\n      return this.__data__.get(key);\n    }\n\n    /**\n     * Checks if a stack value for `key` exists.\n     *\n     * @private\n     * @name has\n     * @memberOf Stack\n     * @param {string} key The key of the entry to check.\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n     */\n    function stackHas(key) {\n      return this.__data__.has(key);\n    }\n\n    /**\n     * Sets the stack `key` to `value`.\n     *\n     * @private\n     * @name set\n     * @memberOf Stack\n     * @param {string} key The key of the value to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns the stack cache instance.\n     */\n    function stackSet(key, value) {\n      var data = this.__data__;\n      if (data instanceof ListCache) {\n        var pairs = data.__data__;\n        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n          pairs.push([key, value]);\n          this.size = ++data.size;\n          return this;\n        }\n        data = this.__data__ = new MapCache(pairs);\n      }\n      data.set(key, value);\n      this.size = data.size;\n      return this;\n    }\n\n    // Add methods to `Stack`.\n    Stack.prototype.clear = stackClear;\n    Stack.prototype['delete'] = stackDelete;\n    Stack.prototype.get = stackGet;\n    Stack.prototype.has = stackHas;\n    Stack.prototype.set = stackSet;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates an array of the enumerable property names of the array-like `value`.\n     *\n     * @private\n     * @param {*} value The value to query.\n     * @param {boolean} inherited Specify returning inherited property names.\n     * @returns {Array} Returns the array of property names.\n     */\n    function arrayLikeKeys(value, inherited) {\n      var isArr = isArray(value),\n          isArg = !isArr && isArguments(value),\n          isBuff = !isArr && !isArg && isBuffer(value),\n          isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n          skipIndexes = isArr || isArg || isBuff || isType,\n          result = skipIndexes ? baseTimes(value.length, String) : [],\n          length = result.length;\n\n      for (var key in value) {\n        if ((inherited || hasOwnProperty.call(value, key)) &&\n            !(skipIndexes && (\n               // Safari 9 has enumerable `arguments.length` in strict mode.\n               key == 'length' ||\n               // Node.js 0.10 has enumerable non-index properties on buffers.\n               (isBuff && (key == 'offset' || key == 'parent')) ||\n               // PhantomJS 2 has enumerable non-index properties on typed arrays.\n               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n               // Skip index properties.\n               isIndex(key, length)\n            ))) {\n          result.push(key);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * A specialized version of `_.sample` for arrays.\n     *\n     * @private\n     * @param {Array} array The array to sample.\n     * @returns {*} Returns the random element.\n     */\n    function arraySample(array) {\n      var length = array.length;\n      return length ? array[baseRandom(0, length - 1)] : undefined;\n    }\n\n    /**\n     * A specialized version of `_.sampleSize` for arrays.\n     *\n     * @private\n     * @param {Array} array The array to sample.\n     * @param {number} n The number of elements to sample.\n     * @returns {Array} Returns the random elements.\n     */\n    function arraySampleSize(array, n) {\n      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));\n    }\n\n    /**\n     * A specialized version of `_.shuffle` for arrays.\n     *\n     * @private\n     * @param {Array} array The array to shuffle.\n     * @returns {Array} Returns the new shuffled array.\n     */\n    function arrayShuffle(array) {\n      return shuffleSelf(copyArray(array));\n    }\n\n    /**\n     * Used by `_.defaults` to customize its `_.assignIn` use.\n     *\n     * @private\n     * @param {*} objValue The destination value.\n     * @param {*} srcValue The source value.\n     * @param {string} key The key of the property to assign.\n     * @param {Object} object The parent object of `objValue`.\n     * @returns {*} Returns the value to assign.\n     */\n    function assignInDefaults(objValue, srcValue, key, object) {\n      if (objValue === undefined ||\n          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {\n        return srcValue;\n      }\n      return objValue;\n    }\n\n    /**\n     * This function is like `assignValue` except that it doesn't assign\n     * `undefined` values.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {string} key The key of the property to assign.\n     * @param {*} value The value to assign.\n     */\n    function assignMergeValue(object, key, value) {\n      if ((value !== undefined && !eq(object[key], value)) ||\n          (value === undefined && !(key in object))) {\n        baseAssignValue(object, key, value);\n      }\n    }\n\n    /**\n     * Assigns `value` to `key` of `object` if the existing value is not equivalent\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {string} key The key of the property to assign.\n     * @param {*} value The value to assign.\n     */\n    function assignValue(object, key, value) {\n      var objValue = object[key];\n      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n          (value === undefined && !(key in object))) {\n        baseAssignValue(object, key, value);\n      }\n    }\n\n    /**\n     * Gets the index at which the `key` is found in `array` of key-value pairs.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {*} key The key to search for.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     */\n    function assocIndexOf(array, key) {\n      var length = array.length;\n      while (length--) {\n        if (eq(array[length][0], key)) {\n          return length;\n        }\n      }\n      return -1;\n    }\n\n    /**\n     * Aggregates elements of `collection` on `accumulator` with keys transformed\n     * by `iteratee` and values set by `setter`.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} setter The function to set `accumulator` values.\n     * @param {Function} iteratee The iteratee to transform keys.\n     * @param {Object} accumulator The initial aggregated object.\n     * @returns {Function} Returns `accumulator`.\n     */\n    function baseAggregator(collection, setter, iteratee, accumulator) {\n      baseEach(collection, function(value, key, collection) {\n        setter(accumulator, value, iteratee(value), collection);\n      });\n      return accumulator;\n    }\n\n    /**\n     * The base implementation of `_.assign` without support for multiple sources\n     * or `customizer` functions.\n     *\n     * @private\n     * @param {Object} object The destination object.\n     * @param {Object} source The source object.\n     * @returns {Object} Returns `object`.\n     */\n    function baseAssign(object, source) {\n      return object && copyObject(source, keys(source), object);\n    }\n\n    /**\n     * The base implementation of `assignValue` and `assignMergeValue` without\n     * value checks.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {string} key The key of the property to assign.\n     * @param {*} value The value to assign.\n     */\n    function baseAssignValue(object, key, value) {\n      if (key == '__proto__' && defineProperty) {\n        defineProperty(object, key, {\n          'configurable': true,\n          'enumerable': true,\n          'value': value,\n          'writable': true\n        });\n      } else {\n        object[key] = value;\n      }\n    }\n\n    /**\n     * The base implementation of `_.at` without support for individual paths.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {string[]} paths The property paths of elements to pick.\n     * @returns {Array} Returns the picked elements.\n     */\n    function baseAt(object, paths) {\n      var index = -1,\n          length = paths.length,\n          result = Array(length),\n          skip = object == null;\n\n      while (++index < length) {\n        result[index] = skip ? undefined : get(object, paths[index]);\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.clamp` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {number} number The number to clamp.\n     * @param {number} [lower] The lower bound.\n     * @param {number} upper The upper bound.\n     * @returns {number} Returns the clamped number.\n     */\n    function baseClamp(number, lower, upper) {\n      if (number === number) {\n        if (upper !== undefined) {\n          number = number <= upper ? number : upper;\n        }\n        if (lower !== undefined) {\n          number = number >= lower ? number : lower;\n        }\n      }\n      return number;\n    }\n\n    /**\n     * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n     * traversed objects.\n     *\n     * @private\n     * @param {*} value The value to clone.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @param {boolean} [isFull] Specify a clone including symbols.\n     * @param {Function} [customizer] The function to customize cloning.\n     * @param {string} [key] The key of `value`.\n     * @param {Object} [object] The parent object of `value`.\n     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n     * @returns {*} Returns the cloned value.\n     */\n    function baseClone(value, isDeep, isFull, customizer, key, object, stack) {\n      var result;\n      if (customizer) {\n        result = object ? customizer(value, key, object, stack) : customizer(value);\n      }\n      if (result !== undefined) {\n        return result;\n      }\n      if (!isObject(value)) {\n        return value;\n      }\n      var isArr = isArray(value);\n      if (isArr) {\n        result = initCloneArray(value);\n        if (!isDeep) {\n          return copyArray(value, result);\n        }\n      } else {\n        var tag = getTag(value),\n            isFunc = tag == funcTag || tag == genTag;\n\n        if (isBuffer(value)) {\n          return cloneBuffer(value, isDeep);\n        }\n        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n          result = initCloneObject(isFunc ? {} : value);\n          if (!isDeep) {\n            return copySymbols(value, baseAssign(result, value));\n          }\n        } else {\n          if (!cloneableTags[tag]) {\n            return object ? value : {};\n          }\n          result = initCloneByTag(value, tag, baseClone, isDeep);\n        }\n      }\n      // Check for circular references and return its corresponding clone.\n      stack || (stack = new Stack);\n      var stacked = stack.get(value);\n      if (stacked) {\n        return stacked;\n      }\n      stack.set(value, result);\n\n      var props = isArr ? undefined : (isFull ? getAllKeys : keys)(value);\n      arrayEach(props || value, function(subValue, key) {\n        if (props) {\n          key = subValue;\n          subValue = value[key];\n        }\n        // Recursively populate clone (susceptible to call stack limits).\n        assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));\n      });\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.conforms` which doesn't clone `source`.\n     *\n     * @private\n     * @param {Object} source The object of property predicates to conform to.\n     * @returns {Function} Returns the new spec function.\n     */\n    function baseConforms(source) {\n      var props = keys(source);\n      return function(object) {\n        return baseConformsTo(object, source, props);\n      };\n    }\n\n    /**\n     * The base implementation of `_.conformsTo` which accepts `props` to check.\n     *\n     * @private\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property predicates to conform to.\n     * @returns {boolean} Returns `true` if `object` conforms, else `false`.\n     */\n    function baseConformsTo(object, source, props) {\n      var length = props.length;\n      if (object == null) {\n        return !length;\n      }\n      object = Object(object);\n      while (length--) {\n        var key = props[length],\n            predicate = source[key],\n            value = object[key];\n\n        if ((value === undefined && !(key in object)) || !predicate(value)) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n    /**\n     * The base implementation of `_.delay` and `_.defer` which accepts `args`\n     * to provide to `func`.\n     *\n     * @private\n     * @param {Function} func The function to delay.\n     * @param {number} wait The number of milliseconds to delay invocation.\n     * @param {Array} args The arguments to provide to `func`.\n     * @returns {number|Object} Returns the timer id or timeout object.\n     */\n    function baseDelay(func, wait, args) {\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      return setTimeout(function() { func.apply(undefined, args); }, wait);\n    }\n\n    /**\n     * The base implementation of methods like `_.difference` without support\n     * for excluding multiple arrays or iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {Array} values The values to exclude.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     */\n    function baseDifference(array, values, iteratee, comparator) {\n      var index = -1,\n          includes = arrayIncludes,\n          isCommon = true,\n          length = array.length,\n          result = [],\n          valuesLength = values.length;\n\n      if (!length) {\n        return result;\n      }\n      if (iteratee) {\n        values = arrayMap(values, baseUnary(iteratee));\n      }\n      if (comparator) {\n        includes = arrayIncludesWith;\n        isCommon = false;\n      }\n      else if (values.length >= LARGE_ARRAY_SIZE) {\n        includes = cacheHas;\n        isCommon = false;\n        values = new SetCache(values);\n      }\n      outer:\n      while (++index < length) {\n        var value = array[index],\n            computed = iteratee == null ? value : iteratee(value);\n\n        value = (comparator || value !== 0) ? value : 0;\n        if (isCommon && computed === computed) {\n          var valuesIndex = valuesLength;\n          while (valuesIndex--) {\n            if (values[valuesIndex] === computed) {\n              continue outer;\n            }\n          }\n          result.push(value);\n        }\n        else if (!includes(values, computed, comparator)) {\n          result.push(value);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.forEach` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Array|Object} Returns `collection`.\n     */\n    var baseEach = createBaseEach(baseForOwn);\n\n    /**\n     * The base implementation of `_.forEachRight` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Array|Object} Returns `collection`.\n     */\n    var baseEachRight = createBaseEach(baseForOwnRight, true);\n\n    /**\n     * The base implementation of `_.every` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} predicate The function invoked per iteration.\n     * @returns {boolean} Returns `true` if all elements pass the predicate check,\n     *  else `false`\n     */\n    function baseEvery(collection, predicate) {\n      var result = true;\n      baseEach(collection, function(value, index, collection) {\n        result = !!predicate(value, index, collection);\n        return result;\n      });\n      return result;\n    }\n\n    /**\n     * The base implementation of methods like `_.max` and `_.min` which accepts a\n     * `comparator` to determine the extremum value.\n     *\n     * @private\n     * @param {Array} array The array to iterate over.\n     * @param {Function} iteratee The iteratee invoked per iteration.\n     * @param {Function} comparator The comparator used to compare values.\n     * @returns {*} Returns the extremum value.\n     */\n    function baseExtremum(array, iteratee, comparator) {\n      var index = -1,\n          length = array.length;\n\n      while (++index < length) {\n        var value = array[index],\n            current = iteratee(value);\n\n        if (current != null && (computed === undefined\n              ? (current === current && !isSymbol(current))\n              : comparator(current, computed)\n            )) {\n          var computed = current,\n              result = value;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.fill` without an iteratee call guard.\n     *\n     * @private\n     * @param {Array} array The array to fill.\n     * @param {*} value The value to fill `array` with.\n     * @param {number} [start=0] The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns `array`.\n     */\n    function baseFill(array, value, start, end) {\n      var length = array.length;\n\n      start = toInteger(start);\n      if (start < 0) {\n        start = -start > length ? 0 : (length + start);\n      }\n      end = (end === undefined || end > length) ? length : toInteger(end);\n      if (end < 0) {\n        end += length;\n      }\n      end = start > end ? 0 : toLength(end);\n      while (start < end) {\n        array[start++] = value;\n      }\n      return array;\n    }\n\n    /**\n     * The base implementation of `_.filter` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} predicate The function invoked per iteration.\n     * @returns {Array} Returns the new filtered array.\n     */\n    function baseFilter(collection, predicate) {\n      var result = [];\n      baseEach(collection, function(value, index, collection) {\n        if (predicate(value, index, collection)) {\n          result.push(value);\n        }\n      });\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.flatten` with support for restricting flattening.\n     *\n     * @private\n     * @param {Array} array The array to flatten.\n     * @param {number} depth The maximum recursion depth.\n     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.\n     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.\n     * @param {Array} [result=[]] The initial result value.\n     * @returns {Array} Returns the new flattened array.\n     */\n    function baseFlatten(array, depth, predicate, isStrict, result) {\n      var index = -1,\n          length = array.length;\n\n      predicate || (predicate = isFlattenable);\n      result || (result = []);\n\n      while (++index < length) {\n        var value = array[index];\n        if (depth > 0 && predicate(value)) {\n          if (depth > 1) {\n            // Recursively flatten arrays (susceptible to call stack limits).\n            baseFlatten(value, depth - 1, predicate, isStrict, result);\n          } else {\n            arrayPush(result, value);\n          }\n        } else if (!isStrict) {\n          result[result.length] = value;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `baseForOwn` which iterates over `object`\n     * properties returned by `keysFunc` and invokes `iteratee` for each property.\n     * Iteratee functions may exit iteration early by explicitly returning `false`.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @param {Function} keysFunc The function to get the keys of `object`.\n     * @returns {Object} Returns `object`.\n     */\n    var baseFor = createBaseFor();\n\n    /**\n     * This function is like `baseFor` except that it iterates over properties\n     * in the opposite order.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @param {Function} keysFunc The function to get the keys of `object`.\n     * @returns {Object} Returns `object`.\n     */\n    var baseForRight = createBaseFor(true);\n\n    /**\n     * The base implementation of `_.forOwn` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     */\n    function baseForOwn(object, iteratee) {\n      return object && baseFor(object, iteratee, keys);\n    }\n\n    /**\n     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     */\n    function baseForOwnRight(object, iteratee) {\n      return object && baseForRight(object, iteratee, keys);\n    }\n\n    /**\n     * The base implementation of `_.functions` which creates an array of\n     * `object` function property names filtered from `props`.\n     *\n     * @private\n     * @param {Object} object The object to inspect.\n     * @param {Array} props The property names to filter.\n     * @returns {Array} Returns the function names.\n     */\n    function baseFunctions(object, props) {\n      return arrayFilter(props, function(key) {\n        return isFunction(object[key]);\n      });\n    }\n\n    /**\n     * The base implementation of `_.get` without support for default values.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the property to get.\n     * @returns {*} Returns the resolved value.\n     */\n    function baseGet(object, path) {\n      path = isKey(path, object) ? [path] : castPath(path);\n\n      var index = 0,\n          length = path.length;\n\n      while (object != null && index < length) {\n        object = object[toKey(path[index++])];\n      }\n      return (index && index == length) ? object : undefined;\n    }\n\n    /**\n     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n     * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n     * symbols of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Function} keysFunc The function to get the keys of `object`.\n     * @param {Function} symbolsFunc The function to get the symbols of `object`.\n     * @returns {Array} Returns the array of property names and symbols.\n     */\n    function baseGetAllKeys(object, keysFunc, symbolsFunc) {\n      var result = keysFunc(object);\n      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n    }\n\n    /**\n     * The base implementation of `getTag` without fallbacks for buggy environments.\n     *\n     * @private\n     * @param {*} value The value to query.\n     * @returns {string} Returns the `toStringTag`.\n     */\n    function baseGetTag(value) {\n      if (value == null) {\n        return value === undefined ? undefinedTag : nullTag;\n      }\n      value = Object(value);\n      return (symToStringTag && symToStringTag in value)\n        ? getRawTag(value)\n        : objectToString(value);\n    }\n\n    /**\n     * The base implementation of `_.gt` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is greater than `other`,\n     *  else `false`.\n     */\n    function baseGt(value, other) {\n      return value > other;\n    }\n\n    /**\n     * The base implementation of `_.has` without support for deep paths.\n     *\n     * @private\n     * @param {Object} [object] The object to query.\n     * @param {Array|string} key The key to check.\n     * @returns {boolean} Returns `true` if `key` exists, else `false`.\n     */\n    function baseHas(object, key) {\n      return object != null && hasOwnProperty.call(object, key);\n    }\n\n    /**\n     * The base implementation of `_.hasIn` without support for deep paths.\n     *\n     * @private\n     * @param {Object} [object] The object to query.\n     * @param {Array|string} key The key to check.\n     * @returns {boolean} Returns `true` if `key` exists, else `false`.\n     */\n    function baseHasIn(object, key) {\n      return object != null && key in Object(object);\n    }\n\n    /**\n     * The base implementation of `_.inRange` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {number} number The number to check.\n     * @param {number} start The start of the range.\n     * @param {number} end The end of the range.\n     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.\n     */\n    function baseInRange(number, start, end) {\n      return number >= nativeMin(start, end) && number < nativeMax(start, end);\n    }\n\n    /**\n     * The base implementation of methods like `_.intersection`, without support\n     * for iteratee shorthands, that accepts an array of arrays to inspect.\n     *\n     * @private\n     * @param {Array} arrays The arrays to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of shared values.\n     */\n    function baseIntersection(arrays, iteratee, comparator) {\n      var includes = comparator ? arrayIncludesWith : arrayIncludes,\n          length = arrays[0].length,\n          othLength = arrays.length,\n          othIndex = othLength,\n          caches = Array(othLength),\n          maxLength = Infinity,\n          result = [];\n\n      while (othIndex--) {\n        var array = arrays[othIndex];\n        if (othIndex && iteratee) {\n          array = arrayMap(array, baseUnary(iteratee));\n        }\n        maxLength = nativeMin(array.length, maxLength);\n        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))\n          ? new SetCache(othIndex && array)\n          : undefined;\n      }\n      array = arrays[0];\n\n      var index = -1,\n          seen = caches[0];\n\n      outer:\n      while (++index < length && result.length < maxLength) {\n        var value = array[index],\n            computed = iteratee ? iteratee(value) : value;\n\n        value = (comparator || value !== 0) ? value : 0;\n        if (!(seen\n              ? cacheHas(seen, computed)\n              : includes(result, computed, comparator)\n            )) {\n          othIndex = othLength;\n          while (--othIndex) {\n            var cache = caches[othIndex];\n            if (!(cache\n                  ? cacheHas(cache, computed)\n                  : includes(arrays[othIndex], computed, comparator))\n                ) {\n              continue outer;\n            }\n          }\n          if (seen) {\n            seen.push(computed);\n          }\n          result.push(value);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.invert` and `_.invertBy` which inverts\n     * `object` with values transformed by `iteratee` and set by `setter`.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} setter The function to set `accumulator` values.\n     * @param {Function} iteratee The iteratee to transform values.\n     * @param {Object} accumulator The initial inverted object.\n     * @returns {Function} Returns `accumulator`.\n     */\n    function baseInverter(object, setter, iteratee, accumulator) {\n      baseForOwn(object, function(value, key, object) {\n        setter(accumulator, iteratee(value), key, object);\n      });\n      return accumulator;\n    }\n\n    /**\n     * The base implementation of `_.invoke` without support for individual\n     * method arguments.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the method to invoke.\n     * @param {Array} args The arguments to invoke the method with.\n     * @returns {*} Returns the result of the invoked method.\n     */\n    function baseInvoke(object, path, args) {\n      if (!isKey(path, object)) {\n        path = castPath(path);\n        object = parent(object, path);\n        path = last(path);\n      }\n      var func = object == null ? object : object[toKey(path)];\n      return func == null ? undefined : apply(func, object, args);\n    }\n\n    /**\n     * The base implementation of `_.isArguments`.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n     */\n    function baseIsArguments(value) {\n      return isObjectLike(value) && baseGetTag(value) == argsTag;\n    }\n\n    /**\n     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.\n     */\n    function baseIsArrayBuffer(value) {\n      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;\n    }\n\n    /**\n     * The base implementation of `_.isDate` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.\n     */\n    function baseIsDate(value) {\n      return isObjectLike(value) && baseGetTag(value) == dateTag;\n    }\n\n    /**\n     * The base implementation of `_.isEqual` which supports partial comparisons\n     * and tracks traversed objects.\n     *\n     * @private\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @param {Function} [customizer] The function to customize comparisons.\n     * @param {boolean} [bitmask] The bitmask of comparison flags.\n     *  The bitmask may be composed of the following flags:\n     *     1 - Unordered comparison\n     *     2 - Partial comparison\n     * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n     */\n    function baseIsEqual(value, other, customizer, bitmask, stack) {\n      if (value === other) {\n        return true;\n      }\n      if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {\n        return value !== value && other !== other;\n      }\n      return baseIsEqualDeep(value, other, baseIsEqual, customizer, bitmask, stack);\n    }\n\n    /**\n     * A specialized version of `baseIsEqual` for arrays and objects which performs\n     * deep comparisons and tracks traversed objects enabling objects with circular\n     * references to be compared.\n     *\n     * @private\n     * @param {Object} object The object to compare.\n     * @param {Object} other The other object to compare.\n     * @param {Function} equalFunc The function to determine equivalents of values.\n     * @param {Function} [customizer] The function to customize comparisons.\n     * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual`\n     *  for more details.\n     * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n     */\n    function baseIsEqualDeep(object, other, equalFunc, customizer, bitmask, stack) {\n      var objIsArr = isArray(object),\n          othIsArr = isArray(other),\n          objTag = arrayTag,\n          othTag = arrayTag;\n\n      if (!objIsArr) {\n        objTag = getTag(object);\n        objTag = objTag == argsTag ? objectTag : objTag;\n      }\n      if (!othIsArr) {\n        othTag = getTag(other);\n        othTag = othTag == argsTag ? objectTag : othTag;\n      }\n      var objIsObj = objTag == objectTag,\n          othIsObj = othTag == objectTag,\n          isSameTag = objTag == othTag;\n\n      if (isSameTag && isBuffer(object)) {\n        if (!isBuffer(other)) {\n          return false;\n        }\n        objIsArr = true;\n        objIsObj = false;\n      }\n      if (isSameTag && !objIsObj) {\n        stack || (stack = new Stack);\n        return (objIsArr || isTypedArray(object))\n          ? equalArrays(object, other, equalFunc, customizer, bitmask, stack)\n          : equalByTag(object, other, objTag, equalFunc, customizer, bitmask, stack);\n      }\n      if (!(bitmask & PARTIAL_COMPARE_FLAG)) {\n        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n        if (objIsWrapped || othIsWrapped) {\n          var objUnwrapped = objIsWrapped ? object.value() : object,\n              othUnwrapped = othIsWrapped ? other.value() : other;\n\n          stack || (stack = new Stack);\n          return equalFunc(objUnwrapped, othUnwrapped, customizer, bitmask, stack);\n        }\n      }\n      if (!isSameTag) {\n        return false;\n      }\n      stack || (stack = new Stack);\n      return equalObjects(object, other, equalFunc, customizer, bitmask, stack);\n    }\n\n    /**\n     * The base implementation of `_.isMap` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a map, else `false`.\n     */\n    function baseIsMap(value) {\n      return isObjectLike(value) && getTag(value) == mapTag;\n    }\n\n    /**\n     * The base implementation of `_.isMatch` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property values to match.\n     * @param {Array} matchData The property names, values, and compare flags to match.\n     * @param {Function} [customizer] The function to customize comparisons.\n     * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n     */\n    function baseIsMatch(object, source, matchData, customizer) {\n      var index = matchData.length,\n          length = index,\n          noCustomizer = !customizer;\n\n      if (object == null) {\n        return !length;\n      }\n      object = Object(object);\n      while (index--) {\n        var data = matchData[index];\n        if ((noCustomizer && data[2])\n              ? data[1] !== object[data[0]]\n              : !(data[0] in object)\n            ) {\n          return false;\n        }\n      }\n      while (++index < length) {\n        data = matchData[index];\n        var key = data[0],\n            objValue = object[key],\n            srcValue = data[1];\n\n        if (noCustomizer && data[2]) {\n          if (objValue === undefined && !(key in object)) {\n            return false;\n          }\n        } else {\n          var stack = new Stack;\n          if (customizer) {\n            var result = customizer(objValue, srcValue, key, object, source, stack);\n          }\n          if (!(result === undefined\n                ? baseIsEqual(srcValue, objValue, customizer, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG, stack)\n                : result\n              )) {\n            return false;\n          }\n        }\n      }\n      return true;\n    }\n\n    /**\n     * The base implementation of `_.isNative` without bad shim checks.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a native function,\n     *  else `false`.\n     */\n    function baseIsNative(value) {\n      if (!isObject(value) || isMasked(value)) {\n        return false;\n      }\n      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n      return pattern.test(toSource(value));\n    }\n\n    /**\n     * The base implementation of `_.isRegExp` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.\n     */\n    function baseIsRegExp(value) {\n      return isObjectLike(value) && baseGetTag(value) == regexpTag;\n    }\n\n    /**\n     * The base implementation of `_.isSet` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n     */\n    function baseIsSet(value) {\n      return isObjectLike(value) && getTag(value) == setTag;\n    }\n\n    /**\n     * The base implementation of `_.isTypedArray` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n     */\n    function baseIsTypedArray(value) {\n      return isObjectLike(value) &&\n        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n    }\n\n    /**\n     * The base implementation of `_.iteratee`.\n     *\n     * @private\n     * @param {*} [value=_.identity] The value to convert to an iteratee.\n     * @returns {Function} Returns the iteratee.\n     */\n    function baseIteratee(value) {\n      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.\n      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.\n      if (typeof value == 'function') {\n        return value;\n      }\n      if (value == null) {\n        return identity;\n      }\n      if (typeof value == 'object') {\n        return isArray(value)\n          ? baseMatchesProperty(value[0], value[1])\n          : baseMatches(value);\n      }\n      return property(value);\n    }\n\n    /**\n     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     */\n    function baseKeys(object) {\n      if (!isPrototype(object)) {\n        return nativeKeys(object);\n      }\n      var result = [];\n      for (var key in Object(object)) {\n        if (hasOwnProperty.call(object, key) && key != 'constructor') {\n          result.push(key);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     */\n    function baseKeysIn(object) {\n      if (!isObject(object)) {\n        return nativeKeysIn(object);\n      }\n      var isProto = isPrototype(object),\n          result = [];\n\n      for (var key in object) {\n        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {\n          result.push(key);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.lt` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is less than `other`,\n     *  else `false`.\n     */\n    function baseLt(value, other) {\n      return value < other;\n    }\n\n    /**\n     * The base implementation of `_.map` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Array} Returns the new mapped array.\n     */\n    function baseMap(collection, iteratee) {\n      var index = -1,\n          result = isArrayLike(collection) ? Array(collection.length) : [];\n\n      baseEach(collection, function(value, key, collection) {\n        result[++index] = iteratee(value, key, collection);\n      });\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.matches` which doesn't clone `source`.\n     *\n     * @private\n     * @param {Object} source The object of property values to match.\n     * @returns {Function} Returns the new spec function.\n     */\n    function baseMatches(source) {\n      var matchData = getMatchData(source);\n      if (matchData.length == 1 && matchData[0][2]) {\n        return matchesStrictComparable(matchData[0][0], matchData[0][1]);\n      }\n      return function(object) {\n        return object === source || baseIsMatch(object, source, matchData);\n      };\n    }\n\n    /**\n     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.\n     *\n     * @private\n     * @param {string} path The path of the property to get.\n     * @param {*} srcValue The value to match.\n     * @returns {Function} Returns the new spec function.\n     */\n    function baseMatchesProperty(path, srcValue) {\n      if (isKey(path) && isStrictComparable(srcValue)) {\n        return matchesStrictComparable(toKey(path), srcValue);\n      }\n      return function(object) {\n        var objValue = get(object, path);\n        return (objValue === undefined && objValue === srcValue)\n          ? hasIn(object, path)\n          : baseIsEqual(srcValue, objValue, undefined, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG);\n      };\n    }\n\n    /**\n     * The base implementation of `_.merge` without support for multiple sources.\n     *\n     * @private\n     * @param {Object} object The destination object.\n     * @param {Object} source The source object.\n     * @param {number} srcIndex The index of `source`.\n     * @param {Function} [customizer] The function to customize merged values.\n     * @param {Object} [stack] Tracks traversed source values and their merged\n     *  counterparts.\n     */\n    function baseMerge(object, source, srcIndex, customizer, stack) {\n      if (object === source) {\n        return;\n      }\n      baseFor(source, function(srcValue, key) {\n        if (isObject(srcValue)) {\n          stack || (stack = new Stack);\n          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);\n        }\n        else {\n          var newValue = customizer\n            ? customizer(object[key], srcValue, (key + ''), object, source, stack)\n            : undefined;\n\n          if (newValue === undefined) {\n            newValue = srcValue;\n          }\n          assignMergeValue(object, key, newValue);\n        }\n      }, keysIn);\n    }\n\n    /**\n     * A specialized version of `baseMerge` for arrays and objects which performs\n     * deep merges and tracks traversed objects enabling objects with circular\n     * references to be merged.\n     *\n     * @private\n     * @param {Object} object The destination object.\n     * @param {Object} source The source object.\n     * @param {string} key The key of the value to merge.\n     * @param {number} srcIndex The index of `source`.\n     * @param {Function} mergeFunc The function to merge values.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @param {Object} [stack] Tracks traversed source values and their merged\n     *  counterparts.\n     */\n    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {\n      var objValue = object[key],\n          srcValue = source[key],\n          stacked = stack.get(srcValue);\n\n      if (stacked) {\n        assignMergeValue(object, key, stacked);\n        return;\n      }\n      var newValue = customizer\n        ? customizer(objValue, srcValue, (key + ''), object, source, stack)\n        : undefined;\n\n      var isCommon = newValue === undefined;\n\n      if (isCommon) {\n        var isArr = isArray(srcValue),\n            isBuff = !isArr && isBuffer(srcValue),\n            isTyped = !isArr && !isBuff && isTypedArray(srcValue);\n\n        newValue = srcValue;\n        if (isArr || isBuff || isTyped) {\n          if (isArray(objValue)) {\n            newValue = objValue;\n          }\n          else if (isArrayLikeObject(objValue)) {\n            newValue = copyArray(objValue);\n          }\n          else if (isBuff) {\n            isCommon = false;\n            newValue = cloneBuffer(srcValue, true);\n          }\n          else if (isTyped) {\n            isCommon = false;\n            newValue = cloneTypedArray(srcValue, true);\n          }\n          else {\n            newValue = [];\n          }\n        }\n        else if (isPlainObject(srcValue) || isArguments(srcValue)) {\n          newValue = objValue;\n          if (isArguments(objValue)) {\n            newValue = toPlainObject(objValue);\n          }\n          else if (!isObject(objValue) || (srcIndex && isFunction(objValue))) {\n            newValue = initCloneObject(srcValue);\n          }\n        }\n        else {\n          isCommon = false;\n        }\n      }\n      if (isCommon) {\n        // Recursively merge objects and arrays (susceptible to call stack limits).\n        stack.set(srcValue, newValue);\n        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);\n        stack['delete'](srcValue);\n      }\n      assignMergeValue(object, key, newValue);\n    }\n\n    /**\n     * The base implementation of `_.nth` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {Array} array The array to query.\n     * @param {number} n The index of the element to return.\n     * @returns {*} Returns the nth element of `array`.\n     */\n    function baseNth(array, n) {\n      var length = array.length;\n      if (!length) {\n        return;\n      }\n      n += n < 0 ? length : 0;\n      return isIndex(n, length) ? array[n] : undefined;\n    }\n\n    /**\n     * The base implementation of `_.orderBy` without param guards.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.\n     * @param {string[]} orders The sort orders of `iteratees`.\n     * @returns {Array} Returns the new sorted array.\n     */\n    function baseOrderBy(collection, iteratees, orders) {\n      var index = -1;\n      iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(getIteratee()));\n\n      var result = baseMap(collection, function(value, key, collection) {\n        var criteria = arrayMap(iteratees, function(iteratee) {\n          return iteratee(value);\n        });\n        return { 'criteria': criteria, 'index': ++index, 'value': value };\n      });\n\n      return baseSortBy(result, function(object, other) {\n        return compareMultiple(object, other, orders);\n      });\n    }\n\n    /**\n     * The base implementation of `_.pick` without support for individual\n     * property identifiers.\n     *\n     * @private\n     * @param {Object} object The source object.\n     * @param {string[]} props The property identifiers to pick.\n     * @returns {Object} Returns the new object.\n     */\n    function basePick(object, props) {\n      object = Object(object);\n      return basePickBy(object, props, function(value, key) {\n        return key in object;\n      });\n    }\n\n    /**\n     * The base implementation of  `_.pickBy` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Object} object The source object.\n     * @param {string[]} props The property identifiers to pick from.\n     * @param {Function} predicate The function invoked per property.\n     * @returns {Object} Returns the new object.\n     */\n    function basePickBy(object, props, predicate) {\n      var index = -1,\n          length = props.length,\n          result = {};\n\n      while (++index < length) {\n        var key = props[index],\n            value = object[key];\n\n        if (predicate(value, key)) {\n          baseAssignValue(result, key, value);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * A specialized version of `baseProperty` which supports deep paths.\n     *\n     * @private\n     * @param {Array|string} path The path of the property to get.\n     * @returns {Function} Returns the new accessor function.\n     */\n    function basePropertyDeep(path) {\n      return function(object) {\n        return baseGet(object, path);\n      };\n    }\n\n    /**\n     * The base implementation of `_.pullAllBy` without support for iteratee\n     * shorthands.\n     *\n     * @private\n     * @param {Array} array The array to modify.\n     * @param {Array} values The values to remove.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns `array`.\n     */\n    function basePullAll(array, values, iteratee, comparator) {\n      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,\n          index = -1,\n          length = values.length,\n          seen = array;\n\n      if (array === values) {\n        values = copyArray(values);\n      }\n      if (iteratee) {\n        seen = arrayMap(array, baseUnary(iteratee));\n      }\n      while (++index < length) {\n        var fromIndex = 0,\n            value = values[index],\n            computed = iteratee ? iteratee(value) : value;\n\n        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {\n          if (seen !== array) {\n            splice.call(seen, fromIndex, 1);\n          }\n          splice.call(array, fromIndex, 1);\n        }\n      }\n      return array;\n    }\n\n    /**\n     * The base implementation of `_.pullAt` without support for individual\n     * indexes or capturing the removed elements.\n     *\n     * @private\n     * @param {Array} array The array to modify.\n     * @param {number[]} indexes The indexes of elements to remove.\n     * @returns {Array} Returns `array`.\n     */\n    function basePullAt(array, indexes) {\n      var length = array ? indexes.length : 0,\n          lastIndex = length - 1;\n\n      while (length--) {\n        var index = indexes[length];\n        if (length == lastIndex || index !== previous) {\n          var previous = index;\n          if (isIndex(index)) {\n            splice.call(array, index, 1);\n          }\n          else if (!isKey(index, array)) {\n            var path = castPath(index),\n                object = parent(array, path);\n\n            if (object != null) {\n              delete object[toKey(last(path))];\n            }\n          }\n          else {\n            delete array[toKey(index)];\n          }\n        }\n      }\n      return array;\n    }\n\n    /**\n     * The base implementation of `_.random` without support for returning\n     * floating-point numbers.\n     *\n     * @private\n     * @param {number} lower The lower bound.\n     * @param {number} upper The upper bound.\n     * @returns {number} Returns the random number.\n     */\n    function baseRandom(lower, upper) {\n      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));\n    }\n\n    /**\n     * The base implementation of `_.range` and `_.rangeRight` which doesn't\n     * coerce arguments.\n     *\n     * @private\n     * @param {number} start The start of the range.\n     * @param {number} end The end of the range.\n     * @param {number} step The value to increment or decrement by.\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Array} Returns the range of numbers.\n     */\n    function baseRange(start, end, step, fromRight) {\n      var index = -1,\n          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),\n          result = Array(length);\n\n      while (length--) {\n        result[fromRight ? length : ++index] = start;\n        start += step;\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.repeat` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {string} string The string to repeat.\n     * @param {number} n The number of times to repeat the string.\n     * @returns {string} Returns the repeated string.\n     */\n    function baseRepeat(string, n) {\n      var result = '';\n      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {\n        return result;\n      }\n      // Leverage the exponentiation by squaring algorithm for a faster repeat.\n      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.\n      do {\n        if (n % 2) {\n          result += string;\n        }\n        n = nativeFloor(n / 2);\n        if (n) {\n          string += string;\n        }\n      } while (n);\n\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.rest` which doesn't validate or coerce arguments.\n     *\n     * @private\n     * @param {Function} func The function to apply a rest parameter to.\n     * @param {number} [start=func.length-1] The start position of the rest parameter.\n     * @returns {Function} Returns the new function.\n     */\n    function baseRest(func, start) {\n      return setToString(overRest(func, start, identity), func + '');\n    }\n\n    /**\n     * The base implementation of `_.sample`.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to sample.\n     * @returns {*} Returns the random element.\n     */\n    function baseSample(collection) {\n      return arraySample(values(collection));\n    }\n\n    /**\n     * The base implementation of `_.sampleSize` without param guards.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to sample.\n     * @param {number} n The number of elements to sample.\n     * @returns {Array} Returns the random elements.\n     */\n    function baseSampleSize(collection, n) {\n      var array = values(collection);\n      return shuffleSelf(array, baseClamp(n, 0, array.length));\n    }\n\n    /**\n     * The base implementation of `_.set`.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {*} value The value to set.\n     * @param {Function} [customizer] The function to customize path creation.\n     * @returns {Object} Returns `object`.\n     */\n    function baseSet(object, path, value, customizer) {\n      if (!isObject(object)) {\n        return object;\n      }\n      path = isKey(path, object) ? [path] : castPath(path);\n\n      var index = -1,\n          length = path.length,\n          lastIndex = length - 1,\n          nested = object;\n\n      while (nested != null && ++index < length) {\n        var key = toKey(path[index]),\n            newValue = value;\n\n        if (index != lastIndex) {\n          var objValue = nested[key];\n          newValue = customizer ? customizer(objValue, key, nested) : undefined;\n          if (newValue === undefined) {\n            newValue = isObject(objValue)\n              ? objValue\n              : (isIndex(path[index + 1]) ? [] : {});\n          }\n        }\n        assignValue(nested, key, newValue);\n        nested = nested[key];\n      }\n      return object;\n    }\n\n    /**\n     * The base implementation of `setData` without support for hot loop shorting.\n     *\n     * @private\n     * @param {Function} func The function to associate metadata with.\n     * @param {*} data The metadata.\n     * @returns {Function} Returns `func`.\n     */\n    var baseSetData = !metaMap ? identity : function(func, data) {\n      metaMap.set(func, data);\n      return func;\n    };\n\n    /**\n     * The base implementation of `setToString` without support for hot loop shorting.\n     *\n     * @private\n     * @param {Function} func The function to modify.\n     * @param {Function} string The `toString` result.\n     * @returns {Function} Returns `func`.\n     */\n    var baseSetToString = !defineProperty ? identity : function(func, string) {\n      return defineProperty(func, 'toString', {\n        'configurable': true,\n        'enumerable': false,\n        'value': constant(string),\n        'writable': true\n      });\n    };\n\n    /**\n     * The base implementation of `_.shuffle`.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to shuffle.\n     * @returns {Array} Returns the new shuffled array.\n     */\n    function baseShuffle(collection) {\n      return shuffleSelf(values(collection));\n    }\n\n    /**\n     * The base implementation of `_.slice` without an iteratee call guard.\n     *\n     * @private\n     * @param {Array} array The array to slice.\n     * @param {number} [start=0] The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns the slice of `array`.\n     */\n    function baseSlice(array, start, end) {\n      var index = -1,\n          length = array.length;\n\n      if (start < 0) {\n        start = -start > length ? 0 : (length + start);\n      }\n      end = end > length ? length : end;\n      if (end < 0) {\n        end += length;\n      }\n      length = start > end ? 0 : ((end - start) >>> 0);\n      start >>>= 0;\n\n      var result = Array(length);\n      while (++index < length) {\n        result[index] = array[index + start];\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.some` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} predicate The function invoked per iteration.\n     * @returns {boolean} Returns `true` if any element passes the predicate check,\n     *  else `false`.\n     */\n    function baseSome(collection, predicate) {\n      var result;\n\n      baseEach(collection, function(value, index, collection) {\n        result = predicate(value, index, collection);\n        return !result;\n      });\n      return !!result;\n    }\n\n    /**\n     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which\n     * performs a binary search of `array` to determine the index at which `value`\n     * should be inserted into `array` in order to maintain its sort order.\n     *\n     * @private\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @param {boolean} [retHighest] Specify returning the highest qualified index.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     */\n    function baseSortedIndex(array, value, retHighest) {\n      var low = 0,\n          high = array == null ? low : array.length;\n\n      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {\n        while (low < high) {\n          var mid = (low + high) >>> 1,\n              computed = array[mid];\n\n          if (computed !== null && !isSymbol(computed) &&\n              (retHighest ? (computed <= value) : (computed < value))) {\n            low = mid + 1;\n          } else {\n            high = mid;\n          }\n        }\n        return high;\n      }\n      return baseSortedIndexBy(array, value, identity, retHighest);\n    }\n\n    /**\n     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`\n     * which invokes `iteratee` for `value` and each element of `array` to compute\n     * their sort ranking. The iteratee is invoked with one argument; (value).\n     *\n     * @private\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @param {Function} iteratee The iteratee invoked per element.\n     * @param {boolean} [retHighest] Specify returning the highest qualified index.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     */\n    function baseSortedIndexBy(array, value, iteratee, retHighest) {\n      value = iteratee(value);\n\n      var low = 0,\n          high = array == null ? 0 : array.length,\n          valIsNaN = value !== value,\n          valIsNull = value === null,\n          valIsSymbol = isSymbol(value),\n          valIsUndefined = value === undefined;\n\n      while (low < high) {\n        var mid = nativeFloor((low + high) / 2),\n            computed = iteratee(array[mid]),\n            othIsDefined = computed !== undefined,\n            othIsNull = computed === null,\n            othIsReflexive = computed === computed,\n            othIsSymbol = isSymbol(computed);\n\n        if (valIsNaN) {\n          var setLow = retHighest || othIsReflexive;\n        } else if (valIsUndefined) {\n          setLow = othIsReflexive && (retHighest || othIsDefined);\n        } else if (valIsNull) {\n          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);\n        } else if (valIsSymbol) {\n          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);\n        } else if (othIsNull || othIsSymbol) {\n          setLow = false;\n        } else {\n          setLow = retHighest ? (computed <= value) : (computed < value);\n        }\n        if (setLow) {\n          low = mid + 1;\n        } else {\n          high = mid;\n        }\n      }\n      return nativeMin(high, MAX_ARRAY_INDEX);\n    }\n\n    /**\n     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without\n     * support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     */\n    function baseSortedUniq(array, iteratee) {\n      var index = -1,\n          length = array.length,\n          resIndex = 0,\n          result = [];\n\n      while (++index < length) {\n        var value = array[index],\n            computed = iteratee ? iteratee(value) : value;\n\n        if (!index || !eq(computed, seen)) {\n          var seen = computed;\n          result[resIndex++] = value === 0 ? 0 : value;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.toNumber` which doesn't ensure correct\n     * conversions of binary, hexadecimal, or octal string values.\n     *\n     * @private\n     * @param {*} value The value to process.\n     * @returns {number} Returns the number.\n     */\n    function baseToNumber(value) {\n      if (typeof value == 'number') {\n        return value;\n      }\n      if (isSymbol(value)) {\n        return NAN;\n      }\n      return +value;\n    }\n\n    /**\n     * The base implementation of `_.toString` which doesn't convert nullish\n     * values to empty strings.\n     *\n     * @private\n     * @param {*} value The value to process.\n     * @returns {string} Returns the string.\n     */\n    function baseToString(value) {\n      // Exit early for strings to avoid a performance hit in some environments.\n      if (typeof value == 'string') {\n        return value;\n      }\n      if (isArray(value)) {\n        // Recursively convert values (susceptible to call stack limits).\n        return arrayMap(value, baseToString) + '';\n      }\n      if (isSymbol(value)) {\n        return symbolToString ? symbolToString.call(value) : '';\n      }\n      var result = (value + '');\n      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n    }\n\n    /**\n     * The base implementation of `_.uniqBy` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     */\n    function baseUniq(array, iteratee, comparator) {\n      var index = -1,\n          includes = arrayIncludes,\n          length = array.length,\n          isCommon = true,\n          result = [],\n          seen = result;\n\n      if (comparator) {\n        isCommon = false;\n        includes = arrayIncludesWith;\n      }\n      else if (length >= LARGE_ARRAY_SIZE) {\n        var set = iteratee ? null : createSet(array);\n        if (set) {\n          return setToArray(set);\n        }\n        isCommon = false;\n        includes = cacheHas;\n        seen = new SetCache;\n      }\n      else {\n        seen = iteratee ? [] : result;\n      }\n      outer:\n      while (++index < length) {\n        var value = array[index],\n            computed = iteratee ? iteratee(value) : value;\n\n        value = (comparator || value !== 0) ? value : 0;\n        if (isCommon && computed === computed) {\n          var seenIndex = seen.length;\n          while (seenIndex--) {\n            if (seen[seenIndex] === computed) {\n              continue outer;\n            }\n          }\n          if (iteratee) {\n            seen.push(computed);\n          }\n          result.push(value);\n        }\n        else if (!includes(seen, computed, comparator)) {\n          if (seen !== result) {\n            seen.push(computed);\n          }\n          result.push(value);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.unset`.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to unset.\n     * @returns {boolean} Returns `true` if the property is deleted, else `false`.\n     */\n    function baseUnset(object, path) {\n      path = isKey(path, object) ? [path] : castPath(path);\n      object = parent(object, path);\n\n      var key = toKey(last(path));\n      return !(object != null && hasOwnProperty.call(object, key)) || delete object[key];\n    }\n\n    /**\n     * The base implementation of `_.update`.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to update.\n     * @param {Function} updater The function to produce the updated value.\n     * @param {Function} [customizer] The function to customize path creation.\n     * @returns {Object} Returns `object`.\n     */\n    function baseUpdate(object, path, updater, customizer) {\n      return baseSet(object, path, updater(baseGet(object, path)), customizer);\n    }\n\n    /**\n     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`\n     * without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to query.\n     * @param {Function} predicate The function invoked per iteration.\n     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Array} Returns the slice of `array`.\n     */\n    function baseWhile(array, predicate, isDrop, fromRight) {\n      var length = array.length,\n          index = fromRight ? length : -1;\n\n      while ((fromRight ? index-- : ++index < length) &&\n        predicate(array[index], index, array)) {}\n\n      return isDrop\n        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))\n        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));\n    }\n\n    /**\n     * The base implementation of `wrapperValue` which returns the result of\n     * performing a sequence of actions on the unwrapped `value`, where each\n     * successive action is supplied the return value of the previous.\n     *\n     * @private\n     * @param {*} value The unwrapped value.\n     * @param {Array} actions Actions to perform to resolve the unwrapped value.\n     * @returns {*} Returns the resolved value.\n     */\n    function baseWrapperValue(value, actions) {\n      var result = value;\n      if (result instanceof LazyWrapper) {\n        result = result.value();\n      }\n      return arrayReduce(actions, function(result, action) {\n        return action.func.apply(action.thisArg, arrayPush([result], action.args));\n      }, result);\n    }\n\n    /**\n     * The base implementation of methods like `_.xor`, without support for\n     * iteratee shorthands, that accepts an array of arrays to inspect.\n     *\n     * @private\n     * @param {Array} arrays The arrays to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of values.\n     */\n    function baseXor(arrays, iteratee, comparator) {\n      var length = arrays.length;\n      if (length < 2) {\n        return length ? baseUniq(arrays[0]) : [];\n      }\n      var index = -1,\n          result = Array(length);\n\n      while (++index < length) {\n        var array = arrays[index],\n            othIndex = -1;\n\n        while (++othIndex < length) {\n          if (othIndex != index) {\n            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);\n          }\n        }\n      }\n      return baseUniq(baseFlatten(result, 1), iteratee, comparator);\n    }\n\n    /**\n     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.\n     *\n     * @private\n     * @param {Array} props The property identifiers.\n     * @param {Array} values The property values.\n     * @param {Function} assignFunc The function to assign values.\n     * @returns {Object} Returns the new object.\n     */\n    function baseZipObject(props, values, assignFunc) {\n      var index = -1,\n          length = props.length,\n          valsLength = values.length,\n          result = {};\n\n      while (++index < length) {\n        var value = index < valsLength ? values[index] : undefined;\n        assignFunc(result, props[index], value);\n      }\n      return result;\n    }\n\n    /**\n     * Casts `value` to an empty array if it's not an array like object.\n     *\n     * @private\n     * @param {*} value The value to inspect.\n     * @returns {Array|Object} Returns the cast array-like object.\n     */\n    function castArrayLikeObject(value) {\n      return isArrayLikeObject(value) ? value : [];\n    }\n\n    /**\n     * Casts `value` to `identity` if it's not a function.\n     *\n     * @private\n     * @param {*} value The value to inspect.\n     * @returns {Function} Returns cast function.\n     */\n    function castFunction(value) {\n      return typeof value == 'function' ? value : identity;\n    }\n\n    /**\n     * Casts `value` to a path array if it's not one.\n     *\n     * @private\n     * @param {*} value The value to inspect.\n     * @returns {Array} Returns the cast property path array.\n     */\n    function castPath(value) {\n      return isArray(value) ? value : stringToPath(value);\n    }\n\n    /**\n     * A `baseRest` alias which can be replaced with `identity` by module\n     * replacement plugins.\n     *\n     * @private\n     * @type {Function}\n     * @param {Function} func The function to apply a rest parameter to.\n     * @returns {Function} Returns the new function.\n     */\n    var castRest = baseRest;\n\n    /**\n     * Casts `array` to a slice if it's needed.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {number} start The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns the cast slice.\n     */\n    function castSlice(array, start, end) {\n      var length = array.length;\n      end = end === undefined ? length : end;\n      return (!start && end >= length) ? array : baseSlice(array, start, end);\n    }\n\n    /**\n     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).\n     *\n     * @private\n     * @param {number|Object} id The timer id or timeout object of the timer to clear.\n     */\n    var clearTimeout = ctxClearTimeout || function(id) {\n      return root.clearTimeout(id);\n    };\n\n    /**\n     * Creates a clone of  `buffer`.\n     *\n     * @private\n     * @param {Buffer} buffer The buffer to clone.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Buffer} Returns the cloned buffer.\n     */\n    function cloneBuffer(buffer, isDeep) {\n      if (isDeep) {\n        return buffer.slice();\n      }\n      var length = buffer.length,\n          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);\n\n      buffer.copy(result);\n      return result;\n    }\n\n    /**\n     * Creates a clone of `arrayBuffer`.\n     *\n     * @private\n     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n     * @returns {ArrayBuffer} Returns the cloned array buffer.\n     */\n    function cloneArrayBuffer(arrayBuffer) {\n      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n      new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n      return result;\n    }\n\n    /**\n     * Creates a clone of `dataView`.\n     *\n     * @private\n     * @param {Object} dataView The data view to clone.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Object} Returns the cloned data view.\n     */\n    function cloneDataView(dataView, isDeep) {\n      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n    }\n\n    /**\n     * Creates a clone of `map`.\n     *\n     * @private\n     * @param {Object} map The map to clone.\n     * @param {Function} cloneFunc The function to clone values.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Object} Returns the cloned map.\n     */\n    function cloneMap(map, isDeep, cloneFunc) {\n      var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);\n      return arrayReduce(array, addMapEntry, new map.constructor);\n    }\n\n    /**\n     * Creates a clone of `regexp`.\n     *\n     * @private\n     * @param {Object} regexp The regexp to clone.\n     * @returns {Object} Returns the cloned regexp.\n     */\n    function cloneRegExp(regexp) {\n      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n      result.lastIndex = regexp.lastIndex;\n      return result;\n    }\n\n    /**\n     * Creates a clone of `set`.\n     *\n     * @private\n     * @param {Object} set The set to clone.\n     * @param {Function} cloneFunc The function to clone values.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Object} Returns the cloned set.\n     */\n    function cloneSet(set, isDeep, cloneFunc) {\n      var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);\n      return arrayReduce(array, addSetEntry, new set.constructor);\n    }\n\n    /**\n     * Creates a clone of the `symbol` object.\n     *\n     * @private\n     * @param {Object} symbol The symbol object to clone.\n     * @returns {Object} Returns the cloned symbol object.\n     */\n    function cloneSymbol(symbol) {\n      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n    }\n\n    /**\n     * Creates a clone of `typedArray`.\n     *\n     * @private\n     * @param {Object} typedArray The typed array to clone.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Object} Returns the cloned typed array.\n     */\n    function cloneTypedArray(typedArray, isDeep) {\n      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n    }\n\n    /**\n     * Compares values to sort them in ascending order.\n     *\n     * @private\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {number} Returns the sort order indicator for `value`.\n     */\n    function compareAscending(value, other) {\n      if (value !== other) {\n        var valIsDefined = value !== undefined,\n            valIsNull = value === null,\n            valIsReflexive = value === value,\n            valIsSymbol = isSymbol(value);\n\n        var othIsDefined = other !== undefined,\n            othIsNull = other === null,\n            othIsReflexive = other === other,\n            othIsSymbol = isSymbol(other);\n\n        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||\n            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||\n            (valIsNull && othIsDefined && othIsReflexive) ||\n            (!valIsDefined && othIsReflexive) ||\n            !valIsReflexive) {\n          return 1;\n        }\n        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||\n            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||\n            (othIsNull && valIsDefined && valIsReflexive) ||\n            (!othIsDefined && valIsReflexive) ||\n            !othIsReflexive) {\n          return -1;\n        }\n      }\n      return 0;\n    }\n\n    /**\n     * Used by `_.orderBy` to compare multiple properties of a value to another\n     * and stable sort them.\n     *\n     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,\n     * specify an order of \"desc\" for descending or \"asc\" for ascending sort order\n     * of corresponding values.\n     *\n     * @private\n     * @param {Object} object The object to compare.\n     * @param {Object} other The other object to compare.\n     * @param {boolean[]|string[]} orders The order to sort by for each property.\n     * @returns {number} Returns the sort order indicator for `object`.\n     */\n    function compareMultiple(object, other, orders) {\n      var index = -1,\n          objCriteria = object.criteria,\n          othCriteria = other.criteria,\n          length = objCriteria.length,\n          ordersLength = orders.length;\n\n      while (++index < length) {\n        var result = compareAscending(objCriteria[index], othCriteria[index]);\n        if (result) {\n          if (index >= ordersLength) {\n            return result;\n          }\n          var order = orders[index];\n          return result * (order == 'desc' ? -1 : 1);\n        }\n      }\n      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications\n      // that causes it, under certain circumstances, to provide the same value for\n      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247\n      // for more details.\n      //\n      // This also ensures a stable sort in V8 and other engines.\n      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.\n      return object.index - other.index;\n    }\n\n    /**\n     * Creates an array that is the composition of partially applied arguments,\n     * placeholders, and provided arguments into a single array of arguments.\n     *\n     * @private\n     * @param {Array} args The provided arguments.\n     * @param {Array} partials The arguments to prepend to those provided.\n     * @param {Array} holders The `partials` placeholder indexes.\n     * @params {boolean} [isCurried] Specify composing for a curried function.\n     * @returns {Array} Returns the new array of composed arguments.\n     */\n    function composeArgs(args, partials, holders, isCurried) {\n      var argsIndex = -1,\n          argsLength = args.length,\n          holdersLength = holders.length,\n          leftIndex = -1,\n          leftLength = partials.length,\n          rangeLength = nativeMax(argsLength - holdersLength, 0),\n          result = Array(leftLength + rangeLength),\n          isUncurried = !isCurried;\n\n      while (++leftIndex < leftLength) {\n        result[leftIndex] = partials[leftIndex];\n      }\n      while (++argsIndex < holdersLength) {\n        if (isUncurried || argsIndex < argsLength) {\n          result[holders[argsIndex]] = args[argsIndex];\n        }\n      }\n      while (rangeLength--) {\n        result[leftIndex++] = args[argsIndex++];\n      }\n      return result;\n    }\n\n    /**\n     * This function is like `composeArgs` except that the arguments composition\n     * is tailored for `_.partialRight`.\n     *\n     * @private\n     * @param {Array} args The provided arguments.\n     * @param {Array} partials The arguments to append to those provided.\n     * @param {Array} holders The `partials` placeholder indexes.\n     * @params {boolean} [isCurried] Specify composing for a curried function.\n     * @returns {Array} Returns the new array of composed arguments.\n     */\n    function composeArgsRight(args, partials, holders, isCurried) {\n      var argsIndex = -1,\n          argsLength = args.length,\n          holdersIndex = -1,\n          holdersLength = holders.length,\n          rightIndex = -1,\n          rightLength = partials.length,\n          rangeLength = nativeMax(argsLength - holdersLength, 0),\n          result = Array(rangeLength + rightLength),\n          isUncurried = !isCurried;\n\n      while (++argsIndex < rangeLength) {\n        result[argsIndex] = args[argsIndex];\n      }\n      var offset = argsIndex;\n      while (++rightIndex < rightLength) {\n        result[offset + rightIndex] = partials[rightIndex];\n      }\n      while (++holdersIndex < holdersLength) {\n        if (isUncurried || argsIndex < argsLength) {\n          result[offset + holders[holdersIndex]] = args[argsIndex++];\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Copies the values of `source` to `array`.\n     *\n     * @private\n     * @param {Array} source The array to copy values from.\n     * @param {Array} [array=[]] The array to copy values to.\n     * @returns {Array} Returns `array`.\n     */\n    function copyArray(source, array) {\n      var index = -1,\n          length = source.length;\n\n      array || (array = Array(length));\n      while (++index < length) {\n        array[index] = source[index];\n      }\n      return array;\n    }\n\n    /**\n     * Copies properties of `source` to `object`.\n     *\n     * @private\n     * @param {Object} source The object to copy properties from.\n     * @param {Array} props The property identifiers to copy.\n     * @param {Object} [object={}] The object to copy properties to.\n     * @param {Function} [customizer] The function to customize copied values.\n     * @returns {Object} Returns `object`.\n     */\n    function copyObject(source, props, object, customizer) {\n      var isNew = !object;\n      object || (object = {});\n\n      var index = -1,\n          length = props.length;\n\n      while (++index < length) {\n        var key = props[index];\n\n        var newValue = customizer\n          ? customizer(object[key], source[key], key, object, source)\n          : undefined;\n\n        if (newValue === undefined) {\n          newValue = source[key];\n        }\n        if (isNew) {\n          baseAssignValue(object, key, newValue);\n        } else {\n          assignValue(object, key, newValue);\n        }\n      }\n      return object;\n    }\n\n    /**\n     * Copies own symbol properties of `source` to `object`.\n     *\n     * @private\n     * @param {Object} source The object to copy symbols from.\n     * @param {Object} [object={}] The object to copy symbols to.\n     * @returns {Object} Returns `object`.\n     */\n    function copySymbols(source, object) {\n      return copyObject(source, getSymbols(source), object);\n    }\n\n    /**\n     * Creates a function like `_.groupBy`.\n     *\n     * @private\n     * @param {Function} setter The function to set accumulator values.\n     * @param {Function} [initializer] The accumulator object initializer.\n     * @returns {Function} Returns the new aggregator function.\n     */\n    function createAggregator(setter, initializer) {\n      return function(collection, iteratee) {\n        var func = isArray(collection) ? arrayAggregator : baseAggregator,\n            accumulator = initializer ? initializer() : {};\n\n        return func(collection, setter, getIteratee(iteratee, 2), accumulator);\n      };\n    }\n\n    /**\n     * Creates a function like `_.assign`.\n     *\n     * @private\n     * @param {Function} assigner The function to assign values.\n     * @returns {Function} Returns the new assigner function.\n     */\n    function createAssigner(assigner) {\n      return baseRest(function(object, sources) {\n        var index = -1,\n            length = sources.length,\n            customizer = length > 1 ? sources[length - 1] : undefined,\n            guard = length > 2 ? sources[2] : undefined;\n\n        customizer = (assigner.length > 3 && typeof customizer == 'function')\n          ? (length--, customizer)\n          : undefined;\n\n        if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n          customizer = length < 3 ? undefined : customizer;\n          length = 1;\n        }\n        object = Object(object);\n        while (++index < length) {\n          var source = sources[index];\n          if (source) {\n            assigner(object, source, index, customizer);\n          }\n        }\n        return object;\n      });\n    }\n\n    /**\n     * Creates a `baseEach` or `baseEachRight` function.\n     *\n     * @private\n     * @param {Function} eachFunc The function to iterate over a collection.\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Function} Returns the new base function.\n     */\n    function createBaseEach(eachFunc, fromRight) {\n      return function(collection, iteratee) {\n        if (collection == null) {\n          return collection;\n        }\n        if (!isArrayLike(collection)) {\n          return eachFunc(collection, iteratee);\n        }\n        var length = collection.length,\n            index = fromRight ? length : -1,\n            iterable = Object(collection);\n\n        while ((fromRight ? index-- : ++index < length)) {\n          if (iteratee(iterable[index], index, iterable) === false) {\n            break;\n          }\n        }\n        return collection;\n      };\n    }\n\n    /**\n     * Creates a base function for methods like `_.forIn` and `_.forOwn`.\n     *\n     * @private\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Function} Returns the new base function.\n     */\n    function createBaseFor(fromRight) {\n      return function(object, iteratee, keysFunc) {\n        var index = -1,\n            iterable = Object(object),\n            props = keysFunc(object),\n            length = props.length;\n\n        while (length--) {\n          var key = props[fromRight ? length : ++index];\n          if (iteratee(iterable[key], key, iterable) === false) {\n            break;\n          }\n        }\n        return object;\n      };\n    }\n\n    /**\n     * Creates a function that wraps `func` to invoke it with the optional `this`\n     * binding of `thisArg`.\n     *\n     * @private\n     * @param {Function} func The function to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {*} [thisArg] The `this` binding of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createBind(func, bitmask, thisArg) {\n      var isBind = bitmask & BIND_FLAG,\n          Ctor = createCtor(func);\n\n      function wrapper() {\n        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\n        return fn.apply(isBind ? thisArg : this, arguments);\n      }\n      return wrapper;\n    }\n\n    /**\n     * Creates a function like `_.lowerFirst`.\n     *\n     * @private\n     * @param {string} methodName The name of the `String` case method to use.\n     * @returns {Function} Returns the new case function.\n     */\n    function createCaseFirst(methodName) {\n      return function(string) {\n        string = toString(string);\n\n        var strSymbols = hasUnicode(string)\n          ? stringToArray(string)\n          : undefined;\n\n        var chr = strSymbols\n          ? strSymbols[0]\n          : string.charAt(0);\n\n        var trailing = strSymbols\n          ? castSlice(strSymbols, 1).join('')\n          : string.slice(1);\n\n        return chr[methodName]() + trailing;\n      };\n    }\n\n    /**\n     * Creates a function like `_.camelCase`.\n     *\n     * @private\n     * @param {Function} callback The function to combine each word.\n     * @returns {Function} Returns the new compounder function.\n     */\n    function createCompounder(callback) {\n      return function(string) {\n        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');\n      };\n    }\n\n    /**\n     * Creates a function that produces an instance of `Ctor` regardless of\n     * whether it was invoked as part of a `new` expression or by `call` or `apply`.\n     *\n     * @private\n     * @param {Function} Ctor The constructor to wrap.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createCtor(Ctor) {\n      return function() {\n        // Use a `switch` statement to work with class constructors. See\n        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist\n        // for more details.\n        var args = arguments;\n        switch (args.length) {\n          case 0: return new Ctor;\n          case 1: return new Ctor(args[0]);\n          case 2: return new Ctor(args[0], args[1]);\n          case 3: return new Ctor(args[0], args[1], args[2]);\n          case 4: return new Ctor(args[0], args[1], args[2], args[3]);\n          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);\n          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);\n          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);\n        }\n        var thisBinding = baseCreate(Ctor.prototype),\n            result = Ctor.apply(thisBinding, args);\n\n        // Mimic the constructor's `return` behavior.\n        // See https://es5.github.io/#x13.2.2 for more details.\n        return isObject(result) ? result : thisBinding;\n      };\n    }\n\n    /**\n     * Creates a function that wraps `func` to enable currying.\n     *\n     * @private\n     * @param {Function} func The function to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {number} arity The arity of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createCurry(func, bitmask, arity) {\n      var Ctor = createCtor(func);\n\n      function wrapper() {\n        var length = arguments.length,\n            args = Array(length),\n            index = length,\n            placeholder = getHolder(wrapper);\n\n        while (index--) {\n          args[index] = arguments[index];\n        }\n        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)\n          ? []\n          : replaceHolders(args, placeholder);\n\n        length -= holders.length;\n        if (length < arity) {\n          return createRecurry(\n            func, bitmask, createHybrid, wrapper.placeholder, undefined,\n            args, holders, undefined, undefined, arity - length);\n        }\n        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\n        return apply(fn, this, args);\n      }\n      return wrapper;\n    }\n\n    /**\n     * Creates a `_.find` or `_.findLast` function.\n     *\n     * @private\n     * @param {Function} findIndexFunc The function to find the collection index.\n     * @returns {Function} Returns the new find function.\n     */\n    function createFind(findIndexFunc) {\n      return function(collection, predicate, fromIndex) {\n        var iterable = Object(collection);\n        if (!isArrayLike(collection)) {\n          var iteratee = getIteratee(predicate, 3);\n          collection = keys(collection);\n          predicate = function(key) { return iteratee(iterable[key], key, iterable); };\n        }\n        var index = findIndexFunc(collection, predicate, fromIndex);\n        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;\n      };\n    }\n\n    /**\n     * Creates a `_.flow` or `_.flowRight` function.\n     *\n     * @private\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Function} Returns the new flow function.\n     */\n    function createFlow(fromRight) {\n      return flatRest(function(funcs) {\n        var length = funcs.length,\n            index = length,\n            prereq = LodashWrapper.prototype.thru;\n\n        if (fromRight) {\n          funcs.reverse();\n        }\n        while (index--) {\n          var func = funcs[index];\n          if (typeof func != 'function') {\n            throw new TypeError(FUNC_ERROR_TEXT);\n          }\n          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {\n            var wrapper = new LodashWrapper([], true);\n          }\n        }\n        index = wrapper ? index : length;\n        while (++index < length) {\n          func = funcs[index];\n\n          var funcName = getFuncName(func),\n              data = funcName == 'wrapper' ? getData(func) : undefined;\n\n          if (data && isLaziable(data[0]) &&\n                data[1] == (ARY_FLAG | CURRY_FLAG | PARTIAL_FLAG | REARG_FLAG) &&\n                !data[4].length && data[9] == 1\n              ) {\n            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);\n          } else {\n            wrapper = (func.length == 1 && isLaziable(func))\n              ? wrapper[funcName]()\n              : wrapper.thru(func);\n          }\n        }\n        return function() {\n          var args = arguments,\n              value = args[0];\n\n          if (wrapper && args.length == 1 &&\n              isArray(value) && value.length >= LARGE_ARRAY_SIZE) {\n            return wrapper.plant(value).value();\n          }\n          var index = 0,\n              result = length ? funcs[index].apply(this, args) : value;\n\n          while (++index < length) {\n            result = funcs[index].call(this, result);\n          }\n          return result;\n        };\n      });\n    }\n\n    /**\n     * Creates a function that wraps `func` to invoke it with optional `this`\n     * binding of `thisArg`, partial application, and currying.\n     *\n     * @private\n     * @param {Function|string} func The function or method name to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {*} [thisArg] The `this` binding of `func`.\n     * @param {Array} [partials] The arguments to prepend to those provided to\n     *  the new function.\n     * @param {Array} [holders] The `partials` placeholder indexes.\n     * @param {Array} [partialsRight] The arguments to append to those provided\n     *  to the new function.\n     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.\n     * @param {Array} [argPos] The argument positions of the new function.\n     * @param {number} [ary] The arity cap of `func`.\n     * @param {number} [arity] The arity of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {\n      var isAry = bitmask & ARY_FLAG,\n          isBind = bitmask & BIND_FLAG,\n          isBindKey = bitmask & BIND_KEY_FLAG,\n          isCurried = bitmask & (CURRY_FLAG | CURRY_RIGHT_FLAG),\n          isFlip = bitmask & FLIP_FLAG,\n          Ctor = isBindKey ? undefined : createCtor(func);\n\n      function wrapper() {\n        var length = arguments.length,\n            args = Array(length),\n            index = length;\n\n        while (index--) {\n          args[index] = arguments[index];\n        }\n        if (isCurried) {\n          var placeholder = getHolder(wrapper),\n              holdersCount = countHolders(args, placeholder);\n        }\n        if (partials) {\n          args = composeArgs(args, partials, holders, isCurried);\n        }\n        if (partialsRight) {\n          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);\n        }\n        length -= holdersCount;\n        if (isCurried && length < arity) {\n          var newHolders = replaceHolders(args, placeholder);\n          return createRecurry(\n            func, bitmask, createHybrid, wrapper.placeholder, thisArg,\n            args, newHolders, argPos, ary, arity - length\n          );\n        }\n        var thisBinding = isBind ? thisArg : this,\n            fn = isBindKey ? thisBinding[func] : func;\n\n        length = args.length;\n        if (argPos) {\n          args = reorder(args, argPos);\n        } else if (isFlip && length > 1) {\n          args.reverse();\n        }\n        if (isAry && ary < length) {\n          args.length = ary;\n        }\n        if (this && this !== root && this instanceof wrapper) {\n          fn = Ctor || createCtor(fn);\n        }\n        return fn.apply(thisBinding, args);\n      }\n      return wrapper;\n    }\n\n    /**\n     * Creates a function like `_.invertBy`.\n     *\n     * @private\n     * @param {Function} setter The function to set accumulator values.\n     * @param {Function} toIteratee The function to resolve iteratees.\n     * @returns {Function} Returns the new inverter function.\n     */\n    function createInverter(setter, toIteratee) {\n      return function(object, iteratee) {\n        return baseInverter(object, setter, toIteratee(iteratee), {});\n      };\n    }\n\n    /**\n     * Creates a function that performs a mathematical operation on two values.\n     *\n     * @private\n     * @param {Function} operator The function to perform the operation.\n     * @param {number} [defaultValue] The value used for `undefined` arguments.\n     * @returns {Function} Returns the new mathematical operation function.\n     */\n    function createMathOperation(operator, defaultValue) {\n      return function(value, other) {\n        var result;\n        if (value === undefined && other === undefined) {\n          return defaultValue;\n        }\n        if (value !== undefined) {\n          result = value;\n        }\n        if (other !== undefined) {\n          if (result === undefined) {\n            return other;\n          }\n          if (typeof value == 'string' || typeof other == 'string') {\n            value = baseToString(value);\n            other = baseToString(other);\n          } else {\n            value = baseToNumber(value);\n            other = baseToNumber(other);\n          }\n          result = operator(value, other);\n        }\n        return result;\n      };\n    }\n\n    /**\n     * Creates a function like `_.over`.\n     *\n     * @private\n     * @param {Function} arrayFunc The function to iterate over iteratees.\n     * @returns {Function} Returns the new over function.\n     */\n    function createOver(arrayFunc) {\n      return flatRest(function(iteratees) {\n        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));\n        return baseRest(function(args) {\n          var thisArg = this;\n          return arrayFunc(iteratees, function(iteratee) {\n            return apply(iteratee, thisArg, args);\n          });\n        });\n      });\n    }\n\n    /**\n     * Creates the padding for `string` based on `length`. The `chars` string\n     * is truncated if the number of characters exceeds `length`.\n     *\n     * @private\n     * @param {number} length The padding length.\n     * @param {string} [chars=' '] The string used as padding.\n     * @returns {string} Returns the padding for `string`.\n     */\n    function createPadding(length, chars) {\n      chars = chars === undefined ? ' ' : baseToString(chars);\n\n      var charsLength = chars.length;\n      if (charsLength < 2) {\n        return charsLength ? baseRepeat(chars, length) : chars;\n      }\n      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));\n      return hasUnicode(chars)\n        ? castSlice(stringToArray(result), 0, length).join('')\n        : result.slice(0, length);\n    }\n\n    /**\n     * Creates a function that wraps `func` to invoke it with the `this` binding\n     * of `thisArg` and `partials` prepended to the arguments it receives.\n     *\n     * @private\n     * @param {Function} func The function to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {*} thisArg The `this` binding of `func`.\n     * @param {Array} partials The arguments to prepend to those provided to\n     *  the new function.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createPartial(func, bitmask, thisArg, partials) {\n      var isBind = bitmask & BIND_FLAG,\n          Ctor = createCtor(func);\n\n      function wrapper() {\n        var argsIndex = -1,\n            argsLength = arguments.length,\n            leftIndex = -1,\n            leftLength = partials.length,\n            args = Array(leftLength + argsLength),\n            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\n\n        while (++leftIndex < leftLength) {\n          args[leftIndex] = partials[leftIndex];\n        }\n        while (argsLength--) {\n          args[leftIndex++] = arguments[++argsIndex];\n        }\n        return apply(fn, isBind ? thisArg : this, args);\n      }\n      return wrapper;\n    }\n\n    /**\n     * Creates a `_.range` or `_.rangeRight` function.\n     *\n     * @private\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Function} Returns the new range function.\n     */\n    function createRange(fromRight) {\n      return function(start, end, step) {\n        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {\n          end = step = undefined;\n        }\n        // Ensure the sign of `-0` is preserved.\n        start = toFinite(start);\n        if (end === undefined) {\n          end = start;\n          start = 0;\n        } else {\n          end = toFinite(end);\n        }\n        step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);\n        return baseRange(start, end, step, fromRight);\n      };\n    }\n\n    /**\n     * Creates a function that performs a relational operation on two values.\n     *\n     * @private\n     * @param {Function} operator The function to perform the operation.\n     * @returns {Function} Returns the new relational operation function.\n     */\n    function createRelationalOperation(operator) {\n      return function(value, other) {\n        if (!(typeof value == 'string' && typeof other == 'string')) {\n          value = toNumber(value);\n          other = toNumber(other);\n        }\n        return operator(value, other);\n      };\n    }\n\n    /**\n     * Creates a function that wraps `func` to continue currying.\n     *\n     * @private\n     * @param {Function} func The function to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {Function} wrapFunc The function to create the `func` wrapper.\n     * @param {*} placeholder The placeholder value.\n     * @param {*} [thisArg] The `this` binding of `func`.\n     * @param {Array} [partials] The arguments to prepend to those provided to\n     *  the new function.\n     * @param {Array} [holders] The `partials` placeholder indexes.\n     * @param {Array} [argPos] The argument positions of the new function.\n     * @param {number} [ary] The arity cap of `func`.\n     * @param {number} [arity] The arity of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {\n      var isCurry = bitmask & CURRY_FLAG,\n          newHolders = isCurry ? holders : undefined,\n          newHoldersRight = isCurry ? undefined : holders,\n          newPartials = isCurry ? partials : undefined,\n          newPartialsRight = isCurry ? undefined : partials;\n\n      bitmask |= (isCurry ? PARTIAL_FLAG : PARTIAL_RIGHT_FLAG);\n      bitmask &= ~(isCurry ? PARTIAL_RIGHT_FLAG : PARTIAL_FLAG);\n\n      if (!(bitmask & CURRY_BOUND_FLAG)) {\n        bitmask &= ~(BIND_FLAG | BIND_KEY_FLAG);\n      }\n      var newData = [\n        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,\n        newHoldersRight, argPos, ary, arity\n      ];\n\n      var result = wrapFunc.apply(undefined, newData);\n      if (isLaziable(func)) {\n        setData(result, newData);\n      }\n      result.placeholder = placeholder;\n      return setWrapToString(result, func, bitmask);\n    }\n\n    /**\n     * Creates a function like `_.round`.\n     *\n     * @private\n     * @param {string} methodName The name of the `Math` method to use when rounding.\n     * @returns {Function} Returns the new round function.\n     */\n    function createRound(methodName) {\n      var func = Math[methodName];\n      return function(number, precision) {\n        number = toNumber(number);\n        precision = nativeMin(toInteger(precision), 292);\n        if (precision) {\n          // Shift with exponential notation to avoid floating-point issues.\n          // See [MDN](https://mdn.io/round#Examples) for more details.\n          var pair = (toString(number) + 'e').split('e'),\n              value = func(pair[0] + 'e' + (+pair[1] + precision));\n\n          pair = (toString(value) + 'e').split('e');\n          return +(pair[0] + 'e' + (+pair[1] - precision));\n        }\n        return func(number);\n      };\n    }\n\n    /**\n     * Creates a set object of `values`.\n     *\n     * @private\n     * @param {Array} values The values to add to the set.\n     * @returns {Object} Returns the new set.\n     */\n    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {\n      return new Set(values);\n    };\n\n    /**\n     * Creates a `_.toPairs` or `_.toPairsIn` function.\n     *\n     * @private\n     * @param {Function} keysFunc The function to get the keys of a given object.\n     * @returns {Function} Returns the new pairs function.\n     */\n    function createToPairs(keysFunc) {\n      return function(object) {\n        var tag = getTag(object);\n        if (tag == mapTag) {\n          return mapToArray(object);\n        }\n        if (tag == setTag) {\n          return setToPairs(object);\n        }\n        return baseToPairs(object, keysFunc(object));\n      };\n    }\n\n    /**\n     * Creates a function that either curries or invokes `func` with optional\n     * `this` binding and partially applied arguments.\n     *\n     * @private\n     * @param {Function|string} func The function or method name to wrap.\n     * @param {number} bitmask The bitmask flags.\n     *  The bitmask may be composed of the following flags:\n     *     1 - `_.bind`\n     *     2 - `_.bindKey`\n     *     4 - `_.curry` or `_.curryRight` of a bound function\n     *     8 - `_.curry`\n     *    16 - `_.curryRight`\n     *    32 - `_.partial`\n     *    64 - `_.partialRight`\n     *   128 - `_.rearg`\n     *   256 - `_.ary`\n     *   512 - `_.flip`\n     * @param {*} [thisArg] The `this` binding of `func`.\n     * @param {Array} [partials] The arguments to be partially applied.\n     * @param {Array} [holders] The `partials` placeholder indexes.\n     * @param {Array} [argPos] The argument positions of the new function.\n     * @param {number} [ary] The arity cap of `func`.\n     * @param {number} [arity] The arity of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {\n      var isBindKey = bitmask & BIND_KEY_FLAG;\n      if (!isBindKey && typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      var length = partials ? partials.length : 0;\n      if (!length) {\n        bitmask &= ~(PARTIAL_FLAG | PARTIAL_RIGHT_FLAG);\n        partials = holders = undefined;\n      }\n      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);\n      arity = arity === undefined ? arity : toInteger(arity);\n      length -= holders ? holders.length : 0;\n\n      if (bitmask & PARTIAL_RIGHT_FLAG) {\n        var partialsRight = partials,\n            holdersRight = holders;\n\n        partials = holders = undefined;\n      }\n      var data = isBindKey ? undefined : getData(func);\n\n      var newData = [\n        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,\n        argPos, ary, arity\n      ];\n\n      if (data) {\n        mergeData(newData, data);\n      }\n      func = newData[0];\n      bitmask = newData[1];\n      thisArg = newData[2];\n      partials = newData[3];\n      holders = newData[4];\n      arity = newData[9] = newData[9] == null\n        ? (isBindKey ? 0 : func.length)\n        : nativeMax(newData[9] - length, 0);\n\n      if (!arity && bitmask & (CURRY_FLAG | CURRY_RIGHT_FLAG)) {\n        bitmask &= ~(CURRY_FLAG | CURRY_RIGHT_FLAG);\n      }\n      if (!bitmask || bitmask == BIND_FLAG) {\n        var result = createBind(func, bitmask, thisArg);\n      } else if (bitmask == CURRY_FLAG || bitmask == CURRY_RIGHT_FLAG) {\n        result = createCurry(func, bitmask, arity);\n      } else if ((bitmask == PARTIAL_FLAG || bitmask == (BIND_FLAG | PARTIAL_FLAG)) && !holders.length) {\n        result = createPartial(func, bitmask, thisArg, partials);\n      } else {\n        result = createHybrid.apply(undefined, newData);\n      }\n      var setter = data ? baseSetData : setData;\n      return setWrapToString(setter(result, newData), func, bitmask);\n    }\n\n    /**\n     * A specialized version of `baseIsEqualDeep` for arrays with support for\n     * partial deep comparisons.\n     *\n     * @private\n     * @param {Array} array The array to compare.\n     * @param {Array} other The other array to compare.\n     * @param {Function} equalFunc The function to determine equivalents of values.\n     * @param {Function} customizer The function to customize comparisons.\n     * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`\n     *  for more details.\n     * @param {Object} stack Tracks traversed `array` and `other` objects.\n     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n     */\n    function equalArrays(array, other, equalFunc, customizer, bitmask, stack) {\n      var isPartial = bitmask & PARTIAL_COMPARE_FLAG,\n          arrLength = array.length,\n          othLength = other.length;\n\n      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(array);\n      if (stacked && stack.get(other)) {\n        return stacked == other;\n      }\n      var index = -1,\n          result = true,\n          seen = (bitmask & UNORDERED_COMPARE_FLAG) ? new SetCache : undefined;\n\n      stack.set(array, other);\n      stack.set(other, array);\n\n      // Ignore non-index properties.\n      while (++index < arrLength) {\n        var arrValue = array[index],\n            othValue = other[index];\n\n        if (customizer) {\n          var compared = isPartial\n            ? customizer(othValue, arrValue, index, other, array, stack)\n            : customizer(arrValue, othValue, index, array, other, stack);\n        }\n        if (compared !== undefined) {\n          if (compared) {\n            continue;\n          }\n          result = false;\n          break;\n        }\n        // Recursively compare arrays (susceptible to call stack limits).\n        if (seen) {\n          if (!arraySome(other, function(othValue, othIndex) {\n                if (!cacheHas(seen, othIndex) &&\n                    (arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack))) {\n                  return seen.push(othIndex);\n                }\n              })) {\n            result = false;\n            break;\n          }\n        } else if (!(\n              arrValue === othValue ||\n                equalFunc(arrValue, othValue, customizer, bitmask, stack)\n            )) {\n          result = false;\n          break;\n        }\n      }\n      stack['delete'](array);\n      stack['delete'](other);\n      return result;\n    }\n\n    /**\n     * A specialized version of `baseIsEqualDeep` for comparing objects of\n     * the same `toStringTag`.\n     *\n     * **Note:** This function only supports comparing values with tags of\n     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n     *\n     * @private\n     * @param {Object} object The object to compare.\n     * @param {Object} other The other object to compare.\n     * @param {string} tag The `toStringTag` of the objects to compare.\n     * @param {Function} equalFunc The function to determine equivalents of values.\n     * @param {Function} customizer The function to customize comparisons.\n     * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`\n     *  for more details.\n     * @param {Object} stack Tracks traversed `object` and `other` objects.\n     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n     */\n    function equalByTag(object, other, tag, equalFunc, customizer, bitmask, stack) {\n      switch (tag) {\n        case dataViewTag:\n          if ((object.byteLength != other.byteLength) ||\n              (object.byteOffset != other.byteOffset)) {\n            return false;\n          }\n          object = object.buffer;\n          other = other.buffer;\n\n        case arrayBufferTag:\n          if ((object.byteLength != other.byteLength) ||\n              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n            return false;\n          }\n          return true;\n\n        case boolTag:\n        case dateTag:\n        case numberTag:\n          // Coerce booleans to `1` or `0` and dates to milliseconds.\n          // Invalid dates are coerced to `NaN`.\n          return eq(+object, +other);\n\n        case errorTag:\n          return object.name == other.name && object.message == other.message;\n\n        case regexpTag:\n        case stringTag:\n          // Coerce regexes to strings and treat strings, primitives and objects,\n          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n          // for more details.\n          return object == (other + '');\n\n        case mapTag:\n          var convert = mapToArray;\n\n        case setTag:\n          var isPartial = bitmask & PARTIAL_COMPARE_FLAG;\n          convert || (convert = setToArray);\n\n          if (object.size != other.size && !isPartial) {\n            return false;\n          }\n          // Assume cyclic values are equal.\n          var stacked = stack.get(object);\n          if (stacked) {\n            return stacked == other;\n          }\n          bitmask |= UNORDERED_COMPARE_FLAG;\n\n          // Recursively compare objects (susceptible to call stack limits).\n          stack.set(object, other);\n          var result = equalArrays(convert(object), convert(other), equalFunc, customizer, bitmask, stack);\n          stack['delete'](object);\n          return result;\n\n        case symbolTag:\n          if (symbolValueOf) {\n            return symbolValueOf.call(object) == symbolValueOf.call(other);\n          }\n      }\n      return false;\n    }\n\n    /**\n     * A specialized version of `baseIsEqualDeep` for objects with support for\n     * partial deep comparisons.\n     *\n     * @private\n     * @param {Object} object The object to compare.\n     * @param {Object} other The other object to compare.\n     * @param {Function} equalFunc The function to determine equivalents of values.\n     * @param {Function} customizer The function to customize comparisons.\n     * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`\n     *  for more details.\n     * @param {Object} stack Tracks traversed `object` and `other` objects.\n     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n     */\n    function equalObjects(object, other, equalFunc, customizer, bitmask, stack) {\n      var isPartial = bitmask & PARTIAL_COMPARE_FLAG,\n          objProps = keys(object),\n          objLength = objProps.length,\n          othProps = keys(other),\n          othLength = othProps.length;\n\n      if (objLength != othLength && !isPartial) {\n        return false;\n      }\n      var index = objLength;\n      while (index--) {\n        var key = objProps[index];\n        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n          return false;\n        }\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked && stack.get(other)) {\n        return stacked == other;\n      }\n      var result = true;\n      stack.set(object, other);\n      stack.set(other, object);\n\n      var skipCtor = isPartial;\n      while (++index < objLength) {\n        key = objProps[index];\n        var objValue = object[key],\n            othValue = other[key];\n\n        if (customizer) {\n          var compared = isPartial\n            ? customizer(othValue, objValue, key, other, object, stack)\n            : customizer(objValue, othValue, key, object, other, stack);\n        }\n        // Recursively compare objects (susceptible to call stack limits).\n        if (!(compared === undefined\n              ? (objValue === othValue || equalFunc(objValue, othValue, customizer, bitmask, stack))\n              : compared\n            )) {\n          result = false;\n          break;\n        }\n        skipCtor || (skipCtor = key == 'constructor');\n      }\n      if (result && !skipCtor) {\n        var objCtor = object.constructor,\n            othCtor = other.constructor;\n\n        // Non `Object` object instances with different constructors are not equal.\n        if (objCtor != othCtor &&\n            ('constructor' in object && 'constructor' in other) &&\n            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n              typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n          result = false;\n        }\n      }\n      stack['delete'](object);\n      stack['delete'](other);\n      return result;\n    }\n\n    /**\n     * A specialized version of `baseRest` which flattens the rest array.\n     *\n     * @private\n     * @param {Function} func The function to apply a rest parameter to.\n     * @returns {Function} Returns the new function.\n     */\n    function flatRest(func) {\n      return setToString(overRest(func, undefined, flatten), func + '');\n    }\n\n    /**\n     * Creates an array of own enumerable property names and symbols of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names and symbols.\n     */\n    function getAllKeys(object) {\n      return baseGetAllKeys(object, keys, getSymbols);\n    }\n\n    /**\n     * Creates an array of own and inherited enumerable property names and\n     * symbols of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names and symbols.\n     */\n    function getAllKeysIn(object) {\n      return baseGetAllKeys(object, keysIn, getSymbolsIn);\n    }\n\n    /**\n     * Gets metadata for `func`.\n     *\n     * @private\n     * @param {Function} func The function to query.\n     * @returns {*} Returns the metadata for `func`.\n     */\n    var getData = !metaMap ? noop : function(func) {\n      return metaMap.get(func);\n    };\n\n    /**\n     * Gets the name of `func`.\n     *\n     * @private\n     * @param {Function} func The function to query.\n     * @returns {string} Returns the function name.\n     */\n    function getFuncName(func) {\n      var result = (func.name + ''),\n          array = realNames[result],\n          length = hasOwnProperty.call(realNames, result) ? array.length : 0;\n\n      while (length--) {\n        var data = array[length],\n            otherFunc = data.func;\n        if (otherFunc == null || otherFunc == func) {\n          return data.name;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Gets the argument placeholder value for `func`.\n     *\n     * @private\n     * @param {Function} func The function to inspect.\n     * @returns {*} Returns the placeholder value.\n     */\n    function getHolder(func) {\n      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;\n      return object.placeholder;\n    }\n\n    /**\n     * Gets the appropriate \"iteratee\" function. If `_.iteratee` is customized,\n     * this function returns the custom method, otherwise it returns `baseIteratee`.\n     * If arguments are provided, the chosen function is invoked with them and\n     * its result is returned.\n     *\n     * @private\n     * @param {*} [value] The value to convert to an iteratee.\n     * @param {number} [arity] The arity of the created iteratee.\n     * @returns {Function} Returns the chosen function or its result.\n     */\n    function getIteratee() {\n      var result = lodash.iteratee || iteratee;\n      result = result === iteratee ? baseIteratee : result;\n      return arguments.length ? result(arguments[0], arguments[1]) : result;\n    }\n\n    /**\n     * Gets the data for `map`.\n     *\n     * @private\n     * @param {Object} map The map to query.\n     * @param {string} key The reference key.\n     * @returns {*} Returns the map data.\n     */\n    function getMapData(map, key) {\n      var data = map.__data__;\n      return isKeyable(key)\n        ? data[typeof key == 'string' ? 'string' : 'hash']\n        : data.map;\n    }\n\n    /**\n     * Gets the property names, values, and compare flags of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the match data of `object`.\n     */\n    function getMatchData(object) {\n      var result = keys(object),\n          length = result.length;\n\n      while (length--) {\n        var key = result[length],\n            value = object[key];\n\n        result[length] = [key, value, isStrictComparable(value)];\n      }\n      return result;\n    }\n\n    /**\n     * Gets the native function at `key` of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {string} key The key of the method to get.\n     * @returns {*} Returns the function if it's native, else `undefined`.\n     */\n    function getNative(object, key) {\n      var value = getValue(object, key);\n      return baseIsNative(value) ? value : undefined;\n    }\n\n    /**\n     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n     *\n     * @private\n     * @param {*} value The value to query.\n     * @returns {string} Returns the raw `toStringTag`.\n     */\n    function getRawTag(value) {\n      var isOwn = hasOwnProperty.call(value, symToStringTag),\n          tag = value[symToStringTag];\n\n      try {\n        value[symToStringTag] = undefined;\n        var unmasked = true;\n      } catch (e) {}\n\n      var result = nativeObjectToString.call(value);\n      if (unmasked) {\n        if (isOwn) {\n          value[symToStringTag] = tag;\n        } else {\n          delete value[symToStringTag];\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Creates an array of the own enumerable symbol properties of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of symbols.\n     */\n    var getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;\n\n    /**\n     * Creates an array of the own and inherited enumerable symbol properties\n     * of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of symbols.\n     */\n    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {\n      var result = [];\n      while (object) {\n        arrayPush(result, getSymbols(object));\n        object = getPrototype(object);\n      }\n      return result;\n    };\n\n    /**\n     * Gets the `toStringTag` of `value`.\n     *\n     * @private\n     * @param {*} value The value to query.\n     * @returns {string} Returns the `toStringTag`.\n     */\n    var getTag = baseGetTag;\n\n    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\n    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n        (Map && getTag(new Map) != mapTag) ||\n        (Promise && getTag(Promise.resolve()) != promiseTag) ||\n        (Set && getTag(new Set) != setTag) ||\n        (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n      getTag = function(value) {\n        var result = baseGetTag(value),\n            Ctor = result == objectTag ? value.constructor : undefined,\n            ctorString = Ctor ? toSource(Ctor) : '';\n\n        if (ctorString) {\n          switch (ctorString) {\n            case dataViewCtorString: return dataViewTag;\n            case mapCtorString: return mapTag;\n            case promiseCtorString: return promiseTag;\n            case setCtorString: return setTag;\n            case weakMapCtorString: return weakMapTag;\n          }\n        }\n        return result;\n      };\n    }\n\n    /**\n     * Gets the view, applying any `transforms` to the `start` and `end` positions.\n     *\n     * @private\n     * @param {number} start The start of the view.\n     * @param {number} end The end of the view.\n     * @param {Array} transforms The transformations to apply to the view.\n     * @returns {Object} Returns an object containing the `start` and `end`\n     *  positions of the view.\n     */\n    function getView(start, end, transforms) {\n      var index = -1,\n          length = transforms.length;\n\n      while (++index < length) {\n        var data = transforms[index],\n            size = data.size;\n\n        switch (data.type) {\n          case 'drop':      start += size; break;\n          case 'dropRight': end -= size; break;\n          case 'take':      end = nativeMin(end, start + size); break;\n          case 'takeRight': start = nativeMax(start, end - size); break;\n        }\n      }\n      return { 'start': start, 'end': end };\n    }\n\n    /**\n     * Extracts wrapper details from the `source` body comment.\n     *\n     * @private\n     * @param {string} source The source to inspect.\n     * @returns {Array} Returns the wrapper details.\n     */\n    function getWrapDetails(source) {\n      var match = source.match(reWrapDetails);\n      return match ? match[1].split(reSplitDetails) : [];\n    }\n\n    /**\n     * Checks if `path` exists on `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path to check.\n     * @param {Function} hasFunc The function to check properties.\n     * @returns {boolean} Returns `true` if `path` exists, else `false`.\n     */\n    function hasPath(object, path, hasFunc) {\n      path = isKey(path, object) ? [path] : castPath(path);\n\n      var index = -1,\n          length = path.length,\n          result = false;\n\n      while (++index < length) {\n        var key = toKey(path[index]);\n        if (!(result = object != null && hasFunc(object, key))) {\n          break;\n        }\n        object = object[key];\n      }\n      if (result || ++index != length) {\n        return result;\n      }\n      length = object == null ? 0 : object.length;\n      return !!length && isLength(length) && isIndex(key, length) &&\n        (isArray(object) || isArguments(object));\n    }\n\n    /**\n     * Initializes an array clone.\n     *\n     * @private\n     * @param {Array} array The array to clone.\n     * @returns {Array} Returns the initialized clone.\n     */\n    function initCloneArray(array) {\n      var length = array.length,\n          result = array.constructor(length);\n\n      // Add properties assigned by `RegExp#exec`.\n      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n        result.index = array.index;\n        result.input = array.input;\n      }\n      return result;\n    }\n\n    /**\n     * Initializes an object clone.\n     *\n     * @private\n     * @param {Object} object The object to clone.\n     * @returns {Object} Returns the initialized clone.\n     */\n    function initCloneObject(object) {\n      return (typeof object.constructor == 'function' && !isPrototype(object))\n        ? baseCreate(getPrototype(object))\n        : {};\n    }\n\n    /**\n     * Initializes an object clone based on its `toStringTag`.\n     *\n     * **Note:** This function only supports cloning values with tags of\n     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n     *\n     * @private\n     * @param {Object} object The object to clone.\n     * @param {string} tag The `toStringTag` of the object to clone.\n     * @param {Function} cloneFunc The function to clone values.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Object} Returns the initialized clone.\n     */\n    function initCloneByTag(object, tag, cloneFunc, isDeep) {\n      var Ctor = object.constructor;\n      switch (tag) {\n        case arrayBufferTag:\n          return cloneArrayBuffer(object);\n\n        case boolTag:\n        case dateTag:\n          return new Ctor(+object);\n\n        case dataViewTag:\n          return cloneDataView(object, isDeep);\n\n        case float32Tag: case float64Tag:\n        case int8Tag: case int16Tag: case int32Tag:\n        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n          return cloneTypedArray(object, isDeep);\n\n        case mapTag:\n          return cloneMap(object, isDeep, cloneFunc);\n\n        case numberTag:\n        case stringTag:\n          return new Ctor(object);\n\n        case regexpTag:\n          return cloneRegExp(object);\n\n        case setTag:\n          return cloneSet(object, isDeep, cloneFunc);\n\n        case symbolTag:\n          return cloneSymbol(object);\n      }\n    }\n\n    /**\n     * Inserts wrapper `details` in a comment at the top of the `source` body.\n     *\n     * @private\n     * @param {string} source The source to modify.\n     * @returns {Array} details The details to insert.\n     * @returns {string} Returns the modified source.\n     */\n    function insertWrapDetails(source, details) {\n      var length = details.length;\n      if (!length) {\n        return source;\n      }\n      var lastIndex = length - 1;\n      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];\n      details = details.join(length > 2 ? ', ' : ' ');\n      return source.replace(reWrapComment, '{\\n/* [wrapped with ' + details + '] */\\n');\n    }\n\n    /**\n     * Checks if `value` is a flattenable `arguments` object or array.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.\n     */\n    function isFlattenable(value) {\n      return isArray(value) || isArguments(value) ||\n        !!(spreadableSymbol && value && value[spreadableSymbol]);\n    }\n\n    /**\n     * Checks if `value` is a valid array-like index.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n     */\n    function isIndex(value, length) {\n      length = length == null ? MAX_SAFE_INTEGER : length;\n      return !!length &&\n        (typeof value == 'number' || reIsUint.test(value)) &&\n        (value > -1 && value % 1 == 0 && value < length);\n    }\n\n    /**\n     * Checks if the given arguments are from an iteratee call.\n     *\n     * @private\n     * @param {*} value The potential iteratee value argument.\n     * @param {*} index The potential iteratee index or key argument.\n     * @param {*} object The potential iteratee object argument.\n     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,\n     *  else `false`.\n     */\n    function isIterateeCall(value, index, object) {\n      if (!isObject(object)) {\n        return false;\n      }\n      var type = typeof index;\n      if (type == 'number'\n            ? (isArrayLike(object) && isIndex(index, object.length))\n            : (type == 'string' && index in object)\n          ) {\n        return eq(object[index], value);\n      }\n      return false;\n    }\n\n    /**\n     * Checks if `value` is a property name and not a property path.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @param {Object} [object] The object to query keys on.\n     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n     */\n    function isKey(value, object) {\n      if (isArray(value)) {\n        return false;\n      }\n      var type = typeof value;\n      if (type == 'number' || type == 'symbol' || type == 'boolean' ||\n          value == null || isSymbol(value)) {\n        return true;\n      }\n      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n        (object != null && value in Object(object));\n    }\n\n    /**\n     * Checks if `value` is suitable for use as unique object key.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n     */\n    function isKeyable(value) {\n      var type = typeof value;\n      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n        ? (value !== '__proto__')\n        : (value === null);\n    }\n\n    /**\n     * Checks if `func` has a lazy counterpart.\n     *\n     * @private\n     * @param {Function} func The function to check.\n     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,\n     *  else `false`.\n     */\n    function isLaziable(func) {\n      var funcName = getFuncName(func),\n          other = lodash[funcName];\n\n      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {\n        return false;\n      }\n      if (func === other) {\n        return true;\n      }\n      var data = getData(other);\n      return !!data && func === data[0];\n    }\n\n    /**\n     * Checks if `func` has its source masked.\n     *\n     * @private\n     * @param {Function} func The function to check.\n     * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n     */\n    function isMasked(func) {\n      return !!maskSrcKey && (maskSrcKey in func);\n    }\n\n    /**\n     * Checks if `func` is capable of being masked.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.\n     */\n    var isMaskable = coreJsData ? isFunction : stubFalse;\n\n    /**\n     * Checks if `value` is likely a prototype object.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n     */\n    function isPrototype(value) {\n      var Ctor = value && value.constructor,\n          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n      return value === proto;\n    }\n\n    /**\n     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` if suitable for strict\n     *  equality comparisons, else `false`.\n     */\n    function isStrictComparable(value) {\n      return value === value && !isObject(value);\n    }\n\n    /**\n     * A specialized version of `matchesProperty` for source values suitable\n     * for strict equality comparisons, i.e. `===`.\n     *\n     * @private\n     * @param {string} key The key of the property to get.\n     * @param {*} srcValue The value to match.\n     * @returns {Function} Returns the new spec function.\n     */\n    function matchesStrictComparable(key, srcValue) {\n      return function(object) {\n        if (object == null) {\n          return false;\n        }\n        return object[key] === srcValue &&\n          (srcValue !== undefined || (key in Object(object)));\n      };\n    }\n\n    /**\n     * A specialized version of `_.memoize` which clears the memoized function's\n     * cache when it exceeds `MAX_MEMOIZE_SIZE`.\n     *\n     * @private\n     * @param {Function} func The function to have its output memoized.\n     * @returns {Function} Returns the new memoized function.\n     */\n    function memoizeCapped(func) {\n      var result = memoize(func, function(key) {\n        if (cache.size === MAX_MEMOIZE_SIZE) {\n          cache.clear();\n        }\n        return key;\n      });\n\n      var cache = result.cache;\n      return result;\n    }\n\n    /**\n     * Merges the function metadata of `source` into `data`.\n     *\n     * Merging metadata reduces the number of wrappers used to invoke a function.\n     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`\n     * may be applied regardless of execution order. Methods like `_.ary` and\n     * `_.rearg` modify function arguments, making the order in which they are\n     * executed important, preventing the merging of metadata. However, we make\n     * an exception for a safe combined case where curried functions have `_.ary`\n     * and or `_.rearg` applied.\n     *\n     * @private\n     * @param {Array} data The destination metadata.\n     * @param {Array} source The source metadata.\n     * @returns {Array} Returns `data`.\n     */\n    function mergeData(data, source) {\n      var bitmask = data[1],\n          srcBitmask = source[1],\n          newBitmask = bitmask | srcBitmask,\n          isCommon = newBitmask < (BIND_FLAG | BIND_KEY_FLAG | ARY_FLAG);\n\n      var isCombo =\n        ((srcBitmask == ARY_FLAG) && (bitmask == CURRY_FLAG)) ||\n        ((srcBitmask == ARY_FLAG) && (bitmask == REARG_FLAG) && (data[7].length <= source[8])) ||\n        ((srcBitmask == (ARY_FLAG | REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == CURRY_FLAG));\n\n      // Exit early if metadata can't be merged.\n      if (!(isCommon || isCombo)) {\n        return data;\n      }\n      // Use source `thisArg` if available.\n      if (srcBitmask & BIND_FLAG) {\n        data[2] = source[2];\n        // Set when currying a bound function.\n        newBitmask |= bitmask & BIND_FLAG ? 0 : CURRY_BOUND_FLAG;\n      }\n      // Compose partial arguments.\n      var value = source[3];\n      if (value) {\n        var partials = data[3];\n        data[3] = partials ? composeArgs(partials, value, source[4]) : value;\n        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];\n      }\n      // Compose partial right arguments.\n      value = source[5];\n      if (value) {\n        partials = data[5];\n        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;\n        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];\n      }\n      // Use source `argPos` if available.\n      value = source[7];\n      if (value) {\n        data[7] = value;\n      }\n      // Use source `ary` if it's smaller.\n      if (srcBitmask & ARY_FLAG) {\n        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);\n      }\n      // Use source `arity` if one is not provided.\n      if (data[9] == null) {\n        data[9] = source[9];\n      }\n      // Use source `func` and merge bitmasks.\n      data[0] = source[0];\n      data[1] = newBitmask;\n\n      return data;\n    }\n\n    /**\n     * Used by `_.defaultsDeep` to customize its `_.merge` use.\n     *\n     * @private\n     * @param {*} objValue The destination value.\n     * @param {*} srcValue The source value.\n     * @param {string} key The key of the property to merge.\n     * @param {Object} object The parent object of `objValue`.\n     * @param {Object} source The parent object of `srcValue`.\n     * @param {Object} [stack] Tracks traversed source values and their merged\n     *  counterparts.\n     * @returns {*} Returns the value to assign.\n     */\n    function mergeDefaults(objValue, srcValue, key, object, source, stack) {\n      if (isObject(objValue) && isObject(srcValue)) {\n        // Recursively merge objects and arrays (susceptible to call stack limits).\n        stack.set(srcValue, objValue);\n        baseMerge(objValue, srcValue, undefined, mergeDefaults, stack);\n        stack['delete'](srcValue);\n      }\n      return objValue;\n    }\n\n    /**\n     * This function is like\n     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n     * except that it includes inherited enumerable properties.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     */\n    function nativeKeysIn(object) {\n      var result = [];\n      if (object != null) {\n        for (var key in Object(object)) {\n          result.push(key);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Converts `value` to a string using `Object.prototype.toString`.\n     *\n     * @private\n     * @param {*} value The value to convert.\n     * @returns {string} Returns the converted string.\n     */\n    function objectToString(value) {\n      return nativeObjectToString.call(value);\n    }\n\n    /**\n     * A specialized version of `baseRest` which transforms the rest array.\n     *\n     * @private\n     * @param {Function} func The function to apply a rest parameter to.\n     * @param {number} [start=func.length-1] The start position of the rest parameter.\n     * @param {Function} transform The rest array transform.\n     * @returns {Function} Returns the new function.\n     */\n    function overRest(func, start, transform) {\n      start = nativeMax(start === undefined ? (func.length - 1) : start, 0);\n      return function() {\n        var args = arguments,\n            index = -1,\n            length = nativeMax(args.length - start, 0),\n            array = Array(length);\n\n        while (++index < length) {\n          array[index] = args[start + index];\n        }\n        index = -1;\n        var otherArgs = Array(start + 1);\n        while (++index < start) {\n          otherArgs[index] = args[index];\n        }\n        otherArgs[start] = transform(array);\n        return apply(func, this, otherArgs);\n      };\n    }\n\n    /**\n     * Gets the parent value at `path` of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Array} path The path to get the parent value of.\n     * @returns {*} Returns the parent value.\n     */\n    function parent(object, path) {\n      return path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));\n    }\n\n    /**\n     * Reorder `array` according to the specified indexes where the element at\n     * the first index is assigned as the first element, the element at\n     * the second index is assigned as the second element, and so on.\n     *\n     * @private\n     * @param {Array} array The array to reorder.\n     * @param {Array} indexes The arranged array indexes.\n     * @returns {Array} Returns `array`.\n     */\n    function reorder(array, indexes) {\n      var arrLength = array.length,\n          length = nativeMin(indexes.length, arrLength),\n          oldArray = copyArray(array);\n\n      while (length--) {\n        var index = indexes[length];\n        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;\n      }\n      return array;\n    }\n\n    /**\n     * Sets metadata for `func`.\n     *\n     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short\n     * period of time, it will trip its breaker and transition to an identity\n     * function to avoid garbage collection pauses in V8. See\n     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)\n     * for more details.\n     *\n     * @private\n     * @param {Function} func The function to associate metadata with.\n     * @param {*} data The metadata.\n     * @returns {Function} Returns `func`.\n     */\n    var setData = shortOut(baseSetData);\n\n    /**\n     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).\n     *\n     * @private\n     * @param {Function} func The function to delay.\n     * @param {number} wait The number of milliseconds to delay invocation.\n     * @returns {number|Object} Returns the timer id or timeout object.\n     */\n    var setTimeout = ctxSetTimeout || function(func, wait) {\n      return root.setTimeout(func, wait);\n    };\n\n    /**\n     * Sets the `toString` method of `func` to return `string`.\n     *\n     * @private\n     * @param {Function} func The function to modify.\n     * @param {Function} string The `toString` result.\n     * @returns {Function} Returns `func`.\n     */\n    var setToString = shortOut(baseSetToString);\n\n    /**\n     * Sets the `toString` method of `wrapper` to mimic the source of `reference`\n     * with wrapper details in a comment at the top of the source body.\n     *\n     * @private\n     * @param {Function} wrapper The function to modify.\n     * @param {Function} reference The reference function.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @returns {Function} Returns `wrapper`.\n     */\n    function setWrapToString(wrapper, reference, bitmask) {\n      var source = (reference + '');\n      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));\n    }\n\n    /**\n     * Creates a function that'll short out and invoke `identity` instead\n     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`\n     * milliseconds.\n     *\n     * @private\n     * @param {Function} func The function to restrict.\n     * @returns {Function} Returns the new shortable function.\n     */\n    function shortOut(func) {\n      var count = 0,\n          lastCalled = 0;\n\n      return function() {\n        var stamp = nativeNow(),\n            remaining = HOT_SPAN - (stamp - lastCalled);\n\n        lastCalled = stamp;\n        if (remaining > 0) {\n          if (++count >= HOT_COUNT) {\n            return arguments[0];\n          }\n        } else {\n          count = 0;\n        }\n        return func.apply(undefined, arguments);\n      };\n    }\n\n    /**\n     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.\n     *\n     * @private\n     * @param {Array} array The array to shuffle.\n     * @param {number} [size=array.length] The size of `array`.\n     * @returns {Array} Returns `array`.\n     */\n    function shuffleSelf(array, size) {\n      var index = -1,\n          length = array.length,\n          lastIndex = length - 1;\n\n      size = size === undefined ? length : size;\n      while (++index < size) {\n        var rand = baseRandom(index, lastIndex),\n            value = array[rand];\n\n        array[rand] = array[index];\n        array[index] = value;\n      }\n      array.length = size;\n      return array;\n    }\n\n    /**\n     * Converts `string` to a property path array.\n     *\n     * @private\n     * @param {string} string The string to convert.\n     * @returns {Array} Returns the property path array.\n     */\n    var stringToPath = memoizeCapped(function(string) {\n      string = toString(string);\n\n      var result = [];\n      if (reLeadingDot.test(string)) {\n        result.push('');\n      }\n      string.replace(rePropName, function(match, number, quote, string) {\n        result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));\n      });\n      return result;\n    });\n\n    /**\n     * Converts `value` to a string key if it's not a string or symbol.\n     *\n     * @private\n     * @param {*} value The value to inspect.\n     * @returns {string|symbol} Returns the key.\n     */\n    function toKey(value) {\n      if (typeof value == 'string' || isSymbol(value)) {\n        return value;\n      }\n      var result = (value + '');\n      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n    }\n\n    /**\n     * Converts `func` to its source code.\n     *\n     * @private\n     * @param {Function} func The function to convert.\n     * @returns {string} Returns the source code.\n     */\n    function toSource(func) {\n      if (func != null) {\n        try {\n          return funcToString.call(func);\n        } catch (e) {}\n        try {\n          return (func + '');\n        } catch (e) {}\n      }\n      return '';\n    }\n\n    /**\n     * Updates wrapper `details` based on `bitmask` flags.\n     *\n     * @private\n     * @returns {Array} details The details to modify.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @returns {Array} Returns `details`.\n     */\n    function updateWrapDetails(details, bitmask) {\n      arrayEach(wrapFlags, function(pair) {\n        var value = '_.' + pair[0];\n        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {\n          details.push(value);\n        }\n      });\n      return details.sort();\n    }\n\n    /**\n     * Creates a clone of `wrapper`.\n     *\n     * @private\n     * @param {Object} wrapper The wrapper to clone.\n     * @returns {Object} Returns the cloned wrapper.\n     */\n    function wrapperClone(wrapper) {\n      if (wrapper instanceof LazyWrapper) {\n        return wrapper.clone();\n      }\n      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);\n      result.__actions__ = copyArray(wrapper.__actions__);\n      result.__index__  = wrapper.__index__;\n      result.__values__ = wrapper.__values__;\n      return result;\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates an array of elements split into groups the length of `size`.\n     * If `array` can't be split evenly, the final chunk will be the remaining\n     * elements.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to process.\n     * @param {number} [size=1] The length of each chunk\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the new array of chunks.\n     * @example\n     *\n     * _.chunk(['a', 'b', 'c', 'd'], 2);\n     * // => [['a', 'b'], ['c', 'd']]\n     *\n     * _.chunk(['a', 'b', 'c', 'd'], 3);\n     * // => [['a', 'b', 'c'], ['d']]\n     */\n    function chunk(array, size, guard) {\n      if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {\n        size = 1;\n      } else {\n        size = nativeMax(toInteger(size), 0);\n      }\n      var length = array == null ? 0 : array.length;\n      if (!length || size < 1) {\n        return [];\n      }\n      var index = 0,\n          resIndex = 0,\n          result = Array(nativeCeil(length / size));\n\n      while (index < length) {\n        result[resIndex++] = baseSlice(array, index, (index += size));\n      }\n      return result;\n    }\n\n    /**\n     * Creates an array with all falsey values removed. The values `false`, `null`,\n     * `0`, `\"\"`, `undefined`, and `NaN` are falsey.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to compact.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * _.compact([0, 1, false, 2, '', 3]);\n     * // => [1, 2, 3]\n     */\n    function compact(array) {\n      var index = -1,\n          length = array == null ? 0 : array.length,\n          resIndex = 0,\n          result = [];\n\n      while (++index < length) {\n        var value = array[index];\n        if (value) {\n          result[resIndex++] = value;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Creates a new array concatenating `array` with any additional arrays\n     * and/or values.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to concatenate.\n     * @param {...*} [values] The values to concatenate.\n     * @returns {Array} Returns the new concatenated array.\n     * @example\n     *\n     * var array = [1];\n     * var other = _.concat(array, 2, [3], [[4]]);\n     *\n     * console.log(other);\n     * // => [1, 2, 3, [4]]\n     *\n     * console.log(array);\n     * // => [1]\n     */\n    function concat() {\n      var length = arguments.length;\n      if (!length) {\n        return [];\n      }\n      var args = Array(length - 1),\n          array = arguments[0],\n          index = length;\n\n      while (index--) {\n        args[index - 1] = arguments[index];\n      }\n      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));\n    }\n\n    /**\n     * Creates an array of `array` values not included in the other given arrays\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons. The order and references of result values are\n     * determined by the first array.\n     *\n     * **Note:** Unlike `_.pullAll`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {...Array} [values] The values to exclude.\n     * @returns {Array} Returns the new array of filtered values.\n     * @see _.without, _.xor\n     * @example\n     *\n     * _.difference([2, 1], [2, 3]);\n     * // => [1]\n     */\n    var difference = baseRest(function(array, values) {\n      return isArrayLikeObject(array)\n        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))\n        : [];\n    });\n\n    /**\n     * This method is like `_.difference` except that it accepts `iteratee` which\n     * is invoked for each element of `array` and `values` to generate the criterion\n     * by which they're compared. The order and references of result values are\n     * determined by the first array. The iteratee is invoked with one argument:\n     * (value).\n     *\n     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {...Array} [values] The values to exclude.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n     * // => [1.2]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');\n     * // => [{ 'x': 2 }]\n     */\n    var differenceBy = baseRest(function(array, values) {\n      var iteratee = last(values);\n      if (isArrayLikeObject(iteratee)) {\n        iteratee = undefined;\n      }\n      return isArrayLikeObject(array)\n        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))\n        : [];\n    });\n\n    /**\n     * This method is like `_.difference` except that it accepts `comparator`\n     * which is invoked to compare elements of `array` to `values`. The order and\n     * references of result values are determined by the first array. The comparator\n     * is invoked with two arguments: (arrVal, othVal).\n     *\n     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {...Array} [values] The values to exclude.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n     *\n     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);\n     * // => [{ 'x': 2, 'y': 1 }]\n     */\n    var differenceWith = baseRest(function(array, values) {\n      var comparator = last(values);\n      if (isArrayLikeObject(comparator)) {\n        comparator = undefined;\n      }\n      return isArrayLikeObject(array)\n        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)\n        : [];\n    });\n\n    /**\n     * Creates a slice of `array` with `n` elements dropped from the beginning.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.5.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=1] The number of elements to drop.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.drop([1, 2, 3]);\n     * // => [2, 3]\n     *\n     * _.drop([1, 2, 3], 2);\n     * // => [3]\n     *\n     * _.drop([1, 2, 3], 5);\n     * // => []\n     *\n     * _.drop([1, 2, 3], 0);\n     * // => [1, 2, 3]\n     */\n    function drop(array, n, guard) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      n = (guard || n === undefined) ? 1 : toInteger(n);\n      return baseSlice(array, n < 0 ? 0 : n, length);\n    }\n\n    /**\n     * Creates a slice of `array` with `n` elements dropped from the end.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=1] The number of elements to drop.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.dropRight([1, 2, 3]);\n     * // => [1, 2]\n     *\n     * _.dropRight([1, 2, 3], 2);\n     * // => [1]\n     *\n     * _.dropRight([1, 2, 3], 5);\n     * // => []\n     *\n     * _.dropRight([1, 2, 3], 0);\n     * // => [1, 2, 3]\n     */\n    function dropRight(array, n, guard) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      n = (guard || n === undefined) ? 1 : toInteger(n);\n      n = length - n;\n      return baseSlice(array, 0, n < 0 ? 0 : n);\n    }\n\n    /**\n     * Creates a slice of `array` excluding elements dropped from the end.\n     * Elements are dropped until `predicate` returns falsey. The predicate is\n     * invoked with three arguments: (value, index, array).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': true },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': false }\n     * ];\n     *\n     * _.dropRightWhile(users, function(o) { return !o.active; });\n     * // => objects for ['barney']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });\n     * // => objects for ['barney', 'fred']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.dropRightWhile(users, ['active', false]);\n     * // => objects for ['barney']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.dropRightWhile(users, 'active');\n     * // => objects for ['barney', 'fred', 'pebbles']\n     */\n    function dropRightWhile(array, predicate) {\n      return (array && array.length)\n        ? baseWhile(array, getIteratee(predicate, 3), true, true)\n        : [];\n    }\n\n    /**\n     * Creates a slice of `array` excluding elements dropped from the beginning.\n     * Elements are dropped until `predicate` returns falsey. The predicate is\n     * invoked with three arguments: (value, index, array).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': false },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': true }\n     * ];\n     *\n     * _.dropWhile(users, function(o) { return !o.active; });\n     * // => objects for ['pebbles']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.dropWhile(users, { 'user': 'barney', 'active': false });\n     * // => objects for ['fred', 'pebbles']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.dropWhile(users, ['active', false]);\n     * // => objects for ['pebbles']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.dropWhile(users, 'active');\n     * // => objects for ['barney', 'fred', 'pebbles']\n     */\n    function dropWhile(array, predicate) {\n      return (array && array.length)\n        ? baseWhile(array, getIteratee(predicate, 3), true)\n        : [];\n    }\n\n    /**\n     * Fills elements of `array` with `value` from `start` up to, but not\n     * including, `end`.\n     *\n     * **Note:** This method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.2.0\n     * @category Array\n     * @param {Array} array The array to fill.\n     * @param {*} value The value to fill `array` with.\n     * @param {number} [start=0] The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = [1, 2, 3];\n     *\n     * _.fill(array, 'a');\n     * console.log(array);\n     * // => ['a', 'a', 'a']\n     *\n     * _.fill(Array(3), 2);\n     * // => [2, 2, 2]\n     *\n     * _.fill([4, 6, 8, 10], '*', 1, 3);\n     * // => [4, '*', '*', 10]\n     */\n    function fill(array, value, start, end) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {\n        start = 0;\n        end = length;\n      }\n      return baseFill(array, value, start, end);\n    }\n\n    /**\n     * This method is like `_.find` except that it returns the index of the first\n     * element `predicate` returns truthy for instead of the element itself.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param {number} [fromIndex=0] The index to search from.\n     * @returns {number} Returns the index of the found element, else `-1`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': false },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': true }\n     * ];\n     *\n     * _.findIndex(users, function(o) { return o.user == 'barney'; });\n     * // => 0\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.findIndex(users, { 'user': 'fred', 'active': false });\n     * // => 1\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.findIndex(users, ['active', false]);\n     * // => 0\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.findIndex(users, 'active');\n     * // => 2\n     */\n    function findIndex(array, predicate, fromIndex) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return -1;\n      }\n      var index = fromIndex == null ? 0 : toInteger(fromIndex);\n      if (index < 0) {\n        index = nativeMax(length + index, 0);\n      }\n      return baseFindIndex(array, getIteratee(predicate, 3), index);\n    }\n\n    /**\n     * This method is like `_.findIndex` except that it iterates over elements\n     * of `collection` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param {number} [fromIndex=array.length-1] The index to search from.\n     * @returns {number} Returns the index of the found element, else `-1`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': true },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': false }\n     * ];\n     *\n     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });\n     * // => 2\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.findLastIndex(users, { 'user': 'barney', 'active': true });\n     * // => 0\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.findLastIndex(users, ['active', false]);\n     * // => 2\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.findLastIndex(users, 'active');\n     * // => 0\n     */\n    function findLastIndex(array, predicate, fromIndex) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return -1;\n      }\n      var index = length - 1;\n      if (fromIndex !== undefined) {\n        index = toInteger(fromIndex);\n        index = fromIndex < 0\n          ? nativeMax(length + index, 0)\n          : nativeMin(index, length - 1);\n      }\n      return baseFindIndex(array, getIteratee(predicate, 3), index, true);\n    }\n\n    /**\n     * Flattens `array` a single level deep.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to flatten.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * _.flatten([1, [2, [3, [4]], 5]]);\n     * // => [1, 2, [3, [4]], 5]\n     */\n    function flatten(array) {\n      var length = array == null ? 0 : array.length;\n      return length ? baseFlatten(array, 1) : [];\n    }\n\n    /**\n     * Recursively flattens `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to flatten.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * _.flattenDeep([1, [2, [3, [4]], 5]]);\n     * // => [1, 2, 3, 4, 5]\n     */\n    function flattenDeep(array) {\n      var length = array == null ? 0 : array.length;\n      return length ? baseFlatten(array, INFINITY) : [];\n    }\n\n    /**\n     * Recursively flatten `array` up to `depth` times.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.4.0\n     * @category Array\n     * @param {Array} array The array to flatten.\n     * @param {number} [depth=1] The maximum recursion depth.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * var array = [1, [2, [3, [4]], 5]];\n     *\n     * _.flattenDepth(array, 1);\n     * // => [1, 2, [3, [4]], 5]\n     *\n     * _.flattenDepth(array, 2);\n     * // => [1, 2, 3, [4], 5]\n     */\n    function flattenDepth(array, depth) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      depth = depth === undefined ? 1 : toInteger(depth);\n      return baseFlatten(array, depth);\n    }\n\n    /**\n     * The inverse of `_.toPairs`; this method returns an object composed\n     * from key-value `pairs`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} pairs The key-value pairs.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * _.fromPairs([['a', 1], ['b', 2]]);\n     * // => { 'a': 1, 'b': 2 }\n     */\n    function fromPairs(pairs) {\n      var index = -1,\n          length = pairs == null ? 0 : pairs.length,\n          result = {};\n\n      while (++index < length) {\n        var pair = pairs[index];\n        result[pair[0]] = pair[1];\n      }\n      return result;\n    }\n\n    /**\n     * Gets the first element of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @alias first\n     * @category Array\n     * @param {Array} array The array to query.\n     * @returns {*} Returns the first element of `array`.\n     * @example\n     *\n     * _.head([1, 2, 3]);\n     * // => 1\n     *\n     * _.head([]);\n     * // => undefined\n     */\n    function head(array) {\n      return (array && array.length) ? array[0] : undefined;\n    }\n\n    /**\n     * Gets the index at which the first occurrence of `value` is found in `array`\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons. If `fromIndex` is negative, it's used as the\n     * offset from the end of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {*} value The value to search for.\n     * @param {number} [fromIndex=0] The index to search from.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     * @example\n     *\n     * _.indexOf([1, 2, 1, 2], 2);\n     * // => 1\n     *\n     * // Search from the `fromIndex`.\n     * _.indexOf([1, 2, 1, 2], 2, 2);\n     * // => 3\n     */\n    function indexOf(array, value, fromIndex) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return -1;\n      }\n      var index = fromIndex == null ? 0 : toInteger(fromIndex);\n      if (index < 0) {\n        index = nativeMax(length + index, 0);\n      }\n      return baseIndexOf(array, value, index);\n    }\n\n    /**\n     * Gets all but the last element of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.initial([1, 2, 3]);\n     * // => [1, 2]\n     */\n    function initial(array) {\n      var length = array == null ? 0 : array.length;\n      return length ? baseSlice(array, 0, -1) : [];\n    }\n\n    /**\n     * Creates an array of unique values that are included in all given arrays\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons. The order and references of result values are\n     * determined by the first array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @returns {Array} Returns the new array of intersecting values.\n     * @example\n     *\n     * _.intersection([2, 1], [2, 3]);\n     * // => [2]\n     */\n    var intersection = baseRest(function(arrays) {\n      var mapped = arrayMap(arrays, castArrayLikeObject);\n      return (mapped.length && mapped[0] === arrays[0])\n        ? baseIntersection(mapped)\n        : [];\n    });\n\n    /**\n     * This method is like `_.intersection` except that it accepts `iteratee`\n     * which is invoked for each element of each `arrays` to generate the criterion\n     * by which they're compared. The order and references of result values are\n     * determined by the first array. The iteratee is invoked with one argument:\n     * (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns the new array of intersecting values.\n     * @example\n     *\n     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n     * // => [2.1]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n     * // => [{ 'x': 1 }]\n     */\n    var intersectionBy = baseRest(function(arrays) {\n      var iteratee = last(arrays),\n          mapped = arrayMap(arrays, castArrayLikeObject);\n\n      if (iteratee === last(mapped)) {\n        iteratee = undefined;\n      } else {\n        mapped.pop();\n      }\n      return (mapped.length && mapped[0] === arrays[0])\n        ? baseIntersection(mapped, getIteratee(iteratee, 2))\n        : [];\n    });\n\n    /**\n     * This method is like `_.intersection` except that it accepts `comparator`\n     * which is invoked to compare elements of `arrays`. The order and references\n     * of result values are determined by the first array. The comparator is\n     * invoked with two arguments: (arrVal, othVal).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of intersecting values.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n     *\n     * _.intersectionWith(objects, others, _.isEqual);\n     * // => [{ 'x': 1, 'y': 2 }]\n     */\n    var intersectionWith = baseRest(function(arrays) {\n      var comparator = last(arrays),\n          mapped = arrayMap(arrays, castArrayLikeObject);\n\n      comparator = typeof comparator == 'function' ? comparator : undefined;\n      if (comparator) {\n        mapped.pop();\n      }\n      return (mapped.length && mapped[0] === arrays[0])\n        ? baseIntersection(mapped, undefined, comparator)\n        : [];\n    });\n\n    /**\n     * Converts all elements in `array` into a string separated by `separator`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to convert.\n     * @param {string} [separator=','] The element separator.\n     * @returns {string} Returns the joined string.\n     * @example\n     *\n     * _.join(['a', 'b', 'c'], '~');\n     * // => 'a~b~c'\n     */\n    function join(array, separator) {\n      return array == null ? '' : nativeJoin.call(array, separator);\n    }\n\n    /**\n     * Gets the last element of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @returns {*} Returns the last element of `array`.\n     * @example\n     *\n     * _.last([1, 2, 3]);\n     * // => 3\n     */\n    function last(array) {\n      var length = array == null ? 0 : array.length;\n      return length ? array[length - 1] : undefined;\n    }\n\n    /**\n     * This method is like `_.indexOf` except that it iterates over elements of\n     * `array` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {*} value The value to search for.\n     * @param {number} [fromIndex=array.length-1] The index to search from.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     * @example\n     *\n     * _.lastIndexOf([1, 2, 1, 2], 2);\n     * // => 3\n     *\n     * // Search from the `fromIndex`.\n     * _.lastIndexOf([1, 2, 1, 2], 2, 2);\n     * // => 1\n     */\n    function lastIndexOf(array, value, fromIndex) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return -1;\n      }\n      var index = length;\n      if (fromIndex !== undefined) {\n        index = toInteger(fromIndex);\n        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);\n      }\n      return value === value\n        ? strictLastIndexOf(array, value, index)\n        : baseFindIndex(array, baseIsNaN, index, true);\n    }\n\n    /**\n     * Gets the element at index `n` of `array`. If `n` is negative, the nth\n     * element from the end is returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.11.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=0] The index of the element to return.\n     * @returns {*} Returns the nth element of `array`.\n     * @example\n     *\n     * var array = ['a', 'b', 'c', 'd'];\n     *\n     * _.nth(array, 1);\n     * // => 'b'\n     *\n     * _.nth(array, -2);\n     * // => 'c';\n     */\n    function nth(array, n) {\n      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;\n    }\n\n    /**\n     * Removes all given values from `array` using\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons.\n     *\n     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`\n     * to remove elements from an array by predicate.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {...*} [values] The values to remove.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];\n     *\n     * _.pull(array, 'a', 'c');\n     * console.log(array);\n     * // => ['b', 'b']\n     */\n    var pull = baseRest(pullAll);\n\n    /**\n     * This method is like `_.pull` except that it accepts an array of values to remove.\n     *\n     * **Note:** Unlike `_.difference`, this method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {Array} values The values to remove.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];\n     *\n     * _.pullAll(array, ['a', 'c']);\n     * console.log(array);\n     * // => ['b', 'b']\n     */\n    function pullAll(array, values) {\n      return (array && array.length && values && values.length)\n        ? basePullAll(array, values)\n        : array;\n    }\n\n    /**\n     * This method is like `_.pullAll` except that it accepts `iteratee` which is\n     * invoked for each element of `array` and `values` to generate the criterion\n     * by which they're compared. The iteratee is invoked with one argument: (value).\n     *\n     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {Array} values The values to remove.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];\n     *\n     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');\n     * console.log(array);\n     * // => [{ 'x': 2 }]\n     */\n    function pullAllBy(array, values, iteratee) {\n      return (array && array.length && values && values.length)\n        ? basePullAll(array, values, getIteratee(iteratee, 2))\n        : array;\n    }\n\n    /**\n     * This method is like `_.pullAll` except that it accepts `comparator` which\n     * is invoked to compare elements of `array` to `values`. The comparator is\n     * invoked with two arguments: (arrVal, othVal).\n     *\n     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.6.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {Array} values The values to remove.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];\n     *\n     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);\n     * console.log(array);\n     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]\n     */\n    function pullAllWith(array, values, comparator) {\n      return (array && array.length && values && values.length)\n        ? basePullAll(array, values, undefined, comparator)\n        : array;\n    }\n\n    /**\n     * Removes elements from `array` corresponding to `indexes` and returns an\n     * array of removed elements.\n     *\n     * **Note:** Unlike `_.at`, this method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {...(number|number[])} [indexes] The indexes of elements to remove.\n     * @returns {Array} Returns the new array of removed elements.\n     * @example\n     *\n     * var array = ['a', 'b', 'c', 'd'];\n     * var pulled = _.pullAt(array, [1, 3]);\n     *\n     * console.log(array);\n     * // => ['a', 'c']\n     *\n     * console.log(pulled);\n     * // => ['b', 'd']\n     */\n    var pullAt = flatRest(function(array, indexes) {\n      var length = array == null ? 0 : array.length,\n          result = baseAt(array, indexes);\n\n      basePullAt(array, arrayMap(indexes, function(index) {\n        return isIndex(index, length) ? +index : index;\n      }).sort(compareAscending));\n\n      return result;\n    });\n\n    /**\n     * Removes all elements from `array` that `predicate` returns truthy for\n     * and returns an array of the removed elements. The predicate is invoked\n     * with three arguments: (value, index, array).\n     *\n     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`\n     * to pull elements from an array by value.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new array of removed elements.\n     * @example\n     *\n     * var array = [1, 2, 3, 4];\n     * var evens = _.remove(array, function(n) {\n     *   return n % 2 == 0;\n     * });\n     *\n     * console.log(array);\n     * // => [1, 3]\n     *\n     * console.log(evens);\n     * // => [2, 4]\n     */\n    function remove(array, predicate) {\n      var result = [];\n      if (!(array && array.length)) {\n        return result;\n      }\n      var index = -1,\n          indexes = [],\n          length = array.length;\n\n      predicate = getIteratee(predicate, 3);\n      while (++index < length) {\n        var value = array[index];\n        if (predicate(value, index, array)) {\n          result.push(value);\n          indexes.push(index);\n        }\n      }\n      basePullAt(array, indexes);\n      return result;\n    }\n\n    /**\n     * Reverses `array` so that the first element becomes the last, the second\n     * element becomes the second to last, and so on.\n     *\n     * **Note:** This method mutates `array` and is based on\n     * [`Array#reverse`](https://mdn.io/Array/reverse).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = [1, 2, 3];\n     *\n     * _.reverse(array);\n     * // => [3, 2, 1]\n     *\n     * console.log(array);\n     * // => [3, 2, 1]\n     */\n    function reverse(array) {\n      return array == null ? array : nativeReverse.call(array);\n    }\n\n    /**\n     * Creates a slice of `array` from `start` up to, but not including, `end`.\n     *\n     * **Note:** This method is used instead of\n     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are\n     * returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to slice.\n     * @param {number} [start=0] The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns the slice of `array`.\n     */\n    function slice(array, start, end) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {\n        start = 0;\n        end = length;\n      }\n      else {\n        start = start == null ? 0 : toInteger(start);\n        end = end === undefined ? length : toInteger(end);\n      }\n      return baseSlice(array, start, end);\n    }\n\n    /**\n     * Uses a binary search to determine the lowest index at which `value`\n     * should be inserted into `array` in order to maintain its sort order.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     * @example\n     *\n     * _.sortedIndex([30, 50], 40);\n     * // => 1\n     */\n    function sortedIndex(array, value) {\n      return baseSortedIndex(array, value);\n    }\n\n    /**\n     * This method is like `_.sortedIndex` except that it accepts `iteratee`\n     * which is invoked for `value` and each element of `array` to compute their\n     * sort ranking. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     * @example\n     *\n     * var objects = [{ 'x': 4 }, { 'x': 5 }];\n     *\n     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });\n     * // => 0\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');\n     * // => 0\n     */\n    function sortedIndexBy(array, value, iteratee) {\n      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));\n    }\n\n    /**\n     * This method is like `_.indexOf` except that it performs a binary\n     * search on a sorted `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {*} value The value to search for.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     * @example\n     *\n     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);\n     * // => 1\n     */\n    function sortedIndexOf(array, value) {\n      var length = array == null ? 0 : array.length;\n      if (length) {\n        var index = baseSortedIndex(array, value);\n        if (index < length && eq(array[index], value)) {\n          return index;\n        }\n      }\n      return -1;\n    }\n\n    /**\n     * This method is like `_.sortedIndex` except that it returns the highest\n     * index at which `value` should be inserted into `array` in order to\n     * maintain its sort order.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     * @example\n     *\n     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);\n     * // => 4\n     */\n    function sortedLastIndex(array, value) {\n      return baseSortedIndex(array, value, true);\n    }\n\n    /**\n     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`\n     * which is invoked for `value` and each element of `array` to compute their\n     * sort ranking. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     * @example\n     *\n     * var objects = [{ 'x': 4 }, { 'x': 5 }];\n     *\n     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });\n     * // => 1\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');\n     * // => 1\n     */\n    function sortedLastIndexBy(array, value, iteratee) {\n      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);\n    }\n\n    /**\n     * This method is like `_.lastIndexOf` except that it performs a binary\n     * search on a sorted `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {*} value The value to search for.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     * @example\n     *\n     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);\n     * // => 3\n     */\n    function sortedLastIndexOf(array, value) {\n      var length = array == null ? 0 : array.length;\n      if (length) {\n        var index = baseSortedIndex(array, value, true) - 1;\n        if (eq(array[index], value)) {\n          return index;\n        }\n      }\n      return -1;\n    }\n\n    /**\n     * This method is like `_.uniq` except that it's designed and optimized\n     * for sorted arrays.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * _.sortedUniq([1, 1, 2]);\n     * // => [1, 2]\n     */\n    function sortedUniq(array) {\n      return (array && array.length)\n        ? baseSortedUniq(array)\n        : [];\n    }\n\n    /**\n     * This method is like `_.uniqBy` except that it's designed and optimized\n     * for sorted arrays.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);\n     * // => [1.1, 2.3]\n     */\n    function sortedUniqBy(array, iteratee) {\n      return (array && array.length)\n        ? baseSortedUniq(array, getIteratee(iteratee, 2))\n        : [];\n    }\n\n    /**\n     * Gets all but the first element of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.tail([1, 2, 3]);\n     * // => [2, 3]\n     */\n    function tail(array) {\n      var length = array == null ? 0 : array.length;\n      return length ? baseSlice(array, 1, length) : [];\n    }\n\n    /**\n     * Creates a slice of `array` with `n` elements taken from the beginning.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=1] The number of elements to take.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.take([1, 2, 3]);\n     * // => [1]\n     *\n     * _.take([1, 2, 3], 2);\n     * // => [1, 2]\n     *\n     * _.take([1, 2, 3], 5);\n     * // => [1, 2, 3]\n     *\n     * _.take([1, 2, 3], 0);\n     * // => []\n     */\n    function take(array, n, guard) {\n      if (!(array && array.length)) {\n        return [];\n      }\n      n = (guard || n === undefined) ? 1 : toInteger(n);\n      return baseSlice(array, 0, n < 0 ? 0 : n);\n    }\n\n    /**\n     * Creates a slice of `array` with `n` elements taken from the end.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=1] The number of elements to take.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.takeRight([1, 2, 3]);\n     * // => [3]\n     *\n     * _.takeRight([1, 2, 3], 2);\n     * // => [2, 3]\n     *\n     * _.takeRight([1, 2, 3], 5);\n     * // => [1, 2, 3]\n     *\n     * _.takeRight([1, 2, 3], 0);\n     * // => []\n     */\n    function takeRight(array, n, guard) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      n = (guard || n === undefined) ? 1 : toInteger(n);\n      n = length - n;\n      return baseSlice(array, n < 0 ? 0 : n, length);\n    }\n\n    /**\n     * Creates a slice of `array` with elements taken from the end. Elements are\n     * taken until `predicate` returns falsey. The predicate is invoked with\n     * three arguments: (value, index, array).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': true },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': false }\n     * ];\n     *\n     * _.takeRightWhile(users, function(o) { return !o.active; });\n     * // => objects for ['fred', 'pebbles']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });\n     * // => objects for ['pebbles']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.takeRightWhile(users, ['active', false]);\n     * // => objects for ['fred', 'pebbles']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.takeRightWhile(users, 'active');\n     * // => []\n     */\n    function takeRightWhile(array, predicate) {\n      return (array && array.length)\n        ? baseWhile(array, getIteratee(predicate, 3), false, true)\n        : [];\n    }\n\n    /**\n     * Creates a slice of `array` with elements taken from the beginning. Elements\n     * are taken until `predicate` returns falsey. The predicate is invoked with\n     * three arguments: (value, index, array).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': false },\n     *   { 'user': 'fred',    'active': false},\n     *   { 'user': 'pebbles', 'active': true }\n     * ];\n     *\n     * _.takeWhile(users, function(o) { return !o.active; });\n     * // => objects for ['barney', 'fred']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.takeWhile(users, { 'user': 'barney', 'active': false });\n     * // => objects for ['barney']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.takeWhile(users, ['active', false]);\n     * // => objects for ['barney', 'fred']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.takeWhile(users, 'active');\n     * // => []\n     */\n    function takeWhile(array, predicate) {\n      return (array && array.length)\n        ? baseWhile(array, getIteratee(predicate, 3))\n        : [];\n    }\n\n    /**\n     * Creates an array of unique values, in order, from all given arrays using\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @returns {Array} Returns the new array of combined values.\n     * @example\n     *\n     * _.union([2], [1, 2]);\n     * // => [2, 1]\n     */\n    var union = baseRest(function(arrays) {\n      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));\n    });\n\n    /**\n     * This method is like `_.union` except that it accepts `iteratee` which is\n     * invoked for each element of each `arrays` to generate the criterion by\n     * which uniqueness is computed. Result values are chosen from the first\n     * array in which the value occurs. The iteratee is invoked with one argument:\n     * (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns the new array of combined values.\n     * @example\n     *\n     * _.unionBy([2.1], [1.2, 2.3], Math.floor);\n     * // => [2.1, 1.2]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n     * // => [{ 'x': 1 }, { 'x': 2 }]\n     */\n    var unionBy = baseRest(function(arrays) {\n      var iteratee = last(arrays);\n      if (isArrayLikeObject(iteratee)) {\n        iteratee = undefined;\n      }\n      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));\n    });\n\n    /**\n     * This method is like `_.union` except that it accepts `comparator` which\n     * is invoked to compare elements of `arrays`. Result values are chosen from\n     * the first array in which the value occurs. The comparator is invoked\n     * with two arguments: (arrVal, othVal).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of combined values.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n     *\n     * _.unionWith(objects, others, _.isEqual);\n     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]\n     */\n    var unionWith = baseRest(function(arrays) {\n      var comparator = last(arrays);\n      comparator = typeof comparator == 'function' ? comparator : undefined;\n      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);\n    });\n\n    /**\n     * Creates a duplicate-free version of an array, using\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons, in which only the first occurrence of each element\n     * is kept. The order of result values is determined by the order they occur\n     * in the array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * _.uniq([2, 1, 2]);\n     * // => [2, 1]\n     */\n    function uniq(array) {\n      return (array && array.length) ? baseUniq(array) : [];\n    }\n\n    /**\n     * This method is like `_.uniq` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the criterion by which\n     * uniqueness is computed. The order of result values is determined by the\n     * order they occur in the array. The iteratee is invoked with one argument:\n     * (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);\n     * // => [2.1, 1.2]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');\n     * // => [{ 'x': 1 }, { 'x': 2 }]\n     */\n    function uniqBy(array, iteratee) {\n      return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];\n    }\n\n    /**\n     * This method is like `_.uniq` except that it accepts `comparator` which\n     * is invoked to compare elements of `array`. The order of result values is\n     * determined by the order they occur in the array.The comparator is invoked\n     * with two arguments: (arrVal, othVal).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];\n     *\n     * _.uniqWith(objects, _.isEqual);\n     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]\n     */\n    function uniqWith(array, comparator) {\n      comparator = typeof comparator == 'function' ? comparator : undefined;\n      return (array && array.length) ? baseUniq(array, undefined, comparator) : [];\n    }\n\n    /**\n     * This method is like `_.zip` except that it accepts an array of grouped\n     * elements and creates an array regrouping the elements to their pre-zip\n     * configuration.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.2.0\n     * @category Array\n     * @param {Array} array The array of grouped elements to process.\n     * @returns {Array} Returns the new array of regrouped elements.\n     * @example\n     *\n     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);\n     * // => [['a', 1, true], ['b', 2, false]]\n     *\n     * _.unzip(zipped);\n     * // => [['a', 'b'], [1, 2], [true, false]]\n     */\n    function unzip(array) {\n      if (!(array && array.length)) {\n        return [];\n      }\n      var length = 0;\n      array = arrayFilter(array, function(group) {\n        if (isArrayLikeObject(group)) {\n          length = nativeMax(group.length, length);\n          return true;\n        }\n      });\n      return baseTimes(length, function(index) {\n        return arrayMap(array, baseProperty(index));\n      });\n    }\n\n    /**\n     * This method is like `_.unzip` except that it accepts `iteratee` to specify\n     * how regrouped values should be combined. The iteratee is invoked with the\n     * elements of each group: (...group).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.8.0\n     * @category Array\n     * @param {Array} array The array of grouped elements to process.\n     * @param {Function} [iteratee=_.identity] The function to combine\n     *  regrouped values.\n     * @returns {Array} Returns the new array of regrouped elements.\n     * @example\n     *\n     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);\n     * // => [[1, 10, 100], [2, 20, 200]]\n     *\n     * _.unzipWith(zipped, _.add);\n     * // => [3, 30, 300]\n     */\n    function unzipWith(array, iteratee) {\n      if (!(array && array.length)) {\n        return [];\n      }\n      var result = unzip(array);\n      if (iteratee == null) {\n        return result;\n      }\n      return arrayMap(result, function(group) {\n        return apply(iteratee, undefined, group);\n      });\n    }\n\n    /**\n     * Creates an array excluding all given values using\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons.\n     *\n     * **Note:** Unlike `_.pull`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {...*} [values] The values to exclude.\n     * @returns {Array} Returns the new array of filtered values.\n     * @see _.difference, _.xor\n     * @example\n     *\n     * _.without([2, 1, 2, 3], 1, 2);\n     * // => [3]\n     */\n    var without = baseRest(function(array, values) {\n      return isArrayLikeObject(array)\n        ? baseDifference(array, values)\n        : [];\n    });\n\n    /**\n     * Creates an array of unique values that is the\n     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)\n     * of the given arrays. The order of result values is determined by the order\n     * they occur in the arrays.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @returns {Array} Returns the new array of filtered values.\n     * @see _.difference, _.without\n     * @example\n     *\n     * _.xor([2, 1], [2, 3]);\n     * // => [1, 3]\n     */\n    var xor = baseRest(function(arrays) {\n      return baseXor(arrayFilter(arrays, isArrayLikeObject));\n    });\n\n    /**\n     * This method is like `_.xor` except that it accepts `iteratee` which is\n     * invoked for each element of each `arrays` to generate the criterion by\n     * which by which they're compared. The order of result values is determined\n     * by the order they occur in the arrays. The iteratee is invoked with one\n     * argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n     * // => [1.2, 3.4]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n     * // => [{ 'x': 2 }]\n     */\n    var xorBy = baseRest(function(arrays) {\n      var iteratee = last(arrays);\n      if (isArrayLikeObject(iteratee)) {\n        iteratee = undefined;\n      }\n      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));\n    });\n\n    /**\n     * This method is like `_.xor` except that it accepts `comparator` which is\n     * invoked to compare elements of `arrays`. The order of result values is\n     * determined by the order they occur in the arrays. The comparator is invoked\n     * with two arguments: (arrVal, othVal).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n     *\n     * _.xorWith(objects, others, _.isEqual);\n     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]\n     */\n    var xorWith = baseRest(function(arrays) {\n      var comparator = last(arrays);\n      comparator = typeof comparator == 'function' ? comparator : undefined;\n      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);\n    });\n\n    /**\n     * Creates an array of grouped elements, the first of which contains the\n     * first elements of the given arrays, the second of which contains the\n     * second elements of the given arrays, and so on.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to process.\n     * @returns {Array} Returns the new array of grouped elements.\n     * @example\n     *\n     * _.zip(['a', 'b'], [1, 2], [true, false]);\n     * // => [['a', 1, true], ['b', 2, false]]\n     */\n    var zip = baseRest(unzip);\n\n    /**\n     * This method is like `_.fromPairs` except that it accepts two arrays,\n     * one of property identifiers and one of corresponding values.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.4.0\n     * @category Array\n     * @param {Array} [props=[]] The property identifiers.\n     * @param {Array} [values=[]] The property values.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * _.zipObject(['a', 'b'], [1, 2]);\n     * // => { 'a': 1, 'b': 2 }\n     */\n    function zipObject(props, values) {\n      return baseZipObject(props || [], values || [], assignValue);\n    }\n\n    /**\n     * This method is like `_.zipObject` except that it supports property paths.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.1.0\n     * @category Array\n     * @param {Array} [props=[]] The property identifiers.\n     * @param {Array} [values=[]] The property values.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);\n     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }\n     */\n    function zipObjectDeep(props, values) {\n      return baseZipObject(props || [], values || [], baseSet);\n    }\n\n    /**\n     * This method is like `_.zip` except that it accepts `iteratee` to specify\n     * how grouped values should be combined. The iteratee is invoked with the\n     * elements of each group: (...group).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.8.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to process.\n     * @param {Function} [iteratee=_.identity] The function to combine\n     *  grouped values.\n     * @returns {Array} Returns the new array of grouped elements.\n     * @example\n     *\n     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {\n     *   return a + b + c;\n     * });\n     * // => [111, 222]\n     */\n    var zipWith = baseRest(function(arrays) {\n      var length = arrays.length,\n          iteratee = length > 1 ? arrays[length - 1] : undefined;\n\n      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;\n      return unzipWith(arrays, iteratee);\n    });\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a `lodash` wrapper instance that wraps `value` with explicit method\n     * chain sequences enabled. The result of such sequences must be unwrapped\n     * with `_#value`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.3.0\n     * @category Seq\n     * @param {*} value The value to wrap.\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'age': 36 },\n     *   { 'user': 'fred',    'age': 40 },\n     *   { 'user': 'pebbles', 'age': 1 }\n     * ];\n     *\n     * var youngest = _\n     *   .chain(users)\n     *   .sortBy('age')\n     *   .map(function(o) {\n     *     return o.user + ' is ' + o.age;\n     *   })\n     *   .head()\n     *   .value();\n     * // => 'pebbles is 1'\n     */\n    function chain(value) {\n      var result = lodash(value);\n      result.__chain__ = true;\n      return result;\n    }\n\n    /**\n     * This method invokes `interceptor` and returns `value`. The interceptor\n     * is invoked with one argument; (value). The purpose of this method is to\n     * \"tap into\" a method chain sequence in order to modify intermediate results.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Seq\n     * @param {*} value The value to provide to `interceptor`.\n     * @param {Function} interceptor The function to invoke.\n     * @returns {*} Returns `value`.\n     * @example\n     *\n     * _([1, 2, 3])\n     *  .tap(function(array) {\n     *    // Mutate input array.\n     *    array.pop();\n     *  })\n     *  .reverse()\n     *  .value();\n     * // => [2, 1]\n     */\n    function tap(value, interceptor) {\n      interceptor(value);\n      return value;\n    }\n\n    /**\n     * This method is like `_.tap` except that it returns the result of `interceptor`.\n     * The purpose of this method is to \"pass thru\" values replacing intermediate\n     * results in a method chain sequence.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Seq\n     * @param {*} value The value to provide to `interceptor`.\n     * @param {Function} interceptor The function to invoke.\n     * @returns {*} Returns the result of `interceptor`.\n     * @example\n     *\n     * _('  abc  ')\n     *  .chain()\n     *  .trim()\n     *  .thru(function(value) {\n     *    return [value];\n     *  })\n     *  .value();\n     * // => ['abc']\n     */\n    function thru(value, interceptor) {\n      return interceptor(value);\n    }\n\n    /**\n     * This method is the wrapper version of `_.at`.\n     *\n     * @name at\n     * @memberOf _\n     * @since 1.0.0\n     * @category Seq\n     * @param {...(string|string[])} [paths] The property paths of elements to pick.\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };\n     *\n     * _(object).at(['a[0].b.c', 'a[1]']).value();\n     * // => [3, 4]\n     */\n    var wrapperAt = flatRest(function(paths) {\n      var length = paths.length,\n          start = length ? paths[0] : 0,\n          value = this.__wrapped__,\n          interceptor = function(object) { return baseAt(object, paths); };\n\n      if (length > 1 || this.__actions__.length ||\n          !(value instanceof LazyWrapper) || !isIndex(start)) {\n        return this.thru(interceptor);\n      }\n      value = value.slice(start, +start + (length ? 1 : 0));\n      value.__actions__.push({\n        'func': thru,\n        'args': [interceptor],\n        'thisArg': undefined\n      });\n      return new LodashWrapper(value, this.__chain__).thru(function(array) {\n        if (length && !array.length) {\n          array.push(undefined);\n        }\n        return array;\n      });\n    });\n\n    /**\n     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.\n     *\n     * @name chain\n     * @memberOf _\n     * @since 0.1.0\n     * @category Seq\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36 },\n     *   { 'user': 'fred',   'age': 40 }\n     * ];\n     *\n     * // A sequence without explicit chaining.\n     * _(users).head();\n     * // => { 'user': 'barney', 'age': 36 }\n     *\n     * // A sequence with explicit chaining.\n     * _(users)\n     *   .chain()\n     *   .head()\n     *   .pick('user')\n     *   .value();\n     * // => { 'user': 'barney' }\n     */\n    function wrapperChain() {\n      return chain(this);\n    }\n\n    /**\n     * Executes the chain sequence and returns the wrapped result.\n     *\n     * @name commit\n     * @memberOf _\n     * @since 3.2.0\n     * @category Seq\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var array = [1, 2];\n     * var wrapped = _(array).push(3);\n     *\n     * console.log(array);\n     * // => [1, 2]\n     *\n     * wrapped = wrapped.commit();\n     * console.log(array);\n     * // => [1, 2, 3]\n     *\n     * wrapped.last();\n     * // => 3\n     *\n     * console.log(array);\n     * // => [1, 2, 3]\n     */\n    function wrapperCommit() {\n      return new LodashWrapper(this.value(), this.__chain__);\n    }\n\n    /**\n     * Gets the next value on a wrapped object following the\n     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).\n     *\n     * @name next\n     * @memberOf _\n     * @since 4.0.0\n     * @category Seq\n     * @returns {Object} Returns the next iterator value.\n     * @example\n     *\n     * var wrapped = _([1, 2]);\n     *\n     * wrapped.next();\n     * // => { 'done': false, 'value': 1 }\n     *\n     * wrapped.next();\n     * // => { 'done': false, 'value': 2 }\n     *\n     * wrapped.next();\n     * // => { 'done': true, 'value': undefined }\n     */\n    function wrapperNext() {\n      if (this.__values__ === undefined) {\n        this.__values__ = toArray(this.value());\n      }\n      var done = this.__index__ >= this.__values__.length,\n          value = done ? undefined : this.__values__[this.__index__++];\n\n      return { 'done': done, 'value': value };\n    }\n\n    /**\n     * Enables the wrapper to be iterable.\n     *\n     * @name Symbol.iterator\n     * @memberOf _\n     * @since 4.0.0\n     * @category Seq\n     * @returns {Object} Returns the wrapper object.\n     * @example\n     *\n     * var wrapped = _([1, 2]);\n     *\n     * wrapped[Symbol.iterator]() === wrapped;\n     * // => true\n     *\n     * Array.from(wrapped);\n     * // => [1, 2]\n     */\n    function wrapperToIterator() {\n      return this;\n    }\n\n    /**\n     * Creates a clone of the chain sequence planting `value` as the wrapped value.\n     *\n     * @name plant\n     * @memberOf _\n     * @since 3.2.0\n     * @category Seq\n     * @param {*} value The value to plant.\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var wrapped = _([1, 2]).map(square);\n     * var other = wrapped.plant([3, 4]);\n     *\n     * other.value();\n     * // => [9, 16]\n     *\n     * wrapped.value();\n     * // => [1, 4]\n     */\n    function wrapperPlant(value) {\n      var result,\n          parent = this;\n\n      while (parent instanceof baseLodash) {\n        var clone = wrapperClone(parent);\n        clone.__index__ = 0;\n        clone.__values__ = undefined;\n        if (result) {\n          previous.__wrapped__ = clone;\n        } else {\n          result = clone;\n        }\n        var previous = clone;\n        parent = parent.__wrapped__;\n      }\n      previous.__wrapped__ = value;\n      return result;\n    }\n\n    /**\n     * This method is the wrapper version of `_.reverse`.\n     *\n     * **Note:** This method mutates the wrapped array.\n     *\n     * @name reverse\n     * @memberOf _\n     * @since 0.1.0\n     * @category Seq\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var array = [1, 2, 3];\n     *\n     * _(array).reverse().value()\n     * // => [3, 2, 1]\n     *\n     * console.log(array);\n     * // => [3, 2, 1]\n     */\n    function wrapperReverse() {\n      var value = this.__wrapped__;\n      if (value instanceof LazyWrapper) {\n        var wrapped = value;\n        if (this.__actions__.length) {\n          wrapped = new LazyWrapper(this);\n        }\n        wrapped = wrapped.reverse();\n        wrapped.__actions__.push({\n          'func': thru,\n          'args': [reverse],\n          'thisArg': undefined\n        });\n        return new LodashWrapper(wrapped, this.__chain__);\n      }\n      return this.thru(reverse);\n    }\n\n    /**\n     * Executes the chain sequence to resolve the unwrapped value.\n     *\n     * @name value\n     * @memberOf _\n     * @since 0.1.0\n     * @alias toJSON, valueOf\n     * @category Seq\n     * @returns {*} Returns the resolved unwrapped value.\n     * @example\n     *\n     * _([1, 2, 3]).value();\n     * // => [1, 2, 3]\n     */\n    function wrapperValue() {\n      return baseWrapperValue(this.__wrapped__, this.__actions__);\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates an object composed of keys generated from the results of running\n     * each element of `collection` thru `iteratee`. The corresponding value of\n     * each key is the number of times the key was returned by `iteratee`. The\n     * iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.5.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.\n     * @returns {Object} Returns the composed aggregate object.\n     * @example\n     *\n     * _.countBy([6.1, 4.2, 6.3], Math.floor);\n     * // => { '4': 1, '6': 2 }\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.countBy(['one', 'two', 'three'], 'length');\n     * // => { '3': 2, '5': 1 }\n     */\n    var countBy = createAggregator(function(result, value, key) {\n      if (hasOwnProperty.call(result, key)) {\n        ++result[key];\n      } else {\n        baseAssignValue(result, key, 1);\n      }\n    });\n\n    /**\n     * Checks if `predicate` returns truthy for **all** elements of `collection`.\n     * Iteration is stopped once `predicate` returns falsey. The predicate is\n     * invoked with three arguments: (value, index|key, collection).\n     *\n     * **Note:** This method returns `true` for\n     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because\n     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of\n     * elements of empty collections.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {boolean} Returns `true` if all elements pass the predicate check,\n     *  else `false`.\n     * @example\n     *\n     * _.every([true, 1, null, 'yes'], Boolean);\n     * // => false\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36, 'active': false },\n     *   { 'user': 'fred',   'age': 40, 'active': false }\n     * ];\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.every(users, { 'user': 'barney', 'active': false });\n     * // => false\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.every(users, ['active', false]);\n     * // => true\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.every(users, 'active');\n     * // => false\n     */\n    function every(collection, predicate, guard) {\n      var func = isArray(collection) ? arrayEvery : baseEvery;\n      if (guard && isIterateeCall(collection, predicate, guard)) {\n        predicate = undefined;\n      }\n      return func(collection, getIteratee(predicate, 3));\n    }\n\n    /**\n     * Iterates over elements of `collection`, returning an array of all elements\n     * `predicate` returns truthy for. The predicate is invoked with three\n     * arguments: (value, index|key, collection).\n     *\n     * **Note:** Unlike `_.remove`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new filtered array.\n     * @see _.reject\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36, 'active': true },\n     *   { 'user': 'fred',   'age': 40, 'active': false }\n     * ];\n     *\n     * _.filter(users, function(o) { return !o.active; });\n     * // => objects for ['fred']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.filter(users, { 'age': 36, 'active': true });\n     * // => objects for ['barney']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.filter(users, ['active', false]);\n     * // => objects for ['fred']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.filter(users, 'active');\n     * // => objects for ['barney']\n     */\n    function filter(collection, predicate) {\n      var func = isArray(collection) ? arrayFilter : baseFilter;\n      return func(collection, getIteratee(predicate, 3));\n    }\n\n    /**\n     * Iterates over elements of `collection`, returning the first element\n     * `predicate` returns truthy for. The predicate is invoked with three\n     * arguments: (value, index|key, collection).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param {number} [fromIndex=0] The index to search from.\n     * @returns {*} Returns the matched element, else `undefined`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'age': 36, 'active': true },\n     *   { 'user': 'fred',    'age': 40, 'active': false },\n     *   { 'user': 'pebbles', 'age': 1,  'active': true }\n     * ];\n     *\n     * _.find(users, function(o) { return o.age < 40; });\n     * // => object for 'barney'\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.find(users, { 'age': 1, 'active': true });\n     * // => object for 'pebbles'\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.find(users, ['active', false]);\n     * // => object for 'fred'\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.find(users, 'active');\n     * // => object for 'barney'\n     */\n    var find = createFind(findIndex);\n\n    /**\n     * This method is like `_.find` except that it iterates over elements of\n     * `collection` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param {number} [fromIndex=collection.length-1] The index to search from.\n     * @returns {*} Returns the matched element, else `undefined`.\n     * @example\n     *\n     * _.findLast([1, 2, 3, 4], function(n) {\n     *   return n % 2 == 1;\n     * });\n     * // => 3\n     */\n    var findLast = createFind(findLastIndex);\n\n    /**\n     * Creates a flattened array of values by running each element in `collection`\n     * thru `iteratee` and flattening the mapped results. The iteratee is invoked\n     * with three arguments: (value, index|key, collection).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * function duplicate(n) {\n     *   return [n, n];\n     * }\n     *\n     * _.flatMap([1, 2], duplicate);\n     * // => [1, 1, 2, 2]\n     */\n    function flatMap(collection, iteratee) {\n      return baseFlatten(map(collection, iteratee), 1);\n    }\n\n    /**\n     * This method is like `_.flatMap` except that it recursively flattens the\n     * mapped results.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * function duplicate(n) {\n     *   return [[[n, n]]];\n     * }\n     *\n     * _.flatMapDeep([1, 2], duplicate);\n     * // => [1, 1, 2, 2]\n     */\n    function flatMapDeep(collection, iteratee) {\n      return baseFlatten(map(collection, iteratee), INFINITY);\n    }\n\n    /**\n     * This method is like `_.flatMap` except that it recursively flattens the\n     * mapped results up to `depth` times.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @param {number} [depth=1] The maximum recursion depth.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * function duplicate(n) {\n     *   return [[[n, n]]];\n     * }\n     *\n     * _.flatMapDepth([1, 2], duplicate, 2);\n     * // => [[1, 1], [2, 2]]\n     */\n    function flatMapDepth(collection, iteratee, depth) {\n      depth = depth === undefined ? 1 : toInteger(depth);\n      return baseFlatten(map(collection, iteratee), depth);\n    }\n\n    /**\n     * Iterates over elements of `collection` and invokes `iteratee` for each element.\n     * The iteratee is invoked with three arguments: (value, index|key, collection).\n     * Iteratee functions may exit iteration early by explicitly returning `false`.\n     *\n     * **Note:** As with other \"Collections\" methods, objects with a \"length\"\n     * property are iterated like arrays. To avoid this behavior use `_.forIn`\n     * or `_.forOwn` for object iteration.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @alias each\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array|Object} Returns `collection`.\n     * @see _.forEachRight\n     * @example\n     *\n     * _.forEach([1, 2], function(value) {\n     *   console.log(value);\n     * });\n     * // => Logs `1` then `2`.\n     *\n     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'a' then 'b' (iteration order is not guaranteed).\n     */\n    function forEach(collection, iteratee) {\n      var func = isArray(collection) ? arrayEach : baseEach;\n      return func(collection, getIteratee(iteratee, 3));\n    }\n\n    /**\n     * This method is like `_.forEach` except that it iterates over elements of\n     * `collection` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @alias eachRight\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array|Object} Returns `collection`.\n     * @see _.forEach\n     * @example\n     *\n     * _.forEachRight([1, 2], function(value) {\n     *   console.log(value);\n     * });\n     * // => Logs `2` then `1`.\n     */\n    function forEachRight(collection, iteratee) {\n      var func = isArray(collection) ? arrayEachRight : baseEachRight;\n      return func(collection, getIteratee(iteratee, 3));\n    }\n\n    /**\n     * Creates an object composed of keys generated from the results of running\n     * each element of `collection` thru `iteratee`. The order of grouped values\n     * is determined by the order they occur in `collection`. The corresponding\n     * value of each key is an array of elements responsible for generating the\n     * key. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.\n     * @returns {Object} Returns the composed aggregate object.\n     * @example\n     *\n     * _.groupBy([6.1, 4.2, 6.3], Math.floor);\n     * // => { '4': [4.2], '6': [6.1, 6.3] }\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.groupBy(['one', 'two', 'three'], 'length');\n     * // => { '3': ['one', 'two'], '5': ['three'] }\n     */\n    var groupBy = createAggregator(function(result, value, key) {\n      if (hasOwnProperty.call(result, key)) {\n        result[key].push(value);\n      } else {\n        baseAssignValue(result, key, [value]);\n      }\n    });\n\n    /**\n     * Checks if `value` is in `collection`. If `collection` is a string, it's\n     * checked for a substring of `value`, otherwise\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * is used for equality comparisons. If `fromIndex` is negative, it's used as\n     * the offset from the end of `collection`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object|string} collection The collection to inspect.\n     * @param {*} value The value to search for.\n     * @param {number} [fromIndex=0] The index to search from.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\n     * @returns {boolean} Returns `true` if `value` is found, else `false`.\n     * @example\n     *\n     * _.includes([1, 2, 3], 1);\n     * // => true\n     *\n     * _.includes([1, 2, 3], 1, 2);\n     * // => false\n     *\n     * _.includes({ 'a': 1, 'b': 2 }, 1);\n     * // => true\n     *\n     * _.includes('abcd', 'bc');\n     * // => true\n     */\n    function includes(collection, value, fromIndex, guard) {\n      collection = isArrayLike(collection) ? collection : values(collection);\n      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;\n\n      var length = collection.length;\n      if (fromIndex < 0) {\n        fromIndex = nativeMax(length + fromIndex, 0);\n      }\n      return isString(collection)\n        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)\n        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);\n    }\n\n    /**\n     * Invokes the method at `path` of each element in `collection`, returning\n     * an array of the results of each invoked method. Any additional arguments\n     * are provided to each invoked method. If `path` is a function, it's invoked\n     * for, and `this` bound to, each element in `collection`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Array|Function|string} path The path of the method to invoke or\n     *  the function invoked per iteration.\n     * @param {...*} [args] The arguments to invoke each method with.\n     * @returns {Array} Returns the array of results.\n     * @example\n     *\n     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');\n     * // => [[1, 5, 7], [1, 2, 3]]\n     *\n     * _.invokeMap([123, 456], String.prototype.split, '');\n     * // => [['1', '2', '3'], ['4', '5', '6']]\n     */\n    var invokeMap = baseRest(function(collection, path, args) {\n      var index = -1,\n          isFunc = typeof path == 'function',\n          isProp = isKey(path),\n          result = isArrayLike(collection) ? Array(collection.length) : [];\n\n      baseEach(collection, function(value) {\n        var func = isFunc ? path : ((isProp && value != null) ? value[path] : undefined);\n        result[++index] = func ? apply(func, value, args) : baseInvoke(value, path, args);\n      });\n      return result;\n    });\n\n    /**\n     * Creates an object composed of keys generated from the results of running\n     * each element of `collection` thru `iteratee`. The corresponding value of\n     * each key is the last element responsible for generating the key. The\n     * iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.\n     * @returns {Object} Returns the composed aggregate object.\n     * @example\n     *\n     * var array = [\n     *   { 'dir': 'left', 'code': 97 },\n     *   { 'dir': 'right', 'code': 100 }\n     * ];\n     *\n     * _.keyBy(array, function(o) {\n     *   return String.fromCharCode(o.code);\n     * });\n     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }\n     *\n     * _.keyBy(array, 'dir');\n     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }\n     */\n    var keyBy = createAggregator(function(result, value, key) {\n      baseAssignValue(result, key, value);\n    });\n\n    /**\n     * Creates an array of values by running each element in `collection` thru\n     * `iteratee`. The iteratee is invoked with three arguments:\n     * (value, index|key, collection).\n     *\n     * Many lodash methods are guarded to work as iteratees for methods like\n     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.\n     *\n     * The guarded methods are:\n     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,\n     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,\n     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,\n     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new mapped array.\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * _.map([4, 8], square);\n     * // => [16, 64]\n     *\n     * _.map({ 'a': 4, 'b': 8 }, square);\n     * // => [16, 64] (iteration order is not guaranteed)\n     *\n     * var users = [\n     *   { 'user': 'barney' },\n     *   { 'user': 'fred' }\n     * ];\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.map(users, 'user');\n     * // => ['barney', 'fred']\n     */\n    function map(collection, iteratee) {\n      var func = isArray(collection) ? arrayMap : baseMap;\n      return func(collection, getIteratee(iteratee, 3));\n    }\n\n    /**\n     * This method is like `_.sortBy` except that it allows specifying the sort\n     * orders of the iteratees to sort by. If `orders` is unspecified, all values\n     * are sorted in ascending order. Otherwise, specify an order of \"desc\" for\n     * descending or \"asc\" for ascending sort order of corresponding values.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]\n     *  The iteratees to sort by.\n     * @param {string[]} [orders] The sort orders of `iteratees`.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\n     * @returns {Array} Returns the new sorted array.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'fred',   'age': 48 },\n     *   { 'user': 'barney', 'age': 34 },\n     *   { 'user': 'fred',   'age': 40 },\n     *   { 'user': 'barney', 'age': 36 }\n     * ];\n     *\n     * // Sort by `user` in ascending order and by `age` in descending order.\n     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);\n     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]\n     */\n    function orderBy(collection, iteratees, orders, guard) {\n      if (collection == null) {\n        return [];\n      }\n      if (!isArray(iteratees)) {\n        iteratees = iteratees == null ? [] : [iteratees];\n      }\n      orders = guard ? undefined : orders;\n      if (!isArray(orders)) {\n        orders = orders == null ? [] : [orders];\n      }\n      return baseOrderBy(collection, iteratees, orders);\n    }\n\n    /**\n     * Creates an array of elements split into two groups, the first of which\n     * contains elements `predicate` returns truthy for, the second of which\n     * contains elements `predicate` returns falsey for. The predicate is\n     * invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the array of grouped elements.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'age': 36, 'active': false },\n     *   { 'user': 'fred',    'age': 40, 'active': true },\n     *   { 'user': 'pebbles', 'age': 1,  'active': false }\n     * ];\n     *\n     * _.partition(users, function(o) { return o.active; });\n     * // => objects for [['fred'], ['barney', 'pebbles']]\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.partition(users, { 'age': 1, 'active': false });\n     * // => objects for [['pebbles'], ['barney', 'fred']]\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.partition(users, ['active', false]);\n     * // => objects for [['barney', 'pebbles'], ['fred']]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.partition(users, 'active');\n     * // => objects for [['fred'], ['barney', 'pebbles']]\n     */\n    var partition = createAggregator(function(result, value, key) {\n      result[key ? 0 : 1].push(value);\n    }, function() { return [[], []]; });\n\n    /**\n     * Reduces `collection` to a value which is the accumulated result of running\n     * each element in `collection` thru `iteratee`, where each successive\n     * invocation is supplied the return value of the previous. If `accumulator`\n     * is not given, the first element of `collection` is used as the initial\n     * value. The iteratee is invoked with four arguments:\n     * (accumulator, value, index|key, collection).\n     *\n     * Many lodash methods are guarded to work as iteratees for methods like\n     * `_.reduce`, `_.reduceRight`, and `_.transform`.\n     *\n     * The guarded methods are:\n     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,\n     * and `sortBy`\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @param {*} [accumulator] The initial value.\n     * @returns {*} Returns the accumulated value.\n     * @see _.reduceRight\n     * @example\n     *\n     * _.reduce([1, 2], function(sum, n) {\n     *   return sum + n;\n     * }, 0);\n     * // => 3\n     *\n     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\n     *   (result[value] || (result[value] = [])).push(key);\n     *   return result;\n     * }, {});\n     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)\n     */\n    function reduce(collection, iteratee, accumulator) {\n      var func = isArray(collection) ? arrayReduce : baseReduce,\n          initAccum = arguments.length < 3;\n\n      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);\n    }\n\n    /**\n     * This method is like `_.reduce` except that it iterates over elements of\n     * `collection` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @param {*} [accumulator] The initial value.\n     * @returns {*} Returns the accumulated value.\n     * @see _.reduce\n     * @example\n     *\n     * var array = [[0, 1], [2, 3], [4, 5]];\n     *\n     * _.reduceRight(array, function(flattened, other) {\n     *   return flattened.concat(other);\n     * }, []);\n     * // => [4, 5, 2, 3, 0, 1]\n     */\n    function reduceRight(collection, iteratee, accumulator) {\n      var func = isArray(collection) ? arrayReduceRight : baseReduce,\n          initAccum = arguments.length < 3;\n\n      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);\n    }\n\n    /**\n     * The opposite of `_.filter`; this method returns the elements of `collection`\n     * that `predicate` does **not** return truthy for.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new filtered array.\n     * @see _.filter\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36, 'active': false },\n     *   { 'user': 'fred',   'age': 40, 'active': true }\n     * ];\n     *\n     * _.reject(users, function(o) { return !o.active; });\n     * // => objects for ['fred']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.reject(users, { 'age': 40, 'active': true });\n     * // => objects for ['barney']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.reject(users, ['active', false]);\n     * // => objects for ['fred']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.reject(users, 'active');\n     * // => objects for ['barney']\n     */\n    function reject(collection, predicate) {\n      var func = isArray(collection) ? arrayFilter : baseFilter;\n      return func(collection, negate(getIteratee(predicate, 3)));\n    }\n\n    /**\n     * Gets a random element from `collection`.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to sample.\n     * @returns {*} Returns the random element.\n     * @example\n     *\n     * _.sample([1, 2, 3, 4]);\n     * // => 2\n     */\n    function sample(collection) {\n      var func = isArray(collection) ? arraySample : baseSample;\n      return func(collection);\n    }\n\n    /**\n     * Gets `n` random elements at unique keys from `collection` up to the\n     * size of `collection`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to sample.\n     * @param {number} [n=1] The number of elements to sample.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the random elements.\n     * @example\n     *\n     * _.sampleSize([1, 2, 3], 2);\n     * // => [3, 1]\n     *\n     * _.sampleSize([1, 2, 3], 4);\n     * // => [2, 3, 1]\n     */\n    function sampleSize(collection, n, guard) {\n      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {\n        n = 1;\n      } else {\n        n = toInteger(n);\n      }\n      var func = isArray(collection) ? arraySampleSize : baseSampleSize;\n      return func(collection, n);\n    }\n\n    /**\n     * Creates an array of shuffled values, using a version of the\n     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to shuffle.\n     * @returns {Array} Returns the new shuffled array.\n     * @example\n     *\n     * _.shuffle([1, 2, 3, 4]);\n     * // => [4, 1, 3, 2]\n     */\n    function shuffle(collection) {\n      var func = isArray(collection) ? arrayShuffle : baseShuffle;\n      return func(collection);\n    }\n\n    /**\n     * Gets the size of `collection` by returning its length for array-like\n     * values or the number of own enumerable string keyed properties for objects.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object|string} collection The collection to inspect.\n     * @returns {number} Returns the collection size.\n     * @example\n     *\n     * _.size([1, 2, 3]);\n     * // => 3\n     *\n     * _.size({ 'a': 1, 'b': 2 });\n     * // => 2\n     *\n     * _.size('pebbles');\n     * // => 7\n     */\n    function size(collection) {\n      if (collection == null) {\n        return 0;\n      }\n      if (isArrayLike(collection)) {\n        return isString(collection) ? stringSize(collection) : collection.length;\n      }\n      var tag = getTag(collection);\n      if (tag == mapTag || tag == setTag) {\n        return collection.size;\n      }\n      return baseKeys(collection).length;\n    }\n\n    /**\n     * Checks if `predicate` returns truthy for **any** element of `collection`.\n     * Iteration is stopped once `predicate` returns truthy. The predicate is\n     * invoked with three arguments: (value, index|key, collection).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {boolean} Returns `true` if any element passes the predicate check,\n     *  else `false`.\n     * @example\n     *\n     * _.some([null, 0, 'yes', false], Boolean);\n     * // => true\n     *\n     * var users = [\n     *   { 'user': 'barney', 'active': true },\n     *   { 'user': 'fred',   'active': false }\n     * ];\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.some(users, { 'user': 'barney', 'active': false });\n     * // => false\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.some(users, ['active', false]);\n     * // => true\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.some(users, 'active');\n     * // => true\n     */\n    function some(collection, predicate, guard) {\n      var func = isArray(collection) ? arraySome : baseSome;\n      if (guard && isIterateeCall(collection, predicate, guard)) {\n        predicate = undefined;\n      }\n      return func(collection, getIteratee(predicate, 3));\n    }\n\n    /**\n     * Creates an array of elements, sorted in ascending order by the results of\n     * running each element in a collection thru each iteratee. This method\n     * performs a stable sort, that is, it preserves the original sort order of\n     * equal elements. The iteratees are invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {...(Function|Function[])} [iteratees=[_.identity]]\n     *  The iteratees to sort by.\n     * @returns {Array} Returns the new sorted array.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'fred',   'age': 48 },\n     *   { 'user': 'barney', 'age': 36 },\n     *   { 'user': 'fred',   'age': 40 },\n     *   { 'user': 'barney', 'age': 34 }\n     * ];\n     *\n     * _.sortBy(users, [function(o) { return o.user; }]);\n     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]\n     *\n     * _.sortBy(users, ['user', 'age']);\n     * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]\n     */\n    var sortBy = baseRest(function(collection, iteratees) {\n      if (collection == null) {\n        return [];\n      }\n      var length = iteratees.length;\n      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {\n        iteratees = [];\n      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {\n        iteratees = [iteratees[0]];\n      }\n      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);\n    });\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Gets the timestamp of the number of milliseconds that have elapsed since\n     * the Unix epoch (1 January 1970 00:00:00 UTC).\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Date\n     * @returns {number} Returns the timestamp.\n     * @example\n     *\n     * _.defer(function(stamp) {\n     *   console.log(_.now() - stamp);\n     * }, _.now());\n     * // => Logs the number of milliseconds it took for the deferred invocation.\n     */\n    var now = ctxNow || function() {\n      return root.Date.now();\n    };\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * The opposite of `_.before`; this method creates a function that invokes\n     * `func` once it's called `n` or more times.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {number} n The number of calls before `func` is invoked.\n     * @param {Function} func The function to restrict.\n     * @returns {Function} Returns the new restricted function.\n     * @example\n     *\n     * var saves = ['profile', 'settings'];\n     *\n     * var done = _.after(saves.length, function() {\n     *   console.log('done saving!');\n     * });\n     *\n     * _.forEach(saves, function(type) {\n     *   asyncSave({ 'type': type, 'complete': done });\n     * });\n     * // => Logs 'done saving!' after the two async saves have completed.\n     */\n    function after(n, func) {\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      n = toInteger(n);\n      return function() {\n        if (--n < 1) {\n          return func.apply(this, arguments);\n        }\n      };\n    }\n\n    /**\n     * Creates a function that invokes `func`, with up to `n` arguments,\n     * ignoring any additional arguments.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {Function} func The function to cap arguments for.\n     * @param {number} [n=func.length] The arity cap.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Function} Returns the new capped function.\n     * @example\n     *\n     * _.map(['6', '8', '10'], _.ary(parseInt, 1));\n     * // => [6, 8, 10]\n     */\n    function ary(func, n, guard) {\n      n = guard ? undefined : n;\n      n = (func && n == null) ? func.length : n;\n      return createWrap(func, ARY_FLAG, undefined, undefined, undefined, undefined, n);\n    }\n\n    /**\n     * Creates a function that invokes `func`, with the `this` binding and arguments\n     * of the created function, while it's called less than `n` times. Subsequent\n     * calls to the created function return the result of the last `func` invocation.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {number} n The number of calls at which `func` is no longer invoked.\n     * @param {Function} func The function to restrict.\n     * @returns {Function} Returns the new restricted function.\n     * @example\n     *\n     * jQuery(element).on('click', _.before(5, addContactToList));\n     * // => Allows adding up to 4 contacts to the list.\n     */\n    function before(n, func) {\n      var result;\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      n = toInteger(n);\n      return function() {\n        if (--n > 0) {\n          result = func.apply(this, arguments);\n        }\n        if (n <= 1) {\n          func = undefined;\n        }\n        return result;\n      };\n    }\n\n    /**\n     * Creates a function that invokes `func` with the `this` binding of `thisArg`\n     * and `partials` prepended to the arguments it receives.\n     *\n     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,\n     * may be used as a placeholder for partially applied arguments.\n     *\n     * **Note:** Unlike native `Function#bind`, this method doesn't set the \"length\"\n     * property of bound functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to bind.\n     * @param {*} thisArg The `this` binding of `func`.\n     * @param {...*} [partials] The arguments to be partially applied.\n     * @returns {Function} Returns the new bound function.\n     * @example\n     *\n     * function greet(greeting, punctuation) {\n     *   return greeting + ' ' + this.user + punctuation;\n     * }\n     *\n     * var object = { 'user': 'fred' };\n     *\n     * var bound = _.bind(greet, object, 'hi');\n     * bound('!');\n     * // => 'hi fred!'\n     *\n     * // Bound with placeholders.\n     * var bound = _.bind(greet, object, _, '!');\n     * bound('hi');\n     * // => 'hi fred!'\n     */\n    var bind = baseRest(function(func, thisArg, partials) {\n      var bitmask = BIND_FLAG;\n      if (partials.length) {\n        var holders = replaceHolders(partials, getHolder(bind));\n        bitmask |= PARTIAL_FLAG;\n      }\n      return createWrap(func, bitmask, thisArg, partials, holders);\n    });\n\n    /**\n     * Creates a function that invokes the method at `object[key]` with `partials`\n     * prepended to the arguments it receives.\n     *\n     * This method differs from `_.bind` by allowing bound functions to reference\n     * methods that may be redefined or don't yet exist. See\n     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)\n     * for more details.\n     *\n     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic\n     * builds, may be used as a placeholder for partially applied arguments.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.10.0\n     * @category Function\n     * @param {Object} object The object to invoke the method on.\n     * @param {string} key The key of the method.\n     * @param {...*} [partials] The arguments to be partially applied.\n     * @returns {Function} Returns the new bound function.\n     * @example\n     *\n     * var object = {\n     *   'user': 'fred',\n     *   'greet': function(greeting, punctuation) {\n     *     return greeting + ' ' + this.user + punctuation;\n     *   }\n     * };\n     *\n     * var bound = _.bindKey(object, 'greet', 'hi');\n     * bound('!');\n     * // => 'hi fred!'\n     *\n     * object.greet = function(greeting, punctuation) {\n     *   return greeting + 'ya ' + this.user + punctuation;\n     * };\n     *\n     * bound('!');\n     * // => 'hiya fred!'\n     *\n     * // Bound with placeholders.\n     * var bound = _.bindKey(object, 'greet', _, '!');\n     * bound('hi');\n     * // => 'hiya fred!'\n     */\n    var bindKey = baseRest(function(object, key, partials) {\n      var bitmask = BIND_FLAG | BIND_KEY_FLAG;\n      if (partials.length) {\n        var holders = replaceHolders(partials, getHolder(bindKey));\n        bitmask |= PARTIAL_FLAG;\n      }\n      return createWrap(key, bitmask, object, partials, holders);\n    });\n\n    /**\n     * Creates a function that accepts arguments of `func` and either invokes\n     * `func` returning its result, if at least `arity` number of arguments have\n     * been provided, or returns a function that accepts the remaining `func`\n     * arguments, and so on. The arity of `func` may be specified if `func.length`\n     * is not sufficient.\n     *\n     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,\n     * may be used as a placeholder for provided arguments.\n     *\n     * **Note:** This method doesn't set the \"length\" property of curried functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Function\n     * @param {Function} func The function to curry.\n     * @param {number} [arity=func.length] The arity of `func`.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Function} Returns the new curried function.\n     * @example\n     *\n     * var abc = function(a, b, c) {\n     *   return [a, b, c];\n     * };\n     *\n     * var curried = _.curry(abc);\n     *\n     * curried(1)(2)(3);\n     * // => [1, 2, 3]\n     *\n     * curried(1, 2)(3);\n     * // => [1, 2, 3]\n     *\n     * curried(1, 2, 3);\n     * // => [1, 2, 3]\n     *\n     * // Curried with placeholders.\n     * curried(1)(_, 3)(2);\n     * // => [1, 2, 3]\n     */\n    function curry(func, arity, guard) {\n      arity = guard ? undefined : arity;\n      var result = createWrap(func, CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);\n      result.placeholder = curry.placeholder;\n      return result;\n    }\n\n    /**\n     * This method is like `_.curry` except that arguments are applied to `func`\n     * in the manner of `_.partialRight` instead of `_.partial`.\n     *\n     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic\n     * builds, may be used as a placeholder for provided arguments.\n     *\n     * **Note:** This method doesn't set the \"length\" property of curried functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {Function} func The function to curry.\n     * @param {number} [arity=func.length] The arity of `func`.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Function} Returns the new curried function.\n     * @example\n     *\n     * var abc = function(a, b, c) {\n     *   return [a, b, c];\n     * };\n     *\n     * var curried = _.curryRight(abc);\n     *\n     * curried(3)(2)(1);\n     * // => [1, 2, 3]\n     *\n     * curried(2, 3)(1);\n     * // => [1, 2, 3]\n     *\n     * curried(1, 2, 3);\n     * // => [1, 2, 3]\n     *\n     * // Curried with placeholders.\n     * curried(3)(1, _)(2);\n     * // => [1, 2, 3]\n     */\n    function curryRight(func, arity, guard) {\n      arity = guard ? undefined : arity;\n      var result = createWrap(func, CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);\n      result.placeholder = curryRight.placeholder;\n      return result;\n    }\n\n    /**\n     * Creates a debounced function that delays invoking `func` until after `wait`\n     * milliseconds have elapsed since the last time the debounced function was\n     * invoked. The debounced function comes with a `cancel` method to cancel\n     * delayed `func` invocations and a `flush` method to immediately invoke them.\n     * Provide `options` to indicate whether `func` should be invoked on the\n     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n     * with the last arguments provided to the debounced function. Subsequent\n     * calls to the debounced function return the result of the last `func`\n     * invocation.\n     *\n     * **Note:** If `leading` and `trailing` options are `true`, `func` is\n     * invoked on the trailing edge of the timeout only if the debounced function\n     * is invoked more than once during the `wait` timeout.\n     *\n     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n     * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n     *\n     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n     * for details over the differences between `_.debounce` and `_.throttle`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to debounce.\n     * @param {number} [wait=0] The number of milliseconds to delay.\n     * @param {Object} [options={}] The options object.\n     * @param {boolean} [options.leading=false]\n     *  Specify invoking on the leading edge of the timeout.\n     * @param {number} [options.maxWait]\n     *  The maximum time `func` is allowed to be delayed before it's invoked.\n     * @param {boolean} [options.trailing=true]\n     *  Specify invoking on the trailing edge of the timeout.\n     * @returns {Function} Returns the new debounced function.\n     * @example\n     *\n     * // Avoid costly calculations while the window size is in flux.\n     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n     *\n     * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n     * jQuery(element).on('click', _.debounce(sendMail, 300, {\n     *   'leading': true,\n     *   'trailing': false\n     * }));\n     *\n     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n     * var source = new EventSource('/stream');\n     * jQuery(source).on('message', debounced);\n     *\n     * // Cancel the trailing debounced invocation.\n     * jQuery(window).on('popstate', debounced.cancel);\n     */\n    function debounce(func, wait, options) {\n      var lastArgs,\n          lastThis,\n          maxWait,\n          result,\n          timerId,\n          lastCallTime,\n          lastInvokeTime = 0,\n          leading = false,\n          maxing = false,\n          trailing = true;\n\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      wait = toNumber(wait) || 0;\n      if (isObject(options)) {\n        leading = !!options.leading;\n        maxing = 'maxWait' in options;\n        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n        trailing = 'trailing' in options ? !!options.trailing : trailing;\n      }\n\n      function invokeFunc(time) {\n        var args = lastArgs,\n            thisArg = lastThis;\n\n        lastArgs = lastThis = undefined;\n        lastInvokeTime = time;\n        result = func.apply(thisArg, args);\n        return result;\n      }\n\n      function leadingEdge(time) {\n        // Reset any `maxWait` timer.\n        lastInvokeTime = time;\n        // Start the timer for the trailing edge.\n        timerId = setTimeout(timerExpired, wait);\n        // Invoke the leading edge.\n        return leading ? invokeFunc(time) : result;\n      }\n\n      function remainingWait(time) {\n        var timeSinceLastCall = time - lastCallTime,\n            timeSinceLastInvoke = time - lastInvokeTime,\n            result = wait - timeSinceLastCall;\n\n        return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;\n      }\n\n      function shouldInvoke(time) {\n        var timeSinceLastCall = time - lastCallTime,\n            timeSinceLastInvoke = time - lastInvokeTime;\n\n        // Either this is the first call, activity has stopped and we're at the\n        // trailing edge, the system time has gone backwards and we're treating\n        // it as the trailing edge, or we've hit the `maxWait` limit.\n        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n      }\n\n      function timerExpired() {\n        var time = now();\n        if (shouldInvoke(time)) {\n          return trailingEdge(time);\n        }\n        // Restart the timer.\n        timerId = setTimeout(timerExpired, remainingWait(time));\n      }\n\n      function trailingEdge(time) {\n        timerId = undefined;\n\n        // Only invoke if we have `lastArgs` which means `func` has been\n        // debounced at least once.\n        if (trailing && lastArgs) {\n          return invokeFunc(time);\n        }\n        lastArgs = lastThis = undefined;\n        return result;\n      }\n\n      function cancel() {\n        if (timerId !== undefined) {\n          clearTimeout(timerId);\n        }\n        lastInvokeTime = 0;\n        lastArgs = lastCallTime = lastThis = timerId = undefined;\n      }\n\n      function flush() {\n        return timerId === undefined ? result : trailingEdge(now());\n      }\n\n      function debounced() {\n        var time = now(),\n            isInvoking = shouldInvoke(time);\n\n        lastArgs = arguments;\n        lastThis = this;\n        lastCallTime = time;\n\n        if (isInvoking) {\n          if (timerId === undefined) {\n            return leadingEdge(lastCallTime);\n          }\n          if (maxing) {\n            // Handle invocations in a tight loop.\n            timerId = setTimeout(timerExpired, wait);\n            return invokeFunc(lastCallTime);\n          }\n        }\n        if (timerId === undefined) {\n          timerId = setTimeout(timerExpired, wait);\n        }\n        return result;\n      }\n      debounced.cancel = cancel;\n      debounced.flush = flush;\n      return debounced;\n    }\n\n    /**\n     * Defers invoking the `func` until the current call stack has cleared. Any\n     * additional arguments are provided to `func` when it's invoked.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to defer.\n     * @param {...*} [args] The arguments to invoke `func` with.\n     * @returns {number} Returns the timer id.\n     * @example\n     *\n     * _.defer(function(text) {\n     *   console.log(text);\n     * }, 'deferred');\n     * // => Logs 'deferred' after one millisecond.\n     */\n    var defer = baseRest(function(func, args) {\n      return baseDelay(func, 1, args);\n    });\n\n    /**\n     * Invokes `func` after `wait` milliseconds. Any additional arguments are\n     * provided to `func` when it's invoked.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to delay.\n     * @param {number} wait The number of milliseconds to delay invocation.\n     * @param {...*} [args] The arguments to invoke `func` with.\n     * @returns {number} Returns the timer id.\n     * @example\n     *\n     * _.delay(function(text) {\n     *   console.log(text);\n     * }, 1000, 'later');\n     * // => Logs 'later' after one second.\n     */\n    var delay = baseRest(function(func, wait, args) {\n      return baseDelay(func, toNumber(wait) || 0, args);\n    });\n\n    /**\n     * Creates a function that invokes `func` with arguments reversed.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Function\n     * @param {Function} func The function to flip arguments for.\n     * @returns {Function} Returns the new flipped function.\n     * @example\n     *\n     * var flipped = _.flip(function() {\n     *   return _.toArray(arguments);\n     * });\n     *\n     * flipped('a', 'b', 'c', 'd');\n     * // => ['d', 'c', 'b', 'a']\n     */\n    function flip(func) {\n      return createWrap(func, FLIP_FLAG);\n    }\n\n    /**\n     * Creates a function that memoizes the result of `func`. If `resolver` is\n     * provided, it determines the cache key for storing the result based on the\n     * arguments provided to the memoized function. By default, the first argument\n     * provided to the memoized function is used as the map cache key. The `func`\n     * is invoked with the `this` binding of the memoized function.\n     *\n     * **Note:** The cache is exposed as the `cache` property on the memoized\n     * function. Its creation may be customized by replacing the `_.memoize.Cache`\n     * constructor with one whose instances implement the\n     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n     * method interface of `clear`, `delete`, `get`, `has`, and `set`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to have its output memoized.\n     * @param {Function} [resolver] The function to resolve the cache key.\n     * @returns {Function} Returns the new memoized function.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2 };\n     * var other = { 'c': 3, 'd': 4 };\n     *\n     * var values = _.memoize(_.values);\n     * values(object);\n     * // => [1, 2]\n     *\n     * values(other);\n     * // => [3, 4]\n     *\n     * object.a = 2;\n     * values(object);\n     * // => [1, 2]\n     *\n     * // Modify the result cache.\n     * values.cache.set(object, ['a', 'b']);\n     * values(object);\n     * // => ['a', 'b']\n     *\n     * // Replace `_.memoize.Cache`.\n     * _.memoize.Cache = WeakMap;\n     */\n    function memoize(func, resolver) {\n      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      var memoized = function() {\n        var args = arguments,\n            key = resolver ? resolver.apply(this, args) : args[0],\n            cache = memoized.cache;\n\n        if (cache.has(key)) {\n          return cache.get(key);\n        }\n        var result = func.apply(this, args);\n        memoized.cache = cache.set(key, result) || cache;\n        return result;\n      };\n      memoized.cache = new (memoize.Cache || MapCache);\n      return memoized;\n    }\n\n    // Expose `MapCache`.\n    memoize.Cache = MapCache;\n\n    /**\n     * Creates a function that negates the result of the predicate `func`. The\n     * `func` predicate is invoked with the `this` binding and arguments of the\n     * created function.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {Function} predicate The predicate to negate.\n     * @returns {Function} Returns the new negated function.\n     * @example\n     *\n     * function isEven(n) {\n     *   return n % 2 == 0;\n     * }\n     *\n     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));\n     * // => [1, 3, 5]\n     */\n    function negate(predicate) {\n      if (typeof predicate != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      return function() {\n        var args = arguments;\n        switch (args.length) {\n          case 0: return !predicate.call(this);\n          case 1: return !predicate.call(this, args[0]);\n          case 2: return !predicate.call(this, args[0], args[1]);\n          case 3: return !predicate.call(this, args[0], args[1], args[2]);\n        }\n        return !predicate.apply(this, args);\n      };\n    }\n\n    /**\n     * Creates a function that is restricted to invoking `func` once. Repeat calls\n     * to the function return the value of the first invocation. The `func` is\n     * invoked with the `this` binding and arguments of the created function.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to restrict.\n     * @returns {Function} Returns the new restricted function.\n     * @example\n     *\n     * var initialize = _.once(createApplication);\n     * initialize();\n     * initialize();\n     * // => `createApplication` is invoked once\n     */\n    function once(func) {\n      return before(2, func);\n    }\n\n    /**\n     * Creates a function that invokes `func` with its arguments transformed.\n     *\n     * @static\n     * @since 4.0.0\n     * @memberOf _\n     * @category Function\n     * @param {Function} func The function to wrap.\n     * @param {...(Function|Function[])} [transforms=[_.identity]]\n     *  The argument transforms.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * function doubled(n) {\n     *   return n * 2;\n     * }\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var func = _.overArgs(function(x, y) {\n     *   return [x, y];\n     * }, [square, doubled]);\n     *\n     * func(9, 3);\n     * // => [81, 6]\n     *\n     * func(10, 5);\n     * // => [100, 10]\n     */\n    var overArgs = castRest(function(func, transforms) {\n      transforms = (transforms.length == 1 && isArray(transforms[0]))\n        ? arrayMap(transforms[0], baseUnary(getIteratee()))\n        : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));\n\n      var funcsLength = transforms.length;\n      return baseRest(function(args) {\n        var index = -1,\n            length = nativeMin(args.length, funcsLength);\n\n        while (++index < length) {\n          args[index] = transforms[index].call(this, args[index]);\n        }\n        return apply(func, this, args);\n      });\n    });\n\n    /**\n     * Creates a function that invokes `func` with `partials` prepended to the\n     * arguments it receives. This method is like `_.bind` except it does **not**\n     * alter the `this` binding.\n     *\n     * The `_.partial.placeholder` value, which defaults to `_` in monolithic\n     * builds, may be used as a placeholder for partially applied arguments.\n     *\n     * **Note:** This method doesn't set the \"length\" property of partially\n     * applied functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.2.0\n     * @category Function\n     * @param {Function} func The function to partially apply arguments to.\n     * @param {...*} [partials] The arguments to be partially applied.\n     * @returns {Function} Returns the new partially applied function.\n     * @example\n     *\n     * function greet(greeting, name) {\n     *   return greeting + ' ' + name;\n     * }\n     *\n     * var sayHelloTo = _.partial(greet, 'hello');\n     * sayHelloTo('fred');\n     * // => 'hello fred'\n     *\n     * // Partially applied with placeholders.\n     * var greetFred = _.partial(greet, _, 'fred');\n     * greetFred('hi');\n     * // => 'hi fred'\n     */\n    var partial = baseRest(function(func, partials) {\n      var holders = replaceHolders(partials, getHolder(partial));\n      return createWrap(func, PARTIAL_FLAG, undefined, partials, holders);\n    });\n\n    /**\n     * This method is like `_.partial` except that partially applied arguments\n     * are appended to the arguments it receives.\n     *\n     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic\n     * builds, may be used as a placeholder for partially applied arguments.\n     *\n     * **Note:** This method doesn't set the \"length\" property of partially\n     * applied functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.0.0\n     * @category Function\n     * @param {Function} func The function to partially apply arguments to.\n     * @param {...*} [partials] The arguments to be partially applied.\n     * @returns {Function} Returns the new partially applied function.\n     * @example\n     *\n     * function greet(greeting, name) {\n     *   return greeting + ' ' + name;\n     * }\n     *\n     * var greetFred = _.partialRight(greet, 'fred');\n     * greetFred('hi');\n     * // => 'hi fred'\n     *\n     * // Partially applied with placeholders.\n     * var sayHelloTo = _.partialRight(greet, 'hello', _);\n     * sayHelloTo('fred');\n     * // => 'hello fred'\n     */\n    var partialRight = baseRest(function(func, partials) {\n      var holders = replaceHolders(partials, getHolder(partialRight));\n      return createWrap(func, PARTIAL_RIGHT_FLAG, undefined, partials, holders);\n    });\n\n    /**\n     * Creates a function that invokes `func` with arguments arranged according\n     * to the specified `indexes` where the argument value at the first index is\n     * provided as the first argument, the argument value at the second index is\n     * provided as the second argument, and so on.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {Function} func The function to rearrange arguments for.\n     * @param {...(number|number[])} indexes The arranged argument indexes.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var rearged = _.rearg(function(a, b, c) {\n     *   return [a, b, c];\n     * }, [2, 0, 1]);\n     *\n     * rearged('b', 'c', 'a')\n     * // => ['a', 'b', 'c']\n     */\n    var rearg = flatRest(function(func, indexes) {\n      return createWrap(func, REARG_FLAG, undefined, undefined, undefined, indexes);\n    });\n\n    /**\n     * Creates a function that invokes `func` with the `this` binding of the\n     * created function and arguments from `start` and beyond provided as\n     * an array.\n     *\n     * **Note:** This method is based on the\n     * [rest parameter](https://mdn.io/rest_parameters).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Function\n     * @param {Function} func The function to apply a rest parameter to.\n     * @param {number} [start=func.length-1] The start position of the rest parameter.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var say = _.rest(function(what, names) {\n     *   return what + ' ' + _.initial(names).join(', ') +\n     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);\n     * });\n     *\n     * say('hello', 'fred', 'barney', 'pebbles');\n     * // => 'hello fred, barney, & pebbles'\n     */\n    function rest(func, start) {\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      start = start === undefined ? start : toInteger(start);\n      return baseRest(func, start);\n    }\n\n    /**\n     * Creates a function that invokes `func` with the `this` binding of the\n     * create function and an array of arguments much like\n     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).\n     *\n     * **Note:** This method is based on the\n     * [spread operator](https://mdn.io/spread_operator).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.2.0\n     * @category Function\n     * @param {Function} func The function to spread arguments over.\n     * @param {number} [start=0] The start position of the spread.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var say = _.spread(function(who, what) {\n     *   return who + ' says ' + what;\n     * });\n     *\n     * say(['fred', 'hello']);\n     * // => 'fred says hello'\n     *\n     * var numbers = Promise.all([\n     *   Promise.resolve(40),\n     *   Promise.resolve(36)\n     * ]);\n     *\n     * numbers.then(_.spread(function(x, y) {\n     *   return x + y;\n     * }));\n     * // => a Promise of 76\n     */\n    function spread(func, start) {\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      start = start === undefined ? 0 : nativeMax(toInteger(start), 0);\n      return baseRest(function(args) {\n        var array = args[start],\n            otherArgs = castSlice(args, 0, start);\n\n        if (array) {\n          arrayPush(otherArgs, array);\n        }\n        return apply(func, this, otherArgs);\n      });\n    }\n\n    /**\n     * Creates a throttled function that only invokes `func` at most once per\n     * every `wait` milliseconds. The throttled function comes with a `cancel`\n     * method to cancel delayed `func` invocations and a `flush` method to\n     * immediately invoke them. Provide `options` to indicate whether `func`\n     * should be invoked on the leading and/or trailing edge of the `wait`\n     * timeout. The `func` is invoked with the last arguments provided to the\n     * throttled function. Subsequent calls to the throttled function return the\n     * result of the last `func` invocation.\n     *\n     * **Note:** If `leading` and `trailing` options are `true`, `func` is\n     * invoked on the trailing edge of the timeout only if the throttled function\n     * is invoked more than once during the `wait` timeout.\n     *\n     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n     * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n     *\n     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n     * for details over the differences between `_.throttle` and `_.debounce`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to throttle.\n     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.\n     * @param {Object} [options={}] The options object.\n     * @param {boolean} [options.leading=true]\n     *  Specify invoking on the leading edge of the timeout.\n     * @param {boolean} [options.trailing=true]\n     *  Specify invoking on the trailing edge of the timeout.\n     * @returns {Function} Returns the new throttled function.\n     * @example\n     *\n     * // Avoid excessively updating the position while scrolling.\n     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));\n     *\n     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.\n     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });\n     * jQuery(element).on('click', throttled);\n     *\n     * // Cancel the trailing throttled invocation.\n     * jQuery(window).on('popstate', throttled.cancel);\n     */\n    function throttle(func, wait, options) {\n      var leading = true,\n          trailing = true;\n\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      if (isObject(options)) {\n        leading = 'leading' in options ? !!options.leading : leading;\n        trailing = 'trailing' in options ? !!options.trailing : trailing;\n      }\n      return debounce(func, wait, {\n        'leading': leading,\n        'maxWait': wait,\n        'trailing': trailing\n      });\n    }\n\n    /**\n     * Creates a function that accepts up to one argument, ignoring any\n     * additional arguments.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Function\n     * @param {Function} func The function to cap arguments for.\n     * @returns {Function} Returns the new capped function.\n     * @example\n     *\n     * _.map(['6', '8', '10'], _.unary(parseInt));\n     * // => [6, 8, 10]\n     */\n    function unary(func) {\n      return ary(func, 1);\n    }\n\n    /**\n     * Creates a function that provides `value` to `wrapper` as its first\n     * argument. Any additional arguments provided to the function are appended\n     * to those provided to the `wrapper`. The wrapper is invoked with the `this`\n     * binding of the created function.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {*} value The value to wrap.\n     * @param {Function} [wrapper=identity] The wrapper function.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var p = _.wrap(_.escape, function(func, text) {\n     *   return '<p>' + func(text) + '</p>';\n     * });\n     *\n     * p('fred, barney, & pebbles');\n     * // => '<p>fred, barney, &amp; pebbles</p>'\n     */\n    function wrap(value, wrapper) {\n      return partial(castFunction(wrapper), value);\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Casts `value` as an array if it's not one.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.4.0\n     * @category Lang\n     * @param {*} value The value to inspect.\n     * @returns {Array} Returns the cast array.\n     * @example\n     *\n     * _.castArray(1);\n     * // => [1]\n     *\n     * _.castArray({ 'a': 1 });\n     * // => [{ 'a': 1 }]\n     *\n     * _.castArray('abc');\n     * // => ['abc']\n     *\n     * _.castArray(null);\n     * // => [null]\n     *\n     * _.castArray(undefined);\n     * // => [undefined]\n     *\n     * _.castArray();\n     * // => []\n     *\n     * var array = [1, 2, 3];\n     * console.log(_.castArray(array) === array);\n     * // => true\n     */\n    function castArray() {\n      if (!arguments.length) {\n        return [];\n      }\n      var value = arguments[0];\n      return isArray(value) ? value : [value];\n    }\n\n    /**\n     * Creates a shallow clone of `value`.\n     *\n     * **Note:** This method is loosely based on the\n     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)\n     * and supports cloning arrays, array buffers, booleans, date objects, maps,\n     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed\n     * arrays. The own enumerable properties of `arguments` objects are cloned\n     * as plain objects. An empty object is returned for uncloneable values such\n     * as error objects, functions, DOM nodes, and WeakMaps.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to clone.\n     * @returns {*} Returns the cloned value.\n     * @see _.cloneDeep\n     * @example\n     *\n     * var objects = [{ 'a': 1 }, { 'b': 2 }];\n     *\n     * var shallow = _.clone(objects);\n     * console.log(shallow[0] === objects[0]);\n     * // => true\n     */\n    function clone(value) {\n      return baseClone(value, false, true);\n    }\n\n    /**\n     * This method is like `_.clone` except that it accepts `customizer` which\n     * is invoked to produce the cloned value. If `customizer` returns `undefined`,\n     * cloning is handled by the method instead. The `customizer` is invoked with\n     * up to four arguments; (value [, index|key, object, stack]).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to clone.\n     * @param {Function} [customizer] The function to customize cloning.\n     * @returns {*} Returns the cloned value.\n     * @see _.cloneDeepWith\n     * @example\n     *\n     * function customizer(value) {\n     *   if (_.isElement(value)) {\n     *     return value.cloneNode(false);\n     *   }\n     * }\n     *\n     * var el = _.cloneWith(document.body, customizer);\n     *\n     * console.log(el === document.body);\n     * // => false\n     * console.log(el.nodeName);\n     * // => 'BODY'\n     * console.log(el.childNodes.length);\n     * // => 0\n     */\n    function cloneWith(value, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      return baseClone(value, false, true, customizer);\n    }\n\n    /**\n     * This method is like `_.clone` except that it recursively clones `value`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.0.0\n     * @category Lang\n     * @param {*} value The value to recursively clone.\n     * @returns {*} Returns the deep cloned value.\n     * @see _.clone\n     * @example\n     *\n     * var objects = [{ 'a': 1 }, { 'b': 2 }];\n     *\n     * var deep = _.cloneDeep(objects);\n     * console.log(deep[0] === objects[0]);\n     * // => false\n     */\n    function cloneDeep(value) {\n      return baseClone(value, true, true);\n    }\n\n    /**\n     * This method is like `_.cloneWith` except that it recursively clones `value`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to recursively clone.\n     * @param {Function} [customizer] The function to customize cloning.\n     * @returns {*} Returns the deep cloned value.\n     * @see _.cloneWith\n     * @example\n     *\n     * function customizer(value) {\n     *   if (_.isElement(value)) {\n     *     return value.cloneNode(true);\n     *   }\n     * }\n     *\n     * var el = _.cloneDeepWith(document.body, customizer);\n     *\n     * console.log(el === document.body);\n     * // => false\n     * console.log(el.nodeName);\n     * // => 'BODY'\n     * console.log(el.childNodes.length);\n     * // => 20\n     */\n    function cloneDeepWith(value, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      return baseClone(value, true, true, customizer);\n    }\n\n    /**\n     * Checks if `object` conforms to `source` by invoking the predicate\n     * properties of `source` with the corresponding property values of `object`.\n     *\n     * **Note:** This method is equivalent to `_.conforms` when `source` is\n     * partially applied.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.14.0\n     * @category Lang\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property predicates to conform to.\n     * @returns {boolean} Returns `true` if `object` conforms, else `false`.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2 };\n     *\n     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });\n     * // => true\n     *\n     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });\n     * // => false\n     */\n    function conformsTo(object, source) {\n      return source == null || baseConformsTo(object, source, keys(source));\n    }\n\n    /**\n     * Performs a\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * comparison between two values to determine if they are equivalent.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n     * @example\n     *\n     * var object = { 'a': 1 };\n     * var other = { 'a': 1 };\n     *\n     * _.eq(object, object);\n     * // => true\n     *\n     * _.eq(object, other);\n     * // => false\n     *\n     * _.eq('a', 'a');\n     * // => true\n     *\n     * _.eq('a', Object('a'));\n     * // => false\n     *\n     * _.eq(NaN, NaN);\n     * // => true\n     */\n    function eq(value, other) {\n      return value === other || (value !== value && other !== other);\n    }\n\n    /**\n     * Checks if `value` is greater than `other`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.9.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is greater than `other`,\n     *  else `false`.\n     * @see _.lt\n     * @example\n     *\n     * _.gt(3, 1);\n     * // => true\n     *\n     * _.gt(3, 3);\n     * // => false\n     *\n     * _.gt(1, 3);\n     * // => false\n     */\n    var gt = createRelationalOperation(baseGt);\n\n    /**\n     * Checks if `value` is greater than or equal to `other`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.9.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is greater than or equal to\n     *  `other`, else `false`.\n     * @see _.lte\n     * @example\n     *\n     * _.gte(3, 1);\n     * // => true\n     *\n     * _.gte(3, 3);\n     * // => true\n     *\n     * _.gte(1, 3);\n     * // => false\n     */\n    var gte = createRelationalOperation(function(value, other) {\n      return value >= other;\n    });\n\n    /**\n     * Checks if `value` is likely an `arguments` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n     *  else `false`.\n     * @example\n     *\n     * _.isArguments(function() { return arguments; }());\n     * // => true\n     *\n     * _.isArguments([1, 2, 3]);\n     * // => false\n     */\n    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n        !propertyIsEnumerable.call(value, 'callee');\n    };\n\n    /**\n     * Checks if `value` is classified as an `Array` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n     * @example\n     *\n     * _.isArray([1, 2, 3]);\n     * // => true\n     *\n     * _.isArray(document.body.children);\n     * // => false\n     *\n     * _.isArray('abc');\n     * // => false\n     *\n     * _.isArray(_.noop);\n     * // => false\n     */\n    var isArray = Array.isArray;\n\n    /**\n     * Checks if `value` is classified as an `ArrayBuffer` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.\n     * @example\n     *\n     * _.isArrayBuffer(new ArrayBuffer(2));\n     * // => true\n     *\n     * _.isArrayBuffer(new Array(2));\n     * // => false\n     */\n    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;\n\n    /**\n     * Checks if `value` is array-like. A value is considered array-like if it's\n     * not a function and has a `value.length` that's an integer greater than or\n     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n     * @example\n     *\n     * _.isArrayLike([1, 2, 3]);\n     * // => true\n     *\n     * _.isArrayLike(document.body.children);\n     * // => true\n     *\n     * _.isArrayLike('abc');\n     * // => true\n     *\n     * _.isArrayLike(_.noop);\n     * // => false\n     */\n    function isArrayLike(value) {\n      return value != null && isLength(value.length) && !isFunction(value);\n    }\n\n    /**\n     * This method is like `_.isArrayLike` except that it also checks if `value`\n     * is an object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an array-like object,\n     *  else `false`.\n     * @example\n     *\n     * _.isArrayLikeObject([1, 2, 3]);\n     * // => true\n     *\n     * _.isArrayLikeObject(document.body.children);\n     * // => true\n     *\n     * _.isArrayLikeObject('abc');\n     * // => false\n     *\n     * _.isArrayLikeObject(_.noop);\n     * // => false\n     */\n    function isArrayLikeObject(value) {\n      return isObjectLike(value) && isArrayLike(value);\n    }\n\n    /**\n     * Checks if `value` is classified as a boolean primitive or object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.\n     * @example\n     *\n     * _.isBoolean(false);\n     * // => true\n     *\n     * _.isBoolean(null);\n     * // => false\n     */\n    function isBoolean(value) {\n      return value === true || value === false ||\n        (isObjectLike(value) && baseGetTag(value) == boolTag);\n    }\n\n    /**\n     * Checks if `value` is a buffer.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n     * @example\n     *\n     * _.isBuffer(new Buffer(2));\n     * // => true\n     *\n     * _.isBuffer(new Uint8Array(2));\n     * // => false\n     */\n    var isBuffer = nativeIsBuffer || stubFalse;\n\n    /**\n     * Checks if `value` is classified as a `Date` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.\n     * @example\n     *\n     * _.isDate(new Date);\n     * // => true\n     *\n     * _.isDate('Mon April 23 2012');\n     * // => false\n     */\n    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;\n\n    /**\n     * Checks if `value` is likely a DOM element.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.\n     * @example\n     *\n     * _.isElement(document.body);\n     * // => true\n     *\n     * _.isElement('<body>');\n     * // => false\n     */\n    function isElement(value) {\n      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);\n    }\n\n    /**\n     * Checks if `value` is an empty object, collection, map, or set.\n     *\n     * Objects are considered empty if they have no own enumerable string keyed\n     * properties.\n     *\n     * Array-like values such as `arguments` objects, arrays, buffers, strings, or\n     * jQuery-like collections are considered empty if they have a `length` of `0`.\n     * Similarly, maps and sets are considered empty if they have a `size` of `0`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is empty, else `false`.\n     * @example\n     *\n     * _.isEmpty(null);\n     * // => true\n     *\n     * _.isEmpty(true);\n     * // => true\n     *\n     * _.isEmpty(1);\n     * // => true\n     *\n     * _.isEmpty([1, 2, 3]);\n     * // => false\n     *\n     * _.isEmpty({ 'a': 1 });\n     * // => false\n     */\n    function isEmpty(value) {\n      if (value == null) {\n        return true;\n      }\n      if (isArrayLike(value) &&\n          (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||\n            isBuffer(value) || isTypedArray(value) || isArguments(value))) {\n        return !value.length;\n      }\n      var tag = getTag(value);\n      if (tag == mapTag || tag == setTag) {\n        return !value.size;\n      }\n      if (isPrototype(value)) {\n        return !baseKeys(value).length;\n      }\n      for (var key in value) {\n        if (hasOwnProperty.call(value, key)) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n    /**\n     * Performs a deep comparison between two values to determine if they are\n     * equivalent.\n     *\n     * **Note:** This method supports comparing arrays, array buffers, booleans,\n     * date objects, error objects, maps, numbers, `Object` objects, regexes,\n     * sets, strings, symbols, and typed arrays. `Object` objects are compared\n     * by their own, not inherited, enumerable properties. Functions and DOM\n     * nodes are **not** supported.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n     * @example\n     *\n     * var object = { 'a': 1 };\n     * var other = { 'a': 1 };\n     *\n     * _.isEqual(object, other);\n     * // => true\n     *\n     * object === other;\n     * // => false\n     */\n    function isEqual(value, other) {\n      return baseIsEqual(value, other);\n    }\n\n    /**\n     * This method is like `_.isEqual` except that it accepts `customizer` which\n     * is invoked to compare values. If `customizer` returns `undefined`, comparisons\n     * are handled by the method instead. The `customizer` is invoked with up to\n     * six arguments: (objValue, othValue [, index|key, object, other, stack]).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @param {Function} [customizer] The function to customize comparisons.\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n     * @example\n     *\n     * function isGreeting(value) {\n     *   return /^h(?:i|ello)$/.test(value);\n     * }\n     *\n     * function customizer(objValue, othValue) {\n     *   if (isGreeting(objValue) && isGreeting(othValue)) {\n     *     return true;\n     *   }\n     * }\n     *\n     * var array = ['hello', 'goodbye'];\n     * var other = ['hi', 'goodbye'];\n     *\n     * _.isEqualWith(array, other, customizer);\n     * // => true\n     */\n    function isEqualWith(value, other, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      var result = customizer ? customizer(value, other) : undefined;\n      return result === undefined ? baseIsEqual(value, other, customizer) : !!result;\n    }\n\n    /**\n     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,\n     * `SyntaxError`, `TypeError`, or `URIError` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.\n     * @example\n     *\n     * _.isError(new Error);\n     * // => true\n     *\n     * _.isError(Error);\n     * // => false\n     */\n    function isError(value) {\n      if (!isObjectLike(value)) {\n        return false;\n      }\n      var tag = baseGetTag(value);\n      return tag == errorTag || tag == domExcTag ||\n        (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));\n    }\n\n    /**\n     * Checks if `value` is a finite primitive number.\n     *\n     * **Note:** This method is based on\n     * [`Number.isFinite`](https://mdn.io/Number/isFinite).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.\n     * @example\n     *\n     * _.isFinite(3);\n     * // => true\n     *\n     * _.isFinite(Number.MIN_VALUE);\n     * // => true\n     *\n     * _.isFinite(Infinity);\n     * // => false\n     *\n     * _.isFinite('3');\n     * // => false\n     */\n    function isFinite(value) {\n      return typeof value == 'number' && nativeIsFinite(value);\n    }\n\n    /**\n     * Checks if `value` is classified as a `Function` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n     * @example\n     *\n     * _.isFunction(_);\n     * // => true\n     *\n     * _.isFunction(/abc/);\n     * // => false\n     */\n    function isFunction(value) {\n      if (!isObject(value)) {\n        return false;\n      }\n      // The use of `Object#toString` avoids issues with the `typeof` operator\n      // in Safari 9 which returns 'object' for typed arrays and other constructors.\n      var tag = baseGetTag(value);\n      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n    }\n\n    /**\n     * Checks if `value` is an integer.\n     *\n     * **Note:** This method is based on\n     * [`Number.isInteger`](https://mdn.io/Number/isInteger).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.\n     * @example\n     *\n     * _.isInteger(3);\n     * // => true\n     *\n     * _.isInteger(Number.MIN_VALUE);\n     * // => false\n     *\n     * _.isInteger(Infinity);\n     * // => false\n     *\n     * _.isInteger('3');\n     * // => false\n     */\n    function isInteger(value) {\n      return typeof value == 'number' && value == toInteger(value);\n    }\n\n    /**\n     * Checks if `value` is a valid array-like length.\n     *\n     * **Note:** This method is loosely based on\n     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n     * @example\n     *\n     * _.isLength(3);\n     * // => true\n     *\n     * _.isLength(Number.MIN_VALUE);\n     * // => false\n     *\n     * _.isLength(Infinity);\n     * // => false\n     *\n     * _.isLength('3');\n     * // => false\n     */\n    function isLength(value) {\n      return typeof value == 'number' &&\n        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n    }\n\n    /**\n     * Checks if `value` is the\n     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n     * @example\n     *\n     * _.isObject({});\n     * // => true\n     *\n     * _.isObject([1, 2, 3]);\n     * // => true\n     *\n     * _.isObject(_.noop);\n     * // => true\n     *\n     * _.isObject(null);\n     * // => false\n     */\n    function isObject(value) {\n      var type = typeof value;\n      return value != null && (type == 'object' || type == 'function');\n    }\n\n    /**\n     * Checks if `value` is object-like. A value is object-like if it's not `null`\n     * and has a `typeof` result of \"object\".\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n     * @example\n     *\n     * _.isObjectLike({});\n     * // => true\n     *\n     * _.isObjectLike([1, 2, 3]);\n     * // => true\n     *\n     * _.isObjectLike(_.noop);\n     * // => false\n     *\n     * _.isObjectLike(null);\n     * // => false\n     */\n    function isObjectLike(value) {\n      return value != null && typeof value == 'object';\n    }\n\n    /**\n     * Checks if `value` is classified as a `Map` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a map, else `false`.\n     * @example\n     *\n     * _.isMap(new Map);\n     * // => true\n     *\n     * _.isMap(new WeakMap);\n     * // => false\n     */\n    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;\n\n    /**\n     * Performs a partial deep comparison between `object` and `source` to\n     * determine if `object` contains equivalent property values.\n     *\n     * **Note:** This method is equivalent to `_.matches` when `source` is\n     * partially applied.\n     *\n     * Partial comparisons will match empty array and empty object `source`\n     * values against any array or object value, respectively. See `_.isEqual`\n     * for a list of supported value comparisons.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property values to match.\n     * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2 };\n     *\n     * _.isMatch(object, { 'b': 2 });\n     * // => true\n     *\n     * _.isMatch(object, { 'b': 1 });\n     * // => false\n     */\n    function isMatch(object, source) {\n      return object === source || baseIsMatch(object, source, getMatchData(source));\n    }\n\n    /**\n     * This method is like `_.isMatch` except that it accepts `customizer` which\n     * is invoked to compare values. If `customizer` returns `undefined`, comparisons\n     * are handled by the method instead. The `customizer` is invoked with five\n     * arguments: (objValue, srcValue, index|key, object, source).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property values to match.\n     * @param {Function} [customizer] The function to customize comparisons.\n     * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n     * @example\n     *\n     * function isGreeting(value) {\n     *   return /^h(?:i|ello)$/.test(value);\n     * }\n     *\n     * function customizer(objValue, srcValue) {\n     *   if (isGreeting(objValue) && isGreeting(srcValue)) {\n     *     return true;\n     *   }\n     * }\n     *\n     * var object = { 'greeting': 'hello' };\n     * var source = { 'greeting': 'hi' };\n     *\n     * _.isMatchWith(object, source, customizer);\n     * // => true\n     */\n    function isMatchWith(object, source, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      return baseIsMatch(object, source, getMatchData(source), customizer);\n    }\n\n    /**\n     * Checks if `value` is `NaN`.\n     *\n     * **Note:** This method is based on\n     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as\n     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for\n     * `undefined` and other non-number values.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\n     * @example\n     *\n     * _.isNaN(NaN);\n     * // => true\n     *\n     * _.isNaN(new Number(NaN));\n     * // => true\n     *\n     * isNaN(undefined);\n     * // => true\n     *\n     * _.isNaN(undefined);\n     * // => false\n     */\n    function isNaN(value) {\n      // An `NaN` primitive is the only value that is not equal to itself.\n      // Perform the `toStringTag` check first to avoid errors with some\n      // ActiveX objects in IE.\n      return isNumber(value) && value != +value;\n    }\n\n    /**\n     * Checks if `value` is a pristine native function.\n     *\n     * **Note:** This method can't reliably detect native functions in the presence\n     * of the core-js package because core-js circumvents this kind of detection.\n     * Despite multiple requests, the core-js maintainer has made it clear: any\n     * attempt to fix the detection will be obstructed. As a result, we're left\n     * with little choice but to throw an error. Unfortunately, this also affects\n     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),\n     * which rely on core-js.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a native function,\n     *  else `false`.\n     * @example\n     *\n     * _.isNative(Array.prototype.push);\n     * // => true\n     *\n     * _.isNative(_);\n     * // => false\n     */\n    function isNative(value) {\n      if (isMaskable(value)) {\n        throw new Error(CORE_ERROR_TEXT);\n      }\n      return baseIsNative(value);\n    }\n\n    /**\n     * Checks if `value` is `null`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.\n     * @example\n     *\n     * _.isNull(null);\n     * // => true\n     *\n     * _.isNull(void 0);\n     * // => false\n     */\n    function isNull(value) {\n      return value === null;\n    }\n\n    /**\n     * Checks if `value` is `null` or `undefined`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.\n     * @example\n     *\n     * _.isNil(null);\n     * // => true\n     *\n     * _.isNil(void 0);\n     * // => true\n     *\n     * _.isNil(NaN);\n     * // => false\n     */\n    function isNil(value) {\n      return value == null;\n    }\n\n    /**\n     * Checks if `value` is classified as a `Number` primitive or object.\n     *\n     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are\n     * classified as numbers, use the `_.isFinite` method.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a number, else `false`.\n     * @example\n     *\n     * _.isNumber(3);\n     * // => true\n     *\n     * _.isNumber(Number.MIN_VALUE);\n     * // => true\n     *\n     * _.isNumber(Infinity);\n     * // => true\n     *\n     * _.isNumber('3');\n     * // => false\n     */\n    function isNumber(value) {\n      return typeof value == 'number' ||\n        (isObjectLike(value) && baseGetTag(value) == numberTag);\n    }\n\n    /**\n     * Checks if `value` is a plain object, that is, an object created by the\n     * `Object` constructor or one with a `[[Prototype]]` of `null`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.8.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     * }\n     *\n     * _.isPlainObject(new Foo);\n     * // => false\n     *\n     * _.isPlainObject([1, 2, 3]);\n     * // => false\n     *\n     * _.isPlainObject({ 'x': 0, 'y': 0 });\n     * // => true\n     *\n     * _.isPlainObject(Object.create(null));\n     * // => true\n     */\n    function isPlainObject(value) {\n      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {\n        return false;\n      }\n      var proto = getPrototype(value);\n      if (proto === null) {\n        return true;\n      }\n      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;\n      return typeof Ctor == 'function' && Ctor instanceof Ctor &&\n        funcToString.call(Ctor) == objectCtorString;\n    }\n\n    /**\n     * Checks if `value` is classified as a `RegExp` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.\n     * @example\n     *\n     * _.isRegExp(/abc/);\n     * // => true\n     *\n     * _.isRegExp('/abc/');\n     * // => false\n     */\n    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;\n\n    /**\n     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754\n     * double precision number which isn't the result of a rounded unsafe integer.\n     *\n     * **Note:** This method is based on\n     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.\n     * @example\n     *\n     * _.isSafeInteger(3);\n     * // => true\n     *\n     * _.isSafeInteger(Number.MIN_VALUE);\n     * // => false\n     *\n     * _.isSafeInteger(Infinity);\n     * // => false\n     *\n     * _.isSafeInteger('3');\n     * // => false\n     */\n    function isSafeInteger(value) {\n      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;\n    }\n\n    /**\n     * Checks if `value` is classified as a `Set` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n     * @example\n     *\n     * _.isSet(new Set);\n     * // => true\n     *\n     * _.isSet(new WeakSet);\n     * // => false\n     */\n    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;\n\n    /**\n     * Checks if `value` is classified as a `String` primitive or object.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a string, else `false`.\n     * @example\n     *\n     * _.isString('abc');\n     * // => true\n     *\n     * _.isString(1);\n     * // => false\n     */\n    function isString(value) {\n      return typeof value == 'string' ||\n        (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);\n    }\n\n    /**\n     * Checks if `value` is classified as a `Symbol` primitive or object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n     * @example\n     *\n     * _.isSymbol(Symbol.iterator);\n     * // => true\n     *\n     * _.isSymbol('abc');\n     * // => false\n     */\n    function isSymbol(value) {\n      return typeof value == 'symbol' ||\n        (isObjectLike(value) && baseGetTag(value) == symbolTag);\n    }\n\n    /**\n     * Checks if `value` is classified as a typed array.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n     * @example\n     *\n     * _.isTypedArray(new Uint8Array);\n     * // => true\n     *\n     * _.isTypedArray([]);\n     * // => false\n     */\n    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n    /**\n     * Checks if `value` is `undefined`.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.\n     * @example\n     *\n     * _.isUndefined(void 0);\n     * // => true\n     *\n     * _.isUndefined(null);\n     * // => false\n     */\n    function isUndefined(value) {\n      return value === undefined;\n    }\n\n    /**\n     * Checks if `value` is classified as a `WeakMap` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.\n     * @example\n     *\n     * _.isWeakMap(new WeakMap);\n     * // => true\n     *\n     * _.isWeakMap(new Map);\n     * // => false\n     */\n    function isWeakMap(value) {\n      return isObjectLike(value) && getTag(value) == weakMapTag;\n    }\n\n    /**\n     * Checks if `value` is classified as a `WeakSet` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.\n     * @example\n     *\n     * _.isWeakSet(new WeakSet);\n     * // => true\n     *\n     * _.isWeakSet(new Set);\n     * // => false\n     */\n    function isWeakSet(value) {\n      return isObjectLike(value) && baseGetTag(value) == weakSetTag;\n    }\n\n    /**\n     * Checks if `value` is less than `other`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.9.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is less than `other`,\n     *  else `false`.\n     * @see _.gt\n     * @example\n     *\n     * _.lt(1, 3);\n     * // => true\n     *\n     * _.lt(3, 3);\n     * // => false\n     *\n     * _.lt(3, 1);\n     * // => false\n     */\n    var lt = createRelationalOperation(baseLt);\n\n    /**\n     * Checks if `value` is less than or equal to `other`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.9.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is less than or equal to\n     *  `other`, else `false`.\n     * @see _.gte\n     * @example\n     *\n     * _.lte(1, 3);\n     * // => true\n     *\n     * _.lte(3, 3);\n     * // => true\n     *\n     * _.lte(3, 1);\n     * // => false\n     */\n    var lte = createRelationalOperation(function(value, other) {\n      return value <= other;\n    });\n\n    /**\n     * Converts `value` to an array.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {Array} Returns the converted array.\n     * @example\n     *\n     * _.toArray({ 'a': 1, 'b': 2 });\n     * // => [1, 2]\n     *\n     * _.toArray('abc');\n     * // => ['a', 'b', 'c']\n     *\n     * _.toArray(1);\n     * // => []\n     *\n     * _.toArray(null);\n     * // => []\n     */\n    function toArray(value) {\n      if (!value) {\n        return [];\n      }\n      if (isArrayLike(value)) {\n        return isString(value) ? stringToArray(value) : copyArray(value);\n      }\n      if (symIterator && value[symIterator]) {\n        return iteratorToArray(value[symIterator]());\n      }\n      var tag = getTag(value),\n          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);\n\n      return func(value);\n    }\n\n    /**\n     * Converts `value` to a finite number.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.12.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {number} Returns the converted number.\n     * @example\n     *\n     * _.toFinite(3.2);\n     * // => 3.2\n     *\n     * _.toFinite(Number.MIN_VALUE);\n     * // => 5e-324\n     *\n     * _.toFinite(Infinity);\n     * // => 1.7976931348623157e+308\n     *\n     * _.toFinite('3.2');\n     * // => 3.2\n     */\n    function toFinite(value) {\n      if (!value) {\n        return value === 0 ? value : 0;\n      }\n      value = toNumber(value);\n      if (value === INFINITY || value === -INFINITY) {\n        var sign = (value < 0 ? -1 : 1);\n        return sign * MAX_INTEGER;\n      }\n      return value === value ? value : 0;\n    }\n\n    /**\n     * Converts `value` to an integer.\n     *\n     * **Note:** This method is loosely based on\n     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {number} Returns the converted integer.\n     * @example\n     *\n     * _.toInteger(3.2);\n     * // => 3\n     *\n     * _.toInteger(Number.MIN_VALUE);\n     * // => 0\n     *\n     * _.toInteger(Infinity);\n     * // => 1.7976931348623157e+308\n     *\n     * _.toInteger('3.2');\n     * // => 3\n     */\n    function toInteger(value) {\n      var result = toFinite(value),\n          remainder = result % 1;\n\n      return result === result ? (remainder ? result - remainder : result) : 0;\n    }\n\n    /**\n     * Converts `value` to an integer suitable for use as the length of an\n     * array-like object.\n     *\n     * **Note:** This method is based on\n     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {number} Returns the converted integer.\n     * @example\n     *\n     * _.toLength(3.2);\n     * // => 3\n     *\n     * _.toLength(Number.MIN_VALUE);\n     * // => 0\n     *\n     * _.toLength(Infinity);\n     * // => 4294967295\n     *\n     * _.toLength('3.2');\n     * // => 3\n     */\n    function toLength(value) {\n      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;\n    }\n\n    /**\n     * Converts `value` to a number.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to process.\n     * @returns {number} Returns the number.\n     * @example\n     *\n     * _.toNumber(3.2);\n     * // => 3.2\n     *\n     * _.toNumber(Number.MIN_VALUE);\n     * // => 5e-324\n     *\n     * _.toNumber(Infinity);\n     * // => Infinity\n     *\n     * _.toNumber('3.2');\n     * // => 3.2\n     */\n    function toNumber(value) {\n      if (typeof value == 'number') {\n        return value;\n      }\n      if (isSymbol(value)) {\n        return NAN;\n      }\n      if (isObject(value)) {\n        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n        value = isObject(other) ? (other + '') : other;\n      }\n      if (typeof value != 'string') {\n        return value === 0 ? value : +value;\n      }\n      value = value.replace(reTrim, '');\n      var isBinary = reIsBinary.test(value);\n      return (isBinary || reIsOctal.test(value))\n        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n        : (reIsBadHex.test(value) ? NAN : +value);\n    }\n\n    /**\n     * Converts `value` to a plain object flattening inherited enumerable string\n     * keyed properties of `value` to own properties of the plain object.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {Object} Returns the converted plain object.\n     * @example\n     *\n     * function Foo() {\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.assign({ 'a': 1 }, new Foo);\n     * // => { 'a': 1, 'b': 2 }\n     *\n     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));\n     * // => { 'a': 1, 'b': 2, 'c': 3 }\n     */\n    function toPlainObject(value) {\n      return copyObject(value, keysIn(value));\n    }\n\n    /**\n     * Converts `value` to a safe integer. A safe integer can be compared and\n     * represented correctly.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {number} Returns the converted integer.\n     * @example\n     *\n     * _.toSafeInteger(3.2);\n     * // => 3\n     *\n     * _.toSafeInteger(Number.MIN_VALUE);\n     * // => 0\n     *\n     * _.toSafeInteger(Infinity);\n     * // => 9007199254740991\n     *\n     * _.toSafeInteger('3.2');\n     * // => 3\n     */\n    function toSafeInteger(value) {\n      return baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\n    }\n\n    /**\n     * Converts `value` to a string. An empty string is returned for `null`\n     * and `undefined` values. The sign of `-0` is preserved.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {string} Returns the converted string.\n     * @example\n     *\n     * _.toString(null);\n     * // => ''\n     *\n     * _.toString(-0);\n     * // => '-0'\n     *\n     * _.toString([1, 2, 3]);\n     * // => '1,2,3'\n     */\n    function toString(value) {\n      return value == null ? '' : baseToString(value);\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Assigns own enumerable string keyed properties of source objects to the\n     * destination object. Source objects are applied from left to right.\n     * Subsequent sources overwrite property assignments of previous sources.\n     *\n     * **Note:** This method mutates `object` and is loosely based on\n     * [`Object.assign`](https://mdn.io/Object/assign).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.10.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @see _.assignIn\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     * }\n     *\n     * function Bar() {\n     *   this.c = 3;\n     * }\n     *\n     * Foo.prototype.b = 2;\n     * Bar.prototype.d = 4;\n     *\n     * _.assign({ 'a': 0 }, new Foo, new Bar);\n     * // => { 'a': 1, 'c': 3 }\n     */\n    var assign = createAssigner(function(object, source) {\n      if (isPrototype(source) || isArrayLike(source)) {\n        copyObject(source, keys(source), object);\n        return;\n      }\n      for (var key in source) {\n        if (hasOwnProperty.call(source, key)) {\n          assignValue(object, key, source[key]);\n        }\n      }\n    });\n\n    /**\n     * This method is like `_.assign` except that it iterates over own and\n     * inherited source properties.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @alias extend\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @see _.assign\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     * }\n     *\n     * function Bar() {\n     *   this.c = 3;\n     * }\n     *\n     * Foo.prototype.b = 2;\n     * Bar.prototype.d = 4;\n     *\n     * _.assignIn({ 'a': 0 }, new Foo, new Bar);\n     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }\n     */\n    var assignIn = createAssigner(function(object, source) {\n      copyObject(source, keysIn(source), object);\n    });\n\n    /**\n     * This method is like `_.assignIn` except that it accepts `customizer`\n     * which is invoked to produce the assigned values. If `customizer` returns\n     * `undefined`, assignment is handled by the method instead. The `customizer`\n     * is invoked with five arguments: (objValue, srcValue, key, object, source).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @alias extendWith\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} sources The source objects.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @see _.assignWith\n     * @example\n     *\n     * function customizer(objValue, srcValue) {\n     *   return _.isUndefined(objValue) ? srcValue : objValue;\n     * }\n     *\n     * var defaults = _.partialRight(_.assignInWith, customizer);\n     *\n     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n     * // => { 'a': 1, 'b': 2 }\n     */\n    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {\n      copyObject(source, keysIn(source), object, customizer);\n    });\n\n    /**\n     * This method is like `_.assign` except that it accepts `customizer`\n     * which is invoked to produce the assigned values. If `customizer` returns\n     * `undefined`, assignment is handled by the method instead. The `customizer`\n     * is invoked with five arguments: (objValue, srcValue, key, object, source).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} sources The source objects.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @see _.assignInWith\n     * @example\n     *\n     * function customizer(objValue, srcValue) {\n     *   return _.isUndefined(objValue) ? srcValue : objValue;\n     * }\n     *\n     * var defaults = _.partialRight(_.assignWith, customizer);\n     *\n     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n     * // => { 'a': 1, 'b': 2 }\n     */\n    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {\n      copyObject(source, keys(source), object, customizer);\n    });\n\n    /**\n     * Creates an array of values corresponding to `paths` of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.0.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {...(string|string[])} [paths] The property paths of elements to pick.\n     * @returns {Array} Returns the picked values.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };\n     *\n     * _.at(object, ['a[0].b.c', 'a[1]']);\n     * // => [3, 4]\n     */\n    var at = flatRest(baseAt);\n\n    /**\n     * Creates an object that inherits from the `prototype` object. If a\n     * `properties` object is given, its own enumerable string keyed properties\n     * are assigned to the created object.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.3.0\n     * @category Object\n     * @param {Object} prototype The object to inherit from.\n     * @param {Object} [properties] The properties to assign to the object.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * function Shape() {\n     *   this.x = 0;\n     *   this.y = 0;\n     * }\n     *\n     * function Circle() {\n     *   Shape.call(this);\n     * }\n     *\n     * Circle.prototype = _.create(Shape.prototype, {\n     *   'constructor': Circle\n     * });\n     *\n     * var circle = new Circle;\n     * circle instanceof Circle;\n     * // => true\n     *\n     * circle instanceof Shape;\n     * // => true\n     */\n    function create(prototype, properties) {\n      var result = baseCreate(prototype);\n      return properties == null ? result : baseAssign(result, properties);\n    }\n\n    /**\n     * Assigns own and inherited enumerable string keyed properties of source\n     * objects to the destination object for all destination properties that\n     * resolve to `undefined`. Source objects are applied from left to right.\n     * Once a property is set, additional values of the same property are ignored.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @see _.defaultsDeep\n     * @example\n     *\n     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n     * // => { 'a': 1, 'b': 2 }\n     */\n    var defaults = baseRest(function(args) {\n      args.push(undefined, assignInDefaults);\n      return apply(assignInWith, undefined, args);\n    });\n\n    /**\n     * This method is like `_.defaults` except that it recursively assigns\n     * default properties.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.10.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @see _.defaults\n     * @example\n     *\n     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });\n     * // => { 'a': { 'b': 2, 'c': 3 } }\n     */\n    var defaultsDeep = baseRest(function(args) {\n      args.push(undefined, mergeDefaults);\n      return apply(mergeWith, undefined, args);\n    });\n\n    /**\n     * This method is like `_.find` except that it returns the key of the first\n     * element `predicate` returns truthy for instead of the element itself.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.1.0\n     * @category Object\n     * @param {Object} object The object to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {string|undefined} Returns the key of the matched element,\n     *  else `undefined`.\n     * @example\n     *\n     * var users = {\n     *   'barney':  { 'age': 36, 'active': true },\n     *   'fred':    { 'age': 40, 'active': false },\n     *   'pebbles': { 'age': 1,  'active': true }\n     * };\n     *\n     * _.findKey(users, function(o) { return o.age < 40; });\n     * // => 'barney' (iteration order is not guaranteed)\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.findKey(users, { 'age': 1, 'active': true });\n     * // => 'pebbles'\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.findKey(users, ['active', false]);\n     * // => 'fred'\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.findKey(users, 'active');\n     * // => 'barney'\n     */\n    function findKey(object, predicate) {\n      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);\n    }\n\n    /**\n     * This method is like `_.findKey` except that it iterates over elements of\n     * a collection in the opposite order.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Object\n     * @param {Object} object The object to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {string|undefined} Returns the key of the matched element,\n     *  else `undefined`.\n     * @example\n     *\n     * var users = {\n     *   'barney':  { 'age': 36, 'active': true },\n     *   'fred':    { 'age': 40, 'active': false },\n     *   'pebbles': { 'age': 1,  'active': true }\n     * };\n     *\n     * _.findLastKey(users, function(o) { return o.age < 40; });\n     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.findLastKey(users, { 'age': 36, 'active': true });\n     * // => 'barney'\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.findLastKey(users, ['active', false]);\n     * // => 'fred'\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.findLastKey(users, 'active');\n     * // => 'pebbles'\n     */\n    function findLastKey(object, predicate) {\n      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);\n    }\n\n    /**\n     * Iterates over own and inherited enumerable string keyed properties of an\n     * object and invokes `iteratee` for each property. The iteratee is invoked\n     * with three arguments: (value, key, object). Iteratee functions may exit\n     * iteration early by explicitly returning `false`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.3.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     * @see _.forInRight\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.forIn(new Foo, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).\n     */\n    function forIn(object, iteratee) {\n      return object == null\n        ? object\n        : baseFor(object, getIteratee(iteratee, 3), keysIn);\n    }\n\n    /**\n     * This method is like `_.forIn` except that it iterates over properties of\n     * `object` in the opposite order.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     * @see _.forIn\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.forInRight(new Foo, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.\n     */\n    function forInRight(object, iteratee) {\n      return object == null\n        ? object\n        : baseForRight(object, getIteratee(iteratee, 3), keysIn);\n    }\n\n    /**\n     * Iterates over own enumerable string keyed properties of an object and\n     * invokes `iteratee` for each property. The iteratee is invoked with three\n     * arguments: (value, key, object). Iteratee functions may exit iteration\n     * early by explicitly returning `false`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.3.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     * @see _.forOwnRight\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.forOwn(new Foo, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'a' then 'b' (iteration order is not guaranteed).\n     */\n    function forOwn(object, iteratee) {\n      return object && baseForOwn(object, getIteratee(iteratee, 3));\n    }\n\n    /**\n     * This method is like `_.forOwn` except that it iterates over properties of\n     * `object` in the opposite order.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     * @see _.forOwn\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.forOwnRight(new Foo, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.\n     */\n    function forOwnRight(object, iteratee) {\n      return object && baseForOwnRight(object, getIteratee(iteratee, 3));\n    }\n\n    /**\n     * Creates an array of function property names from own enumerable properties\n     * of `object`.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to inspect.\n     * @returns {Array} Returns the function names.\n     * @see _.functionsIn\n     * @example\n     *\n     * function Foo() {\n     *   this.a = _.constant('a');\n     *   this.b = _.constant('b');\n     * }\n     *\n     * Foo.prototype.c = _.constant('c');\n     *\n     * _.functions(new Foo);\n     * // => ['a', 'b']\n     */\n    function functions(object) {\n      return object == null ? [] : baseFunctions(object, keys(object));\n    }\n\n    /**\n     * Creates an array of function property names from own and inherited\n     * enumerable properties of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to inspect.\n     * @returns {Array} Returns the function names.\n     * @see _.functions\n     * @example\n     *\n     * function Foo() {\n     *   this.a = _.constant('a');\n     *   this.b = _.constant('b');\n     * }\n     *\n     * Foo.prototype.c = _.constant('c');\n     *\n     * _.functionsIn(new Foo);\n     * // => ['a', 'b', 'c']\n     */\n    function functionsIn(object) {\n      return object == null ? [] : baseFunctions(object, keysIn(object));\n    }\n\n    /**\n     * Gets the value at `path` of `object`. If the resolved value is\n     * `undefined`, the `defaultValue` is returned in its place.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.7.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the property to get.\n     * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n     * @returns {*} Returns the resolved value.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n     *\n     * _.get(object, 'a[0].b.c');\n     * // => 3\n     *\n     * _.get(object, ['a', '0', 'b', 'c']);\n     * // => 3\n     *\n     * _.get(object, 'a.b.c', 'default');\n     * // => 'default'\n     */\n    function get(object, path, defaultValue) {\n      var result = object == null ? undefined : baseGet(object, path);\n      return result === undefined ? defaultValue : result;\n    }\n\n    /**\n     * Checks if `path` is a direct property of `object`.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path to check.\n     * @returns {boolean} Returns `true` if `path` exists, else `false`.\n     * @example\n     *\n     * var object = { 'a': { 'b': 2 } };\n     * var other = _.create({ 'a': _.create({ 'b': 2 }) });\n     *\n     * _.has(object, 'a');\n     * // => true\n     *\n     * _.has(object, 'a.b');\n     * // => true\n     *\n     * _.has(object, ['a', 'b']);\n     * // => true\n     *\n     * _.has(other, 'a');\n     * // => false\n     */\n    function has(object, path) {\n      return object != null && hasPath(object, path, baseHas);\n    }\n\n    /**\n     * Checks if `path` is a direct or inherited property of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path to check.\n     * @returns {boolean} Returns `true` if `path` exists, else `false`.\n     * @example\n     *\n     * var object = _.create({ 'a': _.create({ 'b': 2 }) });\n     *\n     * _.hasIn(object, 'a');\n     * // => true\n     *\n     * _.hasIn(object, 'a.b');\n     * // => true\n     *\n     * _.hasIn(object, ['a', 'b']);\n     * // => true\n     *\n     * _.hasIn(object, 'b');\n     * // => false\n     */\n    function hasIn(object, path) {\n      return object != null && hasPath(object, path, baseHasIn);\n    }\n\n    /**\n     * Creates an object composed of the inverted keys and values of `object`.\n     * If `object` contains duplicate values, subsequent values overwrite\n     * property assignments of previous values.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.7.0\n     * @category Object\n     * @param {Object} object The object to invert.\n     * @returns {Object} Returns the new inverted object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2, 'c': 1 };\n     *\n     * _.invert(object);\n     * // => { '1': 'c', '2': 'b' }\n     */\n    var invert = createInverter(function(result, value, key) {\n      result[value] = key;\n    }, constant(identity));\n\n    /**\n     * This method is like `_.invert` except that the inverted object is generated\n     * from the results of running each element of `object` thru `iteratee`. The\n     * corresponding inverted value of each inverted key is an array of keys\n     * responsible for generating the inverted value. The iteratee is invoked\n     * with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.1.0\n     * @category Object\n     * @param {Object} object The object to invert.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Object} Returns the new inverted object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2, 'c': 1 };\n     *\n     * _.invertBy(object);\n     * // => { '1': ['a', 'c'], '2': ['b'] }\n     *\n     * _.invertBy(object, function(value) {\n     *   return 'group' + value;\n     * });\n     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }\n     */\n    var invertBy = createInverter(function(result, value, key) {\n      if (hasOwnProperty.call(result, value)) {\n        result[value].push(key);\n      } else {\n        result[value] = [key];\n      }\n    }, getIteratee);\n\n    /**\n     * Invokes the method at `path` of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the method to invoke.\n     * @param {...*} [args] The arguments to invoke the method with.\n     * @returns {*} Returns the result of the invoked method.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };\n     *\n     * _.invoke(object, 'a[0].b.c.slice', 1, 3);\n     * // => [2, 3]\n     */\n    var invoke = baseRest(baseInvoke);\n\n    /**\n     * Creates an array of the own enumerable property names of `object`.\n     *\n     * **Note:** Non-object values are coerced to objects. See the\n     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n     * for more details.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.keys(new Foo);\n     * // => ['a', 'b'] (iteration order is not guaranteed)\n     *\n     * _.keys('hi');\n     * // => ['0', '1']\n     */\n    function keys(object) {\n      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n    }\n\n    /**\n     * Creates an array of the own and inherited enumerable property names of `object`.\n     *\n     * **Note:** Non-object values are coerced to objects.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.keysIn(new Foo);\n     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)\n     */\n    function keysIn(object) {\n      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);\n    }\n\n    /**\n     * The opposite of `_.mapValues`; this method creates an object with the\n     * same values as `object` and keys generated by running each own enumerable\n     * string keyed property of `object` thru `iteratee`. The iteratee is invoked\n     * with three arguments: (value, key, object).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.8.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns the new mapped object.\n     * @see _.mapValues\n     * @example\n     *\n     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {\n     *   return key + value;\n     * });\n     * // => { 'a1': 1, 'b2': 2 }\n     */\n    function mapKeys(object, iteratee) {\n      var result = {};\n      iteratee = getIteratee(iteratee, 3);\n\n      baseForOwn(object, function(value, key, object) {\n        baseAssignValue(result, iteratee(value, key, object), value);\n      });\n      return result;\n    }\n\n    /**\n     * Creates an object with the same keys as `object` and values generated\n     * by running each own enumerable string keyed property of `object` thru\n     * `iteratee`. The iteratee is invoked with three arguments:\n     * (value, key, object).\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns the new mapped object.\n     * @see _.mapKeys\n     * @example\n     *\n     * var users = {\n     *   'fred':    { 'user': 'fred',    'age': 40 },\n     *   'pebbles': { 'user': 'pebbles', 'age': 1 }\n     * };\n     *\n     * _.mapValues(users, function(o) { return o.age; });\n     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.mapValues(users, 'age');\n     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n     */\n    function mapValues(object, iteratee) {\n      var result = {};\n      iteratee = getIteratee(iteratee, 3);\n\n      baseForOwn(object, function(value, key, object) {\n        baseAssignValue(result, key, iteratee(value, key, object));\n      });\n      return result;\n    }\n\n    /**\n     * This method is like `_.assign` except that it recursively merges own and\n     * inherited enumerable string keyed properties of source objects into the\n     * destination object. Source properties that resolve to `undefined` are\n     * skipped if a destination value exists. Array and plain object properties\n     * are merged recursively. Other objects and value types are overridden by\n     * assignment. Source objects are applied from left to right. Subsequent\n     * sources overwrite property assignments of previous sources.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.5.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = {\n     *   'a': [{ 'b': 2 }, { 'd': 4 }]\n     * };\n     *\n     * var other = {\n     *   'a': [{ 'c': 3 }, { 'e': 5 }]\n     * };\n     *\n     * _.merge(object, other);\n     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }\n     */\n    var merge = createAssigner(function(object, source, srcIndex) {\n      baseMerge(object, source, srcIndex);\n    });\n\n    /**\n     * This method is like `_.merge` except that it accepts `customizer` which\n     * is invoked to produce the merged values of the destination and source\n     * properties. If `customizer` returns `undefined`, merging is handled by the\n     * method instead. The `customizer` is invoked with six arguments:\n     * (objValue, srcValue, key, object, source, stack).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} sources The source objects.\n     * @param {Function} customizer The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * function customizer(objValue, srcValue) {\n     *   if (_.isArray(objValue)) {\n     *     return objValue.concat(srcValue);\n     *   }\n     * }\n     *\n     * var object = { 'a': [1], 'b': [2] };\n     * var other = { 'a': [3], 'b': [4] };\n     *\n     * _.mergeWith(object, other, customizer);\n     * // => { 'a': [1, 3], 'b': [2, 4] }\n     */\n    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {\n      baseMerge(object, source, srcIndex, customizer);\n    });\n\n    /**\n     * The opposite of `_.pick`; this method creates an object composed of the\n     * own and inherited enumerable string keyed properties of `object` that are\n     * not omitted.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The source object.\n     * @param {...(string|string[])} [props] The property identifiers to omit.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': '2', 'c': 3 };\n     *\n     * _.omit(object, ['a', 'c']);\n     * // => { 'b': '2' }\n     */\n    var omit = flatRest(function(object, props) {\n      if (object == null) {\n        return {};\n      }\n      props = arrayMap(props, toKey);\n      return basePick(object, baseDifference(getAllKeysIn(object), props));\n    });\n\n    /**\n     * The opposite of `_.pickBy`; this method creates an object composed of\n     * the own and inherited enumerable string keyed properties of `object` that\n     * `predicate` doesn't return truthy for. The predicate is invoked with two\n     * arguments: (value, key).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The source object.\n     * @param {Function} [predicate=_.identity] The function invoked per property.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': '2', 'c': 3 };\n     *\n     * _.omitBy(object, _.isNumber);\n     * // => { 'b': '2' }\n     */\n    function omitBy(object, predicate) {\n      return pickBy(object, negate(getIteratee(predicate)));\n    }\n\n    /**\n     * Creates an object composed of the picked `object` properties.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The source object.\n     * @param {...(string|string[])} [props] The property identifiers to pick.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': '2', 'c': 3 };\n     *\n     * _.pick(object, ['a', 'c']);\n     * // => { 'a': 1, 'c': 3 }\n     */\n    var pick = flatRest(function(object, props) {\n      return object == null ? {} : basePick(object, arrayMap(props, toKey));\n    });\n\n    /**\n     * Creates an object composed of the `object` properties `predicate` returns\n     * truthy for. The predicate is invoked with two arguments: (value, key).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The source object.\n     * @param {Function} [predicate=_.identity] The function invoked per property.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': '2', 'c': 3 };\n     *\n     * _.pickBy(object, _.isNumber);\n     * // => { 'a': 1, 'c': 3 }\n     */\n    function pickBy(object, predicate) {\n      return object == null ? {} : basePickBy(object, getAllKeysIn(object), getIteratee(predicate));\n    }\n\n    /**\n     * This method is like `_.get` except that if the resolved value is a\n     * function it's invoked with the `this` binding of its parent object and\n     * its result is returned.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the property to resolve.\n     * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n     * @returns {*} Returns the resolved value.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };\n     *\n     * _.result(object, 'a[0].b.c1');\n     * // => 3\n     *\n     * _.result(object, 'a[0].b.c2');\n     * // => 4\n     *\n     * _.result(object, 'a[0].b.c3', 'default');\n     * // => 'default'\n     *\n     * _.result(object, 'a[0].b.c3', _.constant('default'));\n     * // => 'default'\n     */\n    function result(object, path, defaultValue) {\n      path = isKey(path, object) ? [path] : castPath(path);\n\n      var index = -1,\n          length = path.length;\n\n      // Ensure the loop is entered when path is empty.\n      if (!length) {\n        object = undefined;\n        length = 1;\n      }\n      while (++index < length) {\n        var value = object == null ? undefined : object[toKey(path[index])];\n        if (value === undefined) {\n          index = length;\n          value = defaultValue;\n        }\n        object = isFunction(value) ? value.call(object) : value;\n      }\n      return object;\n    }\n\n    /**\n     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,\n     * it's created. Arrays are created for missing index properties while objects\n     * are created for all other missing properties. Use `_.setWith` to customize\n     * `path` creation.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.7.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n     *\n     * _.set(object, 'a[0].b.c', 4);\n     * console.log(object.a[0].b.c);\n     * // => 4\n     *\n     * _.set(object, ['x', '0', 'y', 'z'], 5);\n     * console.log(object.x[0].y.z);\n     * // => 5\n     */\n    function set(object, path, value) {\n      return object == null ? object : baseSet(object, path, value);\n    }\n\n    /**\n     * This method is like `_.set` except that it accepts `customizer` which is\n     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`\n     * path creation is handled by the method instead. The `customizer` is invoked\n     * with three arguments: (nsValue, key, nsObject).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {*} value The value to set.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = {};\n     *\n     * _.setWith(object, '[0][1]', 'a', Object);\n     * // => { '0': { '1': 'a' } }\n     */\n    function setWith(object, path, value, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      return object == null ? object : baseSet(object, path, value, customizer);\n    }\n\n    /**\n     * Creates an array of own enumerable string keyed-value pairs for `object`\n     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its\n     * entries are returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @alias entries\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the key-value pairs.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.toPairs(new Foo);\n     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)\n     */\n    var toPairs = createToPairs(keys);\n\n    /**\n     * Creates an array of own and inherited enumerable string keyed-value pairs\n     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map\n     * or set, its entries are returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @alias entriesIn\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the key-value pairs.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.toPairsIn(new Foo);\n     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)\n     */\n    var toPairsIn = createToPairs(keysIn);\n\n    /**\n     * An alternative to `_.reduce`; this method transforms `object` to a new\n     * `accumulator` object which is the result of running each of its own\n     * enumerable string keyed properties thru `iteratee`, with each invocation\n     * potentially mutating the `accumulator` object. If `accumulator` is not\n     * provided, a new object with the same `[[Prototype]]` will be used. The\n     * iteratee is invoked with four arguments: (accumulator, value, key, object).\n     * Iteratee functions may exit iteration early by explicitly returning `false`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.3.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @param {*} [accumulator] The custom accumulator value.\n     * @returns {*} Returns the accumulated value.\n     * @example\n     *\n     * _.transform([2, 3, 4], function(result, n) {\n     *   result.push(n *= n);\n     *   return n % 2 == 0;\n     * }, []);\n     * // => [4, 9]\n     *\n     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\n     *   (result[value] || (result[value] = [])).push(key);\n     * }, {});\n     * // => { '1': ['a', 'c'], '2': ['b'] }\n     */\n    function transform(object, iteratee, accumulator) {\n      var isArr = isArray(object),\n          isArrLike = isArr || isBuffer(object) || isTypedArray(object);\n\n      iteratee = getIteratee(iteratee, 4);\n      if (accumulator == null) {\n        var Ctor = object && object.constructor;\n        if (isArrLike) {\n          accumulator = isArr ? new Ctor : [];\n        }\n        else if (isObject(object)) {\n          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};\n        }\n        else {\n          accumulator = {};\n        }\n      }\n      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {\n        return iteratee(accumulator, value, index, object);\n      });\n      return accumulator;\n    }\n\n    /**\n     * Removes the property at `path` of `object`.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to unset.\n     * @returns {boolean} Returns `true` if the property is deleted, else `false`.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 7 } }] };\n     * _.unset(object, 'a[0].b.c');\n     * // => true\n     *\n     * console.log(object);\n     * // => { 'a': [{ 'b': {} }] };\n     *\n     * _.unset(object, ['a', '0', 'b', 'c']);\n     * // => true\n     *\n     * console.log(object);\n     * // => { 'a': [{ 'b': {} }] };\n     */\n    function unset(object, path) {\n      return object == null ? true : baseUnset(object, path);\n    }\n\n    /**\n     * This method is like `_.set` except that accepts `updater` to produce the\n     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`\n     * is invoked with one argument: (value).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.6.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {Function} updater The function to produce the updated value.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n     *\n     * _.update(object, 'a[0].b.c', function(n) { return n * n; });\n     * console.log(object.a[0].b.c);\n     * // => 9\n     *\n     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });\n     * console.log(object.x[0].y.z);\n     * // => 0\n     */\n    function update(object, path, updater) {\n      return object == null ? object : baseUpdate(object, path, castFunction(updater));\n    }\n\n    /**\n     * This method is like `_.update` except that it accepts `customizer` which is\n     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`\n     * path creation is handled by the method instead. The `customizer` is invoked\n     * with three arguments: (nsValue, key, nsObject).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.6.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {Function} updater The function to produce the updated value.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = {};\n     *\n     * _.updateWith(object, '[0][1]', _.constant('a'), Object);\n     * // => { '0': { '1': 'a' } }\n     */\n    function updateWith(object, path, updater, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);\n    }\n\n    /**\n     * Creates an array of the own enumerable string keyed property values of `object`.\n     *\n     * **Note:** Non-object values are coerced to objects.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property values.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.values(new Foo);\n     * // => [1, 2] (iteration order is not guaranteed)\n     *\n     * _.values('hi');\n     * // => ['h', 'i']\n     */\n    function values(object) {\n      return object == null ? [] : baseValues(object, keys(object));\n    }\n\n    /**\n     * Creates an array of the own and inherited enumerable string keyed property\n     * values of `object`.\n     *\n     * **Note:** Non-object values are coerced to objects.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property values.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.valuesIn(new Foo);\n     * // => [1, 2, 3] (iteration order is not guaranteed)\n     */\n    function valuesIn(object) {\n      return object == null ? [] : baseValues(object, keysIn(object));\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Clamps `number` within the inclusive `lower` and `upper` bounds.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Number\n     * @param {number} number The number to clamp.\n     * @param {number} [lower] The lower bound.\n     * @param {number} upper The upper bound.\n     * @returns {number} Returns the clamped number.\n     * @example\n     *\n     * _.clamp(-10, -5, 5);\n     * // => -5\n     *\n     * _.clamp(10, -5, 5);\n     * // => 5\n     */\n    function clamp(number, lower, upper) {\n      if (upper === undefined) {\n        upper = lower;\n        lower = undefined;\n      }\n      if (upper !== undefined) {\n        upper = toNumber(upper);\n        upper = upper === upper ? upper : 0;\n      }\n      if (lower !== undefined) {\n        lower = toNumber(lower);\n        lower = lower === lower ? lower : 0;\n      }\n      return baseClamp(toNumber(number), lower, upper);\n    }\n\n    /**\n     * Checks if `n` is between `start` and up to, but not including, `end`. If\n     * `end` is not specified, it's set to `start` with `start` then set to `0`.\n     * If `start` is greater than `end` the params are swapped to support\n     * negative ranges.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.3.0\n     * @category Number\n     * @param {number} number The number to check.\n     * @param {number} [start=0] The start of the range.\n     * @param {number} end The end of the range.\n     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.\n     * @see _.range, _.rangeRight\n     * @example\n     *\n     * _.inRange(3, 2, 4);\n     * // => true\n     *\n     * _.inRange(4, 8);\n     * // => true\n     *\n     * _.inRange(4, 2);\n     * // => false\n     *\n     * _.inRange(2, 2);\n     * // => false\n     *\n     * _.inRange(1.2, 2);\n     * // => true\n     *\n     * _.inRange(5.2, 4);\n     * // => false\n     *\n     * _.inRange(-3, -2, -6);\n     * // => true\n     */\n    function inRange(number, start, end) {\n      start = toFinite(start);\n      if (end === undefined) {\n        end = start;\n        start = 0;\n      } else {\n        end = toFinite(end);\n      }\n      number = toNumber(number);\n      return baseInRange(number, start, end);\n    }\n\n    /**\n     * Produces a random number between the inclusive `lower` and `upper` bounds.\n     * If only one argument is provided a number between `0` and the given number\n     * is returned. If `floating` is `true`, or either `lower` or `upper` are\n     * floats, a floating-point number is returned instead of an integer.\n     *\n     * **Note:** JavaScript follows the IEEE-754 standard for resolving\n     * floating-point values which can produce unexpected results.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.7.0\n     * @category Number\n     * @param {number} [lower=0] The lower bound.\n     * @param {number} [upper=1] The upper bound.\n     * @param {boolean} [floating] Specify returning a floating-point number.\n     * @returns {number} Returns the random number.\n     * @example\n     *\n     * _.random(0, 5);\n     * // => an integer between 0 and 5\n     *\n     * _.random(5);\n     * // => also an integer between 0 and 5\n     *\n     * _.random(5, true);\n     * // => a floating-point number between 0 and 5\n     *\n     * _.random(1.2, 5.2);\n     * // => a floating-point number between 1.2 and 5.2\n     */\n    function random(lower, upper, floating) {\n      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {\n        upper = floating = undefined;\n      }\n      if (floating === undefined) {\n        if (typeof upper == 'boolean') {\n          floating = upper;\n          upper = undefined;\n        }\n        else if (typeof lower == 'boolean') {\n          floating = lower;\n          lower = undefined;\n        }\n      }\n      if (lower === undefined && upper === undefined) {\n        lower = 0;\n        upper = 1;\n      }\n      else {\n        lower = toFinite(lower);\n        if (upper === undefined) {\n          upper = lower;\n          lower = 0;\n        } else {\n          upper = toFinite(upper);\n        }\n      }\n      if (lower > upper) {\n        var temp = lower;\n        lower = upper;\n        upper = temp;\n      }\n      if (floating || lower % 1 || upper % 1) {\n        var rand = nativeRandom();\n        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);\n      }\n      return baseRandom(lower, upper);\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the camel cased string.\n     * @example\n     *\n     * _.camelCase('Foo Bar');\n     * // => 'fooBar'\n     *\n     * _.camelCase('--foo-bar--');\n     * // => 'fooBar'\n     *\n     * _.camelCase('__FOO_BAR__');\n     * // => 'fooBar'\n     */\n    var camelCase = createCompounder(function(result, word, index) {\n      word = word.toLowerCase();\n      return result + (index ? capitalize(word) : word);\n    });\n\n    /**\n     * Converts the first character of `string` to upper case and the remaining\n     * to lower case.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to capitalize.\n     * @returns {string} Returns the capitalized string.\n     * @example\n     *\n     * _.capitalize('FRED');\n     * // => 'Fred'\n     */\n    function capitalize(string) {\n      return upperFirst(toString(string).toLowerCase());\n    }\n\n    /**\n     * Deburrs `string` by converting\n     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)\n     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)\n     * letters to basic Latin letters and removing\n     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to deburr.\n     * @returns {string} Returns the deburred string.\n     * @example\n     *\n     * _.deburr('déjà vu');\n     * // => 'deja vu'\n     */\n    function deburr(string) {\n      string = toString(string);\n      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');\n    }\n\n    /**\n     * Checks if `string` ends with the given target string.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to inspect.\n     * @param {string} [target] The string to search for.\n     * @param {number} [position=string.length] The position to search up to.\n     * @returns {boolean} Returns `true` if `string` ends with `target`,\n     *  else `false`.\n     * @example\n     *\n     * _.endsWith('abc', 'c');\n     * // => true\n     *\n     * _.endsWith('abc', 'b');\n     * // => false\n     *\n     * _.endsWith('abc', 'b', 2);\n     * // => true\n     */\n    function endsWith(string, target, position) {\n      string = toString(string);\n      target = baseToString(target);\n\n      var length = string.length;\n      position = position === undefined\n        ? length\n        : baseClamp(toInteger(position), 0, length);\n\n      var end = position;\n      position -= target.length;\n      return position >= 0 && string.slice(position, end) == target;\n    }\n\n    /**\n     * Converts the characters \"&\", \"<\", \">\", '\"', and \"'\" in `string` to their\n     * corresponding HTML entities.\n     *\n     * **Note:** No other characters are escaped. To escape additional\n     * characters use a third-party library like [_he_](https://mths.be/he).\n     *\n     * Though the \">\" character is escaped for symmetry, characters like\n     * \">\" and \"/\" don't need escaping in HTML and have no special meaning\n     * unless they're part of a tag or unquoted attribute value. See\n     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)\n     * (under \"semi-related fun fact\") for more details.\n     *\n     * When working with HTML you should always\n     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce\n     * XSS vectors.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category String\n     * @param {string} [string=''] The string to escape.\n     * @returns {string} Returns the escaped string.\n     * @example\n     *\n     * _.escape('fred, barney, & pebbles');\n     * // => 'fred, barney, &amp; pebbles'\n     */\n    function escape(string) {\n      string = toString(string);\n      return (string && reHasUnescapedHtml.test(string))\n        ? string.replace(reUnescapedHtml, escapeHtmlChar)\n        : string;\n    }\n\n    /**\n     * Escapes the `RegExp` special characters \"^\", \"$\", \"\\\", \".\", \"*\", \"+\",\n     * \"?\", \"(\", \")\", \"[\", \"]\", \"{\", \"}\", and \"|\" in `string`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to escape.\n     * @returns {string} Returns the escaped string.\n     * @example\n     *\n     * _.escapeRegExp('[lodash](https://lodash.com/)');\n     * // => '\\[lodash\\]\\(https://lodash\\.com/\\)'\n     */\n    function escapeRegExp(string) {\n      string = toString(string);\n      return (string && reHasRegExpChar.test(string))\n        ? string.replace(reRegExpChar, '\\\\$&')\n        : string;\n    }\n\n    /**\n     * Converts `string` to\n     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the kebab cased string.\n     * @example\n     *\n     * _.kebabCase('Foo Bar');\n     * // => 'foo-bar'\n     *\n     * _.kebabCase('fooBar');\n     * // => 'foo-bar'\n     *\n     * _.kebabCase('__FOO_BAR__');\n     * // => 'foo-bar'\n     */\n    var kebabCase = createCompounder(function(result, word, index) {\n      return result + (index ? '-' : '') + word.toLowerCase();\n    });\n\n    /**\n     * Converts `string`, as space separated words, to lower case.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the lower cased string.\n     * @example\n     *\n     * _.lowerCase('--Foo-Bar--');\n     * // => 'foo bar'\n     *\n     * _.lowerCase('fooBar');\n     * // => 'foo bar'\n     *\n     * _.lowerCase('__FOO_BAR__');\n     * // => 'foo bar'\n     */\n    var lowerCase = createCompounder(function(result, word, index) {\n      return result + (index ? ' ' : '') + word.toLowerCase();\n    });\n\n    /**\n     * Converts the first character of `string` to lower case.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the converted string.\n     * @example\n     *\n     * _.lowerFirst('Fred');\n     * // => 'fred'\n     *\n     * _.lowerFirst('FRED');\n     * // => 'fRED'\n     */\n    var lowerFirst = createCaseFirst('toLowerCase');\n\n    /**\n     * Pads `string` on the left and right sides if it's shorter than `length`.\n     * Padding characters are truncated if they can't be evenly divided by `length`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to pad.\n     * @param {number} [length=0] The padding length.\n     * @param {string} [chars=' '] The string used as padding.\n     * @returns {string} Returns the padded string.\n     * @example\n     *\n     * _.pad('abc', 8);\n     * // => '  abc   '\n     *\n     * _.pad('abc', 8, '_-');\n     * // => '_-abc_-_'\n     *\n     * _.pad('abc', 3);\n     * // => 'abc'\n     */\n    function pad(string, length, chars) {\n      string = toString(string);\n      length = toInteger(length);\n\n      var strLength = length ? stringSize(string) : 0;\n      if (!length || strLength >= length) {\n        return string;\n      }\n      var mid = (length - strLength) / 2;\n      return (\n        createPadding(nativeFloor(mid), chars) +\n        string +\n        createPadding(nativeCeil(mid), chars)\n      );\n    }\n\n    /**\n     * Pads `string` on the right side if it's shorter than `length`. Padding\n     * characters are truncated if they exceed `length`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to pad.\n     * @param {number} [length=0] The padding length.\n     * @param {string} [chars=' '] The string used as padding.\n     * @returns {string} Returns the padded string.\n     * @example\n     *\n     * _.padEnd('abc', 6);\n     * // => 'abc   '\n     *\n     * _.padEnd('abc', 6, '_-');\n     * // => 'abc_-_'\n     *\n     * _.padEnd('abc', 3);\n     * // => 'abc'\n     */\n    function padEnd(string, length, chars) {\n      string = toString(string);\n      length = toInteger(length);\n\n      var strLength = length ? stringSize(string) : 0;\n      return (length && strLength < length)\n        ? (string + createPadding(length - strLength, chars))\n        : string;\n    }\n\n    /**\n     * Pads `string` on the left side if it's shorter than `length`. Padding\n     * characters are truncated if they exceed `length`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to pad.\n     * @param {number} [length=0] The padding length.\n     * @param {string} [chars=' '] The string used as padding.\n     * @returns {string} Returns the padded string.\n     * @example\n     *\n     * _.padStart('abc', 6);\n     * // => '   abc'\n     *\n     * _.padStart('abc', 6, '_-');\n     * // => '_-_abc'\n     *\n     * _.padStart('abc', 3);\n     * // => 'abc'\n     */\n    function padStart(string, length, chars) {\n      string = toString(string);\n      length = toInteger(length);\n\n      var strLength = length ? stringSize(string) : 0;\n      return (length && strLength < length)\n        ? (createPadding(length - strLength, chars) + string)\n        : string;\n    }\n\n    /**\n     * Converts `string` to an integer of the specified radix. If `radix` is\n     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a\n     * hexadecimal, in which case a `radix` of `16` is used.\n     *\n     * **Note:** This method aligns with the\n     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.1.0\n     * @category String\n     * @param {string} string The string to convert.\n     * @param {number} [radix=10] The radix to interpret `value` by.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {number} Returns the converted integer.\n     * @example\n     *\n     * _.parseInt('08');\n     * // => 8\n     *\n     * _.map(['6', '08', '10'], _.parseInt);\n     * // => [6, 8, 10]\n     */\n    function parseInt(string, radix, guard) {\n      if (guard || radix == null) {\n        radix = 0;\n      } else if (radix) {\n        radix = +radix;\n      }\n      return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);\n    }\n\n    /**\n     * Repeats the given string `n` times.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to repeat.\n     * @param {number} [n=1] The number of times to repeat the string.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {string} Returns the repeated string.\n     * @example\n     *\n     * _.repeat('*', 3);\n     * // => '***'\n     *\n     * _.repeat('abc', 2);\n     * // => 'abcabc'\n     *\n     * _.repeat('abc', 0);\n     * // => ''\n     */\n    function repeat(string, n, guard) {\n      if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {\n        n = 1;\n      } else {\n        n = toInteger(n);\n      }\n      return baseRepeat(toString(string), n);\n    }\n\n    /**\n     * Replaces matches for `pattern` in `string` with `replacement`.\n     *\n     * **Note:** This method is based on\n     * [`String#replace`](https://mdn.io/String/replace).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to modify.\n     * @param {RegExp|string} pattern The pattern to replace.\n     * @param {Function|string} replacement The match replacement.\n     * @returns {string} Returns the modified string.\n     * @example\n     *\n     * _.replace('Hi Fred', 'Fred', 'Barney');\n     * // => 'Hi Barney'\n     */\n    function replace() {\n      var args = arguments,\n          string = toString(args[0]);\n\n      return args.length < 3 ? string : string.replace(args[1], args[2]);\n    }\n\n    /**\n     * Converts `string` to\n     * [snake case](https://en.wikipedia.org/wiki/Snake_case).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the snake cased string.\n     * @example\n     *\n     * _.snakeCase('Foo Bar');\n     * // => 'foo_bar'\n     *\n     * _.snakeCase('fooBar');\n     * // => 'foo_bar'\n     *\n     * _.snakeCase('--FOO-BAR--');\n     * // => 'foo_bar'\n     */\n    var snakeCase = createCompounder(function(result, word, index) {\n      return result + (index ? '_' : '') + word.toLowerCase();\n    });\n\n    /**\n     * Splits `string` by `separator`.\n     *\n     * **Note:** This method is based on\n     * [`String#split`](https://mdn.io/String/split).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to split.\n     * @param {RegExp|string} separator The separator pattern to split by.\n     * @param {number} [limit] The length to truncate results to.\n     * @returns {Array} Returns the string segments.\n     * @example\n     *\n     * _.split('a-b-c', '-', 2);\n     * // => ['a', 'b']\n     */\n    function split(string, separator, limit) {\n      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {\n        separator = limit = undefined;\n      }\n      limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;\n      if (!limit) {\n        return [];\n      }\n      string = toString(string);\n      if (string && (\n            typeof separator == 'string' ||\n            (separator != null && !isRegExp(separator))\n          )) {\n        separator = baseToString(separator);\n        if (!separator && hasUnicode(string)) {\n          return castSlice(stringToArray(string), 0, limit);\n        }\n      }\n      return string.split(separator, limit);\n    }\n\n    /**\n     * Converts `string` to\n     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.1.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the start cased string.\n     * @example\n     *\n     * _.startCase('--foo-bar--');\n     * // => 'Foo Bar'\n     *\n     * _.startCase('fooBar');\n     * // => 'Foo Bar'\n     *\n     * _.startCase('__FOO_BAR__');\n     * // => 'FOO BAR'\n     */\n    var startCase = createCompounder(function(result, word, index) {\n      return result + (index ? ' ' : '') + upperFirst(word);\n    });\n\n    /**\n     * Checks if `string` starts with the given target string.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to inspect.\n     * @param {string} [target] The string to search for.\n     * @param {number} [position=0] The position to search from.\n     * @returns {boolean} Returns `true` if `string` starts with `target`,\n     *  else `false`.\n     * @example\n     *\n     * _.startsWith('abc', 'a');\n     * // => true\n     *\n     * _.startsWith('abc', 'b');\n     * // => false\n     *\n     * _.startsWith('abc', 'b', 1);\n     * // => true\n     */\n    function startsWith(string, target, position) {\n      string = toString(string);\n      position = baseClamp(toInteger(position), 0, string.length);\n      target = baseToString(target);\n      return string.slice(position, position + target.length) == target;\n    }\n\n    /**\n     * Creates a compiled template function that can interpolate data properties\n     * in \"interpolate\" delimiters, HTML-escape interpolated data properties in\n     * \"escape\" delimiters, and execute JavaScript in \"evaluate\" delimiters. Data\n     * properties may be accessed as free variables in the template. If a setting\n     * object is given, it takes precedence over `_.templateSettings` values.\n     *\n     * **Note:** In the development build `_.template` utilizes\n     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)\n     * for easier debugging.\n     *\n     * For more information on precompiling templates see\n     * [lodash's custom builds documentation](https://lodash.com/custom-builds).\n     *\n     * For more information on Chrome extension sandboxes see\n     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category String\n     * @param {string} [string=''] The template string.\n     * @param {Object} [options={}] The options object.\n     * @param {RegExp} [options.escape=_.templateSettings.escape]\n     *  The HTML \"escape\" delimiter.\n     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]\n     *  The \"evaluate\" delimiter.\n     * @param {Object} [options.imports=_.templateSettings.imports]\n     *  An object to import into the template as free variables.\n     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]\n     *  The \"interpolate\" delimiter.\n     * @param {string} [options.sourceURL='lodash.templateSources[n]']\n     *  The sourceURL of the compiled template.\n     * @param {string} [options.variable='obj']\n     *  The data object variable name.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Function} Returns the compiled template function.\n     * @example\n     *\n     * // Use the \"interpolate\" delimiter to create a compiled template.\n     * var compiled = _.template('hello <%= user %>!');\n     * compiled({ 'user': 'fred' });\n     * // => 'hello fred!'\n     *\n     * // Use the HTML \"escape\" delimiter to escape data property values.\n     * var compiled = _.template('<b><%- value %></b>');\n     * compiled({ 'value': '<script>' });\n     * // => '<b>&lt;script&gt;</b>'\n     *\n     * // Use the \"evaluate\" delimiter to execute JavaScript and generate HTML.\n     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');\n     * compiled({ 'users': ['fred', 'barney'] });\n     * // => '<li>fred</li><li>barney</li>'\n     *\n     * // Use the internal `print` function in \"evaluate\" delimiters.\n     * var compiled = _.template('<% print(\"hello \" + user); %>!');\n     * compiled({ 'user': 'barney' });\n     * // => 'hello barney!'\n     *\n     * // Use the ES template literal delimiter as an \"interpolate\" delimiter.\n     * // Disable support by replacing the \"interpolate\" delimiter.\n     * var compiled = _.template('hello ${ user }!');\n     * compiled({ 'user': 'pebbles' });\n     * // => 'hello pebbles!'\n     *\n     * // Use backslashes to treat delimiters as plain text.\n     * var compiled = _.template('<%= \"\\\\<%- value %\\\\>\" %>');\n     * compiled({ 'value': 'ignored' });\n     * // => '<%- value %>'\n     *\n     * // Use the `imports` option to import `jQuery` as `jq`.\n     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';\n     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });\n     * compiled({ 'users': ['fred', 'barney'] });\n     * // => '<li>fred</li><li>barney</li>'\n     *\n     * // Use the `sourceURL` option to specify a custom sourceURL for the template.\n     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });\n     * compiled(data);\n     * // => Find the source of \"greeting.jst\" under the Sources tab or Resources panel of the web inspector.\n     *\n     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.\n     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });\n     * compiled.source;\n     * // => function(data) {\n     * //   var __t, __p = '';\n     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';\n     * //   return __p;\n     * // }\n     *\n     * // Use custom template delimiters.\n     * _.templateSettings.interpolate = /{{([\\s\\S]+?)}}/g;\n     * var compiled = _.template('hello {{ user }}!');\n     * compiled({ 'user': 'mustache' });\n     * // => 'hello mustache!'\n     *\n     * // Use the `source` property to inline compiled templates for meaningful\n     * // line numbers in error messages and stack traces.\n     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\\\n     *   var JST = {\\\n     *     \"main\": ' + _.template(mainText).source + '\\\n     *   };\\\n     * ');\n     */\n    function template(string, options, guard) {\n      // Based on John Resig's `tmpl` implementation\n      // (http://ejohn.org/blog/javascript-micro-templating/)\n      // and Laura Doktorova's doT.js (https://github.com/olado/doT).\n      var settings = lodash.templateSettings;\n\n      if (guard && isIterateeCall(string, options, guard)) {\n        options = undefined;\n      }\n      string = toString(string);\n      options = assignInWith({}, options, settings, assignInDefaults);\n\n      var imports = assignInWith({}, options.imports, settings.imports, assignInDefaults),\n          importsKeys = keys(imports),\n          importsValues = baseValues(imports, importsKeys);\n\n      var isEscaping,\n          isEvaluating,\n          index = 0,\n          interpolate = options.interpolate || reNoMatch,\n          source = \"__p += '\";\n\n      // Compile the regexp to match each delimiter.\n      var reDelimiters = RegExp(\n        (options.escape || reNoMatch).source + '|' +\n        interpolate.source + '|' +\n        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +\n        (options.evaluate || reNoMatch).source + '|$'\n      , 'g');\n\n      // Use a sourceURL for easier debugging.\n      var sourceURL = '//# sourceURL=' +\n        ('sourceURL' in options\n          ? options.sourceURL\n          : ('lodash.templateSources[' + (++templateCounter) + ']')\n        ) + '\\n';\n\n      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {\n        interpolateValue || (interpolateValue = esTemplateValue);\n\n        // Escape characters that can't be included in string literals.\n        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);\n\n        // Replace delimiters with snippets.\n        if (escapeValue) {\n          isEscaping = true;\n          source += \"' +\\n__e(\" + escapeValue + \") +\\n'\";\n        }\n        if (evaluateValue) {\n          isEvaluating = true;\n          source += \"';\\n\" + evaluateValue + \";\\n__p += '\";\n        }\n        if (interpolateValue) {\n          source += \"' +\\n((__t = (\" + interpolateValue + \")) == null ? '' : __t) +\\n'\";\n        }\n        index = offset + match.length;\n\n        // The JS engine embedded in Adobe products needs `match` returned in\n        // order to produce the correct `offset` value.\n        return match;\n      });\n\n      source += \"';\\n\";\n\n      // If `variable` is not specified wrap a with-statement around the generated\n      // code to add the data object to the top of the scope chain.\n      var variable = options.variable;\n      if (!variable) {\n        source = 'with (obj) {\\n' + source + '\\n}\\n';\n      }\n      // Cleanup code by stripping empty strings.\n      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)\n        .replace(reEmptyStringMiddle, '$1')\n        .replace(reEmptyStringTrailing, '$1;');\n\n      // Frame code as the function body.\n      source = 'function(' + (variable || 'obj') + ') {\\n' +\n        (variable\n          ? ''\n          : 'obj || (obj = {});\\n'\n        ) +\n        \"var __t, __p = ''\" +\n        (isEscaping\n           ? ', __e = _.escape'\n           : ''\n        ) +\n        (isEvaluating\n          ? ', __j = Array.prototype.join;\\n' +\n            \"function print() { __p += __j.call(arguments, '') }\\n\"\n          : ';\\n'\n        ) +\n        source +\n        'return __p\\n}';\n\n      var result = attempt(function() {\n        return Function(importsKeys, sourceURL + 'return ' + source)\n          .apply(undefined, importsValues);\n      });\n\n      // Provide the compiled function's source by its `toString` method or\n      // the `source` property as a convenience for inlining compiled templates.\n      result.source = source;\n      if (isError(result)) {\n        throw result;\n      }\n      return result;\n    }\n\n    /**\n     * Converts `string`, as a whole, to lower case just like\n     * [String#toLowerCase](https://mdn.io/toLowerCase).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the lower cased string.\n     * @example\n     *\n     * _.toLower('--Foo-Bar--');\n     * // => '--foo-bar--'\n     *\n     * _.toLower('fooBar');\n     * // => 'foobar'\n     *\n     * _.toLower('__FOO_BAR__');\n     * // => '__foo_bar__'\n     */\n    function toLower(value) {\n      return toString(value).toLowerCase();\n    }\n\n    /**\n     * Converts `string`, as a whole, to upper case just like\n     * [String#toUpperCase](https://mdn.io/toUpperCase).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the upper cased string.\n     * @example\n     *\n     * _.toUpper('--foo-bar--');\n     * // => '--FOO-BAR--'\n     *\n     * _.toUpper('fooBar');\n     * // => 'FOOBAR'\n     *\n     * _.toUpper('__foo_bar__');\n     * // => '__FOO_BAR__'\n     */\n    function toUpper(value) {\n      return toString(value).toUpperCase();\n    }\n\n    /**\n     * Removes leading and trailing whitespace or specified characters from `string`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to trim.\n     * @param {string} [chars=whitespace] The characters to trim.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {string} Returns the trimmed string.\n     * @example\n     *\n     * _.trim('  abc  ');\n     * // => 'abc'\n     *\n     * _.trim('-_-abc-_-', '_-');\n     * // => 'abc'\n     *\n     * _.map(['  foo  ', '  bar  '], _.trim);\n     * // => ['foo', 'bar']\n     */\n    function trim(string, chars, guard) {\n      string = toString(string);\n      if (string && (guard || chars === undefined)) {\n        return string.replace(reTrim, '');\n      }\n      if (!string || !(chars = baseToString(chars))) {\n        return string;\n      }\n      var strSymbols = stringToArray(string),\n          chrSymbols = stringToArray(chars),\n          start = charsStartIndex(strSymbols, chrSymbols),\n          end = charsEndIndex(strSymbols, chrSymbols) + 1;\n\n      return castSlice(strSymbols, start, end).join('');\n    }\n\n    /**\n     * Removes trailing whitespace or specified characters from `string`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to trim.\n     * @param {string} [chars=whitespace] The characters to trim.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {string} Returns the trimmed string.\n     * @example\n     *\n     * _.trimEnd('  abc  ');\n     * // => '  abc'\n     *\n     * _.trimEnd('-_-abc-_-', '_-');\n     * // => '-_-abc'\n     */\n    function trimEnd(string, chars, guard) {\n      string = toString(string);\n      if (string && (guard || chars === undefined)) {\n        return string.replace(reTrimEnd, '');\n      }\n      if (!string || !(chars = baseToString(chars))) {\n        return string;\n      }\n      var strSymbols = stringToArray(string),\n          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;\n\n      return castSlice(strSymbols, 0, end).join('');\n    }\n\n    /**\n     * Removes leading whitespace or specified characters from `string`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to trim.\n     * @param {string} [chars=whitespace] The characters to trim.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {string} Returns the trimmed string.\n     * @example\n     *\n     * _.trimStart('  abc  ');\n     * // => 'abc  '\n     *\n     * _.trimStart('-_-abc-_-', '_-');\n     * // => 'abc-_-'\n     */\n    function trimStart(string, chars, guard) {\n      string = toString(string);\n      if (string && (guard || chars === undefined)) {\n        return string.replace(reTrimStart, '');\n      }\n      if (!string || !(chars = baseToString(chars))) {\n        return string;\n      }\n      var strSymbols = stringToArray(string),\n          start = charsStartIndex(strSymbols, stringToArray(chars));\n\n      return castSlice(strSymbols, start).join('');\n    }\n\n    /**\n     * Truncates `string` if it's longer than the given maximum string length.\n     * The last characters of the truncated string are replaced with the omission\n     * string which defaults to \"...\".\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to truncate.\n     * @param {Object} [options={}] The options object.\n     * @param {number} [options.length=30] The maximum string length.\n     * @param {string} [options.omission='...'] The string to indicate text is omitted.\n     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.\n     * @returns {string} Returns the truncated string.\n     * @example\n     *\n     * _.truncate('hi-diddly-ho there, neighborino');\n     * // => 'hi-diddly-ho there, neighbo...'\n     *\n     * _.truncate('hi-diddly-ho there, neighborino', {\n     *   'length': 24,\n     *   'separator': ' '\n     * });\n     * // => 'hi-diddly-ho there,...'\n     *\n     * _.truncate('hi-diddly-ho there, neighborino', {\n     *   'length': 24,\n     *   'separator': /,? +/\n     * });\n     * // => 'hi-diddly-ho there...'\n     *\n     * _.truncate('hi-diddly-ho there, neighborino', {\n     *   'omission': ' [...]'\n     * });\n     * // => 'hi-diddly-ho there, neig [...]'\n     */\n    function truncate(string, options) {\n      var length = DEFAULT_TRUNC_LENGTH,\n          omission = DEFAULT_TRUNC_OMISSION;\n\n      if (isObject(options)) {\n        var separator = 'separator' in options ? options.separator : separator;\n        length = 'length' in options ? toInteger(options.length) : length;\n        omission = 'omission' in options ? baseToString(options.omission) : omission;\n      }\n      string = toString(string);\n\n      var strLength = string.length;\n      if (hasUnicode(string)) {\n        var strSymbols = stringToArray(string);\n        strLength = strSymbols.length;\n      }\n      if (length >= strLength) {\n        return string;\n      }\n      var end = length - stringSize(omission);\n      if (end < 1) {\n        return omission;\n      }\n      var result = strSymbols\n        ? castSlice(strSymbols, 0, end).join('')\n        : string.slice(0, end);\n\n      if (separator === undefined) {\n        return result + omission;\n      }\n      if (strSymbols) {\n        end += (result.length - end);\n      }\n      if (isRegExp(separator)) {\n        if (string.slice(end).search(separator)) {\n          var match,\n              substring = result;\n\n          if (!separator.global) {\n            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');\n          }\n          separator.lastIndex = 0;\n          while ((match = separator.exec(substring))) {\n            var newEnd = match.index;\n          }\n          result = result.slice(0, newEnd === undefined ? end : newEnd);\n        }\n      } else if (string.indexOf(baseToString(separator), end) != end) {\n        var index = result.lastIndexOf(separator);\n        if (index > -1) {\n          result = result.slice(0, index);\n        }\n      }\n      return result + omission;\n    }\n\n    /**\n     * The inverse of `_.escape`; this method converts the HTML entities\n     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to\n     * their corresponding characters.\n     *\n     * **Note:** No other HTML entities are unescaped. To unescape additional\n     * HTML entities use a third-party library like [_he_](https://mths.be/he).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.6.0\n     * @category String\n     * @param {string} [string=''] The string to unescape.\n     * @returns {string} Returns the unescaped string.\n     * @example\n     *\n     * _.unescape('fred, barney, &amp; pebbles');\n     * // => 'fred, barney, & pebbles'\n     */\n    function unescape(string) {\n      string = toString(string);\n      return (string && reHasEscapedHtml.test(string))\n        ? string.replace(reEscapedHtml, unescapeHtmlChar)\n        : string;\n    }\n\n    /**\n     * Converts `string`, as space separated words, to upper case.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the upper cased string.\n     * @example\n     *\n     * _.upperCase('--foo-bar');\n     * // => 'FOO BAR'\n     *\n     * _.upperCase('fooBar');\n     * // => 'FOO BAR'\n     *\n     * _.upperCase('__foo_bar__');\n     * // => 'FOO BAR'\n     */\n    var upperCase = createCompounder(function(result, word, index) {\n      return result + (index ? ' ' : '') + word.toUpperCase();\n    });\n\n    /**\n     * Converts the first character of `string` to upper case.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the converted string.\n     * @example\n     *\n     * _.upperFirst('fred');\n     * // => 'Fred'\n     *\n     * _.upperFirst('FRED');\n     * // => 'FRED'\n     */\n    var upperFirst = createCaseFirst('toUpperCase');\n\n    /**\n     * Splits `string` into an array of its words.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to inspect.\n     * @param {RegExp|string} [pattern] The pattern to match words.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the words of `string`.\n     * @example\n     *\n     * _.words('fred, barney, & pebbles');\n     * // => ['fred', 'barney', 'pebbles']\n     *\n     * _.words('fred, barney, & pebbles', /[^, ]+/g);\n     * // => ['fred', 'barney', '&', 'pebbles']\n     */\n    function words(string, pattern, guard) {\n      string = toString(string);\n      pattern = guard ? undefined : pattern;\n\n      if (pattern === undefined) {\n        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);\n      }\n      return string.match(pattern) || [];\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Attempts to invoke `func`, returning either the result or the caught error\n     * object. Any additional arguments are provided to `func` when it's invoked.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Util\n     * @param {Function} func The function to attempt.\n     * @param {...*} [args] The arguments to invoke `func` with.\n     * @returns {*} Returns the `func` result or error object.\n     * @example\n     *\n     * // Avoid throwing errors for invalid selectors.\n     * var elements = _.attempt(function(selector) {\n     *   return document.querySelectorAll(selector);\n     * }, '>_>');\n     *\n     * if (_.isError(elements)) {\n     *   elements = [];\n     * }\n     */\n    var attempt = baseRest(function(func, args) {\n      try {\n        return apply(func, undefined, args);\n      } catch (e) {\n        return isError(e) ? e : new Error(e);\n      }\n    });\n\n    /**\n     * Binds methods of an object to the object itself, overwriting the existing\n     * method.\n     *\n     * **Note:** This method doesn't set the \"length\" property of bound functions.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {Object} object The object to bind and assign the bound methods to.\n     * @param {...(string|string[])} methodNames The object method names to bind.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var view = {\n     *   'label': 'docs',\n     *   'click': function() {\n     *     console.log('clicked ' + this.label);\n     *   }\n     * };\n     *\n     * _.bindAll(view, ['click']);\n     * jQuery(element).on('click', view.click);\n     * // => Logs 'clicked docs' when clicked.\n     */\n    var bindAll = flatRest(function(object, methodNames) {\n      arrayEach(methodNames, function(key) {\n        key = toKey(key);\n        baseAssignValue(object, key, bind(object[key], object));\n      });\n      return object;\n    });\n\n    /**\n     * Creates a function that iterates over `pairs` and invokes the corresponding\n     * function of the first predicate to return truthy. The predicate-function\n     * pairs are invoked with the `this` binding and arguments of the created\n     * function.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {Array} pairs The predicate-function pairs.\n     * @returns {Function} Returns the new composite function.\n     * @example\n     *\n     * var func = _.cond([\n     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],\n     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],\n     *   [_.stubTrue,                      _.constant('no match')]\n     * ]);\n     *\n     * func({ 'a': 1, 'b': 2 });\n     * // => 'matches A'\n     *\n     * func({ 'a': 0, 'b': 1 });\n     * // => 'matches B'\n     *\n     * func({ 'a': '1', 'b': '2' });\n     * // => 'no match'\n     */\n    function cond(pairs) {\n      var length = pairs == null ? 0 : pairs.length,\n          toIteratee = getIteratee();\n\n      pairs = !length ? [] : arrayMap(pairs, function(pair) {\n        if (typeof pair[1] != 'function') {\n          throw new TypeError(FUNC_ERROR_TEXT);\n        }\n        return [toIteratee(pair[0]), pair[1]];\n      });\n\n      return baseRest(function(args) {\n        var index = -1;\n        while (++index < length) {\n          var pair = pairs[index];\n          if (apply(pair[0], this, args)) {\n            return apply(pair[1], this, args);\n          }\n        }\n      });\n    }\n\n    /**\n     * Creates a function that invokes the predicate properties of `source` with\n     * the corresponding property values of a given object, returning `true` if\n     * all predicates return truthy, else `false`.\n     *\n     * **Note:** The created function is equivalent to `_.conformsTo` with\n     * `source` partially applied.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {Object} source The object of property predicates to conform to.\n     * @returns {Function} Returns the new spec function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': 2, 'b': 1 },\n     *   { 'a': 1, 'b': 2 }\n     * ];\n     *\n     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));\n     * // => [{ 'a': 1, 'b': 2 }]\n     */\n    function conforms(source) {\n      return baseConforms(baseClone(source, true));\n    }\n\n    /**\n     * Creates a function that returns `value`.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Util\n     * @param {*} value The value to return from the new function.\n     * @returns {Function} Returns the new constant function.\n     * @example\n     *\n     * var objects = _.times(2, _.constant({ 'a': 1 }));\n     *\n     * console.log(objects);\n     * // => [{ 'a': 1 }, { 'a': 1 }]\n     *\n     * console.log(objects[0] === objects[1]);\n     * // => true\n     */\n    function constant(value) {\n      return function() {\n        return value;\n      };\n    }\n\n    /**\n     * Checks `value` to determine whether a default value should be returned in\n     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,\n     * or `undefined`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.14.0\n     * @category Util\n     * @param {*} value The value to check.\n     * @param {*} defaultValue The default value.\n     * @returns {*} Returns the resolved value.\n     * @example\n     *\n     * _.defaultTo(1, 10);\n     * // => 1\n     *\n     * _.defaultTo(undefined, 10);\n     * // => 10\n     */\n    function defaultTo(value, defaultValue) {\n      return (value == null || value !== value) ? defaultValue : value;\n    }\n\n    /**\n     * Creates a function that returns the result of invoking the given functions\n     * with the `this` binding of the created function, where each successive\n     * invocation is supplied the return value of the previous.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Util\n     * @param {...(Function|Function[])} [funcs] The functions to invoke.\n     * @returns {Function} Returns the new composite function.\n     * @see _.flowRight\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var addSquare = _.flow([_.add, square]);\n     * addSquare(1, 2);\n     * // => 9\n     */\n    var flow = createFlow();\n\n    /**\n     * This method is like `_.flow` except that it creates a function that\n     * invokes the given functions from right to left.\n     *\n     * @static\n     * @since 3.0.0\n     * @memberOf _\n     * @category Util\n     * @param {...(Function|Function[])} [funcs] The functions to invoke.\n     * @returns {Function} Returns the new composite function.\n     * @see _.flow\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var addSquare = _.flowRight([square, _.add]);\n     * addSquare(1, 2);\n     * // => 9\n     */\n    var flowRight = createFlow(true);\n\n    /**\n     * This method returns the first argument it receives.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {*} value Any value.\n     * @returns {*} Returns `value`.\n     * @example\n     *\n     * var object = { 'a': 1 };\n     *\n     * console.log(_.identity(object) === object);\n     * // => true\n     */\n    function identity(value) {\n      return value;\n    }\n\n    /**\n     * Creates a function that invokes `func` with the arguments of the created\n     * function. If `func` is a property name, the created function returns the\n     * property value for a given element. If `func` is an array or object, the\n     * created function returns `true` for elements that contain the equivalent\n     * source properties, otherwise it returns `false`.\n     *\n     * @static\n     * @since 4.0.0\n     * @memberOf _\n     * @category Util\n     * @param {*} [func=_.identity] The value to convert to a callback.\n     * @returns {Function} Returns the callback.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36, 'active': true },\n     *   { 'user': 'fred',   'age': 40, 'active': false }\n     * ];\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));\n     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.filter(users, _.iteratee(['user', 'fred']));\n     * // => [{ 'user': 'fred', 'age': 40 }]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.map(users, _.iteratee('user'));\n     * // => ['barney', 'fred']\n     *\n     * // Create custom iteratee shorthands.\n     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {\n     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {\n     *     return func.test(string);\n     *   };\n     * });\n     *\n     * _.filter(['abc', 'def'], /ef/);\n     * // => ['def']\n     */\n    function iteratee(func) {\n      return baseIteratee(typeof func == 'function' ? func : baseClone(func, true));\n    }\n\n    /**\n     * Creates a function that performs a partial deep comparison between a given\n     * object and `source`, returning `true` if the given object has equivalent\n     * property values, else `false`.\n     *\n     * **Note:** The created function is equivalent to `_.isMatch` with `source`\n     * partially applied.\n     *\n     * Partial comparisons will match empty array and empty object `source`\n     * values against any array or object value, respectively. See `_.isEqual`\n     * for a list of supported value comparisons.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Util\n     * @param {Object} source The object of property values to match.\n     * @returns {Function} Returns the new spec function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': 1, 'b': 2, 'c': 3 },\n     *   { 'a': 4, 'b': 5, 'c': 6 }\n     * ];\n     *\n     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));\n     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]\n     */\n    function matches(source) {\n      return baseMatches(baseClone(source, true));\n    }\n\n    /**\n     * Creates a function that performs a partial deep comparison between the\n     * value at `path` of a given object to `srcValue`, returning `true` if the\n     * object value is equivalent, else `false`.\n     *\n     * **Note:** Partial comparisons will match empty array and empty object\n     * `srcValue` values against any array or object value, respectively. See\n     * `_.isEqual` for a list of supported value comparisons.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.2.0\n     * @category Util\n     * @param {Array|string} path The path of the property to get.\n     * @param {*} srcValue The value to match.\n     * @returns {Function} Returns the new spec function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': 1, 'b': 2, 'c': 3 },\n     *   { 'a': 4, 'b': 5, 'c': 6 }\n     * ];\n     *\n     * _.find(objects, _.matchesProperty('a', 4));\n     * // => { 'a': 4, 'b': 5, 'c': 6 }\n     */\n    function matchesProperty(path, srcValue) {\n      return baseMatchesProperty(path, baseClone(srcValue, true));\n    }\n\n    /**\n     * Creates a function that invokes the method at `path` of a given object.\n     * Any additional arguments are provided to the invoked method.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.7.0\n     * @category Util\n     * @param {Array|string} path The path of the method to invoke.\n     * @param {...*} [args] The arguments to invoke the method with.\n     * @returns {Function} Returns the new invoker function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': { 'b': _.constant(2) } },\n     *   { 'a': { 'b': _.constant(1) } }\n     * ];\n     *\n     * _.map(objects, _.method('a.b'));\n     * // => [2, 1]\n     *\n     * _.map(objects, _.method(['a', 'b']));\n     * // => [2, 1]\n     */\n    var method = baseRest(function(path, args) {\n      return function(object) {\n        return baseInvoke(object, path, args);\n      };\n    });\n\n    /**\n     * The opposite of `_.method`; this method creates a function that invokes\n     * the method at a given path of `object`. Any additional arguments are\n     * provided to the invoked method.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.7.0\n     * @category Util\n     * @param {Object} object The object to query.\n     * @param {...*} [args] The arguments to invoke the method with.\n     * @returns {Function} Returns the new invoker function.\n     * @example\n     *\n     * var array = _.times(3, _.constant),\n     *     object = { 'a': array, 'b': array, 'c': array };\n     *\n     * _.map(['a[2]', 'c[0]'], _.methodOf(object));\n     * // => [2, 0]\n     *\n     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));\n     * // => [2, 0]\n     */\n    var methodOf = baseRest(function(object, args) {\n      return function(path) {\n        return baseInvoke(object, path, args);\n      };\n    });\n\n    /**\n     * Adds all own enumerable string keyed function properties of a source\n     * object to the destination object. If `object` is a function, then methods\n     * are added to its prototype as well.\n     *\n     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to\n     * avoid conflicts caused by modifying the original.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {Function|Object} [object=lodash] The destination object.\n     * @param {Object} source The object of functions to add.\n     * @param {Object} [options={}] The options object.\n     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.\n     * @returns {Function|Object} Returns `object`.\n     * @example\n     *\n     * function vowels(string) {\n     *   return _.filter(string, function(v) {\n     *     return /[aeiou]/i.test(v);\n     *   });\n     * }\n     *\n     * _.mixin({ 'vowels': vowels });\n     * _.vowels('fred');\n     * // => ['e']\n     *\n     * _('fred').vowels().value();\n     * // => ['e']\n     *\n     * _.mixin({ 'vowels': vowels }, { 'chain': false });\n     * _('fred').vowels();\n     * // => ['e']\n     */\n    function mixin(object, source, options) {\n      var props = keys(source),\n          methodNames = baseFunctions(source, props);\n\n      if (options == null &&\n          !(isObject(source) && (methodNames.length || !props.length))) {\n        options = source;\n        source = object;\n        object = this;\n        methodNames = baseFunctions(source, keys(source));\n      }\n      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,\n          isFunc = isFunction(object);\n\n      arrayEach(methodNames, function(methodName) {\n        var func = source[methodName];\n        object[methodName] = func;\n        if (isFunc) {\n          object.prototype[methodName] = function() {\n            var chainAll = this.__chain__;\n            if (chain || chainAll) {\n              var result = object(this.__wrapped__),\n                  actions = result.__actions__ = copyArray(this.__actions__);\n\n              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });\n              result.__chain__ = chainAll;\n              return result;\n            }\n            return func.apply(object, arrayPush([this.value()], arguments));\n          };\n        }\n      });\n\n      return object;\n    }\n\n    /**\n     * Reverts the `_` variable to its previous value and returns a reference to\n     * the `lodash` function.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @returns {Function} Returns the `lodash` function.\n     * @example\n     *\n     * var lodash = _.noConflict();\n     */\n    function noConflict() {\n      if (root._ === this) {\n        root._ = oldDash;\n      }\n      return this;\n    }\n\n    /**\n     * This method returns `undefined`.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.3.0\n     * @category Util\n     * @example\n     *\n     * _.times(2, _.noop);\n     * // => [undefined, undefined]\n     */\n    function noop() {\n      // No operation performed.\n    }\n\n    /**\n     * Creates a function that gets the argument at index `n`. If `n` is negative,\n     * the nth argument from the end is returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {number} [n=0] The index of the argument to return.\n     * @returns {Function} Returns the new pass-thru function.\n     * @example\n     *\n     * var func = _.nthArg(1);\n     * func('a', 'b', 'c', 'd');\n     * // => 'b'\n     *\n     * var func = _.nthArg(-2);\n     * func('a', 'b', 'c', 'd');\n     * // => 'c'\n     */\n    function nthArg(n) {\n      n = toInteger(n);\n      return baseRest(function(args) {\n        return baseNth(args, n);\n      });\n    }\n\n    /**\n     * Creates a function that invokes `iteratees` with the arguments it receives\n     * and returns their results.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {...(Function|Function[])} [iteratees=[_.identity]]\n     *  The iteratees to invoke.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var func = _.over([Math.max, Math.min]);\n     *\n     * func(1, 2, 3, 4);\n     * // => [4, 1]\n     */\n    var over = createOver(arrayMap);\n\n    /**\n     * Creates a function that checks if **all** of the `predicates` return\n     * truthy when invoked with the arguments it receives.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {...(Function|Function[])} [predicates=[_.identity]]\n     *  The predicates to check.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var func = _.overEvery([Boolean, isFinite]);\n     *\n     * func('1');\n     * // => true\n     *\n     * func(null);\n     * // => false\n     *\n     * func(NaN);\n     * // => false\n     */\n    var overEvery = createOver(arrayEvery);\n\n    /**\n     * Creates a function that checks if **any** of the `predicates` return\n     * truthy when invoked with the arguments it receives.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {...(Function|Function[])} [predicates=[_.identity]]\n     *  The predicates to check.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var func = _.overSome([Boolean, isFinite]);\n     *\n     * func('1');\n     * // => true\n     *\n     * func(null);\n     * // => true\n     *\n     * func(NaN);\n     * // => false\n     */\n    var overSome = createOver(arraySome);\n\n    /**\n     * Creates a function that returns the value at `path` of a given object.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Util\n     * @param {Array|string} path The path of the property to get.\n     * @returns {Function} Returns the new accessor function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': { 'b': 2 } },\n     *   { 'a': { 'b': 1 } }\n     * ];\n     *\n     * _.map(objects, _.property('a.b'));\n     * // => [2, 1]\n     *\n     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');\n     * // => [1, 2]\n     */\n    function property(path) {\n      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);\n    }\n\n    /**\n     * The opposite of `_.property`; this method creates a function that returns\n     * the value at a given path of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Util\n     * @param {Object} object The object to query.\n     * @returns {Function} Returns the new accessor function.\n     * @example\n     *\n     * var array = [0, 1, 2],\n     *     object = { 'a': array, 'b': array, 'c': array };\n     *\n     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));\n     * // => [2, 0]\n     *\n     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));\n     * // => [2, 0]\n     */\n    function propertyOf(object) {\n      return function(path) {\n        return object == null ? undefined : baseGet(object, path);\n      };\n    }\n\n    /**\n     * Creates an array of numbers (positive and/or negative) progressing from\n     * `start` up to, but not including, `end`. A step of `-1` is used if a negative\n     * `start` is specified without an `end` or `step`. If `end` is not specified,\n     * it's set to `start` with `start` then set to `0`.\n     *\n     * **Note:** JavaScript follows the IEEE-754 standard for resolving\n     * floating-point values which can produce unexpected results.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {number} [start=0] The start of the range.\n     * @param {number} end The end of the range.\n     * @param {number} [step=1] The value to increment or decrement by.\n     * @returns {Array} Returns the range of numbers.\n     * @see _.inRange, _.rangeRight\n     * @example\n     *\n     * _.range(4);\n     * // => [0, 1, 2, 3]\n     *\n     * _.range(-4);\n     * // => [0, -1, -2, -3]\n     *\n     * _.range(1, 5);\n     * // => [1, 2, 3, 4]\n     *\n     * _.range(0, 20, 5);\n     * // => [0, 5, 10, 15]\n     *\n     * _.range(0, -4, -1);\n     * // => [0, -1, -2, -3]\n     *\n     * _.range(1, 4, 0);\n     * // => [1, 1, 1]\n     *\n     * _.range(0);\n     * // => []\n     */\n    var range = createRange();\n\n    /**\n     * This method is like `_.range` except that it populates values in\n     * descending order.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {number} [start=0] The start of the range.\n     * @param {number} end The end of the range.\n     * @param {number} [step=1] The value to increment or decrement by.\n     * @returns {Array} Returns the range of numbers.\n     * @see _.inRange, _.range\n     * @example\n     *\n     * _.rangeRight(4);\n     * // => [3, 2, 1, 0]\n     *\n     * _.rangeRight(-4);\n     * // => [-3, -2, -1, 0]\n     *\n     * _.rangeRight(1, 5);\n     * // => [4, 3, 2, 1]\n     *\n     * _.rangeRight(0, 20, 5);\n     * // => [15, 10, 5, 0]\n     *\n     * _.rangeRight(0, -4, -1);\n     * // => [-3, -2, -1, 0]\n     *\n     * _.rangeRight(1, 4, 0);\n     * // => [1, 1, 1]\n     *\n     * _.rangeRight(0);\n     * // => []\n     */\n    var rangeRight = createRange(true);\n\n    /**\n     * This method returns a new empty array.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {Array} Returns the new empty array.\n     * @example\n     *\n     * var arrays = _.times(2, _.stubArray);\n     *\n     * console.log(arrays);\n     * // => [[], []]\n     *\n     * console.log(arrays[0] === arrays[1]);\n     * // => false\n     */\n    function stubArray() {\n      return [];\n    }\n\n    /**\n     * This method returns `false`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {boolean} Returns `false`.\n     * @example\n     *\n     * _.times(2, _.stubFalse);\n     * // => [false, false]\n     */\n    function stubFalse() {\n      return false;\n    }\n\n    /**\n     * This method returns a new empty object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {Object} Returns the new empty object.\n     * @example\n     *\n     * var objects = _.times(2, _.stubObject);\n     *\n     * console.log(objects);\n     * // => [{}, {}]\n     *\n     * console.log(objects[0] === objects[1]);\n     * // => false\n     */\n    function stubObject() {\n      return {};\n    }\n\n    /**\n     * This method returns an empty string.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {string} Returns the empty string.\n     * @example\n     *\n     * _.times(2, _.stubString);\n     * // => ['', '']\n     */\n    function stubString() {\n      return '';\n    }\n\n    /**\n     * This method returns `true`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {boolean} Returns `true`.\n     * @example\n     *\n     * _.times(2, _.stubTrue);\n     * // => [true, true]\n     */\n    function stubTrue() {\n      return true;\n    }\n\n    /**\n     * Invokes the iteratee `n` times, returning an array of the results of\n     * each invocation. The iteratee is invoked with one argument; (index).\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {number} n The number of times to invoke `iteratee`.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the array of results.\n     * @example\n     *\n     * _.times(3, String);\n     * // => ['0', '1', '2']\n     *\n     *  _.times(4, _.constant(0));\n     * // => [0, 0, 0, 0]\n     */\n    function times(n, iteratee) {\n      n = toInteger(n);\n      if (n < 1 || n > MAX_SAFE_INTEGER) {\n        return [];\n      }\n      var index = MAX_ARRAY_LENGTH,\n          length = nativeMin(n, MAX_ARRAY_LENGTH);\n\n      iteratee = getIteratee(iteratee);\n      n -= MAX_ARRAY_LENGTH;\n\n      var result = baseTimes(length, iteratee);\n      while (++index < n) {\n        iteratee(index);\n      }\n      return result;\n    }\n\n    /**\n     * Converts `value` to a property path array.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {*} value The value to convert.\n     * @returns {Array} Returns the new property path array.\n     * @example\n     *\n     * _.toPath('a.b.c');\n     * // => ['a', 'b', 'c']\n     *\n     * _.toPath('a[0].b.c');\n     * // => ['a', '0', 'b', 'c']\n     */\n    function toPath(value) {\n      if (isArray(value)) {\n        return arrayMap(value, toKey);\n      }\n      return isSymbol(value) ? [value] : copyArray(stringToPath(value));\n    }\n\n    /**\n     * Generates a unique ID. If `prefix` is given, the ID is appended to it.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {string} [prefix=''] The value to prefix the ID with.\n     * @returns {string} Returns the unique ID.\n     * @example\n     *\n     * _.uniqueId('contact_');\n     * // => 'contact_104'\n     *\n     * _.uniqueId();\n     * // => '105'\n     */\n    function uniqueId(prefix) {\n      var id = ++idCounter;\n      return toString(prefix) + id;\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Adds two numbers.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.4.0\n     * @category Math\n     * @param {number} augend The first number in an addition.\n     * @param {number} addend The second number in an addition.\n     * @returns {number} Returns the total.\n     * @example\n     *\n     * _.add(6, 4);\n     * // => 10\n     */\n    var add = createMathOperation(function(augend, addend) {\n      return augend + addend;\n    }, 0);\n\n    /**\n     * Computes `number` rounded up to `precision`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.10.0\n     * @category Math\n     * @param {number} number The number to round up.\n     * @param {number} [precision=0] The precision to round up to.\n     * @returns {number} Returns the rounded up number.\n     * @example\n     *\n     * _.ceil(4.006);\n     * // => 5\n     *\n     * _.ceil(6.004, 2);\n     * // => 6.01\n     *\n     * _.ceil(6040, -2);\n     * // => 6100\n     */\n    var ceil = createRound('ceil');\n\n    /**\n     * Divide two numbers.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Math\n     * @param {number} dividend The first number in a division.\n     * @param {number} divisor The second number in a division.\n     * @returns {number} Returns the quotient.\n     * @example\n     *\n     * _.divide(6, 4);\n     * // => 1.5\n     */\n    var divide = createMathOperation(function(dividend, divisor) {\n      return dividend / divisor;\n    }, 1);\n\n    /**\n     * Computes `number` rounded down to `precision`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.10.0\n     * @category Math\n     * @param {number} number The number to round down.\n     * @param {number} [precision=0] The precision to round down to.\n     * @returns {number} Returns the rounded down number.\n     * @example\n     *\n     * _.floor(4.006);\n     * // => 4\n     *\n     * _.floor(0.046, 2);\n     * // => 0.04\n     *\n     * _.floor(4060, -2);\n     * // => 4000\n     */\n    var floor = createRound('floor');\n\n    /**\n     * Computes the maximum value of `array`. If `array` is empty or falsey,\n     * `undefined` is returned.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @returns {*} Returns the maximum value.\n     * @example\n     *\n     * _.max([4, 2, 8, 6]);\n     * // => 8\n     *\n     * _.max([]);\n     * // => undefined\n     */\n    function max(array) {\n      return (array && array.length)\n        ? baseExtremum(array, identity, baseGt)\n        : undefined;\n    }\n\n    /**\n     * This method is like `_.max` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the criterion by which\n     * the value is ranked. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {*} Returns the maximum value.\n     * @example\n     *\n     * var objects = [{ 'n': 1 }, { 'n': 2 }];\n     *\n     * _.maxBy(objects, function(o) { return o.n; });\n     * // => { 'n': 2 }\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.maxBy(objects, 'n');\n     * // => { 'n': 2 }\n     */\n    function maxBy(array, iteratee) {\n      return (array && array.length)\n        ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)\n        : undefined;\n    }\n\n    /**\n     * Computes the mean of the values in `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @returns {number} Returns the mean.\n     * @example\n     *\n     * _.mean([4, 2, 8, 6]);\n     * // => 5\n     */\n    function mean(array) {\n      return baseMean(array, identity);\n    }\n\n    /**\n     * This method is like `_.mean` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the value to be averaged.\n     * The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {number} Returns the mean.\n     * @example\n     *\n     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];\n     *\n     * _.meanBy(objects, function(o) { return o.n; });\n     * // => 5\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.meanBy(objects, 'n');\n     * // => 5\n     */\n    function meanBy(array, iteratee) {\n      return baseMean(array, getIteratee(iteratee, 2));\n    }\n\n    /**\n     * Computes the minimum value of `array`. If `array` is empty or falsey,\n     * `undefined` is returned.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @returns {*} Returns the minimum value.\n     * @example\n     *\n     * _.min([4, 2, 8, 6]);\n     * // => 2\n     *\n     * _.min([]);\n     * // => undefined\n     */\n    function min(array) {\n      return (array && array.length)\n        ? baseExtremum(array, identity, baseLt)\n        : undefined;\n    }\n\n    /**\n     * This method is like `_.min` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the criterion by which\n     * the value is ranked. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {*} Returns the minimum value.\n     * @example\n     *\n     * var objects = [{ 'n': 1 }, { 'n': 2 }];\n     *\n     * _.minBy(objects, function(o) { return o.n; });\n     * // => { 'n': 1 }\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.minBy(objects, 'n');\n     * // => { 'n': 1 }\n     */\n    function minBy(array, iteratee) {\n      return (array && array.length)\n        ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)\n        : undefined;\n    }\n\n    /**\n     * Multiply two numbers.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Math\n     * @param {number} multiplier The first number in a multiplication.\n     * @param {number} multiplicand The second number in a multiplication.\n     * @returns {number} Returns the product.\n     * @example\n     *\n     * _.multiply(6, 4);\n     * // => 24\n     */\n    var multiply = createMathOperation(function(multiplier, multiplicand) {\n      return multiplier * multiplicand;\n    }, 1);\n\n    /**\n     * Computes `number` rounded to `precision`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.10.0\n     * @category Math\n     * @param {number} number The number to round.\n     * @param {number} [precision=0] The precision to round to.\n     * @returns {number} Returns the rounded number.\n     * @example\n     *\n     * _.round(4.006);\n     * // => 4\n     *\n     * _.round(4.006, 2);\n     * // => 4.01\n     *\n     * _.round(4060, -2);\n     * // => 4100\n     */\n    var round = createRound('round');\n\n    /**\n     * Subtract two numbers.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {number} minuend The first number in a subtraction.\n     * @param {number} subtrahend The second number in a subtraction.\n     * @returns {number} Returns the difference.\n     * @example\n     *\n     * _.subtract(6, 4);\n     * // => 2\n     */\n    var subtract = createMathOperation(function(minuend, subtrahend) {\n      return minuend - subtrahend;\n    }, 0);\n\n    /**\n     * Computes the sum of the values in `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.4.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @returns {number} Returns the sum.\n     * @example\n     *\n     * _.sum([4, 2, 8, 6]);\n     * // => 20\n     */\n    function sum(array) {\n      return (array && array.length)\n        ? baseSum(array, identity)\n        : 0;\n    }\n\n    /**\n     * This method is like `_.sum` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the value to be summed.\n     * The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {number} Returns the sum.\n     * @example\n     *\n     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];\n     *\n     * _.sumBy(objects, function(o) { return o.n; });\n     * // => 20\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.sumBy(objects, 'n');\n     * // => 20\n     */\n    function sumBy(array, iteratee) {\n      return (array && array.length)\n        ? baseSum(array, getIteratee(iteratee, 2))\n        : 0;\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    // Add methods that return wrapped values in chain sequences.\n    lodash.after = after;\n    lodash.ary = ary;\n    lodash.assign = assign;\n    lodash.assignIn = assignIn;\n    lodash.assignInWith = assignInWith;\n    lodash.assignWith = assignWith;\n    lodash.at = at;\n    lodash.before = before;\n    lodash.bind = bind;\n    lodash.bindAll = bindAll;\n    lodash.bindKey = bindKey;\n    lodash.castArray = castArray;\n    lodash.chain = chain;\n    lodash.chunk = chunk;\n    lodash.compact = compact;\n    lodash.concat = concat;\n    lodash.cond = cond;\n    lodash.conforms = conforms;\n    lodash.constant = constant;\n    lodash.countBy = countBy;\n    lodash.create = create;\n    lodash.curry = curry;\n    lodash.curryRight = curryRight;\n    lodash.debounce = debounce;\n    lodash.defaults = defaults;\n    lodash.defaultsDeep = defaultsDeep;\n    lodash.defer = defer;\n    lodash.delay = delay;\n    lodash.difference = difference;\n    lodash.differenceBy = differenceBy;\n    lodash.differenceWith = differenceWith;\n    lodash.drop = drop;\n    lodash.dropRight = dropRight;\n    lodash.dropRightWhile = dropRightWhile;\n    lodash.dropWhile = dropWhile;\n    lodash.fill = fill;\n    lodash.filter = filter;\n    lodash.flatMap = flatMap;\n    lodash.flatMapDeep = flatMapDeep;\n    lodash.flatMapDepth = flatMapDepth;\n    lodash.flatten = flatten;\n    lodash.flattenDeep = flattenDeep;\n    lodash.flattenDepth = flattenDepth;\n    lodash.flip = flip;\n    lodash.flow = flow;\n    lodash.flowRight = flowRight;\n    lodash.fromPairs = fromPairs;\n    lodash.functions = functions;\n    lodash.functionsIn = functionsIn;\n    lodash.groupBy = groupBy;\n    lodash.initial = initial;\n    lodash.intersection = intersection;\n    lodash.intersectionBy = intersectionBy;\n    lodash.intersectionWith = intersectionWith;\n    lodash.invert = invert;\n    lodash.invertBy = invertBy;\n    lodash.invokeMap = invokeMap;\n    lodash.iteratee = iteratee;\n    lodash.keyBy = keyBy;\n    lodash.keys = keys;\n    lodash.keysIn = keysIn;\n    lodash.map = map;\n    lodash.mapKeys = mapKeys;\n    lodash.mapValues = mapValues;\n    lodash.matches = matches;\n    lodash.matchesProperty = matchesProperty;\n    lodash.memoize = memoize;\n    lodash.merge = merge;\n    lodash.mergeWith = mergeWith;\n    lodash.method = method;\n    lodash.methodOf = methodOf;\n    lodash.mixin = mixin;\n    lodash.negate = negate;\n    lodash.nthArg = nthArg;\n    lodash.omit = omit;\n    lodash.omitBy = omitBy;\n    lodash.once = once;\n    lodash.orderBy = orderBy;\n    lodash.over = over;\n    lodash.overArgs = overArgs;\n    lodash.overEvery = overEvery;\n    lodash.overSome = overSome;\n    lodash.partial = partial;\n    lodash.partialRight = partialRight;\n    lodash.partition = partition;\n    lodash.pick = pick;\n    lodash.pickBy = pickBy;\n    lodash.property = property;\n    lodash.propertyOf = propertyOf;\n    lodash.pull = pull;\n    lodash.pullAll = pullAll;\n    lodash.pullAllBy = pullAllBy;\n    lodash.pullAllWith = pullAllWith;\n    lodash.pullAt = pullAt;\n    lodash.range = range;\n    lodash.rangeRight = rangeRight;\n    lodash.rearg = rearg;\n    lodash.reject = reject;\n    lodash.remove = remove;\n    lodash.rest = rest;\n    lodash.reverse = reverse;\n    lodash.sampleSize = sampleSize;\n    lodash.set = set;\n    lodash.setWith = setWith;\n    lodash.shuffle = shuffle;\n    lodash.slice = slice;\n    lodash.sortBy = sortBy;\n    lodash.sortedUniq = sortedUniq;\n    lodash.sortedUniqBy = sortedUniqBy;\n    lodash.split = split;\n    lodash.spread = spread;\n    lodash.tail = tail;\n    lodash.take = take;\n    lodash.takeRight = takeRight;\n    lodash.takeRightWhile = takeRightWhile;\n    lodash.takeWhile = takeWhile;\n    lodash.tap = tap;\n    lodash.throttle = throttle;\n    lodash.thru = thru;\n    lodash.toArray = toArray;\n    lodash.toPairs = toPairs;\n    lodash.toPairsIn = toPairsIn;\n    lodash.toPath = toPath;\n    lodash.toPlainObject = toPlainObject;\n    lodash.transform = transform;\n    lodash.unary = unary;\n    lodash.union = union;\n    lodash.unionBy = unionBy;\n    lodash.unionWith = unionWith;\n    lodash.uniq = uniq;\n    lodash.uniqBy = uniqBy;\n    lodash.uniqWith = uniqWith;\n    lodash.unset = unset;\n    lodash.unzip = unzip;\n    lodash.unzipWith = unzipWith;\n    lodash.update = update;\n    lodash.updateWith = updateWith;\n    lodash.values = values;\n    lodash.valuesIn = valuesIn;\n    lodash.without = without;\n    lodash.words = words;\n    lodash.wrap = wrap;\n    lodash.xor = xor;\n    lodash.xorBy = xorBy;\n    lodash.xorWith = xorWith;\n    lodash.zip = zip;\n    lodash.zipObject = zipObject;\n    lodash.zipObjectDeep = zipObjectDeep;\n    lodash.zipWith = zipWith;\n\n    // Add aliases.\n    lodash.entries = toPairs;\n    lodash.entriesIn = toPairsIn;\n    lodash.extend = assignIn;\n    lodash.extendWith = assignInWith;\n\n    // Add methods to `lodash.prototype`.\n    mixin(lodash, lodash);\n\n    /*------------------------------------------------------------------------*/\n\n    // Add methods that return unwrapped values in chain sequences.\n    lodash.add = add;\n    lodash.attempt = attempt;\n    lodash.camelCase = camelCase;\n    lodash.capitalize = capitalize;\n    lodash.ceil = ceil;\n    lodash.clamp = clamp;\n    lodash.clone = clone;\n    lodash.cloneDeep = cloneDeep;\n    lodash.cloneDeepWith = cloneDeepWith;\n    lodash.cloneWith = cloneWith;\n    lodash.conformsTo = conformsTo;\n    lodash.deburr = deburr;\n    lodash.defaultTo = defaultTo;\n    lodash.divide = divide;\n    lodash.endsWith = endsWith;\n    lodash.eq = eq;\n    lodash.escape = escape;\n    lodash.escapeRegExp = escapeRegExp;\n    lodash.every = every;\n    lodash.find = find;\n    lodash.findIndex = findIndex;\n    lodash.findKey = findKey;\n    lodash.findLast = findLast;\n    lodash.findLastIndex = findLastIndex;\n    lodash.findLastKey = findLastKey;\n    lodash.floor = floor;\n    lodash.forEach = forEach;\n    lodash.forEachRight = forEachRight;\n    lodash.forIn = forIn;\n    lodash.forInRight = forInRight;\n    lodash.forOwn = forOwn;\n    lodash.forOwnRight = forOwnRight;\n    lodash.get = get;\n    lodash.gt = gt;\n    lodash.gte = gte;\n    lodash.has = has;\n    lodash.hasIn = hasIn;\n    lodash.head = head;\n    lodash.identity = identity;\n    lodash.includes = includes;\n    lodash.indexOf = indexOf;\n    lodash.inRange = inRange;\n    lodash.invoke = invoke;\n    lodash.isArguments = isArguments;\n    lodash.isArray = isArray;\n    lodash.isArrayBuffer = isArrayBuffer;\n    lodash.isArrayLike = isArrayLike;\n    lodash.isArrayLikeObject = isArrayLikeObject;\n    lodash.isBoolean = isBoolean;\n    lodash.isBuffer = isBuffer;\n    lodash.isDate = isDate;\n    lodash.isElement = isElement;\n    lodash.isEmpty = isEmpty;\n    lodash.isEqual = isEqual;\n    lodash.isEqualWith = isEqualWith;\n    lodash.isError = isError;\n    lodash.isFinite = isFinite;\n    lodash.isFunction = isFunction;\n    lodash.isInteger = isInteger;\n    lodash.isLength = isLength;\n    lodash.isMap = isMap;\n    lodash.isMatch = isMatch;\n    lodash.isMatchWith = isMatchWith;\n    lodash.isNaN = isNaN;\n    lodash.isNative = isNative;\n    lodash.isNil = isNil;\n    lodash.isNull = isNull;\n    lodash.isNumber = isNumber;\n    lodash.isObject = isObject;\n    lodash.isObjectLike = isObjectLike;\n    lodash.isPlainObject = isPlainObject;\n    lodash.isRegExp = isRegExp;\n    lodash.isSafeInteger = isSafeInteger;\n    lodash.isSet = isSet;\n    lodash.isString = isString;\n    lodash.isSymbol = isSymbol;\n    lodash.isTypedArray = isTypedArray;\n    lodash.isUndefined = isUndefined;\n    lodash.isWeakMap = isWeakMap;\n    lodash.isWeakSet = isWeakSet;\n    lodash.join = join;\n    lodash.kebabCase = kebabCase;\n    lodash.last = last;\n    lodash.lastIndexOf = lastIndexOf;\n    lodash.lowerCase = lowerCase;\n    lodash.lowerFirst = lowerFirst;\n    lodash.lt = lt;\n    lodash.lte = lte;\n    lodash.max = max;\n    lodash.maxBy = maxBy;\n    lodash.mean = mean;\n    lodash.meanBy = meanBy;\n    lodash.min = min;\n    lodash.minBy = minBy;\n    lodash.stubArray = stubArray;\n    lodash.stubFalse = stubFalse;\n    lodash.stubObject = stubObject;\n    lodash.stubString = stubString;\n    lodash.stubTrue = stubTrue;\n    lodash.multiply = multiply;\n    lodash.nth = nth;\n    lodash.noConflict = noConflict;\n    lodash.noop = noop;\n    lodash.now = now;\n    lodash.pad = pad;\n    lodash.padEnd = padEnd;\n    lodash.padStart = padStart;\n    lodash.parseInt = parseInt;\n    lodash.random = random;\n    lodash.reduce = reduce;\n    lodash.reduceRight = reduceRight;\n    lodash.repeat = repeat;\n    lodash.replace = replace;\n    lodash.result = result;\n    lodash.round = round;\n    lodash.runInContext = runInContext;\n    lodash.sample = sample;\n    lodash.size = size;\n    lodash.snakeCase = snakeCase;\n    lodash.some = some;\n    lodash.sortedIndex = sortedIndex;\n    lodash.sortedIndexBy = sortedIndexBy;\n    lodash.sortedIndexOf = sortedIndexOf;\n    lodash.sortedLastIndex = sortedLastIndex;\n    lodash.sortedLastIndexBy = sortedLastIndexBy;\n    lodash.sortedLastIndexOf = sortedLastIndexOf;\n    lodash.startCase = startCase;\n    lodash.startsWith = startsWith;\n    lodash.subtract = subtract;\n    lodash.sum = sum;\n    lodash.sumBy = sumBy;\n    lodash.template = template;\n    lodash.times = times;\n    lodash.toFinite = toFinite;\n    lodash.toInteger = toInteger;\n    lodash.toLength = toLength;\n    lodash.toLower = toLower;\n    lodash.toNumber = toNumber;\n    lodash.toSafeInteger = toSafeInteger;\n    lodash.toString = toString;\n    lodash.toUpper = toUpper;\n    lodash.trim = trim;\n    lodash.trimEnd = trimEnd;\n    lodash.trimStart = trimStart;\n    lodash.truncate = truncate;\n    lodash.unescape = unescape;\n    lodash.uniqueId = uniqueId;\n    lodash.upperCase = upperCase;\n    lodash.upperFirst = upperFirst;\n\n    // Add aliases.\n    lodash.each = forEach;\n    lodash.eachRight = forEachRight;\n    lodash.first = head;\n\n    mixin(lodash, (function() {\n      var source = {};\n      baseForOwn(lodash, function(func, methodName) {\n        if (!hasOwnProperty.call(lodash.prototype, methodName)) {\n          source[methodName] = func;\n        }\n      });\n      return source;\n    }()), { 'chain': false });\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * The semantic version number.\n     *\n     * @static\n     * @memberOf _\n     * @type {string}\n     */\n    lodash.VERSION = VERSION;\n\n    // Assign default placeholders.\n    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {\n      lodash[methodName].placeholder = lodash;\n    });\n\n    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.\n    arrayEach(['drop', 'take'], function(methodName, index) {\n      LazyWrapper.prototype[methodName] = function(n) {\n        var filtered = this.__filtered__;\n        if (filtered && !index) {\n          return new LazyWrapper(this);\n        }\n        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);\n\n        var result = this.clone();\n        if (filtered) {\n          result.__takeCount__ = nativeMin(n, result.__takeCount__);\n        } else {\n          result.__views__.push({\n            'size': nativeMin(n, MAX_ARRAY_LENGTH),\n            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')\n          });\n        }\n        return result;\n      };\n\n      LazyWrapper.prototype[methodName + 'Right'] = function(n) {\n        return this.reverse()[methodName](n).reverse();\n      };\n    });\n\n    // Add `LazyWrapper` methods that accept an `iteratee` value.\n    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {\n      var type = index + 1,\n          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;\n\n      LazyWrapper.prototype[methodName] = function(iteratee) {\n        var result = this.clone();\n        result.__iteratees__.push({\n          'iteratee': getIteratee(iteratee, 3),\n          'type': type\n        });\n        result.__filtered__ = result.__filtered__ || isFilter;\n        return result;\n      };\n    });\n\n    // Add `LazyWrapper` methods for `_.head` and `_.last`.\n    arrayEach(['head', 'last'], function(methodName, index) {\n      var takeName = 'take' + (index ? 'Right' : '');\n\n      LazyWrapper.prototype[methodName] = function() {\n        return this[takeName](1).value()[0];\n      };\n    });\n\n    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.\n    arrayEach(['initial', 'tail'], function(methodName, index) {\n      var dropName = 'drop' + (index ? '' : 'Right');\n\n      LazyWrapper.prototype[methodName] = function() {\n        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);\n      };\n    });\n\n    LazyWrapper.prototype.compact = function() {\n      return this.filter(identity);\n    };\n\n    LazyWrapper.prototype.find = function(predicate) {\n      return this.filter(predicate).head();\n    };\n\n    LazyWrapper.prototype.findLast = function(predicate) {\n      return this.reverse().find(predicate);\n    };\n\n    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {\n      if (typeof path == 'function') {\n        return new LazyWrapper(this);\n      }\n      return this.map(function(value) {\n        return baseInvoke(value, path, args);\n      });\n    });\n\n    LazyWrapper.prototype.reject = function(predicate) {\n      return this.filter(negate(getIteratee(predicate)));\n    };\n\n    LazyWrapper.prototype.slice = function(start, end) {\n      start = toInteger(start);\n\n      var result = this;\n      if (result.__filtered__ && (start > 0 || end < 0)) {\n        return new LazyWrapper(result);\n      }\n      if (start < 0) {\n        result = result.takeRight(-start);\n      } else if (start) {\n        result = result.drop(start);\n      }\n      if (end !== undefined) {\n        end = toInteger(end);\n        result = end < 0 ? result.dropRight(-end) : result.take(end - start);\n      }\n      return result;\n    };\n\n    LazyWrapper.prototype.takeRightWhile = function(predicate) {\n      return this.reverse().takeWhile(predicate).reverse();\n    };\n\n    LazyWrapper.prototype.toArray = function() {\n      return this.take(MAX_ARRAY_LENGTH);\n    };\n\n    // Add `LazyWrapper` methods to `lodash.prototype`.\n    baseForOwn(LazyWrapper.prototype, function(func, methodName) {\n      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),\n          isTaker = /^(?:head|last)$/.test(methodName),\n          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],\n          retUnwrapped = isTaker || /^find/.test(methodName);\n\n      if (!lodashFunc) {\n        return;\n      }\n      lodash.prototype[methodName] = function() {\n        var value = this.__wrapped__,\n            args = isTaker ? [1] : arguments,\n            isLazy = value instanceof LazyWrapper,\n            iteratee = args[0],\n            useLazy = isLazy || isArray(value);\n\n        var interceptor = function(value) {\n          var result = lodashFunc.apply(lodash, arrayPush([value], args));\n          return (isTaker && chainAll) ? result[0] : result;\n        };\n\n        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {\n          // Avoid lazy use if the iteratee has a \"length\" value other than `1`.\n          isLazy = useLazy = false;\n        }\n        var chainAll = this.__chain__,\n            isHybrid = !!this.__actions__.length,\n            isUnwrapped = retUnwrapped && !chainAll,\n            onlyLazy = isLazy && !isHybrid;\n\n        if (!retUnwrapped && useLazy) {\n          value = onlyLazy ? value : new LazyWrapper(this);\n          var result = func.apply(value, args);\n          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });\n          return new LodashWrapper(result, chainAll);\n        }\n        if (isUnwrapped && onlyLazy) {\n          return func.apply(this, args);\n        }\n        result = this.thru(interceptor);\n        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;\n      };\n    });\n\n    // Add `Array` methods to `lodash.prototype`.\n    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {\n      var func = arrayProto[methodName],\n          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',\n          retUnwrapped = /^(?:pop|shift)$/.test(methodName);\n\n      lodash.prototype[methodName] = function() {\n        var args = arguments;\n        if (retUnwrapped && !this.__chain__) {\n          var value = this.value();\n          return func.apply(isArray(value) ? value : [], args);\n        }\n        return this[chainName](function(value) {\n          return func.apply(isArray(value) ? value : [], args);\n        });\n      };\n    });\n\n    // Map minified method names to their real names.\n    baseForOwn(LazyWrapper.prototype, function(func, methodName) {\n      var lodashFunc = lodash[methodName];\n      if (lodashFunc) {\n        var key = (lodashFunc.name + ''),\n            names = realNames[key] || (realNames[key] = []);\n\n        names.push({ 'name': methodName, 'func': lodashFunc });\n      }\n    });\n\n    realNames[createHybrid(undefined, BIND_KEY_FLAG).name] = [{\n      'name': 'wrapper',\n      'func': undefined\n    }];\n\n    // Add methods to `LazyWrapper`.\n    LazyWrapper.prototype.clone = lazyClone;\n    LazyWrapper.prototype.reverse = lazyReverse;\n    LazyWrapper.prototype.value = lazyValue;\n\n    // Add chain sequence methods to the `lodash` wrapper.\n    lodash.prototype.at = wrapperAt;\n    lodash.prototype.chain = wrapperChain;\n    lodash.prototype.commit = wrapperCommit;\n    lodash.prototype.next = wrapperNext;\n    lodash.prototype.plant = wrapperPlant;\n    lodash.prototype.reverse = wrapperReverse;\n    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;\n\n    // Add lazy aliases.\n    lodash.prototype.first = lodash.prototype.head;\n\n    if (symIterator) {\n      lodash.prototype[symIterator] = wrapperToIterator;\n    }\n    return lodash;\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  // Export lodash.\n  var _ = runInContext();\n\n  // Some AMD build optimizers, like r.js, check for condition patterns like:\n  if (true) {\n    // Expose Lodash on the global object to prevent errors when Lodash is\n    // loaded by a script tag in the presence of an AMD loader.\n    // See http://requirejs.org/docs/errors.html#mismatch for more details.\n    // Use `_.noConflict` to remove Lodash from the global object.\n    root._ = _;\n\n    // Define as an anonymous module so, through path mapping, it can be\n    // referenced as the \"underscore\" module.\n    !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {\n      return _;\n    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  }\n  // Check for `exports` after `define` in case a build optimizer adds it.\n  else if (freeModule) {\n    // Export for Node.js.\n    (freeModule.exports = _)._ = _;\n    // Export for CommonJS support.\n    freeExports._ = _;\n  }\n  else {\n    // Export to the global object.\n    root._ = _;\n  }\n}.call(this));\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0), __webpack_require__(19)(module)))\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n'use strict';\n\nvar has = Object.prototype.hasOwnProperty\n  , prefix = '~';\n\n/**\n * Constructor to create a storage for our `EE` objects.\n * An `Events` instance is a plain object whose properties are event names.\n *\n * @constructor\n * @api private\n */\nfunction Events() {}\n\n//\n// We try to not inherit from `Object.prototype`. In some engines creating an\n// instance in this way is faster than calling `Object.create(null)` directly.\n// If `Object.create(null)` is not supported we prefix the event names with a\n// character to make sure that the built-in object properties are not\n// overridden or used as an attack vector.\n//\nif (Object.create) {\n  Events.prototype = Object.create(null);\n\n  //\n  // This hack is needed because the `__proto__` property is still inherited in\n  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.\n  //\n  if (!new Events().__proto__) prefix = false;\n}\n\n/**\n * Representation of a single event listener.\n *\n * @param {Function} fn The listener function.\n * @param {Mixed} context The context to invoke the listener with.\n * @param {Boolean} [once=false] Specify if the listener is a one-time listener.\n * @constructor\n * @api private\n */\nfunction EE(fn, context, once) {\n  this.fn = fn;\n  this.context = context;\n  this.once = once || false;\n}\n\n/**\n * Minimal `EventEmitter` interface that is molded against the Node.js\n * `EventEmitter` interface.\n *\n * @constructor\n * @api public\n */\nfunction EventEmitter() {\n  this._events = new Events();\n  this._eventsCount = 0;\n}\n\n/**\n * Return an array listing the events for which the emitter has registered\n * listeners.\n *\n * @returns {Array}\n * @api public\n */\nEventEmitter.prototype.eventNames = function eventNames() {\n  var names = []\n    , events\n    , name;\n\n  if (this._eventsCount === 0) return names;\n\n  for (name in (events = this._events)) {\n    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);\n  }\n\n  if (Object.getOwnPropertySymbols) {\n    return names.concat(Object.getOwnPropertySymbols(events));\n  }\n\n  return names;\n};\n\n/**\n * Return the listeners registered for a given event.\n *\n * @param {String|Symbol} event The event name.\n * @param {Boolean} exists Only check if there are listeners.\n * @returns {Array|Boolean}\n * @api public\n */\nEventEmitter.prototype.listeners = function listeners(event, exists) {\n  var evt = prefix ? prefix + event : event\n    , available = this._events[evt];\n\n  if (exists) return !!available;\n  if (!available) return [];\n  if (available.fn) return [available.fn];\n\n  for (var i = 0, l = available.length, ee = new Array(l); i < l; i++) {\n    ee[i] = available[i].fn;\n  }\n\n  return ee;\n};\n\n/**\n * Calls each of the listeners registered for a given event.\n *\n * @param {String|Symbol} event The event name.\n * @returns {Boolean} `true` if the event had listeners, else `false`.\n * @api public\n */\nEventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return false;\n\n  var listeners = this._events[evt]\n    , len = arguments.length\n    , args\n    , i;\n\n  if (listeners.fn) {\n    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);\n\n    switch (len) {\n      case 1: return listeners.fn.call(listeners.context), true;\n      case 2: return listeners.fn.call(listeners.context, a1), true;\n      case 3: return listeners.fn.call(listeners.context, a1, a2), true;\n      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;\n      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n    }\n\n    for (i = 1, args = new Array(len -1); i < len; i++) {\n      args[i - 1] = arguments[i];\n    }\n\n    listeners.fn.apply(listeners.context, args);\n  } else {\n    var length = listeners.length\n      , j;\n\n    for (i = 0; i < length; i++) {\n      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);\n\n      switch (len) {\n        case 1: listeners[i].fn.call(listeners[i].context); break;\n        case 2: listeners[i].fn.call(listeners[i].context, a1); break;\n        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;\n        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;\n        default:\n          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {\n            args[j - 1] = arguments[j];\n          }\n\n          listeners[i].fn.apply(listeners[i].context, args);\n      }\n    }\n  }\n\n  return true;\n};\n\n/**\n * Add a listener for a given event.\n *\n * @param {String|Symbol} event The event name.\n * @param {Function} fn The listener function.\n * @param {Mixed} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @api public\n */\nEventEmitter.prototype.on = function on(event, fn, context) {\n  var listener = new EE(fn, context || this)\n    , evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) this._events[evt] = listener, this._eventsCount++;\n  else if (!this._events[evt].fn) this._events[evt].push(listener);\n  else this._events[evt] = [this._events[evt], listener];\n\n  return this;\n};\n\n/**\n * Add a one-time listener for a given event.\n *\n * @param {String|Symbol} event The event name.\n * @param {Function} fn The listener function.\n * @param {Mixed} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @api public\n */\nEventEmitter.prototype.once = function once(event, fn, context) {\n  var listener = new EE(fn, context || this, true)\n    , evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) this._events[evt] = listener, this._eventsCount++;\n  else if (!this._events[evt].fn) this._events[evt].push(listener);\n  else this._events[evt] = [this._events[evt], listener];\n\n  return this;\n};\n\n/**\n * Remove the listeners of a given event.\n *\n * @param {String|Symbol} event The event name.\n * @param {Function} fn Only remove the listeners that match this function.\n * @param {Mixed} context Only remove the listeners that have this context.\n * @param {Boolean} once Only remove one-time listeners.\n * @returns {EventEmitter} `this`.\n * @api public\n */\nEventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return this;\n  if (!fn) {\n    if (--this._eventsCount === 0) this._events = new Events();\n    else delete this._events[evt];\n    return this;\n  }\n\n  var listeners = this._events[evt];\n\n  if (listeners.fn) {\n    if (\n         listeners.fn === fn\n      && (!once || listeners.once)\n      && (!context || listeners.context === context)\n    ) {\n      if (--this._eventsCount === 0) this._events = new Events();\n      else delete this._events[evt];\n    }\n  } else {\n    for (var i = 0, events = [], length = listeners.length; i < length; i++) {\n      if (\n           listeners[i].fn !== fn\n        || (once && !listeners[i].once)\n        || (context && listeners[i].context !== context)\n      ) {\n        events.push(listeners[i]);\n      }\n    }\n\n    //\n    // Reset the array, or remove it completely if we have no more listeners.\n    //\n    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;\n    else if (--this._eventsCount === 0) this._events = new Events();\n    else delete this._events[evt];\n  }\n\n  return this;\n};\n\n/**\n * Remove all listeners, or those of the specified event.\n *\n * @param {String|Symbol} [event] The event name.\n * @returns {EventEmitter} `this`.\n * @api public\n */\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n  var evt;\n\n  if (event) {\n    evt = prefix ? prefix + event : event;\n    if (this._events[evt]) {\n      if (--this._eventsCount === 0) this._events = new Events();\n      else delete this._events[evt];\n    }\n  } else {\n    this._events = new Events();\n    this._eventsCount = 0;\n  }\n\n  return this;\n};\n\n//\n// Alias methods names because people roll like that.\n//\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n//\n// This function doesn't apply anymore.\n//\nEventEmitter.prototype.setMaxListeners = function setMaxListeners() {\n  return this;\n};\n\n//\n// Expose the prefix.\n//\nEventEmitter.prefixed = prefix;\n\n//\n// Allow `EventEmitter` to be imported as module namespace.\n//\nEventEmitter.EventEmitter = EventEmitter;\n\n//\n// Expose the module.\n//\nif (true) {\n  module.exports = EventEmitter;\n}\n\n\n/***/ },\n/* 4 */\n/***/ function(module, exports) {\n\n// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n/***/ },\n/* 5 */,\n/* 6 */,\n/* 7 */,\n/* 8 */,\n/* 9 */,\n/* 10 */,\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(process, global) {var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/*\n* Title: WebHamsters\n* Description: Javascript library to add multi-threading support to javascript by exploiting concurrent web workers\n* Author: Austin K. Smith\n* Contact: austin@asmithdev.com\n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com\n* License: Artistic License 2.0\n*/\n\nvar hamsters = {\n  version: '3.9',\n  debug: false,\n  cache: false,\n  persistence: true,\n  maxThreads: navigator.hardwareConcurrency || 4,\n  tools: {},\n  wheel: {\n    env: {\n      legacy: false,\n      node: false,\n      shell: false,\n      worker: false,\n      browser: false,\n      ie10: false,\n      transferrable: true\n    },\n    queue: {\n      running: [],\n      pending: []\n    },\n    hamsters: [],\n    tasks: [],\n    errors: [],\n    uri: null\n  }\n};\n\n/**\n * @description: Initializes and sets up library functionality\n * @return\n */\n(function () {\n  \"use strict\";\n\n  /**\n   * @description: Detect Internet Explorer by Version IE10 and below\n   * @method isIE\n   * @param {integer} version\n   * @return CallExpression\n   */\n\n  var isIE = function isIE(version) {\n    return new RegExp('msie' + (!isNaN(version) ? '\\\\s' + version : ''), 'i').test(navigator.userAgent);\n  };\n\n  /**\n   * Description\n   * @description: Detect support for web workers\n   * @method setupEnv\n   * @return\n   */\n  var setupEnv = function setupEnv(callback) {\n    hamsters.wheel.env.browser = (typeof window === 'undefined' ? 'undefined' : _typeof(window)) === \"object\";\n    hamsters.wheel.env.worker = typeof importScripts === \"function\";\n    hamsters.wheel.env.node = (typeof process === 'undefined' ? 'undefined' : _typeof(process)) === \"object\" && \"function\" === \"function\" && !hamsters.wheel.env.browser && !hamsters.wheel.env.worker && !hamsters.wheel.env.reactNative;\n    hamsters.wheel.env.reactNative = !hamsters.wheel.env.node && (typeof global === 'undefined' ? 'undefined' : _typeof(global)) === 'object';\n    hamsters.wheel.env.shell = !hamsters.wheel.env.browser && !hamsters.wheel.env.node && !hamsters.wheel.env.worker && !hamsters.wheel.env.reactNative;\n    if (hamsters.wheel.env.reactNative || hamsters.wheel.env.node) {\n      global.self = global;\n    }\n    if (hamsters.wheel.env.browser && !hamsters.wheel.env.worker) {\n      if (isIE(10)) {\n        try {\n          var hamster = new Worker('common/wheel.min.js');\n          hamster.terminate();\n          hamsters.wheel.env.ie10 = true;\n        } catch (e) {\n          hamsters.wheel.env.legacy = true;\n        }\n      }\n      if (!self.Worker || navigator.userAgent.indexOf('Kindle/3.0') !== -1 || navigator.userAgent.indexOf('Mobile/8F190') !== -1 || navigator.userAgent.indexOf('IEMobile') !== -1) {\n        hamsters.wheel.env.legacy = true;\n      } else if (navigator.userAgent.toLowerCase().indexOf('firefox') !== -1) {\n        if (hamsters.maxThreads > 20) {\n          hamsters.maxThreads = 20;\n        }\n      }\n    }\n    if (hamsters.wheel.env.worker) {\n      try {\n        hamsters.wheel.uri = self.URL.createObjectURL(createBlob('(' + String(giveHamsterWork(true)) + '());'));\n        var SharedHamster = new SharedWorker(hamsters.wheel.uri, 'SharedHamsterWheel');\n      } catch (e) {\n        hamsters.wheel.env.legacy = true;\n      }\n    }\n    if (hamsters.wheel.env.shell) {\n      hamsters.wheel.env.legacy = true;\n    }\n    //Check for transferrable object support\n    if (!Uint8Array) {\n      hamsters.wheel.env.transferrable = false;\n    }\n    callback(hamsters.wheel.env.legacy);\n  };\n\n  /**\n   * @description: Method for checking wheel error log\n   * @method checkErrors\n   * @return ObjectExpression\n   */\n  hamsters.tools.checkErrors = function () {\n    return {\n      msg: 'There are currently ' + hamsters.wheel.errors.length + ' errors captured in the wheel',\n      total: hamsters.wheel.errors.length,\n      errors: hamsters.wheel.errors\n    };\n  };\n\n  /**\n   * @description: Splits an array into equal sized subarrays for individual workers\n   * @constructor\n   * @method splitArray\n   * @param {array} array - incoming array to be split\n   * @param {integer} n - total subarrays  \n   * @return ArrayExpression\n   */\n  hamsters.tools.splitArray = function (array, n) {\n    var i = 0;\n    var tasks = [];\n    var size = Math.ceil(array.length / n);\n    if (array.slice) {\n      while (i < array.length) {\n        tasks.push(array.slice(i, i += size));\n      }\n    } else {\n      while (i < array.length) {\n        tasks.push(array.subarray(i, i += size));\n      }\n    }\n    return tasks;\n  };\n\n  /**\n   * @description: Abstracts for loop usage\n   * @constructor\n   * @method for\n   * @param {object} input - input params\n   * @param {function} callback - callback when output ready\n   * @return \n   */\n  hamsters.tools.loop = function (input, callback) {\n    if (!input.array) {\n      console.error('Missing data array');\n      return;\n    }\n    var threads = input.threads || 1;\n    if (!hamsters.wheel.env.legacy) {\n      input.operator = String(input.operator);\n      if (!hamsters.wheel.env.worker) {\n        input.operator = input.operator.substring(input.operator.indexOf(\"{\") + 1, input.operator.length - 1);\n      }\n    }\n    var params = {\n      run: input.operator,\n      init: input.startIndex || 0,\n      array: input.array,\n      incrementBy: input.incrementBy || 1,\n      dataType: input.dataType || null,\n      worker: hamsters.wheel.env.worker\n    };\n    if (threads === 1) {\n      params.limit = input.limit || input.array.length;\n    } else {\n      params.limit = 'compute';\n    }\n    hamsters.run(params, function () {\n      if (typeof self.params.run === 'string') {\n        if (!self.params.worker) {\n          self.operator = new Function(self.params.run);\n        } else {\n          self.operator = eval(\"(\" + self.params.run + \")\");\n        }\n      } else {\n        self.operator = self.params.run;\n      }\n      if (self.params.limit === 'compute') {\n        self.params.limit = self.params.array.length;\n      }\n      var i = 0;\n      for (i = self.params.init; i < self.params.limit; i += self.params.incrementBy) {\n        rtn.data.push(self.operator(self.params.array[i]));\n      }\n    }, function (output) {\n      callback(output);\n    }, threads, true, input.dataType);\n  };\n\n  /**\n   * @description: Parses a json string in a background thread\n   * @constructor\n   * @method parseJson\n   * @param {string} string - json string object\n   * @param {function} callback - callback when output ready\n   * @return \n   */\n  hamsters.tools.parseJson = function (string, callback) {\n    hamsters.run({ input: string }, function () {\n      rtn.data.push(JSON.parse(params.input));\n    }, function (output) {\n      callback(output[0]);\n    }, 1, true);\n  };\n\n  /**\n   * @description: Stringifies a json object in a background thread\n   * @constructor\n   * @method parseJson\n   * @param {object} json - json object\n   * @param {function} callback - callback when output ready\n   * @return \n   */\n  hamsters.tools.stringifyJson = function (json, callback) {\n    hamsters.run({ input: json }, function () {\n      rtn.data.push(JSON.stringify(params.input));\n    }, function (output) {\n      callback(output[0]);\n    }, 1, true);\n  };\n\n  /**\n   * @description: Generates a worker which generates an array of random numbers for testing\n   * @constructor\n   * @function randomArray\n   * @method randomArray\n   * @param {integer} count - array size\n   * @param {function} callback - callback when array ready\n   * @return \n   */\n  hamsters.tools.randomArray = function (count, callback) {\n    if (!count || !callback) {\n      hamsters.wheel.errors.push({\n        msg: 'Unable to generate random array, missing required params'\n      });\n      return;\n    }\n    var params = {\n      count: count\n    };\n    hamsters.run(params, function () {\n      var total = params.count;\n      var i = 0;\n      while (i < total) {\n        rtn.data[rtn.data.length] = Math.round(Math.random() * (100 - 1) + 1);\n        i += 1;\n      }\n    }, function (output) {\n      callback(output);\n    }, 1, false, null, false);\n  };\n\n  /**\n  * Description\n  * @method compareArrays\n  * @param {array} array1\n  * @param {array} array2\n  * @return CallExpression\n  */\n  hamsters.wheel.compareArrays = function (array1, array2) {\n    if (!array1 && !array2) {\n      return true;\n    }\n    if (array1.length !== array2.length) {\n      return false;\n    }\n    return array1.every(function (el, i) {\n      return el === array2[i];\n    });\n  };\n\n  /**\n   * Description\n   * @method checkCache\n   * @param {string} fn\n   * @param {array} input\n   * @param {string} dataType\n   * @return \n  */\n  hamsters.wheel.checkCache = function (fn, input, dataType) {\n    var item = void 0;\n    for (var i = 0, len = sessionStorage.length; i < len; i++) {\n      item = eval('(' + sessionStorage[i] + ')');\n      var equals = hamsters.wheel.compareArrays(item.input, input);\n      if (item && item.func === fn && equals && !item.dataType && !dataType) {\n        return item.output;\n      } else if (item && item.func === fn && equals && item.dataType === dataType) {\n        return hamsters.wheel.processDataType(item.dataType, item.output);\n      }\n    }\n  };\n\n  hamsters.wheel.memoize = function (fn, inputArray, output, dataType) {\n    if (hamsters.wheel.checkCache(fn, input, dataType)) {\n      return;\n    }\n    try {\n      sessionStorage.setItem(sessionStorage.length, JSON.stringify({ 'func': fn, 'input': inputArray, 'output': output, 'dataType': dataType }));\n    } catch (eve) {\n      if (eve.name === 'QuotaExceededError') {\n        sessionStorage.clear();\n        try {\n          sessionStorage.setItem(sessionStorage.length, JSON.stringify({ 'func': fn, 'input': inputArray, 'output': output, 'dataType': dataType }));\n        } catch (e) {\n          //Do nothing, can't cache this result..too large\n          return;\n        }\n      }\n    }\n  };\n\n  /**\n    * @description: Setups library objects for web worker use with library boilerplate\n    * @constructor\n    * @function spawnHamsters\n    * @method spawnHamsters\n    * @return \n  */\n  var spawnHamsters = function spawnHamsters() {\n    if (hamsters.wheel.env.browser) {\n      hamsters.wheel.uri = self.URL.createObjectURL(createBlob('(' + String(giveHamsterWork(false)) + '());'));\n    }\n    if (hamsters.persistence) {\n      var i = hamsters.maxThreads;\n      for (i; i > 0; i--) {\n        if (hamsters.wheel.env.node || hamsters.wheel.env.ie10) {\n          hamsters.wheel.hamsters.push(new Worker('common/wheel.min.js'));\n        } else if (hamsters.wheel.env.worker) {\n          hamsters.wheel.hamsters.push(new SharedWorker(hamsters.wheel.uri, 'SharedHamsterWheel'));\n        } else {\n          hamsters.wheel.hamsters.push(new Worker(hamsters.wheel.uri));\n        }\n      }\n    }\n  };\n\n  /**\n    * @description: Creates boiler plate logic for worker thread\n    * @constructor\n    * @method giveHamsterWork\n    * @return work\n  */\n  var giveHamsterWork = function giveHamsterWork(worker) {\n    /**\n     * Description\n     * @method processDataType\n     * @param {string} dataType\n     * @param {array} buffer\n     * @return arr\n     */\n    /**\n     * Description\n     * @method onmessage\n     * @param {object} e\n     * @return \n     */\n    if (worker) {\n      return function () {\n        self.processDataType = function (dataType, buffer) {\n          var types = {\n            'uint32': Uint32Array,\n            'uint16': Uint16Array,\n            'uint8': Uint8Array,\n            'uint8clamped': Uint8ClampedArray,\n            'int32': Int32Array,\n            'int16': Int16Array,\n            'int8': Int8Array,\n            'float32': Float32Array,\n            'float64': Float64Array\n          };\n          if (!types[dataType]) {\n            return dataType;\n          }\n          return new types[dataType](buffer);\n        };\n        self.addEventListener(\"connect\", function (e) {\n          var port = e.ports[0];\n          port.start();\n          port.addEventListener(\"message\", function (e) {\n            self.rtn = {\n              success: true,\n              data: []\n            };\n            self.params = e.data;\n            self.fn = eval(\"(\" + params.fn + \")\");\n            if (fn) {\n              self.fn();\n            }\n            if (self.params.dataType && self.params.dataType != \"na\") {\n              self.rtn.data = self.processDataType(self.params.dataType, self.rtn.data);\n              self.rtn.dataType = self.params.dataType;\n            }\n            port.postMessage({\n              results: self.rtn\n            });\n          }, false);\n        }, false);\n      };\n    }\n    /**\n     * Description\n     * @method onmessage\n     * @param {object} e\n     * @return \n     */\n    return function () {\n      self.processDataType = function (dataType, buffer) {\n        var types = {\n          'uint32': Uint32Array,\n          'uint16': Uint16Array,\n          'uint8': Uint8Array,\n          'uint8clamped': Uint8ClampedArray,\n          'int32': Int32Array,\n          'int16': Int16Array,\n          'int8': Int8Array,\n          'float32': Float32Array,\n          'float64': Float64Array\n        };\n        if (!types[dataType]) {\n          return dataType;\n        }\n        return new types[dataType](buffer);\n      };\n      self.onmessage = function (e) {\n        self.rtn = {\n          success: true,\n          data: []\n        };\n        self.params = e.data;\n        self.fn = new Function(self.params.fn);\n        if (self.fn) {\n          self.fn();\n        }\n        if (self.params.dataType && self.params.dataType != \"na\") {\n          self.rtn.data = self.processDataType(self.params.dataType, self.rtn.data);\n          self.rtn.dataType = self.params.dataType;\n          self.postMessage({\n            results: self.rtn\n          }, [rtn.data.buffer]);\n        } else {\n          self.postMessage({\n            results: self.rtn\n          });\n        }\n      };\n    };\n  };\n\n  /**\n    * @description: Sorts an array of objects based on incoming property param\n    * @constructor\n    * @method sort\n    * @param {string} property - property to sort by\n    * @return FunctionExpression\n  */\n  hamsters.wheel.sort = function (arr, order) {\n    if (order === 'desc') {\n      return Array.prototype.sort.call(arr, function (a, b) {\n        return b - a;\n      });\n    }\n    if (order === 'asc') {\n      return Array.prototype.sort.call(arr, function (a, b) {\n        return a - b;\n      });\n    }\n    if (order === 'ascAlpha') {\n      return arr.sort();\n    }\n    if (order === 'descAlpha') {\n      return arr.reverse();\n    }\n  };\n\n  /**\n    * @description: Takes an incoming sequential function and automatically splits the work across as many defined threads for paralell execution\n    * @constructor\n    * @method run\n    * @param {object} params - Incoming params object for task\n    * @param {function} fn - Sequential function to execute\n    * @param {function} callback - Task callback when all threads complete\n    * @param {integer} workers - Total number of threads to use\n    * @param {boolean} aggregate - Aggregate individual thread outputs into final array (yes/no)\n    * @param {string} dataType - Optional typedArray data type for transferrable object support\n    * @param {boolean} memoize - Memoize final result (yes/no)\n    * @param {string} order - Optional sort direction param \n    * @return \n  */\n  hamsters.run = function (params, fn, callback, workers, aggregate, dataType, memoize, order) {\n    if (!params || !fn) {\n      return 'Error processing for loop, missing params or function';\n    }\n    workers = workers || 1;\n    var task = hamsters.wheel.newTask(hamsters.wheel.tasks.length, workers, order, dataType, fn, callback);\n    if (dataType) {\n      dataType = dataType.toLowerCase();\n    }\n    if (hamsters.cache && memoize) {\n      var _ret = function () {\n        var result = hamsters.wheel.checkCache(fn, task.input, dataType);\n        if (result && callback) {\n          setTimeout(function () {\n            hamsters.wheel.tasks[taskid] = null; //Clean up our task, not needed any longer\n            callback(result);\n          }, 4);\n          return {\n            v: void 0\n          };\n        }\n      }();\n\n      if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === \"object\") return _ret.v;\n    } else {\n      hamsters.wheel.work(task, params, fn, callback, aggregate, dataType, memoize, order);\n    }\n  };\n\n  hamsters.wheel.work = function (task, params, fn, callback, aggregate, dataType, memoize, order) {\n    var workArray = params.array || null;\n    if (params.array && task.threads !== 1) {\n      workArray = hamsters.tools.splitArray(params.array, task.threads); //Divide our array into equal array sizes\n    }\n    if (!hamsters.wheel.env.legacy) {\n      params.fn = String(fn);\n      if (!hamsters.wheel.env.worker) {\n        //Truncate function string so we can use new Function call instead of eval\n        params.fn = params.fn.substring(params.fn.indexOf(\"{\") + 1, params.fn.length - 1);\n      }\n    } else {\n      params.fn = fn;\n    }\n    var food = {};\n    var key = void 0;\n    for (key in params) {\n      if (params.hasOwnProperty(key) && key !== 'array') {\n        food[key] = params[key];\n      }\n    }\n    food.dataType = dataType;\n    var i = 0;\n    while (i < task.threads) {\n      if (workArray && task.threads !== 1) {\n        hamsters.wheel.newWheel(workArray[i], food, aggregate, callback, task, task.count, null, memoize);\n      } else {\n        hamsters.wheel.newWheel(workArray, food, aggregate, callback, task, task.count, null, memoize);\n      }\n      i += 1;\n    }\n  };\n\n  /**\n    * @description: Registers new task for runtime\n    * @constructor\n    * @method newTask\n    * @param {integer} taskid - ID to use for task generation\n    * @param {integer} workers - Number of threads to spawn for this task\n    * @param {string}  order - Optional sorting order param\n    * @param {string}  dataType - Optional dataType param\n    * @param {function} fn - Function to run for this task\n    * @param {function} cb - Task callback for output result\n    * @return \n  */\n  hamsters.wheel.newTask = function (taskid, workers, order, dataType, fn, cb) {\n    hamsters.wheel.tasks.push({\n      id: taskid,\n      workers: [],\n      count: 0,\n      threads: workers,\n      input: [],\n      dataType: dataType || null,\n      fn: fn,\n      output: [],\n      order: order || null,\n      callback: cb\n    });\n    return hamsters.wheel.tasks[taskid];\n  };\n\n  /**\n    * @description: Tracks thread input for memoization\n    * @constructor\n    * @method trackInput\n    * @param {array} inputArray - Incoming array param\n    * @param {string} threadid - Current worker threadid\n    * @param {object} task - Current task to track\n    * @param {object} hamsterfood - Incoming task params\n    * @return \n  */\n  hamsters.wheel.trackInput = function (inputArray, threadid, task, hamsterfood) {\n    task.input.push({\n      input: inputArray,\n      workerid: threadid,\n      taskid: task.id,\n      params: hamsterfood,\n      start: new Date().getTime()\n    });\n  };\n\n  hamsters.wheel.trackThread = function (task, running, id) {\n    task.workers.push(id); //Keep track of threads scoped to current task\n    running.push(id); //Keep track of all currently running threads\n  };\n\n  /**\n    * @description: Adds thread to thread pool for execution when a free thread is available\n    * @constructor\n    * @method poolThread\n    * @param {array} inputArray - Input array\n    * @param {object} hamsterfood - Input params object\n    * @param {string} threadid - task scoped worker thread id\n    * @param {function} callback - Callback function to return response\n    * @param {function} task - Work to be executed inside thread\n    * @param {boolean} agg - Aggregate final result (yes/no)\n    * @param {boolean} memoize - Memoize final result (yes/no)\n    * @return \n  */\n  hamsters.wheel.poolThread = function (inputArray, hamsterfood, threadid, cb, task, agg, memoize) {\n    hamsters.wheel.queue.pending.push({\n      memoize: memoize,\n      input: inputArray,\n      params: hamsterfood,\n      workerid: threadid,\n      callback: cb,\n      task: task,\n      aggregate: agg\n    });\n  };\n\n  /**\n    * @description: Simulates threading for execution on devices that don't support workers\n    * @constructor\n    * @method legacyProcessor\n    * @param {object} food - Input params object\n    * @param {array} inputArray - Input array\n    * @param {function} callback - Callback function to return response\n    * @return \n  */\n  hamsters.wheel.legacyProcessor = function (params, inputArray, callback) {\n    setTimeout(function () {\n      self.rtn = {\n        success: true,\n        data: []\n      };\n      self.params = params;\n      self.params.array = inputArray;\n      if (self.params.fn) {\n        self.params.fn();\n        if (self.params.dataType) {\n          self.rtn.data = hamsters.wheel.processDataType(self.params.dataType, self.rtn.data);\n          self.rtn.dataType = self.params.dataType;\n        }\n        callback(self.rtn);\n      } else {\n        self.rtn.success = false;\n        self.rtn.error = 'Missing function';\n        callback(self.rtn);\n      }\n    }, 4); //4ms delay (HTML5 spec minimum), simulate threading\n  };\n\n  /**\n    * @description: Creates dataBlob for worker generation\n    * @constructor\n    * @method createBlob\n    * @param {string} textContent - Web worker boiler plate\n    * @return blob\n  */\n  var createBlob = function createBlob(textContent) {\n    if (!self.Blob) {\n      self.BlobBuilder = self.BlobBuilder || self.WebKitBlobBuilder || self.MozBlobBuilder || self.MSBlobBuilder;\n      var blob = new BlobBuilder();\n      blob.append([textContent], {\n        type: 'application/javascript'\n      });\n      return blob.getBlob();\n    }\n    return new Blob([textContent], {\n      type: 'application/javascript'\n    });\n  };\n\n  /**\n    * @description: Aggregates individual hamster outputs into a single array\n    * @constructor\n    * @method aggregate\n    * @param {array} input - incoming array of subarrays\n    * @param {string} dataType\n    * @return output\n  */\n  hamsters.tools.aggregate = function (input, dataType) {\n    if (!dataType || !hamsters.wheel.env.transferrable) {\n      return input.reduce(function (a, b) {\n        return a.concat(b);\n      });\n    }\n    var i = 0;\n    var len = input.length;\n    var bufferLength = 0;\n    for (i; i < len; i += 1) {\n      bufferLength += input[i].length;\n    }\n    var output = hamsters.wheel.processDataType(dataType, bufferLength);\n    var offset = 0;\n    for (i = 0; i < len; i += 1) {\n      output.set(input[i], offset);\n      offset += input[i].length;\n    }\n    return output;\n  };\n\n  /**\n    * @description: Get our nested output values from each task, return array of subarrays\n    * @constructor\n    * @method getOutput\n    * @param {array} output - incoming task output\n    * @param {boolean} aggregate\n    * @param {string} dataType\n    * @return rtn\n  */\n  hamsters.wheel.getOutput = function (output, aggregate, dataType) {\n    if (aggregate && output.length <= 20) {\n      return hamsters.tools.aggregate(output, dataType);\n    }\n    return output;\n  };\n\n  /**\n    * @description: Process next item in queue\n    * @constructor\n    * @method processQueue\n    * @param {object} hamster - Most recently finished web worker, for reuse\n    * @param {blob} dataBlob\n    * @return \n  */\n  hamsters.wheel.processQueue = function (hamster, item) {\n    if (!item) {\n      return;\n    }\n    hamsters.wheel.newWheel(item.input, item.params, item.aggregate, item.callback, item.task, item.workerid, hamster, item.memoize); //Assign most recently finished thread to queue item\n  };\n\n  /**\n    * @description: Cleans up last running thread\n    * @constructor\n    * @method clean\n    * @param {object} task - Task associated with id\n    * @param {string} id - Most recently finished thread id\n    * @return \n  */\n  hamsters.wheel.clean = function (task, id) {\n    hamsters.wheel.queue.running.splice(hamsters.wheel.queue.running.indexOf(id), 1); //Remove thread from running pool\n    task.workers.splice(task.workers.indexOf(id), 1); //Remove thread from task running pool\n  };\n\n  /**\n    * @description: Handle response from worker thread, setup error handling\n    * @constructor\n    * @method trainHamster\n    * @param {integer} id - global wheel threadid\n    * @param {boolean} aggregate - boolean aggregate individual thread outputs into final array  \n    * @param {function} callback - task callback when all hamsters complete\n    * @param {integer} taskid - global wheel task id\n    * @param {integer} workerid - worker wheel threadid\n    * @param {object} hamster - web worker\n    * @param {blob} dataBlob\n    * @return \n  */\n  hamsters.wheel.trainHamster = function (id, aggregate, callback, task, hamster, memoize) {\n    /**\n      * @description: Runs when a hamster (thread) finishes it's work\n      * @constructor\n      * @method onmessage\n      * @param {object} e - Web Worker event object\n      * @return \n    */\n    var onmessage = function onmessage(e, results) {\n      hamsters.wheel.clean(task, id);\n      results = e.data.results;\n      task.output[id] = results.data;\n      if (hamsters.debug === 'verbose') {\n        console.info('Hamster #' + id + ' finished ' + '@ ' + e.timeStamp);\n      }\n      if (task.workers.length === 0 && task.count === task.threads) {\n        if (task.order) {\n          callback(hamsters.wheel.sort(hamsters.wheel.getOutput(task.output, aggregate, results.dataType), task.order));\n        } else {\n          callback(hamsters.wheel.getOutput(task.output, aggregate, results.dataType));\n        }\n        if (hamsters.debug) {\n          console.info('Execution Complete! Elapsed: ' + (e.timeStamp - task.input[0].start) / 1000 + 's');\n        }\n        hamsters.wheel.tasks[task.id] = null; //Clean up our task, not needed any longer\n        if (hamsters.cache && memoize) {\n          prepareToMemoize(task, aggregate, results);\n        }\n      }\n      if (hamsters.wheel.queue.pending.length !== 0) {\n        hamsters.wheel.processQueue(hamster, hamsters.wheel.queue.pending.shift());\n      } else if (!hamsters.persistence && !hamsters.wheel.env.worker) {\n        hamster.terminate(); //Kill the thread only if no items waiting to run (20-22% performance improvement observed during testing, repurposing threads vs recreating them)\n      }\n    };\n\n    var prepareToMemoize = function prepareToMemoize(task, aggregate, results) {\n      var output = hamsters.wheel.getOutput(task.output, aggregate, results.dataType);\n      if (output && !output.slice) {\n        hamsters.wheel.memoize(task.fn, task.input[0].input, hamsters.wheel.normalizeArray(output), results.dataType);\n      } else {\n        hamsters.wheel.memoize(task.fn, task.input[0].input, hamsters.wheel.getOutput(task.output, aggregate, results.dataType), results.dataType);\n      }\n    };\n\n    /**\n      * @description: Setup error handling\n      * @constructor\n      * @method errorHandler\n      * @param {object} e - Web Worker event object\n      * @return \n    */\n    var onerror = function onerror(e) {\n      if (!hamsters.wheel.env.worker) {\n        hamster.terminate(); //Kill the thread\n      }\n      hamsters.wheel.errors.push({\n        msg: 'Error Hamster #' + id + ': Line ' + e.lineno + ' in ' + e.filename + ': ' + e.message\n      });\n      console.error('Error Hamster #' + id + ': Line ' + e.lineno + ' in ' + e.filename + ': ' + e.message);\n    };\n\n    if (hamsters.wheel.env.worker) {\n      hamster.port.onmessage = onmessage;\n      hamster.port.onerror = onerror;\n    } else {\n      hamster.onmessage = onmessage;\n      hamster.onerror = onerror;\n    }\n  };\n\n  /**\n    * @description: Normalizes typed array into normal array\n    * @constructor\n    * @method normalizeArray\n    * @param {object} input - typedArray input\n    * @return arr\n  */\n  hamsters.wheel.normalizeArray = function (input) {\n    var arr = [];\n    var n = 0;\n    var len = input.length;\n    for (n; n < len; n += 1) {\n      arr.push(input[n]);\n    }\n    return arr;\n  };\n\n  hamsters.wheel.processData = function (dataType, buffer) {\n    var types = {\n      'uint32': Uint32Array,\n      'uint16': Uint16Array,\n      'uint8': Uint8Array,\n      'uint8clamped': Uint8ClampedArray,\n      'int32': Int32Array,\n      'int16': Int16Array,\n      'int8': Int8Array,\n      'float32': Float32Array,\n      'float64': Float64Array\n    };\n    if (!types[dataType]) {\n      return dataType;\n    }\n    return new types[dataType](buffer);\n  };\n\n  /**\n    * @description: Converts array buffer or normal array into a typed array\n    * @constructor\n    * @method processDataType\n    * @param {string} dataType - dataType config param\n    * @param {object} buffer - buffer object or normal array\n    * @return arr\n  */\n  hamsters.wheel.processDataType = function (dataType, buffer) {\n    if (hamsters.wheel.env.transferrable) {\n      return hamsters.wheel.processData(dataType, buffer);\n    }\n    return buffer; //Return normal array if transferrable objects not supported\n  };\n\n  /**\n    * @description: Sends message to worker thread to invoke execution\n    * @constructor\n    * @method feedHamster\n    * @param {object} hamster - web worker\n    * @param {object} food - params object for worker\n    * @param {array} inputArray\n    * @return \n  */\n  hamsters.wheel.feedHamster = function (hamster, food, inputArray) {\n    if (hamsters.wheel.env.worker || hamsters.wheel.env.ie10) {\n      food.array = inputArray;\n      if (hamsters.wheel.env.ie10) {\n        food.ie = true;\n        hamster.postMessage(food);\n      } else {\n        hamster.port.postMessage(food);\n      }\n    } else {\n      var key = void 0,\n          buffers = [];\n      if (inputArray) {\n        if (food.dataType) {\n          //Transferable object transfer if using typed array\n          food.array = hamsters.wheel.processDataType(food.dataType, inputArray);\n        } else {\n          food.array = inputArray;\n        }\n      }\n      for (key in food) {\n        if (food.hasOwnProperty(key) && food[key] && food[key].buffer) {\n          buffers.push(food[key].buffer);\n        }\n      }\n      hamster.postMessage(food, buffers);\n    }\n  };\n\n  /**\n    * @description: Creates new worker thread with body of work to be completed\n    * @constructor\n    * @method newWheel\n    * @param {array} inputArray\n    * @param {object} hamsterfood - incoming params object for worker\n    * @param {boolean} aggregate - boolean aggregate individual thread outputs into final array  \n    * @param {function} callback - task callback when all hamsters complete\n    * @param {integer} taskid - global wheel task id\n    * @param {integer} threadid - global wheel threadid\n    * @param {object} hamster - web worker\n    * @param {blob} dataBlob\n    * @return \n   */\n  setupEnv(function (legacy) {\n    if (legacy) {\n      hamsters.wheel.newWheel = function (inputArray, hamsterfood, aggregate, callback, task, threadid, hamster, memoize) {\n        hamsters.wheel.trackThread(task, hamsters.wheel.queue.running, threadid);\n        if (memoize || hamsters.debug) {\n          hamsters.wheel.trackInput(inputArray, threadid, task, hamsterfood);\n        }\n        hamsters.wheel.legacyProcessor(hamsterfood, inputArray, function (output) {\n          hamsters.wheel.clean(task, threadid);\n          task.output[threadid] = output.data;\n          if (task.workers.length === 0 && task.count === task.threads) {\n            //Task complete get output and return\n            if (hamsters.debug) {\n              console.info('Execution Complete! Elapsed: ' + (new Date().getTime() - task.input[0].start) / 1000 + 's');\n            }\n            callback(hamsters.wheel.getOutput(task.output, aggregate, output.dataType));\n            hamsters.wheel.tasks[task.id] = null; //Clean up our task, not needed any longer\n            if (hamsters.cache && memoize !== false) {\n              if (output.data.length > 0 && !output.dataType) {\n                hamsters.wheel.memoize(task.fn, task.input, output.data, 'na');\n              } else if (output.data.length > 0 && output.dataType) {\n                hamsters.wheel.memoize(task.fn, task.input, hamsters.wheel.normalizeArray(output.data), output.dataType);\n              }\n            }\n          }\n        });\n        task.count += 1; //Thread finished\n        return;\n      };\n    } else {\n      hamsters.wheel.newWheel = function (inputArray, hamsterfood, aggregate, callback, task, threadid, hamster, memoize) {\n        if (hamsters.maxThreads === hamsters.wheel.queue.running.length) {\n          hamsters.wheel.poolThread(inputArray, hamsterfood, threadid, callback, task, aggregate, memoize);\n          return;\n        }\n        if (memoize || hamsters.debug) {\n          hamsters.wheel.trackInput(inputArray, threadid, task, hamsterfood);\n        }\n        if (!hamster) {\n          if (hamsters.persistence) {\n            hamster = hamsters.wheel.hamsters[hamsters.wheel.queue.running.length];\n          } else if (hamsters.wheel.env.node || hamsters.wheel.env.ie10) {\n            hamster = new Worker('common/wheel.min.js');\n          } else if (hamsters.wheel.env.worker) {\n            hamster = new SharedWorker(hamsters.wheel.uri, 'SharedHamsterWheel');\n          } else {\n            hamster = new Worker(hamsters.wheel.uri);\n          }\n        }\n        hamsters.wheel.trainHamster(threadid, aggregate, callback, task, hamster, memoize);\n        hamsters.wheel.trackThread(task, hamsters.wheel.queue.running, threadid);\n        hamsters.wheel.feedHamster(hamster, hamsterfood, inputArray);\n        task.count += 1; //Increment count, thread is running\n        if (hamsters.debug === 'verbose') {\n          console.info('Spawning Hamster #' + threadid + ' @ ' + new Date().getTime());\n        }\n      };\n      spawnHamsters();\n    }\n  });\n})();\n\n/*** EXPORTS FROM exports-loader ***/\nexports[\"hamsters\"] = (hamsters);\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4), __webpack_require__(0)))\n\n/***/ },\n/* 12 */\n/***/ function(module, exports) {\n\n﻿(function () {\n\tvar isCommonJS = typeof module !== 'undefined' && module.exports;\n\tvar isNode = !(typeof window !== 'undefined' && this === window);\n\tvar setImmediate = setImmediate || function (cb) {\n\t\tsetTimeout(cb, 0);\n\t};\n\tvar Worker = isNode ? require(__dirname + '/Worker.js') : self.Worker;\n\tvar URL = typeof self !== 'undefined' ? (self.URL ? self.URL : self.webkitURL) : null;\n\tvar _supports = (isNode || self.Worker) ? true : false; // node always supports parallel\n\n\tfunction extend(from, to) {\n\t\tif (!to) to = {};\n\t\tfor (var i in from) {\n\t\t\tif (to[i] === undefined) to[i] = from[i];\n\t\t}\n\t\treturn to;\n\t}\n\n\tfunction Operation() {\n\t\tthis._callbacks = [];\n\t\tthis._errCallbacks = [];\n\n\t\tthis._resolved = 0;\n\t\tthis._result = null;\n\t}\n\n\tOperation.prototype.resolve = function (err, res) {\n\t\tif (!err) {\n\t\t\tthis._resolved = 1;\n\t\t\tthis._result = res;\n\n\t\t\tfor (var i = 0; i < this._callbacks.length; ++i) {\n\t\t\t\tthis._callbacks[i](res);\n\t\t\t}\n\t\t} else {\n\t\t\tthis._resolved = 2;\n\t\t\tthis._result = err;\n\n\t\t\tfor (var iE = 0; iE < this._errCallbacks.length; ++iE) {\n\t\t\t\tthis._errCallbacks[iE](err);\n\t\t\t}\n\t\t}\n\n\t\tthis._callbacks = [];\n\t\tthis._errCallbacks = [];\n\t};\n\n\tOperation.prototype.then = function (cb, errCb) {\n\t\tif (this._resolved === 1) { // result\n\t\t\tif (cb) {\n\t\t\t\tcb(this._result);\n\t\t\t}\n\n\t\t\treturn;\n\t\t} else if (this._resolved === 2) { // error\n\t\t\tif (errCb) {\n\t\t\t\terrCb(this._result);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tif (cb) {\n\t\t\tthis._callbacks[this._callbacks.length] = cb;\n\t\t}\n\n\t\tif (errCb) {\n\t\t\tthis._errCallbacks[this._errCallbacks.length] = errCb;\n\t\t}\n\t\treturn this;\n\t};\n\n\tvar defaults = {\n\t\tevalPath: isNode ? __dirname + '/eval.js' : null,\n\t\tmaxWorkers: isNode ? require('os').cpus().length : (navigator.hardwareConcurrency || 4),\n\t\tsynchronous: true,\n\t\tenv: {},\n\t\tenvNamespace: 'env'\n\t};\n\n\tfunction Parallel(data, options) {\n\t\tthis.data = data;\n\t\tthis.options = extend(defaults, options);\n\t\tthis.operation = new Operation();\n\t\tthis.operation.resolve(null, this.data);\n\t\tthis.requiredScripts = [];\n\t\tthis.requiredFunctions = [];\n\t}\n\n\t// static method\n\tParallel.isSupported = function () { return _supports; }\n\n\tParallel.prototype.getWorkerSource = function (cb, env) {\n\t\tvar that = this;\n\t\tvar preStr = '';\n\t\tvar i = 0;\n\t\tif (!isNode && this.requiredScripts.length !== 0) {\n\t\t\tpreStr += 'importScripts(\"' + this.requiredScripts.join('\",\"') + '\");\\r\\n';\n\t\t}\n\n\t\tfor (i = 0; i < this.requiredFunctions.length; ++i) {\n\t\t\tif (this.requiredFunctions[i].name) {\n\t\t\t\tpreStr += 'var ' + this.requiredFunctions[i].name + ' = ' + this.requiredFunctions[i].fn.toString() + ';';\n\t\t\t} else {\n\t\t\t\tpreStr += this.requiredFunctions[i].fn.toString();\n\t\t\t}\n\t\t}\n\n\t\tenv = JSON.stringify(env || {});\n\n\t\tvar ns = this.options.envNamespace;\n\n\t\tif (isNode) {\n\t\t\treturn preStr + 'process.on(\"message\", function(e) {global.' + ns + ' = ' + env + ';process.send(JSON.stringify((' + cb.toString() + ')(JSON.parse(e).data)))})';\n\t\t} else {\n\t\t\treturn preStr + 'self.onmessage = function(e) {var global = {}; global.' + ns + ' = ' + env + ';self.postMessage((' + cb.toString() + ')(e.data))}';\n\t\t}\n\t};\n\n\tParallel.prototype.require = function () {\n\t\tvar args = Array.prototype.slice.call(arguments, 0),\n\t\t\tfunc;\n\n\t\tfor (var i = 0; i < args.length; i++) {\n\t\t\tfunc = args[i];\n\n\t\t\tif (typeof func === 'string') {\n\t\t\t\tthis.requiredScripts.push(func);\n\t\t\t} else if (typeof func === 'function') {\n\t\t\t\tthis.requiredFunctions.push({ fn: func });\n\t\t\t} else if (typeof func === 'object') {\n\t\t\t\tthis.requiredFunctions.push(func);\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t};\n\n\tParallel.prototype._spawnWorker = function (cb, env) {\n\t\tvar wrk;\n\t\tvar src = this.getWorkerSource(cb, env);\n\t\tif (isNode) {\n\t\t\twrk = new Worker(this.options.evalPath);\n\t\t\twrk.postMessage(src);\n\t\t} else {\n\t\t\tif (Worker === undefined) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (this.requiredScripts.length !== 0) {\n\t\t\t\t\tif (this.options.evalPath !== null) {\n\t\t\t\t\t\twrk = new Worker(this.options.evalPath);\n\t\t\t\t\t\twrk.postMessage(src);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new Error('Can\\'t use required scripts without eval.js!');\n\t\t\t\t\t}\n\t\t\t\t} else if (!URL) {\n\t\t\t\t\tthrow new Error('Can\\'t create a blob URL in this browser!');\n\t\t\t\t} else {\n\t\t\t\t\tvar blob = new Blob([src], { type: 'text/javascript' });\n\t\t\t\t\tvar url = URL.createObjectURL(blob);\n\n\t\t\t\t\twrk = new Worker(url);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tif (this.options.evalPath !== null) { // blob/url unsupported, cross-origin error\n\t\t\t\t\twrk = new Worker(this.options.evalPath);\n\t\t\t\t\twrk.postMessage(src);\n\t\t\t\t} else {\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn wrk;\n\t};\n\n\tParallel.prototype.spawn = function (cb, env) {\n\t\tvar that = this;\n\t\tvar newOp = new Operation();\n\n\t\tenv = extend(this.options.env, env || {});\n\n\t\tthis.operation.then(function () {\n\t\t\tvar wrk = that._spawnWorker(cb, env);\n\t\t\tif (wrk !== undefined) {\n\t\t\t\twrk.onmessage = function (msg) {\n\t\t\t\t\twrk.terminate();\n\t\t\t\t\tthat.data = msg.data;\n\t\t\t\t\tnewOp.resolve(null, that.data);\n\t\t\t\t};\n\t\t\t\twrk.onerror = function (e) {\n\t\t\t\t\twrk.terminate();\n\t\t\t\t\tnewOp.resolve(e, null);\n\t\t\t\t};\n\t\t\t\twrk.postMessage(that.data);\n\t\t\t} else if (that.options.synchronous) {\n\t\t\t\tsetImmediate(function () {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tthat.data = cb(that.data);\n\t\t\t\t\t\tnewOp.resolve(null, that.data);\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tnewOp.resolve(e, null);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tthrow new Error('Workers do not exist and synchronous operation not allowed!');\n\t\t\t}\n\t\t});\n\t\tthis.operation = newOp;\n\t\treturn this;\n\t};\n\n\tParallel.prototype._spawnMapWorker = function (i, cb, done, env, wrk) {\n\t\tvar that = this;\n\n\t\tif (!wrk) wrk = that._spawnWorker(cb, env);\n\n\t\tif (wrk !== undefined) {\n\t\t\twrk.onmessage = function (msg) {\n\t\t\t\tthat.data[i] = msg.data;\n\t\t\t\tdone(null, wrk);\n\t\t\t};\n\t\t\twrk.onerror = function (e) {\n\t\t\t\twrk.terminate();\n\t\t\t\tdone(e);\n\t\t\t};\n\t\t\twrk.postMessage(that.data[i]);\n\t\t} else if (that.options.synchronous) {\n\t\t\tsetImmediate(function () {\n\t\t\t\tthat.data[i] = cb(that.data[i]);\n\t\t\t\tdone();\n\t\t\t});\n\t\t} else {\n\t\t\tthrow new Error('Workers do not exist and synchronous operation not allowed!');\n\t\t}\n\t};\n\n\tParallel.prototype.map = function (cb, env) {\n\t\tenv = extend(this.options.env, env || {});\n\n\t\tif (!this.data.length) {\n\t\t\treturn this.spawn(cb, env);\n\t\t}\n\n\t\tvar that = this;\n\t\tvar startedOps = 0;\n\t\tvar doneOps = 0;\n\t\tfunction done(err, wrk) {\n\t\t\tif (err) {\n\t\t\t\tnewOp.resolve(err, null);\n\t\t\t} else if (++doneOps === that.data.length) {\n\t\t\t\tnewOp.resolve(null, that.data);\n\t\t\t\tif (wrk) wrk.terminate();\n\t\t\t} else if (startedOps < that.data.length) {\n\t\t\t\tthat._spawnMapWorker(startedOps++, cb, done, env, wrk);\n\t\t\t} else {\n\t\t\t\tif (wrk) wrk.terminate();\n\t\t\t}\n\t\t}\n\n\t\tvar newOp = new Operation();\n\t\tthis.operation.then(function () {\n\t\t\tfor (; startedOps - doneOps < that.options.maxWorkers && startedOps < that.data.length; ++startedOps) {\n\t\t\t\tthat._spawnMapWorker(startedOps, cb, done, env);\n\t\t\t}\n\t\t}, function (err) {\n\t\t\tnewOp.resolve(err, null);\n\t\t});\n\t\tthis.operation = newOp;\n\t\treturn this;\n\t};\n\n\tParallel.prototype._spawnReduceWorker = function (data, cb, done, env, wrk) {\n\t\tvar that = this;\n\t\tif (!wrk) wrk = that._spawnWorker(cb, env);\n\n\t\tif (wrk !== undefined) {\n\t\t\twrk.onmessage = function (msg) {\n\t\t\t\tthat.data[that.data.length] = msg.data;\n\t\t\t\tdone(null, wrk);\n\t\t\t};\n\t\t\twrk.onerror = function (e) {\n\t\t\t\twrk.terminate();\n\t\t\t\tdone(e, null);\n\t\t\t}\n\t\t\twrk.postMessage(data);\n\t\t} else if (that.options.synchronous) {\n\t\t\tsetImmediate(function () {\n\t\t\t\tthat.data[that.data.length] = cb(data);\n\t\t\t\tdone();\n\t\t\t});\n\t\t} else {\n\t\t\tthrow new Error('Workers do not exist and synchronous operation not allowed!');\n\t\t}\n\t};\n\n\tParallel.prototype.reduce = function (cb, env) {\n\t\tenv = extend(this.options.env, env || {});\n\n\t\tif (!this.data.length) {\n\t\t\tthrow new Error('Can\\'t reduce non-array data');\n\t\t}\n\n\t\tvar runningWorkers = 0;\n\t\tvar that = this;\n\t\tfunction done(err, wrk) {\n\t\t\t--runningWorkers;\n\t\t\tif (err) {\n\t\t\t\tnewOp.resolve(err, null);\n\t\t\t} else if (that.data.length === 1 && runningWorkers === 0) {\n\t\t\t\tthat.data = that.data[0];\n\t\t\t\tnewOp.resolve(null, that.data);\n\t\t\t\tif (wrk) wrk.terminate();\n\t\t\t} else if (that.data.length > 1) {\n\t\t\t\t++runningWorkers;\n\t\t\t\tthat._spawnReduceWorker([that.data[0], that.data[1]], cb, done, env, wrk);\n\t\t\t\tthat.data.splice(0, 2);\n\t\t\t} else {\n\t\t\t\tif (wrk) wrk.terminate();\n\t\t\t}\n\t\t}\n\n\t\tvar newOp = new Operation();\n\t\tthis.operation.then(function () {\n\t\t\tif (that.data.length === 1) {\n\t\t\t\tnewOp.resolve(null, that.data[0]);\n\t\t\t} else {\n\t\t\t\tfor (var i = 0; i < that.options.maxWorkers && i < Math.floor(that.data.length / 2) ; ++i) {\n\t\t\t\t\t++runningWorkers;\n\t\t\t\t\tthat._spawnReduceWorker([that.data[i * 2], that.data[i * 2 + 1]], cb, done, env);\n\t\t\t\t}\n\n\t\t\t\tthat.data.splice(0, i * 2);\n\t\t\t}\n\t\t});\n\t\tthis.operation = newOp;\n\t\treturn this;\n\t};\n\n\tParallel.prototype.then = function (cb, errCb) {\n\t\tvar that = this;\n\t\tvar newOp = new Operation();\n\t\terrCb = typeof errCb === 'function' ? errCb : function(){};\n\n\t\tthis.operation.then(function () {\n\t\t\tvar retData;\n\n\t\t\ttry {\n\t\t\t\tif (cb) {\n\t\t\t\t\tretData = cb(that.data);\n\t\t\t\t\tif (retData !== undefined) {\n\t\t\t\t\t\tthat.data = retData;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tnewOp.resolve(null, that.data);\n\t\t\t} catch (e) {\n\t\t\t\tif (errCb) {\n\t\t\t\t\tretData = errCb(e);\n\t\t\t\t\tif (retData !== undefined) {\n\t\t\t\t\t\tthat.data = retData;\n\t\t\t\t\t}\n\n\t\t\t\t\tnewOp.resolve(null, that.data);\n\t\t\t\t} else {\n\t\t\t\t\tnewOp.resolve(null, e);\n\t\t\t\t}\n\t\t\t}\n\t\t}, function (err) {\n\t\t\tif (errCb) {\n\t\t\t\tvar retData = errCb(err);\n\t\t\t\tif (retData !== undefined) {\n\t\t\t\t\tthat.data = retData;\n\t\t\t\t}\n\n\t\t\t\tnewOp.resolve(null, that.data);\n\t\t\t} else {\n\t\t\t\tnewOp.resolve(null, err);\n\t\t\t}\n\t\t});\n\t\tthis.operation = newOp;\n\t\treturn this;\n\t};\n\n\tif (isCommonJS) {\n\t\tmodule.exports = Parallel;\n\t} else {\n\t\tself.Parallel = Parallel;\n\t}\n})();\n\n\n/***/ },\n/* 13 */\n/***/ function(module, exports) {\n\n\"use strict\";\n'use strict';\n\nexports.__esModule = true;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nexports.getConfig = getConfig;\nexports.setConfig = setConfig;\nvar configuration = {\n  basepath: {\n    node: '',\n    web: ''\n  },\n  fallback: {\n    slaveScriptUrl: ''\n  }\n};\n\nfunction configDeepMerge(destObj, srcObj) {\n  var ancestorProps = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n\n  Object.keys(srcObj).forEach(function (propKey) {\n    var srcValue = srcObj[propKey];\n    var ancestorPropsAndThis = ancestorProps.concat([propKey]);\n\n    if ((typeof srcValue === 'undefined' ? 'undefined' : _typeof(srcValue)) === 'object') {\n      if (typeof destObj[propKey] !== 'undefined' && _typeof(destObj[propKey]) !== 'object') {\n        throw new Error('Expected config property not to be an object: ' + ancestorPropsAndThis.join('.'));\n      }\n      configDeepMerge(destObj[propKey], srcValue, ancestorPropsAndThis);\n    } else {\n      if (_typeof(destObj[propKey]) === 'object') {\n        throw new Error('Expected config property to be an object: ' + ancestorPropsAndThis.join('.'));\n      }\n      destObj[propKey] = srcValue;\n    }\n  });\n}\n\nvar config = {\n  get: function get() {\n    return configuration;\n  },\n\n  set: function set(newConfig) {\n    if ((typeof newConfig === 'undefined' ? 'undefined' : _typeof(newConfig)) !== 'object') {\n      throw new Error('Expected config object.');\n    }\n\n    configDeepMerge(configuration, newConfig);\n  }\n};\n\nexports.default = config;\nfunction getConfig() {\n  return config.get();\n}\n\nfunction setConfig() {\n  return config.set.apply(config, arguments);\n}\n//# sourceMappingURL=config.js.map\n\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(setImmediate, clearImmediate) {var nextTick = __webpack_require__(4).nextTick;\nvar apply = Function.prototype.apply;\nvar slice = Array.prototype.slice;\nvar immediateIds = {};\nvar nextImmediateId = 0;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) { timeout.close(); };\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(window, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// That's not how node.js implements it but the exposed api is the same.\nexports.setImmediate = typeof setImmediate === \"function\" ? setImmediate : function(fn) {\n  var id = nextImmediateId++;\n  var args = arguments.length < 2 ? false : slice.call(arguments, 1);\n\n  immediateIds[id] = true;\n\n  nextTick(function onNextTick() {\n    if (immediateIds[id]) {\n      // fn.call() is faster so we optimize for the common use-case\n      // @see http://jsperf.com/call-apply-segu\n      if (args) {\n        fn.apply(null, args);\n      } else {\n        fn.call(null);\n      }\n      // Prevent ids from leaking\n      exports.clearImmediate(id);\n    }\n  });\n\n  return id;\n};\n\nexports.clearImmediate = typeof clearImmediate === \"function\" ? clearImmediate : function(id) {\n  delete immediateIds[id];\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14).setImmediate, __webpack_require__(14).clearImmediate))\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n'use strict';\n\nexports.__esModule = true;\nexports.Pool = exports.defaults = exports.config = undefined;\nexports.spawn = spawn;\n\n__webpack_require__(32);\n\nvar _config = __webpack_require__(13);\n\nvar _config2 = _interopRequireDefault(_config);\n\nvar _defaults = __webpack_require__(18);\n\nvar _defaults2 = _interopRequireDefault(_defaults);\n\nvar _pool = __webpack_require__(37);\n\nvar _pool2 = _interopRequireDefault(_pool);\n\nvar _worker = __webpack_require__(41);\n\nvar _worker2 = _interopRequireDefault(_worker);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.config = _config2.default;\nexports.defaults = _defaults2.default;\nexports.Pool = _pool2.default;\nfunction spawn() {\n  var runnable = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  var importScripts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n  return new _worker2.default(runnable, importScripts);\n}\n\nexports.default = {\n  config: _config2.default,\n  defaults: _defaults2.default,\n  Pool: _pool2.default,\n  spawn: spawn,\n  Worker: _worker2.default\n};\n//# sourceMappingURL=index.js.map\n\n\n/***/ },\n/* 16 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (immutable) */ exports[\"a\"] = toFullQualifiedURL;\nfunction toFullQualifiedURL(url) {\n    var a = document.createElement('a');\n    a.href = url;\n    return a.href;\n}\n\n/***/ },\n/* 17 */\n/***/ function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__.p + \"ba77cfbd141bce566beff7b32effe324.js\";\n\n/***/ },\n/* 18 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(process) {'use strict';\n\n/*eslint-env node*/\n/*\n * This file is only a stub to make './defaults' resolve the './defaults.node' module.\n * Loading the browser defaults into the browser bundle is done in the gulpfile by\n * configuring a browserify override.\n */\n\nif (typeof process !== 'undefined' && 'pid' in process) {\n  module.exports = __webpack_require__(35);\n} else {\n  module.exports = __webpack_require__(34);\n}\n//# sourceMappingURL=defaults.js.map\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))\n\n/***/ },\n/* 19 */\n/***/ function(module, exports) {\n\nmodule.exports = function(module) {\r\n\tif(!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tif(!module.children) module.children = [];\r\n\t\tObject.defineProperty(module, \"loaded\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tconfigurable: false,\r\n\t\t\tget: function() { return module.l; }\r\n\t\t});\r\n\t\tObject.defineProperty(module, \"id\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tconfigurable: false,\r\n\t\t\tget: function() { return module.i; }\r\n\t\t});\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n}\r\n\n\n/***/ },\n/* 20 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_Hamsters_js__ = __webpack_require__(11);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_Hamsters_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_Hamsters_js__);\n/* harmony export (immutable) */ exports[\"a\"] = parallelKnightTours;\n\nfunction knightTours() {\n    var moves = [{ x: -2, y: -1 }, { x: -2, y: 1 }, { x: -1, y: -2 }, { x: -1, y: 2 }, { x: 1, y: -2 }, { x: 1, y: 2 }, { x: 2, y: -1 }, { x: 2, y: 1 }];\n    var boardSize = this.params.boardSize;\n    var numberOfFields = boardSize * boardSize;\n    var board = new Array(boardSize * boardSize);\n    board.fill(0);\n    var results = 0;\n    for (var i = 0; i < this.params.array.length; ++i) {\n        var startPath = this.params.array[i];\n        var stack = startPath.map(function (pos, index) {\n            return { coordinate: pos, n: index + 1 };\n        });\n        for (var index = 0; index < startPath.length - 1; ++index) {\n            var fieldIndex = startPath[index].x * boardSize + startPath[index].y;\n            board[fieldIndex] = index + 1;\n        }\n        while (stack.length > 0) {\n            var _stack = stack[stack.length - 1],\n                coordinate = _stack.coordinate,\n                n = _stack.n;\n\n            var _fieldIndex = coordinate.x * boardSize + coordinate.y;\n            if (board[_fieldIndex] !== 0) {\n                // back tracking\n                board[_fieldIndex] = 0;\n                stack.pop(); // remove current value\n                continue;\n            }\n            // entry\n            if (n === numberOfFields) {\n                ++results;\n                stack.pop();\n                continue;\n            }\n            board[_fieldIndex] = n;\n            for (var _i = 0; _i < moves.length; ++_i) {\n                var move = moves[_i];\n                var successor = { x: coordinate.x + move.x, y: coordinate.y + move.y };\n                // not outside of board and not yet accessed\n                var accessible = successor.x >= 0 && successor.y >= 0 && successor.x < boardSize && successor.y < boardSize && board[successor.x * boardSize + successor.y] === 0;\n                if (accessible) {\n                    stack.push({ coordinate: successor, n: n + 1 });\n                }\n            }\n        }\n    }\n    this.rtn.data.push(results);\n}\nfunction computeTours(start, boardSize) {\n    function successors(coordinate) {\n        var moves = [{ x: -2, y: -1 }, { x: -2, y: 1 }, { x: -1, y: -2 }, { x: -1, y: 2 }, { x: 1, y: -2 }, { x: 1, y: 2 }, { x: 2, y: -1 }, { x: 2, y: 1 }];\n        var result = [];\n        for (var i = 0; i < moves.length; ++i) {\n            var move = moves[i];\n            var successor = { x: coordinate.x + move.x, y: coordinate.y + move.y };\n            var accessible = successor.x >= 0 && successor.y >= 0 && successor.x < boardSize && successor.y < boardSize && (successor.x !== start.x || successor.y !== start.y) && successor.x !== coordinate.x && successor.y !== coordinate.y;\n            if (accessible) {\n                result.push(successor);\n            }\n        }\n        return result;\n    }\n    function computeStartFields() {\n        var result = [];\n        for (var _iterator = successors(start), _isArray = Array.isArray(_iterator), _i2 = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n            var _ref;\n\n            if (_isArray) {\n                if (_i2 >= _iterator.length) break;\n                _ref = _iterator[_i2++];\n            } else {\n                _i2 = _iterator.next();\n                if (_i2.done) break;\n                _ref = _i2.value;\n            }\n\n            var directSuccessor = _ref;\n\n            for (var _iterator2 = successors(directSuccessor), _isArray2 = Array.isArray(_iterator2), _i3 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n                var _ref2;\n\n                if (_isArray2) {\n                    if (_i3 >= _iterator2.length) break;\n                    _ref2 = _iterator2[_i3++];\n                } else {\n                    _i3 = _iterator2.next();\n                    if (_i3.done) break;\n                    _ref2 = _i3.value;\n                }\n\n                var indirectSuccessor = _ref2;\n\n                result.push([start, directSuccessor, indirectSuccessor]);\n            }\n        }\n        return result;\n    }\n    var resolve = void 0;\n    var reject = void 0;\n    var promise = new Promise(function (res, rej) {\n        resolve = res;\n        reject = rej;\n    });\n    var startFields = computeStartFields();\n    var params = {\n        array: startFields,\n        boardSize: boardSize\n    };\n    __WEBPACK_IMPORTED_MODULE_0_Hamsters_js__[\"hamsters\"].run(params, knightTours, function (result) {\n        return resolve(result);\n    }, __WEBPACK_IMPORTED_MODULE_0_Hamsters_js__[\"hamsters\"].maxThreads, true);\n    return promise;\n}\nfunction aggregateTours(results) {\n    var resolve = void 0;\n    var reject = void 0;\n    var promise = new Promise(function (res, rej) {\n        resolve = res;\n        reject = rej;\n    });\n    __WEBPACK_IMPORTED_MODULE_0_Hamsters_js__[\"hamsters\"].run({ array: results }, function () {\n        var result = this.params.array.reduce(function (memo, value) {\n            return memo + value;\n        }, 0);\n        this.rtn.data.push(result);\n    }, function (results) {\n        resolve(results[0]);\n    }, 1, true);\n    return promise;\n}\nfunction parallelKnightTours(start, boardSize) {\n    return computeTours(start, boardSize).then(aggregateTours);\n}\n\n/***/ },\n/* 21 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_Hamsters_js__ = __webpack_require__(11);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_Hamsters_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_Hamsters_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_lodash__ = __webpack_require__(2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_lodash__);\n/* harmony export (immutable) */ exports[\"a\"] = mandelbrot;\n\n\nfunction computeMandelbrotLine() {\n    var options = this.params.options;\n    // Function inline is up to 30% faster than if the function is not inline\n    // https://jsperf.com/mandelbrot-env3 https://jsperf.com/mandelbrot-env4\n    function calculateZ(c) {\n        var z = { i: c.i, real: c.real };\n        var n = 0;\n        for (; n < options.iterations; ++n) {\n            if (Math.pow(z.real, 2) + Math.pow(z.i, 2) > 4) {\n                break;\n            }\n            // z ** 2 + c\n            var zI = z.i;\n            z.i = 2 * z.real * z.i + c.i;\n            z.real = Math.pow(z.real, 2) - Math.pow(zI, 2) + c.real;\n        }\n        return n;\n    }\n    var array = this.params.array;\n    for (var i = 0; i < array.length; ++i) {\n        var y = array[i];\n        var line = new Uint8ClampedArray(options.imageWidth * 4);\n        var cI = options.max.i - y * options.scalingFactor.i;\n        for (var x = 0; x < options.imageWidth; ++x) {\n            var c = {\n                i: cI,\n                real: options.min.real + x * options.scalingFactor.real\n            };\n            var n = calculateZ(c);\n            var base = x * 4;\n            /* tslint:disable:no-bitwise */\n            line[base] = n & 0xFF;\n            line[base + 1] = n & 0xFF00;\n            line[base + 2] = n & 0xFF0000;\n            line[base + 3] = 255;\n        }\n        this.rtn.data.push(line);\n    }\n}\nfunction mandelbrot(options) {\n    var resolve = void 0;\n    var reject = void 0;\n    var promise = new Promise(function (res, rej) {\n        resolve = res;\n        reject = rej;\n    });\n    var range = __WEBPACK_IMPORTED_MODULE_1_lodash__[\"range\"](options.imageHeight);\n    var params = {\n        array: range,\n        options: options\n    };\n    __WEBPACK_IMPORTED_MODULE_0_Hamsters_js__[\"hamsters\"].run(params, computeMandelbrotLine, function (result) {\n        return resolve(result);\n    }, __WEBPACK_IMPORTED_MODULE_0_Hamsters_js__[\"hamsters\"].maxThreads, true);\n    return promise;\n}\n\n/***/ },\n/* 22 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_Hamsters_js__ = __webpack_require__(11);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_Hamsters_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_Hamsters_js__);\n/* harmony export (immutable) */ exports[\"a\"] = parallelMonteCarlo;\n\nfunction initializeOptions(options) {\n    return Object.assign({}, {\n        investmentAmount: 1000000,\n        liquidity: 10000,\n        numRuns: 10000,\n        numYears: 10,\n        performance: 0,\n        projects: [],\n        seed: undefined,\n        volatility: 0.01\n    }, options);\n}\nfunction runSimulation() {\n    var projectsToSimulate = this.params.array;\n    function createMonteCarloEnvironment(options) {\n        /**\n         * Performs the monte carlo simulation for all years and num runs.\n         * @param cashFlows the cash flows\n         * @returns {number[][]} the simulated outcomes grouped by year\n         */\n        function simulateOutcomes(cashFlows, numYears) {\n            function toAbsoluteIndices(indices) {\n                var currentPortfolioValue = options.investmentAmount;\n                var previousYearIndex = 100;\n                for (var relativeYear = 0; relativeYear < indices.length; ++relativeYear) {\n                    var currentYearIndex = indices[relativeYear];\n                    var cashFlowStartOfYear = relativeYear === 0 ? 0 : cashFlows[relativeYear - 1];\n                    // scale current value with performance gain according to index\n                    var performance = currentYearIndex / previousYearIndex;\n                    currentPortfolioValue = (currentPortfolioValue + cashFlowStartOfYear) * performance;\n                    indices[relativeYear] = Math.round(currentPortfolioValue);\n                    previousYearIndex = currentYearIndex;\n                }\n                return indices;\n            }\n            var result = new Array(numYears);\n            for (var year = 0; year <= numYears; ++year) {\n                result[year] = new Array(options.numRuns);\n            }\n            for (var run = 0; run < options.numRuns; run++) {\n                var indices = [100];\n                for (var i = 1; i <= numYears; i++) {\n                    // const randomPerformance = 1 + random.normal(options.performance, options.volatility);\n                    var randomPerformance = 1 + Math.random();\n                    indices.push(indices[i - 1] * randomPerformance);\n                }\n                // convert the relative values from above to absolute values.\n                toAbsoluteIndices(indices);\n                for (var _year = 0; _year < indices.length; ++_year) {\n                    result[_year][run] = indices[_year];\n                }\n            }\n            return result;\n        }\n        function projectsToCashFlows(numYears) {\n            var cashFlows = [];\n            for (var year = 0; year < numYears; ++year) {\n                var projectsByThisYear = projectsByStartYear[year] || [];\n                var cashFlow = -projectsByThisYear.reduce(function (memo, project) {\n                    return memo + project.totalAmount;\n                }, 0);\n                cashFlows.push(cashFlow);\n            }\n            return cashFlows;\n        }\n        function calculateNoInterestReferenceLine(cashFlows, numYears) {\n            var noInterestReferenceLine = [];\n            var investmentAmountLeft = options.investmentAmount;\n            for (var year = 0; year < numYears; ++year) {\n                investmentAmountLeft = investmentAmountLeft + cashFlows[year];\n                noInterestReferenceLine.push(investmentAmountLeft);\n            }\n            return noInterestReferenceLine;\n        }\n        var projects = options.projects.sort(function (a, b) {\n            return a.startYear - b.startYear;\n        });\n        // Group projects by startYear, use lodash groupBy instead\n        var projectsByStartYear = {};\n        for (var _iterator = projects, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n            var _ref;\n\n            if (_isArray) {\n                if (_i >= _iterator.length) break;\n                _ref = _iterator[_i++];\n            } else {\n                _i = _iterator.next();\n                if (_i.done) break;\n                _ref = _i.value;\n            }\n\n            var project = _ref;\n\n            var arr = projectsByStartYear[project.startYear] = projectsByStartYear[project.startYear] || [];\n            arr.push(project);\n        }\n        var numYears = projectsToSimulate.reduce(function (memo, project) {\n            return Math.max(memo, project.startYear);\n        }, 0);\n        var cashFlows = projectsToCashFlows(numYears);\n        var noInterestReferenceLine = calculateNoInterestReferenceLine(cashFlows, numYears);\n        return {\n            investmentAmount: options.investmentAmount,\n            liquidity: options.liquidity,\n            noInterestReferenceLine: noInterestReferenceLine,\n            numRuns: options.numRuns,\n            numYears: numYears,\n            projectsByStartYear: projectsByStartYear,\n            simulatedValues: simulateOutcomes(cashFlows, numYears)\n        };\n    }\n    function calculateProject(project, environment) {\n        var NUMBER_OF_BUCKETS = 10;\n        function groupForValue(value, groups) {\n            return groups.find(function (group) {\n                return (typeof group.from === \"undefined\" || group.from <= value) && (typeof group.to === \"undefined\" || group.to > value);\n            });\n        }\n        function createGroups(requiredAmount, noInterestReference) {\n            return [{ description: \"Ziel erreichbar\", from: requiredAmount, name: \"green\", percentage: 0, separator: true }, { description: \"mit Zusatzliquidität erreichbar\", from: requiredAmount - environment.liquidity, name: \"yellow\", percentage: 0, separator: true, to: requiredAmount }, { description: \"nicht erreichbar\", from: noInterestReference, name: \"gray\", percentage: 0, separator: false, to: requiredAmount - environment.liquidity }, { description: \"nicht erreichbar, mit Verlust\", name: \"red\", percentage: 0, separator: false, to: noInterestReference }];\n        }\n        function calculateRequiredAmount() {\n            var amount = project.totalAmount;\n            var projectsSameYear = environment.projectsByStartYear[project.startYear];\n            for (var _iterator2 = projectsSameYear, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n                var _ref2;\n\n                if (_isArray2) {\n                    if (_i2 >= _iterator2.length) break;\n                    _ref2 = _iterator2[_i2++];\n                } else {\n                    _i2 = _iterator2.next();\n                    if (_i2.done) break;\n                    _ref2 = _i2.value;\n                }\n\n                var otherProject = _ref2;\n\n                if (otherProject === project) {\n                    break;\n                }\n                amount += otherProject.totalAmount;\n            }\n            return amount;\n        }\n        function median(values) {\n            var half = Math.floor(values.length / 2);\n            if (values.length % 2) {\n                return values[half];\n            }\n            return (values[half - 1] + values[half]) / 2.0;\n        }\n        var requiredAmount = calculateRequiredAmount();\n        var simulatedValuesThisYear = environment.simulatedValues[project.startYear];\n        simulatedValuesThisYear.sort(function (a, b) {\n            return a - b;\n        });\n        var groups = createGroups(requiredAmount, environment.noInterestReferenceLine[project.startYear]);\n        var valuesByGroup = {};\n        var bucketSize = Math.round(simulatedValuesThisYear.length / NUMBER_OF_BUCKETS);\n        var buckets = [];\n        for (var i = 0; i < simulatedValuesThisYear.length; i += bucketSize) {\n            var bucket = {\n                max: Number.MIN_SAFE_INTEGER,\n                min: Number.MAX_SAFE_INTEGER,\n                subBuckets: {}\n            };\n            var subBuckets = {};\n            // Needed to avoid deoptimization because of changed attribute orders in subBuckets. Initialize with const order\n            for (var _iterator3 = groups, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {\n                var _ref3;\n\n                if (_isArray3) {\n                    if (_i3 >= _iterator3.length) break;\n                    _ref3 = _iterator3[_i3++];\n                } else {\n                    _i3 = _iterator3.next();\n                    if (_i3.done) break;\n                    _ref3 = _i3.value;\n                }\n\n                var _group = _ref3;\n\n                subBuckets[_group.name] = {\n                    group: _group.name,\n                    max: Number.MIN_SAFE_INTEGER,\n                    min: Number.MAX_SAFE_INTEGER\n                };\n            }\n            for (var j = i; j < i + bucketSize; ++j) {\n                var value = simulatedValuesThisYear[j];\n                bucket.min = Math.min(bucket.min, value);\n                bucket.max = Math.max(bucket.max, value);\n                var group = groupForValue(simulatedValuesThisYear[j], groups);\n                valuesByGroup[group.name] = (valuesByGroup[group.name] || 0) + 1;\n                var subBucket = subBuckets[group.name] = subBuckets[group.name] || { group: group.name, max: Number.MIN_VALUE, min: Number.MAX_VALUE };\n                subBucket.min = Math.min(subBucket.min, value);\n                subBucket.max = Math.max(subBucket.max, value);\n            }\n            // copy only non empty groups to bucket\n            for (var _iterator4 = Object.keys(subBuckets), _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;) {\n                var _ref4;\n\n                if (_isArray4) {\n                    if (_i4 >= _iterator4.length) break;\n                    _ref4 = _iterator4[_i4++];\n                } else {\n                    _i4 = _iterator4.next();\n                    if (_i4.done) break;\n                    _ref4 = _i4.value;\n                }\n\n                var groupName = _ref4;\n\n                var _subBucket = subBuckets[groupName];\n                if (_subBucket.min !== Number.MIN_SAFE_INTEGER) {\n                    bucket.subBuckets[groupName] = _subBucket;\n                }\n            }\n            buckets.push(bucket);\n        }\n        var nonEmptyGroups = groups.filter(function (group) {\n            return !!valuesByGroup[group.name];\n        });\n        nonEmptyGroups.forEach(function (group) {\n            return group.percentage = valuesByGroup[group.name] / simulatedValuesThisYear.length;\n        });\n        var oneSixth = Math.round(simulatedValuesThisYear.length / 6);\n        return {\n            buckets: buckets,\n            groups: nonEmptyGroups,\n            max: simulatedValuesThisYear[simulatedValuesThisYear.length - 1],\n            median: median(simulatedValuesThisYear),\n            min: simulatedValuesThisYear[0],\n            project: project,\n            twoThird: {\n                max: simulatedValuesThisYear[simulatedValuesThisYear.length - oneSixth],\n                min: simulatedValuesThisYear[oneSixth]\n            }\n        };\n    }\n    var environment = createMonteCarloEnvironment(this.params.options);\n    for (var i = 0; i < projectsToSimulate.length; ++i) {\n        var project = projectsToSimulate[i];\n        this.rtn.data.push(calculateProject(project, environment));\n    }\n}\nfunction parallelMonteCarlo(userOptions) {\n    var options = initializeOptions(userOptions);\n    var resolve = void 0;\n    var reject = void 0;\n    var promise = new Promise(function (res, rej) {\n        resolve = res;\n        reject = rej;\n    });\n    __WEBPACK_IMPORTED_MODULE_0_Hamsters_js__[\"hamsters\"].run({ array: options.projects, options: options }, runSimulation, function (result) {\n        return resolve(result);\n    }, __WEBPACK_IMPORTED_MODULE_0_Hamsters_js__[\"hamsters\"].maxThreads, true);\n    return promise;\n}\n\n/***/ },\n/* 23 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(global) {/* unused harmony export knightTours */\n/* harmony export (immutable) */ exports[\"a\"] = parallelJSKnightTours;\nvar Parallel = __webpack_require__(12);\nfunction knightTours(startPath, boardSize) {\n    var moves = [{ x: -2, y: -1 }, { x: -2, y: 1 }, { x: -1, y: -2 }, { x: -1, y: 2 }, { x: 1, y: -2 }, { x: 1, y: 2 }, { x: 2, y: -1 }, { x: 2, y: 1 }];\n    var board = new Array(boardSize * boardSize);\n    board.fill(0);\n    var numberOfFields = boardSize * boardSize;\n    var results = 0;\n    var stack = startPath.map(function (pos, index) {\n        return { coordinate: pos, n: index + 1 };\n    });\n    for (var index = 0; index < startPath.length - 1; ++index) {\n        var fieldIndex = startPath[index].x * boardSize + startPath[index].y;\n        board[fieldIndex] = index + 1;\n    }\n    while (stack.length > 0) {\n        var _stack = stack[stack.length - 1],\n            coordinate = _stack.coordinate,\n            n = _stack.n;\n\n        var _fieldIndex = coordinate.x * boardSize + coordinate.y;\n        if (board[_fieldIndex] !== 0) {\n            // back tracking\n            board[_fieldIndex] = 0;\n            stack.pop(); // remove current value\n            continue;\n        }\n        // entry\n        if (n === numberOfFields) {\n            ++results;\n            stack.pop();\n            continue;\n        }\n        board[_fieldIndex] = n;\n        for (var i = 0; i < moves.length; ++i) {\n            var move = moves[i];\n            var successor = { x: coordinate.x + move.x, y: coordinate.y + move.y };\n            // not outside of board and not yet accessed\n            var accessible = successor.x >= 0 && successor.y >= 0 && successor.x < boardSize && successor.y < boardSize && board[successor.x * boardSize + successor.y] === 0;\n            if (accessible) {\n                stack.push({ coordinate: successor, n: n + 1 });\n            }\n        }\n    }\n    return results;\n}\nfunction parallelJSKnightTours(start, boardSize) {\n    function successors(coordinate) {\n        var moves = [{ x: -2, y: -1 }, { x: -2, y: 1 }, { x: -1, y: -2 }, { x: -1, y: 2 }, { x: 1, y: -2 }, { x: 1, y: 2 }, { x: 2, y: -1 }, { x: 2, y: 1 }];\n        var result = [];\n        for (var i = 0; i < moves.length; ++i) {\n            var move = moves[i];\n            var successor = { x: coordinate.x + move.x, y: coordinate.y + move.y };\n            var accessible = successor.x >= 0 && successor.y >= 0 && successor.x < boardSize && successor.y < boardSize && (successor.x !== start.x || successor.y !== start.y) && successor.x !== coordinate.x && successor.y !== coordinate.y;\n            if (accessible) {\n                result.push(successor);\n            }\n        }\n        return result;\n    }\n    function computeStartFields() {\n        var result = [];\n        for (var _iterator = successors(start), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n            var _ref;\n\n            if (_isArray) {\n                if (_i >= _iterator.length) break;\n                _ref = _iterator[_i++];\n            } else {\n                _i = _iterator.next();\n                if (_i.done) break;\n                _ref = _i.value;\n            }\n\n            var directSuccessor = _ref;\n\n            for (var _iterator2 = successors(directSuccessor), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n                var _ref2;\n\n                if (_isArray2) {\n                    if (_i2 >= _iterator2.length) break;\n                    _ref2 = _iterator2[_i2++];\n                } else {\n                    _i2 = _iterator2.next();\n                    if (_i2.done) break;\n                    _ref2 = _i2.value;\n                }\n\n                var indirectSuccessor = _ref2;\n\n                result.push([start, directSuccessor, indirectSuccessor]);\n            }\n        }\n        return result;\n    }\n    return new Parallel(computeStartFields(), { env: { boardSize: boardSize } }).require(knightTours).map(function (startField) {\n        return knightTours(startField, global.env.boardSize);\n    }).reduce(function (toursPerRun) {\n        return toursPerRun.reduce(function (memo, current) {\n            return memo + current;\n        }, 0);\n    });\n    // The reduce operation needs to wait until the map operation is complete, switches back to the main thread and then\n    // a new worker is spawned for each reduce step, e.g. for [1, 2, 3, 4, 5, 6] the three workers with [1, 2], [3, 4], [5, 6]\n    // then the sub sequent workers [3, 7] and finally, [10, 11] are spawned...\n}\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))\n\n/***/ },\n/* 24 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(global) {/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash__ = __webpack_require__(2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_lodash__);\n/* unused harmony export computeMandelbrotLine */\n/* harmony export (immutable) */ exports[\"a\"] = parallelJSMandelbrot;\nvar Parallel = __webpack_require__(12);\n\nfunction computeMandelbrotLine(y, options) {\n    function calculateZ(c) {\n        var z = { i: c.i, real: c.real };\n        var n = 0;\n        for (; n < options.iterations; ++n) {\n            if (Math.pow(z.real, 2) + Math.pow(z.i, 2) > 4) {\n                break;\n            }\n            // z ** 2 + c\n            var zI = z.i;\n            z.i = 2 * z.real * z.i + c.i;\n            z.real = Math.pow(z.real, 2) - Math.pow(zI, 2) + c.real;\n        }\n        return n;\n    }\n    var line = new Uint8ClampedArray(options.imageWidth * 4);\n    var cI = options.max.i - y * options.scalingFactor.i;\n    for (var x = 0; x < options.imageWidth; ++x) {\n        var c = {\n            i: cI,\n            real: options.min.real + x * options.scalingFactor.real\n        };\n        var n = calculateZ(c);\n        var base = x * 4;\n        /* tslint:disable:no-bitwise */\n        line[base] = n & 0xFF;\n        line[base + 1] = n & 0xFF00;\n        line[base + 2] = n & 0xFF0000;\n        line[base + 3] = 255;\n    }\n    return line;\n}\nfunction parallelJSMandelbrot(mandelbrotOptions) {\n    var lines = __WEBPACK_IMPORTED_MODULE_0_lodash__[\"range\"](mandelbrotOptions.imageHeight);\n    return new Parallel(lines, { env: mandelbrotOptions }).require(computeMandelbrotLine).map(function (line) {\n        return computeMandelbrotLine(line, global.env);\n    });\n}\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))\n\n/***/ },\n/* 25 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(global) {/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util__ = __webpack_require__(16);\n/* harmony export (immutable) */ exports[\"a\"] = parallelJSMonteCarlo;\n\nvar Parallel = __webpack_require__(12);\nfunction initializeOptions(options) {\n    return Object.assign({}, {\n        investmentAmount: 1000000,\n        liquidity: 10000,\n        numRuns: 10000,\n        numYears: 10,\n        performance: 0,\n        projects: [],\n        seed: undefined,\n        volatility: 0.01\n    }, options);\n}\nfunction createMonteCarloEnvironment(options) {\n    var random = new self.Random(10);\n    /**\n     * Performs the monte carlo simulation for all years and num runs.\n     * @param cashFlows the cash flows\n     * @returns {number[][]} the simulated outcomes grouped by year\n     */\n    function simulateOutcomes(cashFlows, numYears) {\n        function toAbsoluteIndices(indices) {\n            var currentPortfolioValue = options.investmentAmount;\n            var previousYearIndex = 100;\n            for (var relativeYear = 0; relativeYear < indices.length; ++relativeYear) {\n                var currentYearIndex = indices[relativeYear];\n                var cashFlowStartOfYear = relativeYear === 0 ? 0 : cashFlows[relativeYear - 1];\n                // scale current value with performance gain according to index\n                var performance = currentYearIndex / previousYearIndex;\n                currentPortfolioValue = (currentPortfolioValue + cashFlowStartOfYear) * performance;\n                indices[relativeYear] = 1 + random.normal(performance, options.volatility);\n                previousYearIndex = currentYearIndex;\n            }\n            return indices;\n        }\n        var result = new Array(options.numYears);\n        for (var year = 0; year <= numYears; ++year) {\n            result[year] = new Array(options.numRuns);\n        }\n        for (var run = 0; run < options.numRuns; run++) {\n            var indices = [100];\n            for (var i = 1; i <= numYears; i++) {\n                // const randomPerformance = 1 + random.normal(options.performance, options.volatility);\n                var randomPerformance = 1 + Math.random();\n                indices.push(indices[i - 1] * randomPerformance);\n            }\n            // convert the relative values from above to absolute values.\n            toAbsoluteIndices(indices);\n            for (var _year = 0; _year < indices.length; ++_year) {\n                result[_year][run] = indices[_year];\n            }\n        }\n        return result;\n    }\n    function projectsToCashFlows(numYears) {\n        var cashFlows = [];\n        for (var year = 0; year < numYears; ++year) {\n            var projectsByThisYear = projectsByStartYear[year] || [];\n            var cashFlow = -projectsByThisYear.reduce(function (memo, project) {\n                return memo + project.totalAmount;\n            }, 0);\n            cashFlows.push(cashFlow);\n        }\n        return cashFlows;\n    }\n    function calculateNoInterestReferenceLine(cashFlows, numYears) {\n        var noInterestReferenceLine = [];\n        var investmentAmountLeft = options.investmentAmount;\n        for (var year = 0; year < numYears; ++year) {\n            investmentAmountLeft = investmentAmountLeft + cashFlows[year];\n            noInterestReferenceLine.push(investmentAmountLeft);\n        }\n        return noInterestReferenceLine;\n    }\n    var projects = options.projects.sort(function (a, b) {\n        return a.startYear - b.startYear;\n    });\n    // Group projects by startYear, use lodash groupBy instead\n    var projectsByStartYear = {};\n    for (var _iterator = projects, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n        var _ref;\n\n        if (_isArray) {\n            if (_i >= _iterator.length) break;\n            _ref = _iterator[_i++];\n        } else {\n            _i = _iterator.next();\n            if (_i.done) break;\n            _ref = _i.value;\n        }\n\n        var project = _ref;\n\n        var arr = projectsByStartYear[project.startYear] = projectsByStartYear[project.startYear] || [];\n        arr.push(project);\n    }\n    var numYears = options.projects.reduce(function (memo, project) {\n        return Math.max(memo, project.startYear);\n    }, 0);\n    var cashFlows = projectsToCashFlows(numYears);\n    var noInterestReferenceLine = calculateNoInterestReferenceLine(cashFlows, numYears);\n    return {\n        investmentAmount: options.investmentAmount,\n        liquidity: options.liquidity,\n        noInterestReferenceLine: noInterestReferenceLine,\n        numRuns: options.numRuns,\n        numYears: options.numYears,\n        projectsByStartYear: projectsByStartYear,\n        simulatedValues: simulateOutcomes(cashFlows, numYears)\n    };\n}\nfunction calculateProject(project, environment) {\n    var NUMBER_OF_BUCKETS = 10;\n    function groupForValue(value, groups) {\n        return groups.find(function (group) {\n            return (typeof group.from === \"undefined\" || group.from <= value) && (typeof group.to === \"undefined\" || group.to > value);\n        });\n    }\n    function createGroups(requiredAmount, noInterestReference) {\n        return [{ description: \"Ziel erreichbar\", from: requiredAmount, name: \"green\", percentage: 0, separator: true }, { description: \"mit Zusatzliquidität erreichbar\", from: requiredAmount - environment.liquidity, name: \"yellow\", percentage: 0, separator: true, to: requiredAmount }, { description: \"nicht erreichbar\", from: noInterestReference, name: \"gray\", percentage: 0, separator: false, to: requiredAmount - environment.liquidity }, { description: \"nicht erreichbar, mit Verlust\", name: \"red\", percentage: 0, separator: false, to: noInterestReference }];\n    }\n    function calculateRequiredAmount() {\n        var amount = project.totalAmount;\n        var projectsSameYear = environment.projectsByStartYear[project.startYear];\n        for (var _iterator2 = projectsSameYear, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n            var _ref2;\n\n            if (_isArray2) {\n                if (_i2 >= _iterator2.length) break;\n                _ref2 = _iterator2[_i2++];\n            } else {\n                _i2 = _iterator2.next();\n                if (_i2.done) break;\n                _ref2 = _i2.value;\n            }\n\n            var otherProject = _ref2;\n\n            if (otherProject === project) {\n                break;\n            }\n            amount += otherProject.totalAmount;\n        }\n        return amount;\n    }\n    function median(values) {\n        var half = Math.floor(values.length / 2);\n        if (values.length % 2) {\n            return values[half];\n        }\n        return (values[half - 1] + values[half]) / 2.0;\n    }\n    var requiredAmount = calculateRequiredAmount();\n    var simulatedValuesThisYear = environment.simulatedValues[project.startYear];\n    simulatedValuesThisYear.sort(function (a, b) {\n        return a - b;\n    });\n    var groups = createGroups(requiredAmount, environment.noInterestReferenceLine[project.startYear]);\n    var valuesByGroup = {};\n    var bucketSize = Math.round(simulatedValuesThisYear.length / NUMBER_OF_BUCKETS);\n    var buckets = [];\n    for (var i = 0; i < simulatedValuesThisYear.length; i += bucketSize) {\n        var bucket = {\n            max: Number.MIN_SAFE_INTEGER,\n            min: Number.MAX_SAFE_INTEGER,\n            subBuckets: {}\n        };\n        var subBuckets = {};\n        // Needed to avoid deoptimization because of changed attribute orders in subBuckets. Initialize with const order\n        for (var _iterator3 = groups, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {\n            var _ref3;\n\n            if (_isArray3) {\n                if (_i3 >= _iterator3.length) break;\n                _ref3 = _iterator3[_i3++];\n            } else {\n                _i3 = _iterator3.next();\n                if (_i3.done) break;\n                _ref3 = _i3.value;\n            }\n\n            var _group = _ref3;\n\n            subBuckets[_group.name] = {\n                group: _group.name,\n                max: Number.MIN_SAFE_INTEGER,\n                min: Number.MAX_SAFE_INTEGER\n            };\n        }\n        for (var j = i; j < i + bucketSize; ++j) {\n            var value = simulatedValuesThisYear[j];\n            bucket.min = Math.min(bucket.min, value);\n            bucket.max = Math.max(bucket.max, value);\n            var group = groupForValue(simulatedValuesThisYear[j], groups);\n            valuesByGroup[group.name] = (valuesByGroup[group.name] || 0) + 1;\n            var subBucket = subBuckets[group.name] = subBuckets[group.name] || { group: group.name, max: Number.MIN_VALUE, min: Number.MAX_VALUE };\n            subBucket.min = Math.min(subBucket.min, value);\n            subBucket.max = Math.max(subBucket.max, value);\n        }\n        // copy only non empty groups to bucket\n        for (var _iterator4 = Object.keys(subBuckets), _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;) {\n            var _ref4;\n\n            if (_isArray4) {\n                if (_i4 >= _iterator4.length) break;\n                _ref4 = _iterator4[_i4++];\n            } else {\n                _i4 = _iterator4.next();\n                if (_i4.done) break;\n                _ref4 = _i4.value;\n            }\n\n            var groupName = _ref4;\n\n            var _subBucket = subBuckets[groupName];\n            if (_subBucket.min !== Number.MIN_SAFE_INTEGER) {\n                bucket.subBuckets[groupName] = _subBucket;\n            }\n        }\n        buckets.push(bucket);\n    }\n    var nonEmptyGroups = groups.filter(function (group) {\n        return !!valuesByGroup[group.name];\n    });\n    nonEmptyGroups.forEach(function (group) {\n        return group.percentage = valuesByGroup[group.name] / simulatedValuesThisYear.length;\n    });\n    var oneSixth = Math.round(simulatedValuesThisYear.length / 6);\n    return {\n        buckets: buckets,\n        groups: nonEmptyGroups,\n        max: simulatedValuesThisYear[simulatedValuesThisYear.length - 1],\n        median: median(simulatedValuesThisYear),\n        min: simulatedValuesThisYear[0],\n        project: project,\n        twoThird: {\n            max: simulatedValuesThisYear[simulatedValuesThisYear.length - oneSixth],\n            min: simulatedValuesThisYear[oneSixth]\n        }\n    };\n}\nfunction parallelJSMonteCarlo(userOptions) {\n    var options = initializeOptions(userOptions);\n    // Array needs to be cloned, otherwise the original array is manipulated!\n    return new Parallel(options.projects.slice(), {\n        evalPath: \"./\" + __webpack_require__(31),\n        env: { options: options },\n        envNamespace: \"simulation\"\n    }).require(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util__[\"a\" /* toFullQualifiedURL */])(__webpack_require__(17))) // the one from node uses module syntax\n    .require(createMonteCarloEnvironment).require(calculateProject).map(function (project) {\n        var env = void 0;\n        if (self.env) {\n            env = self.env;\n        } else {\n            env = self.env = createMonteCarloEnvironment(global.simulation.options);\n        }\n        return calculateProject(project, env);\n    });\n}\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))\n\n/***/ },\n/* 26 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* unused harmony export knightTours */\n/* harmony export (immutable) */ exports[\"a\"] = threadsKnightTours;\nfunction knightTours(_ref, done) {\n    var startPath = _ref.startPath,\n        boardSize = _ref.boardSize;\n\n    var moves = [{ x: -2, y: -1 }, { x: -2, y: 1 }, { x: -1, y: -2 }, { x: -1, y: 2 }, { x: 1, y: -2 }, { x: 1, y: 2 }, { x: 2, y: -1 }, { x: 2, y: 1 }];\n    var board = new Array(boardSize * boardSize);\n    board.fill(0);\n    var numberOfFields = boardSize * boardSize;\n    var results = 0;\n    var stack = startPath.map(function (pos, index) {\n        return { coordinate: pos, n: index + 1 };\n    });\n    for (var index = 0; index < startPath.length - 1; ++index) {\n        var fieldIndex = startPath[index].x * boardSize + startPath[index].y;\n        board[fieldIndex] = index + 1;\n    }\n    while (stack.length > 0) {\n        var _stack = stack[stack.length - 1],\n            coordinate = _stack.coordinate,\n            n = _stack.n;\n\n        var _fieldIndex = coordinate.x * boardSize + coordinate.y;\n        if (board[_fieldIndex] !== 0) {\n            // back tracking\n            board[_fieldIndex] = 0;\n            stack.pop(); // remove current value\n            continue;\n        }\n        // entry\n        if (n === numberOfFields) {\n            ++results;\n            stack.pop();\n            continue;\n        }\n        board[_fieldIndex] = n;\n        for (var i = 0; i < moves.length; ++i) {\n            var move = moves[i];\n            var successor = { x: coordinate.x + move.x, y: coordinate.y + move.y };\n            // not outside of board and not yet accessed\n            var accessible = successor.x >= 0 && successor.y >= 0 && successor.x < boardSize && successor.y < boardSize && board[successor.x * boardSize + successor.y] === 0;\n            if (accessible) {\n                stack.push({ coordinate: successor, n: n + 1 });\n            }\n        }\n    }\n    done(results);\n}\nfunction threadsKnightTours(start, boardSize, pool) {\n    function successors(coordinate) {\n        var moves = [{ x: -2, y: -1 }, { x: -2, y: 1 }, { x: -1, y: -2 }, { x: -1, y: 2 }, { x: 1, y: -2 }, { x: 1, y: 2 }, { x: 2, y: -1 }, { x: 2, y: 1 }];\n        var result = [];\n        for (var i = 0; i < moves.length; ++i) {\n            var move = moves[i];\n            var successor = { x: coordinate.x + move.x, y: coordinate.y + move.y };\n            var accessible = successor.x >= 0 && successor.y >= 0 && successor.x < boardSize && successor.y < boardSize && (successor.x !== start.x || successor.y !== start.y) && successor.x !== coordinate.x && successor.y !== coordinate.y;\n            if (accessible) {\n                result.push(successor);\n            }\n        }\n        return result;\n    }\n    function computeStartFields() {\n        var result = [];\n        for (var _iterator = successors(start), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n            var _ref2;\n\n            if (_isArray) {\n                if (_i >= _iterator.length) break;\n                _ref2 = _iterator[_i++];\n            } else {\n                _i = _iterator.next();\n                if (_i.done) break;\n                _ref2 = _i.value;\n            }\n\n            var directSuccessor = _ref2;\n\n            for (var _iterator2 = successors(directSuccessor), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n                var _ref3;\n\n                if (_isArray2) {\n                    if (_i2 >= _iterator2.length) break;\n                    _ref3 = _iterator2[_i2++];\n                } else {\n                    _i2 = _iterator2.next();\n                    if (_i2.done) break;\n                    _ref3 = _i2.value;\n                }\n\n                var indirectSuccessor = _ref3;\n\n                result.push([start, directSuccessor, indirectSuccessor]);\n            }\n        }\n        return result;\n    }\n    var resolve = void 0;\n    var reject = void 0;\n    var promise = new Promise(function (_resolve, _reject) {\n        resolve = _resolve;\n        reject = _reject;\n    });\n    var totalTours = 0;\n    pool.run(knightTours).on(\"done\", function (job, tours) {\n        return totalTours += tours;\n    }).on(\"finished\", function () {\n        resolve(totalTours);\n    });\n    for (var _iterator3 = computeStartFields(), _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {\n        var _ref4;\n\n        if (_isArray3) {\n            if (_i3 >= _iterator3.length) break;\n            _ref4 = _iterator3[_i3++];\n        } else {\n            _i3 = _iterator3.next();\n            if (_i3.done) break;\n            _ref4 = _i3.value;\n        }\n\n        var startPath = _ref4;\n\n        pool.send({ startPath: startPath, boardSize: boardSize });\n    }\n    return promise;\n}\n\n/***/ },\n/* 27 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash__ = __webpack_require__(2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_lodash__);\n/* unused harmony export computeMandelbrotLine */\n/* harmony export (immutable) */ exports[\"a\"] = threadsMandelbrot;\n\nfunction computeMandelbrotLine(_ref, done) {\n    var y = _ref.y,\n        options = _ref.options;\n\n    function calculateZ(c) {\n        var z = { i: c.i, real: c.real };\n        var n = 0;\n        for (; n < options.iterations; ++n) {\n            if (Math.pow(z.real, 2) + Math.pow(z.i, 2) > 4) {\n                break;\n            }\n            // z ** 2 + c\n            var zI = z.i;\n            z.i = 2 * z.real * z.i + c.i;\n            z.real = Math.pow(z.real, 2) - Math.pow(zI, 2) + c.real;\n        }\n        return n;\n    }\n    var line = new Uint8ClampedArray(options.imageWidth * 4);\n    var cI = options.max.i - y * options.scalingFactor.i;\n    for (var x = 0; x < options.imageWidth; ++x) {\n        var c = {\n            i: cI,\n            real: options.min.real + x * options.scalingFactor.real\n        };\n        var n = calculateZ(c);\n        var base = x * 4;\n        /* tslint:disable:no-bitwise */\n        line[base] = n & 0xFF;\n        line[base + 1] = n & 0xFF00;\n        line[base + 2] = n & 0xFF0000;\n        line[base + 3] = 255;\n    }\n    done.transfer(line, [line.buffer]);\n}\nfunction threadsMandelbrot(mandelbrotOptions, pool) {\n    var promises = [];\n    pool.run(computeMandelbrotLine);\n    var lines = __WEBPACK_IMPORTED_MODULE_0_lodash__[\"range\"](mandelbrotOptions.imageHeight);\n    for (var _iterator = lines, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n        var _ref2;\n\n        if (_isArray) {\n            if (_i >= _iterator.length) break;\n            _ref2 = _iterator[_i++];\n        } else {\n            _i = _iterator.next();\n            if (_i.done) break;\n            _ref2 = _i.value;\n        }\n\n        var line = _ref2;\n\n        promises.push(pool.send({ y: line, options: mandelbrotOptions }).promise());\n    }\n    return Promise.all(promises);\n}\n\n/***/ },\n/* 28 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util__ = __webpack_require__(16);\n/* harmony export (immutable) */ exports[\"a\"] = threadsMonteCarlo;\n\nfunction initializeOptions(options) {\n    return Object.assign({}, {\n        investmentAmount: 1000000,\n        liquidity: 10000,\n        numRuns: 10000,\n        numYears: 10,\n        performance: 0,\n        projects: [],\n        seed: undefined,\n        volatility: 0.01\n    }, options);\n}\nfunction calculateProject(_ref, done) {\n    var project = _ref.project,\n        options = _ref.options;\n\n    var NUMBER_OF_BUCKETS = 10;\n    var environment = this.environment = this.environment || createMonteCarloEnvironment(options);\n    function createMonteCarloEnvironment(options) {\n        var random = new self.Random(10);\n        /**\n         * Performs the monte carlo simulation for all years and num runs.\n         * @param cashFlows the cash flows\n         * @returns {number[][]} the simulated outcomes grouped by year\n         */\n        function simulateOutcomes(cashFlows, numYears) {\n            function toAbsoluteIndices(indices) {\n                var currentPortfolioValue = options.investmentAmount;\n                var previousYearIndex = 100;\n                for (var relativeYear = 0; relativeYear < indices.length; ++relativeYear) {\n                    var currentYearIndex = indices[relativeYear];\n                    var cashFlowStartOfYear = relativeYear === 0 ? 0 : cashFlows[relativeYear - 1];\n                    // scale current value with performance gain according to index\n                    var performance = currentYearIndex / previousYearIndex;\n                    currentPortfolioValue = (currentPortfolioValue + cashFlowStartOfYear) * performance;\n                    indices[relativeYear] = Math.round(currentPortfolioValue);\n                    previousYearIndex = currentYearIndex;\n                }\n                return indices;\n            }\n            var result = new Array(numYears);\n            for (var year = 0; year <= numYears; ++year) {\n                result[year] = new Array(options.numRuns);\n            }\n            for (var run = 0; run < options.numRuns; run++) {\n                var indices = [100];\n                for (var i = 1; i <= numYears; i++) {\n                    var randomPerformance = 1 + random.normal(options.performance, options.volatility);\n                    indices.push(indices[i - 1] * randomPerformance);\n                }\n                // convert the relative values from above to absolute values.\n                toAbsoluteIndices(indices);\n                for (var _year = 0; _year < indices.length; ++_year) {\n                    result[_year][run] = indices[_year];\n                }\n            }\n            return result;\n        }\n        function projectsToCashFlows(numYears) {\n            var cashFlows = [];\n            for (var year = 0; year < numYears; ++year) {\n                var projectsByThisYear = projectsByStartYear[year] || [];\n                var cashFlow = -projectsByThisYear.reduce(function (memo, project) {\n                    return memo + project.totalAmount;\n                }, 0);\n                cashFlows.push(cashFlow);\n            }\n            return cashFlows;\n        }\n        function calculateNoInterestReferenceLine(cashFlows, numYears) {\n            var noInterestReferenceLine = [];\n            var investmentAmountLeft = options.investmentAmount;\n            for (var year = 0; year < numYears; ++year) {\n                investmentAmountLeft = investmentAmountLeft + cashFlows[year];\n                noInterestReferenceLine.push(investmentAmountLeft);\n            }\n            return noInterestReferenceLine;\n        }\n        var projects = options.projects.sort(function (a, b) {\n            return a.startYear - b.startYear;\n        });\n        // Group projects by startYear, use lodash groupBy instead\n        var projectsByStartYear = {};\n        for (var _iterator = projects, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n            var _ref2;\n\n            if (_isArray) {\n                if (_i >= _iterator.length) break;\n                _ref2 = _iterator[_i++];\n            } else {\n                _i = _iterator.next();\n                if (_i.done) break;\n                _ref2 = _i.value;\n            }\n\n            var _project = _ref2;\n\n            var arr = projectsByStartYear[_project.startYear] = projectsByStartYear[_project.startYear] || [];\n            arr.push(_project);\n        }\n        var numYears = options.projects.reduce(function (memo, project) {\n            return Math.max(memo, project.startYear);\n        }, 0);\n        var cashFlows = projectsToCashFlows(numYears);\n        var noInterestReferenceLine = calculateNoInterestReferenceLine(cashFlows, numYears);\n        return {\n            investmentAmount: options.investmentAmount,\n            liquidity: options.liquidity,\n            noInterestReferenceLine: noInterestReferenceLine,\n            numRuns: options.numRuns,\n            numYears: numYears,\n            projectsByStartYear: projectsByStartYear,\n            simulatedValues: simulateOutcomes(cashFlows, numYears)\n        };\n    }\n    function groupForValue(value, groups) {\n        return groups.find(function (group) {\n            return (typeof group.from === \"undefined\" || group.from <= value) && (typeof group.to === \"undefined\" || group.to > value);\n        });\n    }\n    function createGroups(requiredAmount, noInterestReference) {\n        return [{ description: \"Ziel erreichbar\", from: requiredAmount, name: \"green\", percentage: 0, separator: true }, { description: \"mit Zusatzliquidität erreichbar\", from: requiredAmount - environment.liquidity, name: \"yellow\", percentage: 0, separator: true, to: requiredAmount }, { description: \"nicht erreichbar\", from: noInterestReference, name: \"gray\", percentage: 0, separator: false, to: requiredAmount - environment.liquidity }, { description: \"nicht erreichbar, mit Verlust\", name: \"red\", percentage: 0, separator: false, to: noInterestReference }];\n    }\n    function calculateRequiredAmount() {\n        var amount = project.totalAmount;\n        var projectsSameYear = environment.projectsByStartYear[project.startYear];\n        for (var _iterator2 = projectsSameYear, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n            var _ref3;\n\n            if (_isArray2) {\n                if (_i2 >= _iterator2.length) break;\n                _ref3 = _iterator2[_i2++];\n            } else {\n                _i2 = _iterator2.next();\n                if (_i2.done) break;\n                _ref3 = _i2.value;\n            }\n\n            var otherProject = _ref3;\n\n            if (otherProject === project) {\n                break;\n            }\n            amount += otherProject.totalAmount;\n        }\n        return amount;\n    }\n    function median(values) {\n        var half = Math.floor(values.length / 2);\n        if (values.length % 2) {\n            return values[half];\n        }\n        return (values[half - 1] + values[half]) / 2.0;\n    }\n    var requiredAmount = calculateRequiredAmount();\n    var simulatedValuesThisYear = environment.simulatedValues[project.startYear];\n    simulatedValuesThisYear.sort(function (a, b) {\n        return a - b;\n    });\n    var groups = createGroups(requiredAmount, environment.noInterestReferenceLine[project.startYear]);\n    var valuesByGroup = {};\n    var bucketSize = Math.round(simulatedValuesThisYear.length / NUMBER_OF_BUCKETS);\n    var buckets = [];\n    for (var i = 0; i < simulatedValuesThisYear.length; i += bucketSize) {\n        var bucket = {\n            max: Number.MIN_SAFE_INTEGER,\n            min: Number.MAX_SAFE_INTEGER,\n            subBuckets: {}\n        };\n        var subBuckets = {};\n        // Needed to avoid deoptimization because of changed attribute orders in subBuckets. Initialize with const order\n        for (var _iterator3 = groups, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {\n            var _ref4;\n\n            if (_isArray3) {\n                if (_i3 >= _iterator3.length) break;\n                _ref4 = _iterator3[_i3++];\n            } else {\n                _i3 = _iterator3.next();\n                if (_i3.done) break;\n                _ref4 = _i3.value;\n            }\n\n            var _group = _ref4;\n\n            subBuckets[_group.name] = {\n                group: _group.name,\n                max: Number.MIN_SAFE_INTEGER,\n                min: Number.MAX_SAFE_INTEGER\n            };\n        }\n        for (var j = i; j < i + bucketSize; ++j) {\n            var value = simulatedValuesThisYear[j];\n            bucket.min = Math.min(bucket.min, value);\n            bucket.max = Math.max(bucket.max, value);\n            var group = groupForValue(simulatedValuesThisYear[j], groups);\n            valuesByGroup[group.name] = (valuesByGroup[group.name] || 0) + 1;\n            var subBucket = subBuckets[group.name] = subBuckets[group.name] || { group: group.name, max: Number.MIN_VALUE, min: Number.MAX_VALUE };\n            subBucket.min = Math.min(subBucket.min, value);\n            subBucket.max = Math.max(subBucket.max, value);\n        }\n        // copy only non empty groups to bucket\n        for (var _iterator4 = Object.keys(subBuckets), _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;) {\n            var _ref5;\n\n            if (_isArray4) {\n                if (_i4 >= _iterator4.length) break;\n                _ref5 = _iterator4[_i4++];\n            } else {\n                _i4 = _iterator4.next();\n                if (_i4.done) break;\n                _ref5 = _i4.value;\n            }\n\n            var groupName = _ref5;\n\n            var _subBucket = subBuckets[groupName];\n            if (_subBucket.min !== Number.MIN_SAFE_INTEGER) {\n                bucket.subBuckets[groupName] = _subBucket;\n            }\n        }\n        buckets.push(bucket);\n    }\n    var nonEmptyGroups = groups.filter(function (group) {\n        return !!valuesByGroup[group.name];\n    });\n    nonEmptyGroups.forEach(function (group) {\n        return group.percentage = valuesByGroup[group.name] / simulatedValuesThisYear.length;\n    });\n    var oneSixth = Math.round(simulatedValuesThisYear.length / 6);\n    done({\n        buckets: buckets,\n        groups: nonEmptyGroups,\n        max: simulatedValuesThisYear[simulatedValuesThisYear.length - 1],\n        median: median(simulatedValuesThisYear),\n        min: simulatedValuesThisYear[0],\n        project: project,\n        twoThird: {\n            max: simulatedValuesThisYear[simulatedValuesThisYear.length - oneSixth],\n            min: simulatedValuesThisYear[oneSixth]\n        }\n    });\n}\nfunction threadsMonteCarlo(userOptions, pool) {\n    var options = initializeOptions(userOptions);\n    var jobs = [];\n    pool.run(calculateProject, [__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util__[\"a\" /* toFullQualifiedURL */])(__webpack_require__(17))]);\n    for (var _iterator5 = options.projects, _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _iterator5[Symbol.iterator]();;) {\n        var _ref6;\n\n        if (_isArray5) {\n            if (_i5 >= _iterator5.length) break;\n            _ref6 = _iterator5[_i5++];\n        } else {\n            _i5 = _iterator5.next();\n            if (_i5.done) break;\n            _ref6 = _i5.value;\n        }\n\n        var project = _ref6;\n\n        jobs.push(pool.send({ options: options, project: project }).promise());\n    }\n    return Promise.all(jobs);\n}\n\n/***/ },\n/* 29 */\n/***/ function(module, exports) {\n\n/*!\n * Benchmark.js <https://benchmarkjs.com/>\n * Copyright 2010-2016 Mathias Bynens <https://mths.be/>\n * Based on JSLitmus.js, copyright Robert Kieffer <http://broofa.com/>\n * Modified by John-David Dalton <http://allyoucanleet.com/>\n * Available under MIT license <https://mths.be/mit>\n */\n;(function() {\n  'use strict';\n\n  /** Used as a safe reference for `undefined` in pre ES5 environments. */\n  var undefined;\n\n  /** Used to determine if values are of the language type Object. */\n  var objectTypes = {\n    'function': true,\n    'object': true\n  };\n\n  /** Used as a reference to the global object. */\n  var root = (objectTypes[typeof window] && window) || this;\n\n  /** Detect free variable `define`. */\n  var freeDefine = typeof define == 'function' && typeof define.amd == 'object' && define.amd && define;\n\n  /** Detect free variable `exports`. */\n  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;\n\n  /** Detect free variable `module`. */\n  var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;\n\n  /** Detect free variable `global` from Node.js or Browserified code and use it as `root`. */\n  var freeGlobal = freeExports && freeModule && typeof global == 'object' && global;\n  if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal)) {\n    root = freeGlobal;\n  }\n\n  /** Detect free variable `require`. */\n  var freeRequire = typeof require == 'function' && require;\n\n  /** Used to assign each benchmark an incremented id. */\n  var counter = 0;\n\n  /** Detect the popular CommonJS extension `module.exports`. */\n  var moduleExports = freeModule && freeModule.exports === freeExports && freeExports;\n\n  /** Used to detect primitive types. */\n  var rePrimitive = /^(?:boolean|number|string|undefined)$/;\n\n  /** Used to make every compiled test unique. */\n  var uidCounter = 0;\n\n  /** Used to assign default `context` object properties. */\n  var contextProps = [\n    'Array', 'Date', 'Function', 'Math', 'Object', 'RegExp', 'String', '_',\n    'clearTimeout', 'chrome', 'chromium', 'document', 'navigator', 'phantom',\n    'platform', 'process', 'runtime', 'setTimeout'\n  ];\n\n  /** Used to avoid hz of Infinity. */\n  var divisors = {\n    '1': 4096,\n    '2': 512,\n    '3': 64,\n    '4': 8,\n    '5': 0\n  };\n\n  /**\n   * T-Distribution two-tailed critical values for 95% confidence.\n   * For more info see http://www.itl.nist.gov/div898/handbook/eda/section3/eda3672.htm.\n   */\n  var tTable = {\n    '1':  12.706, '2':  4.303, '3':  3.182, '4':  2.776, '5':  2.571, '6':  2.447,\n    '7':  2.365,  '8':  2.306, '9':  2.262, '10': 2.228, '11': 2.201, '12': 2.179,\n    '13': 2.16,   '14': 2.145, '15': 2.131, '16': 2.12,  '17': 2.11,  '18': 2.101,\n    '19': 2.093,  '20': 2.086, '21': 2.08,  '22': 2.074, '23': 2.069, '24': 2.064,\n    '25': 2.06,   '26': 2.056, '27': 2.052, '28': 2.048, '29': 2.045, '30': 2.042,\n    'infinity': 1.96\n  };\n\n  /**\n   * Critical Mann-Whitney U-values for 95% confidence.\n   * For more info see http://www.saburchill.com/IBbiology/stats/003.html.\n   */\n  var uTable = {\n    '5':  [0, 1, 2],\n    '6':  [1, 2, 3, 5],\n    '7':  [1, 3, 5, 6, 8],\n    '8':  [2, 4, 6, 8, 10, 13],\n    '9':  [2, 4, 7, 10, 12, 15, 17],\n    '10': [3, 5, 8, 11, 14, 17, 20, 23],\n    '11': [3, 6, 9, 13, 16, 19, 23, 26, 30],\n    '12': [4, 7, 11, 14, 18, 22, 26, 29, 33, 37],\n    '13': [4, 8, 12, 16, 20, 24, 28, 33, 37, 41, 45],\n    '14': [5, 9, 13, 17, 22, 26, 31, 36, 40, 45, 50, 55],\n    '15': [5, 10, 14, 19, 24, 29, 34, 39, 44, 49, 54, 59, 64],\n    '16': [6, 11, 15, 21, 26, 31, 37, 42, 47, 53, 59, 64, 70, 75],\n    '17': [6, 11, 17, 22, 28, 34, 39, 45, 51, 57, 63, 67, 75, 81, 87],\n    '18': [7, 12, 18, 24, 30, 36, 42, 48, 55, 61, 67, 74, 80, 86, 93, 99],\n    '19': [7, 13, 19, 25, 32, 38, 45, 52, 58, 65, 72, 78, 85, 92, 99, 106, 113],\n    '20': [8, 14, 20, 27, 34, 41, 48, 55, 62, 69, 76, 83, 90, 98, 105, 112, 119, 127],\n    '21': [8, 15, 22, 29, 36, 43, 50, 58, 65, 73, 80, 88, 96, 103, 111, 119, 126, 134, 142],\n    '22': [9, 16, 23, 30, 38, 45, 53, 61, 69, 77, 85, 93, 101, 109, 117, 125, 133, 141, 150, 158],\n    '23': [9, 17, 24, 32, 40, 48, 56, 64, 73, 81, 89, 98, 106, 115, 123, 132, 140, 149, 157, 166, 175],\n    '24': [10, 17, 25, 33, 42, 50, 59, 67, 76, 85, 94, 102, 111, 120, 129, 138, 147, 156, 165, 174, 183, 192],\n    '25': [10, 18, 27, 35, 44, 53, 62, 71, 80, 89, 98, 107, 117, 126, 135, 145, 154, 163, 173, 182, 192, 201, 211],\n    '26': [11, 19, 28, 37, 46, 55, 64, 74, 83, 93, 102, 112, 122, 132, 141, 151, 161, 171, 181, 191, 200, 210, 220, 230],\n    '27': [11, 20, 29, 38, 48, 57, 67, 77, 87, 97, 107, 118, 125, 138, 147, 158, 168, 178, 188, 199, 209, 219, 230, 240, 250],\n    '28': [12, 21, 30, 40, 50, 60, 70, 80, 90, 101, 111, 122, 132, 143, 154, 164, 175, 186, 196, 207, 218, 228, 239, 250, 261, 272],\n    '29': [13, 22, 32, 42, 52, 62, 73, 83, 94, 105, 116, 127, 138, 149, 160, 171, 182, 193, 204, 215, 226, 238, 249, 260, 271, 282, 294],\n    '30': [13, 23, 33, 43, 54, 65, 76, 87, 98, 109, 120, 131, 143, 154, 166, 177, 189, 200, 212, 223, 235, 247, 258, 270, 282, 293, 305, 317]\n  };\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Create a new `Benchmark` function using the given `context` object.\n   *\n   * @static\n   * @memberOf Benchmark\n   * @param {Object} [context=root] The context object.\n   * @returns {Function} Returns a new `Benchmark` function.\n   */\n  function runInContext(context) {\n    // Exit early if unable to acquire lodash.\n    var _ = context && context._ || require('lodash') || root._;\n    if (!_) {\n      Benchmark.runInContext = runInContext;\n      return Benchmark;\n    }\n    // Avoid issues with some ES3 environments that attempt to use values, named\n    // after built-in constructors like `Object`, for the creation of literals.\n    // ES5 clears this up by stating that literals must use built-in constructors.\n    // See http://es5.github.io/#x11.1.5.\n    context = context ? _.defaults(root.Object(), context, _.pick(root, contextProps)) : root;\n\n    /** Native constructor references. */\n    var Array = context.Array,\n        Date = context.Date,\n        Function = context.Function,\n        Math = context.Math,\n        Object = context.Object,\n        RegExp = context.RegExp,\n        String = context.String;\n\n    /** Used for `Array` and `Object` method references. */\n    var arrayRef = [],\n        objectProto = Object.prototype;\n\n    /** Native method shortcuts. */\n    var abs = Math.abs,\n        clearTimeout = context.clearTimeout,\n        floor = Math.floor,\n        log = Math.log,\n        max = Math.max,\n        min = Math.min,\n        pow = Math.pow,\n        push = arrayRef.push,\n        setTimeout = context.setTimeout,\n        shift = arrayRef.shift,\n        slice = arrayRef.slice,\n        sqrt = Math.sqrt,\n        toString = objectProto.toString,\n        unshift = arrayRef.unshift;\n\n    /** Used to avoid inclusion in Browserified bundles. */\n    var req = require;\n\n    /** Detect DOM document object. */\n    var doc = isHostType(context, 'document') && context.document;\n\n    /** Used to access Wade Simmons' Node.js `microtime` module. */\n    var microtimeObject = req('microtime');\n\n    /** Used to access Node.js's high resolution timer. */\n    var processObject = isHostType(context, 'process') && context.process;\n\n    /** Used to prevent a `removeChild` memory leak in IE < 9. */\n    var trash = doc && doc.createElement('div');\n\n    /** Used to integrity check compiled tests. */\n    var uid = 'uid' + _.now();\n\n    /** Used to avoid infinite recursion when methods call each other. */\n    var calledBy = {};\n\n    /**\n     * An object used to flag environments/features.\n     *\n     * @static\n     * @memberOf Benchmark\n     * @type Object\n     */\n    var support = {};\n\n    (function() {\n\n      /**\n       * Detect if running in a browser environment.\n       *\n       * @memberOf Benchmark.support\n       * @type boolean\n       */\n      support.browser = doc && isHostType(context, 'navigator') && !isHostType(context, 'phantom');\n\n      /**\n       * Detect if the Timers API exists.\n       *\n       * @memberOf Benchmark.support\n       * @type boolean\n       */\n      support.timeout = isHostType(context, 'setTimeout') && isHostType(context, 'clearTimeout');\n\n      /**\n       * Detect if function decompilation is support.\n       *\n       * @name decompilation\n       * @memberOf Benchmark.support\n       * @type boolean\n       */\n      try {\n        // Safari 2.x removes commas in object literals from `Function#toString` results.\n        // See http://webk.it/11609 for more details.\n        // Firefox 3.6 and Opera 9.25 strip grouping parentheses from `Function#toString` results.\n        // See http://bugzil.la/559438 for more details.\n        support.decompilation = Function(\n          ('return (' + (function(x) { return { 'x': '' + (1 + x) + '', 'y': 0 }; }) + ')')\n          // Avoid issues with code added by Istanbul.\n          .replace(/__cov__[^;]+;/g, '')\n        )()(0).x === '1';\n      } catch(e) {\n        support.decompilation = false;\n      }\n    }());\n\n    /**\n     * Timer object used by `clock()` and `Deferred#resolve`.\n     *\n     * @private\n     * @type Object\n     */\n    var timer = {\n\n      /**\n       * The timer namespace object or constructor.\n       *\n       * @private\n       * @memberOf timer\n       * @type {Function|Object}\n       */\n      'ns': Date,\n\n      /**\n       * Starts the deferred timer.\n       *\n       * @private\n       * @memberOf timer\n       * @param {Object} deferred The deferred instance.\n       */\n      'start': null, // Lazy defined in `clock()`.\n\n      /**\n       * Stops the deferred timer.\n       *\n       * @private\n       * @memberOf timer\n       * @param {Object} deferred The deferred instance.\n       */\n      'stop': null // Lazy defined in `clock()`.\n    };\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * The Benchmark constructor.\n     *\n     * Note: The Benchmark constructor exposes a handful of lodash methods to\n     * make working with arrays, collections, and objects easier. The lodash\n     * methods are:\n     * [`each/forEach`](https://lodash.com/docs#forEach), [`forOwn`](https://lodash.com/docs#forOwn),\n     * [`has`](https://lodash.com/docs#has), [`indexOf`](https://lodash.com/docs#indexOf),\n     * [`map`](https://lodash.com/docs#map), and [`reduce`](https://lodash.com/docs#reduce)\n     *\n     * @constructor\n     * @param {string} name A name to identify the benchmark.\n     * @param {Function|string} fn The test to benchmark.\n     * @param {Object} [options={}] Options object.\n     * @example\n     *\n     * // basic usage (the `new` operator is optional)\n     * var bench = new Benchmark(fn);\n     *\n     * // or using a name first\n     * var bench = new Benchmark('foo', fn);\n     *\n     * // or with options\n     * var bench = new Benchmark('foo', fn, {\n     *\n     *   // displayed by `Benchmark#toString` if `name` is not available\n     *   'id': 'xyz',\n     *\n     *   // called when the benchmark starts running\n     *   'onStart': onStart,\n     *\n     *   // called after each run cycle\n     *   'onCycle': onCycle,\n     *\n     *   // called when aborted\n     *   'onAbort': onAbort,\n     *\n     *   // called when a test errors\n     *   'onError': onError,\n     *\n     *   // called when reset\n     *   'onReset': onReset,\n     *\n     *   // called when the benchmark completes running\n     *   'onComplete': onComplete,\n     *\n     *   // compiled/called before the test loop\n     *   'setup': setup,\n     *\n     *   // compiled/called after the test loop\n     *   'teardown': teardown\n     * });\n     *\n     * // or name and options\n     * var bench = new Benchmark('foo', {\n     *\n     *   // a flag to indicate the benchmark is deferred\n     *   'defer': true,\n     *\n     *   // benchmark test function\n     *   'fn': function(deferred) {\n     *     // call `Deferred#resolve` when the deferred test is finished\n     *     deferred.resolve();\n     *   }\n     * });\n     *\n     * // or options only\n     * var bench = new Benchmark({\n     *\n     *   // benchmark name\n     *   'name': 'foo',\n     *\n     *   // benchmark test as a string\n     *   'fn': '[1,2,3,4].sort()'\n     * });\n     *\n     * // a test's `this` binding is set to the benchmark instance\n     * var bench = new Benchmark('foo', function() {\n     *   'My name is '.concat(this.name); // \"My name is foo\"\n     * });\n     */\n    function Benchmark(name, fn, options) {\n      var bench = this;\n\n      // Allow instance creation without the `new` operator.\n      if (!(bench instanceof Benchmark)) {\n        return new Benchmark(name, fn, options);\n      }\n      // Juggle arguments.\n      if (_.isPlainObject(name)) {\n        // 1 argument (options).\n        options = name;\n      }\n      else if (_.isFunction(name)) {\n        // 2 arguments (fn, options).\n        options = fn;\n        fn = name;\n      }\n      else if (_.isPlainObject(fn)) {\n        // 2 arguments (name, options).\n        options = fn;\n        fn = null;\n        bench.name = name;\n      }\n      else {\n        // 3 arguments (name, fn [, options]).\n        bench.name = name;\n      }\n      setOptions(bench, options);\n\n      bench.id || (bench.id = ++counter);\n      bench.fn == null && (bench.fn = fn);\n\n      bench.stats = cloneDeep(bench.stats);\n      bench.times = cloneDeep(bench.times);\n    }\n\n    /**\n     * The Deferred constructor.\n     *\n     * @constructor\n     * @memberOf Benchmark\n     * @param {Object} clone The cloned benchmark instance.\n     */\n    function Deferred(clone) {\n      var deferred = this;\n      if (!(deferred instanceof Deferred)) {\n        return new Deferred(clone);\n      }\n      deferred.benchmark = clone;\n      clock(deferred);\n    }\n\n    /**\n     * The Event constructor.\n     *\n     * @constructor\n     * @memberOf Benchmark\n     * @param {Object|string} type The event type.\n     */\n    function Event(type) {\n      var event = this;\n      if (type instanceof Event) {\n        return type;\n      }\n      return (event instanceof Event)\n        ? _.assign(event, { 'timeStamp': _.now() }, typeof type == 'string' ? { 'type': type } : type)\n        : new Event(type);\n    }\n\n    /**\n     * The Suite constructor.\n     *\n     * Note: Each Suite instance has a handful of wrapped lodash methods to\n     * make working with Suites easier. The wrapped lodash methods are:\n     * [`each/forEach`](https://lodash.com/docs#forEach), [`indexOf`](https://lodash.com/docs#indexOf),\n     * [`map`](https://lodash.com/docs#map), and [`reduce`](https://lodash.com/docs#reduce)\n     *\n     * @constructor\n     * @memberOf Benchmark\n     * @param {string} name A name to identify the suite.\n     * @param {Object} [options={}] Options object.\n     * @example\n     *\n     * // basic usage (the `new` operator is optional)\n     * var suite = new Benchmark.Suite;\n     *\n     * // or using a name first\n     * var suite = new Benchmark.Suite('foo');\n     *\n     * // or with options\n     * var suite = new Benchmark.Suite('foo', {\n     *\n     *   // called when the suite starts running\n     *   'onStart': onStart,\n     *\n     *   // called between running benchmarks\n     *   'onCycle': onCycle,\n     *\n     *   // called when aborted\n     *   'onAbort': onAbort,\n     *\n     *   // called when a test errors\n     *   'onError': onError,\n     *\n     *   // called when reset\n     *   'onReset': onReset,\n     *\n     *   // called when the suite completes running\n     *   'onComplete': onComplete\n     * });\n     */\n    function Suite(name, options) {\n      var suite = this;\n\n      // Allow instance creation without the `new` operator.\n      if (!(suite instanceof Suite)) {\n        return new Suite(name, options);\n      }\n      // Juggle arguments.\n      if (_.isPlainObject(name)) {\n        // 1 argument (options).\n        options = name;\n      } else {\n        // 2 arguments (name [, options]).\n        suite.name = name;\n      }\n      setOptions(suite, options);\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * A specialized version of `_.cloneDeep` which only clones arrays and plain\n     * objects assigning all other values by reference.\n     *\n     * @private\n     * @param {*} value The value to clone.\n     * @returns {*} The cloned value.\n     */\n    var cloneDeep = _.partial(_.cloneDeepWith, _, function(value) {\n      // Only clone primitives, arrays, and plain objects.\n      return (_.isObject(value) && !_.isArray(value) && !_.isPlainObject(value))\n        ? value\n        : undefined;\n    });\n\n    /**\n     * Creates a function from the given arguments string and body.\n     *\n     * @private\n     * @param {string} args The comma separated function arguments.\n     * @param {string} body The function body.\n     * @returns {Function} The new function.\n     */\n    function createFunction() {\n      // Lazy define.\n      createFunction = function(args, body) {\n        var result,\n            anchor = freeDefine ? freeDefine.amd : Benchmark,\n            prop = uid + 'createFunction';\n\n        runScript((freeDefine ? 'define.amd.' : 'Benchmark.') + prop + '=function(' + args + '){' + body + '}');\n        result = anchor[prop];\n        delete anchor[prop];\n        return result;\n      };\n      // Fix JaegerMonkey bug.\n      // For more information see http://bugzil.la/639720.\n      createFunction = support.browser && (createFunction('', 'return\"' + uid + '\"') || _.noop)() == uid ? createFunction : Function;\n      return createFunction.apply(null, arguments);\n    }\n\n    /**\n     * Delay the execution of a function based on the benchmark's `delay` property.\n     *\n     * @private\n     * @param {Object} bench The benchmark instance.\n     * @param {Object} fn The function to execute.\n     */\n    function delay(bench, fn) {\n      bench._timerId = _.delay(fn, bench.delay * 1e3);\n    }\n\n    /**\n     * Destroys the given element.\n     *\n     * @private\n     * @param {Element} element The element to destroy.\n     */\n    function destroyElement(element) {\n      trash.appendChild(element);\n      trash.innerHTML = '';\n    }\n\n    /**\n     * Gets the name of the first argument from a function's source.\n     *\n     * @private\n     * @param {Function} fn The function.\n     * @returns {string} The argument name.\n     */\n    function getFirstArgument(fn) {\n      return (!_.has(fn, 'toString') &&\n        (/^[\\s(]*function[^(]*\\(([^\\s,)]+)/.exec(fn) || 0)[1]) || '';\n    }\n\n    /**\n     * Computes the arithmetic mean of a sample.\n     *\n     * @private\n     * @param {Array} sample The sample.\n     * @returns {number} The mean.\n     */\n    function getMean(sample) {\n      return (_.reduce(sample, function(sum, x) {\n        return sum + x;\n      }) / sample.length) || 0;\n    }\n\n    /**\n     * Gets the source code of a function.\n     *\n     * @private\n     * @param {Function} fn The function.\n     * @returns {string} The function's source code.\n     */\n    function getSource(fn) {\n      var result = '';\n      if (isStringable(fn)) {\n        result = String(fn);\n      } else if (support.decompilation) {\n        // Escape the `{` for Firefox 1.\n        result = _.result(/^[^{]+\\{([\\s\\S]*)\\}\\s*$/.exec(fn), 1);\n      }\n      // Trim string.\n      result = (result || '').replace(/^\\s+|\\s+$/g, '');\n\n      // Detect strings containing only the \"use strict\" directive.\n      return /^(?:\\/\\*+[\\w\\W]*?\\*\\/|\\/\\/.*?[\\n\\r\\u2028\\u2029]|\\s)*([\"'])use strict\\1;?$/.test(result)\n        ? ''\n        : result;\n    }\n\n    /**\n     * Checks if an object is of the specified class.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @param {string} name The name of the class.\n     * @returns {boolean} Returns `true` if the value is of the specified class, else `false`.\n     */\n    function isClassOf(value, name) {\n      return value != null && toString.call(value) == '[object ' + name + ']';\n    }\n\n    /**\n     * Host objects can return type values that are different from their actual\n     * data type. The objects we are concerned with usually return non-primitive\n     * types of \"object\", \"function\", or \"unknown\".\n     *\n     * @private\n     * @param {*} object The owner of the property.\n     * @param {string} property The property to check.\n     * @returns {boolean} Returns `true` if the property value is a non-primitive, else `false`.\n     */\n    function isHostType(object, property) {\n      if (object == null) {\n        return false;\n      }\n      var type = typeof object[property];\n      return !rePrimitive.test(type) && (type != 'object' || !!object[property]);\n    }\n\n    /**\n     * Checks if a value can be safely coerced to a string.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if the value can be coerced, else `false`.\n     */\n    function isStringable(value) {\n      return _.isString(value) || (_.has(value, 'toString') && _.isFunction(value.toString));\n    }\n\n    /**\n     * A wrapper around `require` to suppress `module missing` errors.\n     *\n     * @private\n     * @param {string} id The module id.\n     * @returns {*} The exported module or `null`.\n     */\n    function require(id) {\n      try {\n        var result = freeExports && freeRequire(id);\n      } catch(e) {}\n      return result || null;\n    }\n\n    /**\n     * Runs a snippet of JavaScript via script injection.\n     *\n     * @private\n     * @param {string} code The code to run.\n     */\n    function runScript(code) {\n      var anchor = freeDefine ? define.amd : Benchmark,\n          script = doc.createElement('script'),\n          sibling = doc.getElementsByTagName('script')[0],\n          parent = sibling.parentNode,\n          prop = uid + 'runScript',\n          prefix = '(' + (freeDefine ? 'define.amd.' : 'Benchmark.') + prop + '||function(){})();';\n\n      // Firefox 2.0.0.2 cannot use script injection as intended because it executes\n      // asynchronously, but that's OK because script injection is only used to avoid\n      // the previously commented JaegerMonkey bug.\n      try {\n        // Remove the inserted script *before* running the code to avoid differences\n        // in the expected script element count/order of the document.\n        script.appendChild(doc.createTextNode(prefix + code));\n        anchor[prop] = function() { destroyElement(script); };\n      } catch(e) {\n        parent = parent.cloneNode(false);\n        sibling = null;\n        script.text = code;\n      }\n      parent.insertBefore(script, sibling);\n      delete anchor[prop];\n    }\n\n    /**\n     * A helper function for setting options/event handlers.\n     *\n     * @private\n     * @param {Object} object The benchmark or suite instance.\n     * @param {Object} [options={}] Options object.\n     */\n    function setOptions(object, options) {\n      options = object.options = _.assign({}, cloneDeep(object.constructor.options), cloneDeep(options));\n\n      _.forOwn(options, function(value, key) {\n        if (value != null) {\n          // Add event listeners.\n          if (/^on[A-Z]/.test(key)) {\n            _.each(key.split(' '), function(key) {\n              object.on(key.slice(2).toLowerCase(), value);\n            });\n          } else if (!_.has(object, key)) {\n            object[key] = cloneDeep(value);\n          }\n        }\n      });\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Handles cycling/completing the deferred benchmark.\n     *\n     * @memberOf Benchmark.Deferred\n     */\n    function resolve() {\n      var deferred = this,\n          clone = deferred.benchmark,\n          bench = clone._original;\n\n      if (bench.aborted) {\n        // cycle() -> clone cycle/complete event -> compute()'s invoked bench.run() cycle/complete.\n        deferred.teardown();\n        clone.running = false;\n        cycle(deferred);\n      }\n      else if (++deferred.cycles < clone.count) {\n        clone.compiled.call(deferred, context, timer);\n      }\n      else {\n        timer.stop(deferred);\n        deferred.teardown();\n        delay(clone, function() { cycle(deferred); });\n      }\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * A generic `Array#filter` like method.\n     *\n     * @static\n     * @memberOf Benchmark\n     * @param {Array} array The array to iterate over.\n     * @param {Function|string} callback The function/alias called per iteration.\n     * @returns {Array} A new array of values that passed callback filter.\n     * @example\n     *\n     * // get odd numbers\n     * Benchmark.filter([1, 2, 3, 4, 5], function(n) {\n     *   return n % 2;\n     * }); // -> [1, 3, 5];\n     *\n     * // get fastest benchmarks\n     * Benchmark.filter(benches, 'fastest');\n     *\n     * // get slowest benchmarks\n     * Benchmark.filter(benches, 'slowest');\n     *\n     * // get benchmarks that completed without erroring\n     * Benchmark.filter(benches, 'successful');\n     */\n    function filter(array, callback) {\n      if (callback === 'successful') {\n        // Callback to exclude those that are errored, unrun, or have hz of Infinity.\n        callback = function(bench) {\n          return bench.cycles && _.isFinite(bench.hz) && !bench.error;\n        };\n      }\n      else if (callback === 'fastest' || callback === 'slowest') {\n        // Get successful, sort by period + margin of error, and filter fastest/slowest.\n        var result = filter(array, 'successful').sort(function(a, b) {\n          a = a.stats; b = b.stats;\n          return (a.mean + a.moe > b.mean + b.moe ? 1 : -1) * (callback === 'fastest' ? 1 : -1);\n        });\n\n        return _.filter(result, function(bench) {\n          return result[0].compare(bench) == 0;\n        });\n      }\n      return _.filter(array, callback);\n    }\n\n    /**\n     * Converts a number to a more readable comma-separated string representation.\n     *\n     * @static\n     * @memberOf Benchmark\n     * @param {number} number The number to convert.\n     * @returns {string} The more readable string representation.\n     */\n    function formatNumber(number) {\n      number = String(number).split('.');\n      return number[0].replace(/(?=(?:\\d{3})+$)(?!\\b)/g, ',') +\n        (number[1] ? '.' + number[1] : '');\n    }\n\n    /**\n     * Invokes a method on all items in an array.\n     *\n     * @static\n     * @memberOf Benchmark\n     * @param {Array} benches Array of benchmarks to iterate over.\n     * @param {Object|string} name The name of the method to invoke OR options object.\n     * @param {...*} [args] Arguments to invoke the method with.\n     * @returns {Array} A new array of values returned from each method invoked.\n     * @example\n     *\n     * // invoke `reset` on all benchmarks\n     * Benchmark.invoke(benches, 'reset');\n     *\n     * // invoke `emit` with arguments\n     * Benchmark.invoke(benches, 'emit', 'complete', listener);\n     *\n     * // invoke `run(true)`, treat benchmarks as a queue, and register invoke callbacks\n     * Benchmark.invoke(benches, {\n     *\n     *   // invoke the `run` method\n     *   'name': 'run',\n     *\n     *   // pass a single argument\n     *   'args': true,\n     *\n     *   // treat as queue, removing benchmarks from front of `benches` until empty\n     *   'queued': true,\n     *\n     *   // called before any benchmarks have been invoked.\n     *   'onStart': onStart,\n     *\n     *   // called between invoking benchmarks\n     *   'onCycle': onCycle,\n     *\n     *   // called after all benchmarks have been invoked.\n     *   'onComplete': onComplete\n     * });\n     */\n    function invoke(benches, name) {\n      var args,\n          bench,\n          queued,\n          index = -1,\n          eventProps = { 'currentTarget': benches },\n          options = { 'onStart': _.noop, 'onCycle': _.noop, 'onComplete': _.noop },\n          result = _.toArray(benches);\n\n      /**\n       * Invokes the method of the current object and if synchronous, fetches the next.\n       */\n      function execute() {\n        var listeners,\n            async = isAsync(bench);\n\n        if (async) {\n          // Use `getNext` as the first listener.\n          bench.on('complete', getNext);\n          listeners = bench.events.complete;\n          listeners.splice(0, 0, listeners.pop());\n        }\n        // Execute method.\n        result[index] = _.isFunction(bench && bench[name]) ? bench[name].apply(bench, args) : undefined;\n        // If synchronous return `true` until finished.\n        return !async && getNext();\n      }\n\n      /**\n       * Fetches the next bench or executes `onComplete` callback.\n       */\n      function getNext(event) {\n        var cycleEvent,\n            last = bench,\n            async = isAsync(last);\n\n        if (async) {\n          last.off('complete', getNext);\n          last.emit('complete');\n        }\n        // Emit \"cycle\" event.\n        eventProps.type = 'cycle';\n        eventProps.target = last;\n        cycleEvent = Event(eventProps);\n        options.onCycle.call(benches, cycleEvent);\n\n        // Choose next benchmark if not exiting early.\n        if (!cycleEvent.aborted && raiseIndex() !== false) {\n          bench = queued ? benches[0] : result[index];\n          if (isAsync(bench)) {\n            delay(bench, execute);\n          }\n          else if (async) {\n            // Resume execution if previously asynchronous but now synchronous.\n            while (execute()) {}\n          }\n          else {\n            // Continue synchronous execution.\n            return true;\n          }\n        } else {\n          // Emit \"complete\" event.\n          eventProps.type = 'complete';\n          options.onComplete.call(benches, Event(eventProps));\n        }\n        // When used as a listener `event.aborted = true` will cancel the rest of\n        // the \"complete\" listeners because they were already called above and when\n        // used as part of `getNext` the `return false` will exit the execution while-loop.\n        if (event) {\n          event.aborted = true;\n        } else {\n          return false;\n        }\n      }\n\n      /**\n       * Checks if invoking `Benchmark#run` with asynchronous cycles.\n       */\n      function isAsync(object) {\n        // Avoid using `instanceof` here because of IE memory leak issues with host objects.\n        var async = args[0] && args[0].async;\n        return name == 'run' && (object instanceof Benchmark) &&\n          ((async == null ? object.options.async : async) && support.timeout || object.defer);\n      }\n\n      /**\n       * Raises `index` to the next defined index or returns `false`.\n       */\n      function raiseIndex() {\n        index++;\n\n        // If queued remove the previous bench.\n        if (queued && index > 0) {\n          shift.call(benches);\n        }\n        // If we reached the last index then return `false`.\n        return (queued ? benches.length : index < result.length)\n          ? index\n          : (index = false);\n      }\n      // Juggle arguments.\n      if (_.isString(name)) {\n        // 2 arguments (array, name).\n        args = slice.call(arguments, 2);\n      } else {\n        // 2 arguments (array, options).\n        options = _.assign(options, name);\n        name = options.name;\n        args = _.isArray(args = 'args' in options ? options.args : []) ? args : [args];\n        queued = options.queued;\n      }\n      // Start iterating over the array.\n      if (raiseIndex() !== false) {\n        // Emit \"start\" event.\n        bench = result[index];\n        eventProps.type = 'start';\n        eventProps.target = bench;\n        options.onStart.call(benches, Event(eventProps));\n\n        // End early if the suite was aborted in an \"onStart\" listener.\n        if (name == 'run' && (benches instanceof Suite) && benches.aborted) {\n          // Emit \"cycle\" event.\n          eventProps.type = 'cycle';\n          options.onCycle.call(benches, Event(eventProps));\n          // Emit \"complete\" event.\n          eventProps.type = 'complete';\n          options.onComplete.call(benches, Event(eventProps));\n        }\n        // Start method execution.\n        else {\n          if (isAsync(bench)) {\n            delay(bench, execute);\n          } else {\n            while (execute()) {}\n          }\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Creates a string of joined array values or object key-value pairs.\n     *\n     * @static\n     * @memberOf Benchmark\n     * @param {Array|Object} object The object to operate on.\n     * @param {string} [separator1=','] The separator used between key-value pairs.\n     * @param {string} [separator2=': '] The separator used between keys and values.\n     * @returns {string} The joined result.\n     */\n    function join(object, separator1, separator2) {\n      var result = [],\n          length = (object = Object(object)).length,\n          arrayLike = length === length >>> 0;\n\n      separator2 || (separator2 = ': ');\n      _.each(object, function(value, key) {\n        result.push(arrayLike ? value : key + separator2 + value);\n      });\n      return result.join(separator1 || ',');\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Aborts all benchmarks in the suite.\n     *\n     * @name abort\n     * @memberOf Benchmark.Suite\n     * @returns {Object} The suite instance.\n     */\n    function abortSuite() {\n      var event,\n          suite = this,\n          resetting = calledBy.resetSuite;\n\n      if (suite.running) {\n        event = Event('abort');\n        suite.emit(event);\n        if (!event.cancelled || resetting) {\n          // Avoid infinite recursion.\n          calledBy.abortSuite = true;\n          suite.reset();\n          delete calledBy.abortSuite;\n\n          if (!resetting) {\n            suite.aborted = true;\n            invoke(suite, 'abort');\n          }\n        }\n      }\n      return suite;\n    }\n\n    /**\n     * Adds a test to the benchmark suite.\n     *\n     * @memberOf Benchmark.Suite\n     * @param {string} name A name to identify the benchmark.\n     * @param {Function|string} fn The test to benchmark.\n     * @param {Object} [options={}] Options object.\n     * @returns {Object} The suite instance.\n     * @example\n     *\n     * // basic usage\n     * suite.add(fn);\n     *\n     * // or using a name first\n     * suite.add('foo', fn);\n     *\n     * // or with options\n     * suite.add('foo', fn, {\n     *   'onCycle': onCycle,\n     *   'onComplete': onComplete\n     * });\n     *\n     * // or name and options\n     * suite.add('foo', {\n     *   'fn': fn,\n     *   'onCycle': onCycle,\n     *   'onComplete': onComplete\n     * });\n     *\n     * // or options only\n     * suite.add({\n     *   'name': 'foo',\n     *   'fn': fn,\n     *   'onCycle': onCycle,\n     *   'onComplete': onComplete\n     * });\n     */\n    function add(name, fn, options) {\n      var suite = this,\n          bench = new Benchmark(name, fn, options),\n          event = Event({ 'type': 'add', 'target': bench });\n\n      if (suite.emit(event), !event.cancelled) {\n        suite.push(bench);\n      }\n      return suite;\n    }\n\n    /**\n     * Creates a new suite with cloned benchmarks.\n     *\n     * @name clone\n     * @memberOf Benchmark.Suite\n     * @param {Object} options Options object to overwrite cloned options.\n     * @returns {Object} The new suite instance.\n     */\n    function cloneSuite(options) {\n      var suite = this,\n          result = new suite.constructor(_.assign({}, suite.options, options));\n\n      // Copy own properties.\n      _.forOwn(suite, function(value, key) {\n        if (!_.has(result, key)) {\n          result[key] = value && _.isFunction(value.clone)\n            ? value.clone()\n            : cloneDeep(value);\n        }\n      });\n      return result;\n    }\n\n    /**\n     * An `Array#filter` like method.\n     *\n     * @name filter\n     * @memberOf Benchmark.Suite\n     * @param {Function|string} callback The function/alias called per iteration.\n     * @returns {Object} A new suite of benchmarks that passed callback filter.\n     */\n    function filterSuite(callback) {\n      var suite = this,\n          result = new suite.constructor(suite.options);\n\n      result.push.apply(result, filter(suite, callback));\n      return result;\n    }\n\n    /**\n     * Resets all benchmarks in the suite.\n     *\n     * @name reset\n     * @memberOf Benchmark.Suite\n     * @returns {Object} The suite instance.\n     */\n    function resetSuite() {\n      var event,\n          suite = this,\n          aborting = calledBy.abortSuite;\n\n      if (suite.running && !aborting) {\n        // No worries, `resetSuite()` is called within `abortSuite()`.\n        calledBy.resetSuite = true;\n        suite.abort();\n        delete calledBy.resetSuite;\n      }\n      // Reset if the state has changed.\n      else if ((suite.aborted || suite.running) &&\n          (suite.emit(event = Event('reset')), !event.cancelled)) {\n        suite.aborted = suite.running = false;\n        if (!aborting) {\n          invoke(suite, 'reset');\n        }\n      }\n      return suite;\n    }\n\n    /**\n     * Runs the suite.\n     *\n     * @name run\n     * @memberOf Benchmark.Suite\n     * @param {Object} [options={}] Options object.\n     * @returns {Object} The suite instance.\n     * @example\n     *\n     * // basic usage\n     * suite.run();\n     *\n     * // or with options\n     * suite.run({ 'async': true, 'queued': true });\n     */\n    function runSuite(options) {\n      var suite = this;\n\n      suite.reset();\n      suite.running = true;\n      options || (options = {});\n\n      invoke(suite, {\n        'name': 'run',\n        'args': options,\n        'queued': options.queued,\n        'onStart': function(event) {\n          suite.emit(event);\n        },\n        'onCycle': function(event) {\n          var bench = event.target;\n          if (bench.error) {\n            suite.emit({ 'type': 'error', 'target': bench });\n          }\n          suite.emit(event);\n          event.aborted = suite.aborted;\n        },\n        'onComplete': function(event) {\n          suite.running = false;\n          suite.emit(event);\n        }\n      });\n      return suite;\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Executes all registered listeners of the specified event type.\n     *\n     * @memberOf Benchmark, Benchmark.Suite\n     * @param {Object|string} type The event type or object.\n     * @param {...*} [args] Arguments to invoke the listener with.\n     * @returns {*} Returns the return value of the last listener executed.\n     */\n    function emit(type) {\n      var listeners,\n          object = this,\n          event = Event(type),\n          events = object.events,\n          args = (arguments[0] = event, arguments);\n\n      event.currentTarget || (event.currentTarget = object);\n      event.target || (event.target = object);\n      delete event.result;\n\n      if (events && (listeners = _.has(events, event.type) && events[event.type])) {\n        _.each(listeners.slice(), function(listener) {\n          if ((event.result = listener.apply(object, args)) === false) {\n            event.cancelled = true;\n          }\n          return !event.aborted;\n        });\n      }\n      return event.result;\n    }\n\n    /**\n     * Returns an array of event listeners for a given type that can be manipulated\n     * to add or remove listeners.\n     *\n     * @memberOf Benchmark, Benchmark.Suite\n     * @param {string} type The event type.\n     * @returns {Array} The listeners array.\n     */\n    function listeners(type) {\n      var object = this,\n          events = object.events || (object.events = {});\n\n      return _.has(events, type) ? events[type] : (events[type] = []);\n    }\n\n    /**\n     * Unregisters a listener for the specified event type(s),\n     * or unregisters all listeners for the specified event type(s),\n     * or unregisters all listeners for all event types.\n     *\n     * @memberOf Benchmark, Benchmark.Suite\n     * @param {string} [type] The event type.\n     * @param {Function} [listener] The function to unregister.\n     * @returns {Object} The current instance.\n     * @example\n     *\n     * // unregister a listener for an event type\n     * bench.off('cycle', listener);\n     *\n     * // unregister a listener for multiple event types\n     * bench.off('start cycle', listener);\n     *\n     * // unregister all listeners for an event type\n     * bench.off('cycle');\n     *\n     * // unregister all listeners for multiple event types\n     * bench.off('start cycle complete');\n     *\n     * // unregister all listeners for all event types\n     * bench.off();\n     */\n    function off(type, listener) {\n      var object = this,\n          events = object.events;\n\n      if (!events) {\n        return object;\n      }\n      _.each(type ? type.split(' ') : events, function(listeners, type) {\n        var index;\n        if (typeof listeners == 'string') {\n          type = listeners;\n          listeners = _.has(events, type) && events[type];\n        }\n        if (listeners) {\n          if (listener) {\n            index = _.indexOf(listeners, listener);\n            if (index > -1) {\n              listeners.splice(index, 1);\n            }\n          } else {\n            listeners.length = 0;\n          }\n        }\n      });\n      return object;\n    }\n\n    /**\n     * Registers a listener for the specified event type(s).\n     *\n     * @memberOf Benchmark, Benchmark.Suite\n     * @param {string} type The event type.\n     * @param {Function} listener The function to register.\n     * @returns {Object} The current instance.\n     * @example\n     *\n     * // register a listener for an event type\n     * bench.on('cycle', listener);\n     *\n     * // register a listener for multiple event types\n     * bench.on('start cycle', listener);\n     */\n    function on(type, listener) {\n      var object = this,\n          events = object.events || (object.events = {});\n\n      _.each(type.split(' '), function(type) {\n        (_.has(events, type)\n          ? events[type]\n          : (events[type] = [])\n        ).push(listener);\n      });\n      return object;\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Aborts the benchmark without recording times.\n     *\n     * @memberOf Benchmark\n     * @returns {Object} The benchmark instance.\n     */\n    function abort() {\n      var event,\n          bench = this,\n          resetting = calledBy.reset;\n\n      if (bench.running) {\n        event = Event('abort');\n        bench.emit(event);\n        if (!event.cancelled || resetting) {\n          // Avoid infinite recursion.\n          calledBy.abort = true;\n          bench.reset();\n          delete calledBy.abort;\n\n          if (support.timeout) {\n            clearTimeout(bench._timerId);\n            delete bench._timerId;\n          }\n          if (!resetting) {\n            bench.aborted = true;\n            bench.running = false;\n          }\n        }\n      }\n      return bench;\n    }\n\n    /**\n     * Creates a new benchmark using the same test and options.\n     *\n     * @memberOf Benchmark\n     * @param {Object} options Options object to overwrite cloned options.\n     * @returns {Object} The new benchmark instance.\n     * @example\n     *\n     * var bizarro = bench.clone({\n     *   'name': 'doppelganger'\n     * });\n     */\n    function clone(options) {\n      var bench = this,\n          result = new bench.constructor(_.assign({}, bench, options));\n\n      // Correct the `options` object.\n      result.options = _.assign({}, cloneDeep(bench.options), cloneDeep(options));\n\n      // Copy own custom properties.\n      _.forOwn(bench, function(value, key) {\n        if (!_.has(result, key)) {\n          result[key] = cloneDeep(value);\n        }\n      });\n\n      return result;\n    }\n\n    /**\n     * Determines if a benchmark is faster than another.\n     *\n     * @memberOf Benchmark\n     * @param {Object} other The benchmark to compare.\n     * @returns {number} Returns `-1` if slower, `1` if faster, and `0` if indeterminate.\n     */\n    function compare(other) {\n      var bench = this;\n\n      // Exit early if comparing the same benchmark.\n      if (bench == other) {\n        return 0;\n      }\n      var critical,\n          zStat,\n          sample1 = bench.stats.sample,\n          sample2 = other.stats.sample,\n          size1 = sample1.length,\n          size2 = sample2.length,\n          maxSize = max(size1, size2),\n          minSize = min(size1, size2),\n          u1 = getU(sample1, sample2),\n          u2 = getU(sample2, sample1),\n          u = min(u1, u2);\n\n      function getScore(xA, sampleB) {\n        return _.reduce(sampleB, function(total, xB) {\n          return total + (xB > xA ? 0 : xB < xA ? 1 : 0.5);\n        }, 0);\n      }\n\n      function getU(sampleA, sampleB) {\n        return _.reduce(sampleA, function(total, xA) {\n          return total + getScore(xA, sampleB);\n        }, 0);\n      }\n\n      function getZ(u) {\n        return (u - ((size1 * size2) / 2)) / sqrt((size1 * size2 * (size1 + size2 + 1)) / 12);\n      }\n      // Reject the null hypothesis the two samples come from the\n      // same population (i.e. have the same median) if...\n      if (size1 + size2 > 30) {\n        // ...the z-stat is greater than 1.96 or less than -1.96\n        // http://www.statisticslectures.com/topics/mannwhitneyu/\n        zStat = getZ(u);\n        return abs(zStat) > 1.96 ? (u == u1 ? 1 : -1) : 0;\n      }\n      // ...the U value is less than or equal the critical U value.\n      critical = maxSize < 5 || minSize < 3 ? 0 : uTable[maxSize][minSize - 3];\n      return u <= critical ? (u == u1 ? 1 : -1) : 0;\n    }\n\n    /**\n     * Reset properties and abort if running.\n     *\n     * @memberOf Benchmark\n     * @returns {Object} The benchmark instance.\n     */\n    function reset() {\n      var bench = this;\n      if (bench.running && !calledBy.abort) {\n        // No worries, `reset()` is called within `abort()`.\n        calledBy.reset = true;\n        bench.abort();\n        delete calledBy.reset;\n        return bench;\n      }\n      var event,\n          index = 0,\n          changes = [],\n          queue = [];\n\n      // A non-recursive solution to check if properties have changed.\n      // For more information see http://www.jslab.dk/articles/non.recursive.preorder.traversal.part4.\n      var data = {\n        'destination': bench,\n        'source': _.assign({}, cloneDeep(bench.constructor.prototype), cloneDeep(bench.options))\n      };\n\n      do {\n        _.forOwn(data.source, function(value, key) {\n          var changed,\n              destination = data.destination,\n              currValue = destination[key];\n\n          // Skip pseudo private properties like `_timerId` which could be a\n          // Java object in environments like RingoJS.\n          if (key.charAt(0) == '_') {\n            return;\n          }\n          if (value && typeof value == 'object') {\n            if (_.isArray(value)) {\n              // Check if an array value has changed to a non-array value.\n              if (!_.isArray(currValue)) {\n                changed = currValue = [];\n              }\n              // Check if an array has changed its length.\n              if (currValue.length != value.length) {\n                changed = currValue = currValue.slice(0, value.length);\n                currValue.length = value.length;\n              }\n            }\n            // Check if an object has changed to a non-object value.\n            else if (!currValue || typeof currValue != 'object') {\n              changed = currValue = {};\n            }\n            // Register a changed object.\n            if (changed) {\n              changes.push({ 'destination': destination, 'key': key, 'value': currValue });\n            }\n            queue.push({ 'destination': currValue, 'source': value });\n          }\n          // Register a changed primitive.\n          else if (value !== currValue && !(value == null || _.isFunction(value))) {\n            changes.push({ 'destination': destination, 'key': key, 'value': value });\n          }\n        });\n      }\n      while ((data = queue[index++]));\n\n      // If changed emit the `reset` event and if it isn't cancelled reset the benchmark.\n      if (changes.length && (bench.emit(event = Event('reset')), !event.cancelled)) {\n        _.each(changes, function(data) {\n          data.destination[data.key] = data.value;\n        });\n      }\n      return bench;\n    }\n\n    /**\n     * Displays relevant benchmark information when coerced to a string.\n     *\n     * @name toString\n     * @memberOf Benchmark\n     * @returns {string} A string representation of the benchmark instance.\n     */\n    function toStringBench() {\n      var bench = this,\n          error = bench.error,\n          hz = bench.hz,\n          id = bench.id,\n          stats = bench.stats,\n          size = stats.sample.length,\n          pm = '\\xb1',\n          result = bench.name || (_.isNaN(id) ? id : '<Test #' + id + '>');\n\n      if (error) {\n        var errorStr;\n        if (!_.isObject(error)) {\n          errorStr = String(error);\n        } else if (!_.isError(Error)) {\n          errorStr = join(error);\n        } else {\n          // Error#name and Error#message properties are non-enumerable.\n          errorStr = join(_.assign({ 'name': error.name, 'message': error.message }, error));\n        }\n        result += ': ' + errorStr;\n      }\n      else {\n        result += ' x ' + formatNumber(hz.toFixed(hz < 100 ? 2 : 0)) + ' ops/sec ' + pm +\n          stats.rme.toFixed(2) + '% (' + size + ' run' + (size == 1 ? '' : 's') + ' sampled)';\n      }\n      return result;\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Clocks the time taken to execute a test per cycle (secs).\n     *\n     * @private\n     * @param {Object} bench The benchmark instance.\n     * @returns {number} The time taken.\n     */\n    function clock() {\n      var options = Benchmark.options,\n          templateData = {},\n          timers = [{ 'ns': timer.ns, 'res': max(0.0015, getRes('ms')), 'unit': 'ms' }];\n\n      // Lazy define for hi-res timers.\n      clock = function(clone) {\n        var deferred;\n\n        if (clone instanceof Deferred) {\n          deferred = clone;\n          clone = deferred.benchmark;\n        }\n        var bench = clone._original,\n            stringable = isStringable(bench.fn),\n            count = bench.count = clone.count,\n            decompilable = stringable || (support.decompilation && (clone.setup !== _.noop || clone.teardown !== _.noop)),\n            id = bench.id,\n            name = bench.name || (typeof id == 'number' ? '<Test #' + id + '>' : id),\n            result = 0;\n\n        // Init `minTime` if needed.\n        clone.minTime = bench.minTime || (bench.minTime = bench.options.minTime = options.minTime);\n\n        // Compile in setup/teardown functions and the test loop.\n        // Create a new compiled test, instead of using the cached `bench.compiled`,\n        // to avoid potential engine optimizations enabled over the life of the test.\n        var funcBody = deferred\n          ? 'var d#=this,${fnArg}=d#,m#=d#.benchmark._original,f#=m#.fn,su#=m#.setup,td#=m#.teardown;' +\n            // When `deferred.cycles` is `0` then...\n            'if(!d#.cycles){' +\n            // set `deferred.fn`,\n            'd#.fn=function(){var ${fnArg}=d#;if(typeof f#==\"function\"){try{${fn}\\n}catch(e#){f#(d#)}}else{${fn}\\n}};' +\n            // set `deferred.teardown`,\n            'd#.teardown=function(){d#.cycles=0;if(typeof td#==\"function\"){try{${teardown}\\n}catch(e#){td#()}}else{${teardown}\\n}};' +\n            // execute the benchmark's `setup`,\n            'if(typeof su#==\"function\"){try{${setup}\\n}catch(e#){su#()}}else{${setup}\\n};' +\n            // start timer,\n            't#.start(d#);' +\n            // and then execute `deferred.fn` and return a dummy object.\n            '}d#.fn();return{uid:\"${uid}\"}'\n\n          : 'var r#,s#,m#=this,f#=m#.fn,i#=m#.count,n#=t#.ns;${setup}\\n${begin};' +\n            'while(i#--){${fn}\\n}${end};${teardown}\\nreturn{elapsed:r#,uid:\"${uid}\"}';\n\n        var compiled = bench.compiled = clone.compiled = createCompiled(bench, decompilable, deferred, funcBody),\n            isEmpty = !(templateData.fn || stringable);\n\n        try {\n          if (isEmpty) {\n            // Firefox may remove dead code from `Function#toString` results.\n            // For more information see http://bugzil.la/536085.\n            throw new Error('The test \"' + name + '\" is empty. This may be the result of dead code removal.');\n          }\n          else if (!deferred) {\n            // Pretest to determine if compiled code exits early, usually by a\n            // rogue `return` statement, by checking for a return object with the uid.\n            bench.count = 1;\n            compiled = decompilable && (compiled.call(bench, context, timer) || {}).uid == templateData.uid && compiled;\n            bench.count = count;\n          }\n        } catch(e) {\n          compiled = null;\n          clone.error = e || new Error(String(e));\n          bench.count = count;\n        }\n        // Fallback when a test exits early or errors during pretest.\n        if (!compiled && !deferred && !isEmpty) {\n          funcBody = (\n            stringable || (decompilable && !clone.error)\n              ? 'function f#(){${fn}\\n}var r#,s#,m#=this,i#=m#.count'\n              : 'var r#,s#,m#=this,f#=m#.fn,i#=m#.count'\n            ) +\n            ',n#=t#.ns;${setup}\\n${begin};m#.f#=f#;while(i#--){m#.f#()}${end};' +\n            'delete m#.f#;${teardown}\\nreturn{elapsed:r#}';\n\n          compiled = createCompiled(bench, decompilable, deferred, funcBody);\n\n          try {\n            // Pretest one more time to check for errors.\n            bench.count = 1;\n            compiled.call(bench, context, timer);\n            bench.count = count;\n            delete clone.error;\n          }\n          catch(e) {\n            bench.count = count;\n            if (!clone.error) {\n              clone.error = e || new Error(String(e));\n            }\n          }\n        }\n        // If no errors run the full test loop.\n        if (!clone.error) {\n          compiled = bench.compiled = clone.compiled = createCompiled(bench, decompilable, deferred, funcBody);\n          result = compiled.call(deferred || bench, context, timer).elapsed;\n        }\n        return result;\n      };\n\n      /*----------------------------------------------------------------------*/\n\n      /**\n       * Creates a compiled function from the given function `body`.\n       */\n      function createCompiled(bench, decompilable, deferred, body) {\n        var fn = bench.fn,\n            fnArg = deferred ? getFirstArgument(fn) || 'deferred' : '';\n\n        templateData.uid = uid + uidCounter++;\n\n        _.assign(templateData, {\n          'setup': decompilable ? getSource(bench.setup) : interpolate('m#.setup()'),\n          'fn': decompilable ? getSource(fn) : interpolate('m#.fn(' + fnArg + ')'),\n          'fnArg': fnArg,\n          'teardown': decompilable ? getSource(bench.teardown) : interpolate('m#.teardown()')\n        });\n\n        // Use API of chosen timer.\n        if (timer.unit == 'ns') {\n          _.assign(templateData, {\n            'begin': interpolate('s#=n#()'),\n            'end': interpolate('r#=n#(s#);r#=r#[0]+(r#[1]/1e9)')\n          });\n        }\n        else if (timer.unit == 'us') {\n          if (timer.ns.stop) {\n            _.assign(templateData, {\n              'begin': interpolate('s#=n#.start()'),\n              'end': interpolate('r#=n#.microseconds()/1e6')\n            });\n          } else {\n            _.assign(templateData, {\n              'begin': interpolate('s#=n#()'),\n              'end': interpolate('r#=(n#()-s#)/1e6')\n            });\n          }\n        }\n        else if (timer.ns.now) {\n          _.assign(templateData, {\n            'begin': interpolate('s#=n#.now()'),\n            'end': interpolate('r#=(n#.now()-s#)/1e3')\n          });\n        }\n        else {\n          _.assign(templateData, {\n            'begin': interpolate('s#=new n#().getTime()'),\n            'end': interpolate('r#=(new n#().getTime()-s#)/1e3')\n          });\n        }\n        // Define `timer` methods.\n        timer.start = createFunction(\n          interpolate('o#'),\n          interpolate('var n#=this.ns,${begin};o#.elapsed=0;o#.timeStamp=s#')\n        );\n\n        timer.stop = createFunction(\n          interpolate('o#'),\n          interpolate('var n#=this.ns,s#=o#.timeStamp,${end};o#.elapsed=r#')\n        );\n\n        // Create compiled test.\n        return createFunction(\n          interpolate('window,t#'),\n          'var global = window, clearTimeout = global.clearTimeout, setTimeout = global.setTimeout;\\n' +\n          interpolate(body)\n        );\n      }\n\n      /**\n       * Gets the current timer's minimum resolution (secs).\n       */\n      function getRes(unit) {\n        var measured,\n            begin,\n            count = 30,\n            divisor = 1e3,\n            ns = timer.ns,\n            sample = [];\n\n        // Get average smallest measurable time.\n        while (count--) {\n          if (unit == 'us') {\n            divisor = 1e6;\n            if (ns.stop) {\n              ns.start();\n              while (!(measured = ns.microseconds())) {}\n            } else {\n              begin = ns();\n              while (!(measured = ns() - begin)) {}\n            }\n          }\n          else if (unit == 'ns') {\n            divisor = 1e9;\n            begin = (begin = ns())[0] + (begin[1] / divisor);\n            while (!(measured = ((measured = ns())[0] + (measured[1] / divisor)) - begin)) {}\n            divisor = 1;\n          }\n          else if (ns.now) {\n            begin = ns.now();\n            while (!(measured = ns.now() - begin)) {}\n          }\n          else {\n            begin = new ns().getTime();\n            while (!(measured = new ns().getTime() - begin)) {}\n          }\n          // Check for broken timers.\n          if (measured > 0) {\n            sample.push(measured);\n          } else {\n            sample.push(Infinity);\n            break;\n          }\n        }\n        // Convert to seconds.\n        return getMean(sample) / divisor;\n      }\n\n      /**\n       * Interpolates a given template string.\n       */\n      function interpolate(string) {\n        // Replaces all occurrences of `#` with a unique number and template tokens with content.\n        return _.template(string.replace(/\\#/g, /\\d+/.exec(templateData.uid)))(templateData);\n      }\n\n      /*----------------------------------------------------------------------*/\n\n      // Detect Chrome's microsecond timer:\n      // enable benchmarking via the --enable-benchmarking command\n      // line switch in at least Chrome 7 to use chrome.Interval\n      try {\n        if ((timer.ns = new (context.chrome || context.chromium).Interval)) {\n          timers.push({ 'ns': timer.ns, 'res': getRes('us'), 'unit': 'us' });\n        }\n      } catch(e) {}\n\n      // Detect Node.js's nanosecond resolution timer available in Node.js >= 0.8.\n      if (processObject && typeof (timer.ns = processObject.hrtime) == 'function') {\n        timers.push({ 'ns': timer.ns, 'res': getRes('ns'), 'unit': 'ns' });\n      }\n      // Detect Wade Simmons' Node.js `microtime` module.\n      if (microtimeObject && typeof (timer.ns = microtimeObject.now) == 'function') {\n        timers.push({ 'ns': timer.ns,  'res': getRes('us'), 'unit': 'us' });\n      }\n      // Pick timer with highest resolution.\n      timer = _.minBy(timers, 'res');\n\n      // Error if there are no working timers.\n      if (timer.res == Infinity) {\n        throw new Error('Benchmark.js was unable to find a working timer.');\n      }\n      // Resolve time span required to achieve a percent uncertainty of at most 1%.\n      // For more information see http://spiff.rit.edu/classes/phys273/uncert/uncert.html.\n      options.minTime || (options.minTime = max(timer.res / 2 / 0.01, 0.05));\n      return clock.apply(null, arguments);\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Computes stats on benchmark results.\n     *\n     * @private\n     * @param {Object} bench The benchmark instance.\n     * @param {Object} options The options object.\n     */\n    function compute(bench, options) {\n      options || (options = {});\n\n      var async = options.async,\n          elapsed = 0,\n          initCount = bench.initCount,\n          minSamples = bench.minSamples,\n          queue = [],\n          sample = bench.stats.sample;\n\n      /**\n       * Adds a clone to the queue.\n       */\n      function enqueue() {\n        queue.push(bench.clone({\n          '_original': bench,\n          'events': {\n            'abort': [update],\n            'cycle': [update],\n            'error': [update],\n            'start': [update]\n          }\n        }));\n      }\n\n      /**\n       * Updates the clone/original benchmarks to keep their data in sync.\n       */\n      function update(event) {\n        var clone = this,\n            type = event.type;\n\n        if (bench.running) {\n          if (type == 'start') {\n            // Note: `clone.minTime` prop is inited in `clock()`.\n            clone.count = bench.initCount;\n          }\n          else {\n            if (type == 'error') {\n              bench.error = clone.error;\n            }\n            if (type == 'abort') {\n              bench.abort();\n              bench.emit('cycle');\n            } else {\n              event.currentTarget = event.target = bench;\n              bench.emit(event);\n            }\n          }\n        } else if (bench.aborted) {\n          // Clear abort listeners to avoid triggering bench's abort/cycle again.\n          clone.events.abort.length = 0;\n          clone.abort();\n        }\n      }\n\n      /**\n       * Determines if more clones should be queued or if cycling should stop.\n       */\n      function evaluate(event) {\n        var critical,\n            df,\n            mean,\n            moe,\n            rme,\n            sd,\n            sem,\n            variance,\n            clone = event.target,\n            done = bench.aborted,\n            now = _.now(),\n            size = sample.push(clone.times.period),\n            maxedOut = size >= minSamples && (elapsed += now - clone.times.timeStamp) / 1e3 > bench.maxTime,\n            times = bench.times,\n            varOf = function(sum, x) { return sum + pow(x - mean, 2); };\n\n        // Exit early for aborted or unclockable tests.\n        if (done || clone.hz == Infinity) {\n          maxedOut = !(size = sample.length = queue.length = 0);\n        }\n\n        if (!done) {\n          // Compute the sample mean (estimate of the population mean).\n          mean = getMean(sample);\n          // Compute the sample variance (estimate of the population variance).\n          variance = _.reduce(sample, varOf, 0) / (size - 1) || 0;\n          // Compute the sample standard deviation (estimate of the population standard deviation).\n          sd = sqrt(variance);\n          // Compute the standard error of the mean (a.k.a. the standard deviation of the sampling distribution of the sample mean).\n          sem = sd / sqrt(size);\n          // Compute the degrees of freedom.\n          df = size - 1;\n          // Compute the critical value.\n          critical = tTable[Math.round(df) || 1] || tTable.infinity;\n          // Compute the margin of error.\n          moe = sem * critical;\n          // Compute the relative margin of error.\n          rme = (moe / mean) * 100 || 0;\n\n          _.assign(bench.stats, {\n            'deviation': sd,\n            'mean': mean,\n            'moe': moe,\n            'rme': rme,\n            'sem': sem,\n            'variance': variance\n          });\n\n          // Abort the cycle loop when the minimum sample size has been collected\n          // and the elapsed time exceeds the maximum time allowed per benchmark.\n          // We don't count cycle delays toward the max time because delays may be\n          // increased by browsers that clamp timeouts for inactive tabs. For more\n          // information see https://developer.mozilla.org/en/window.setTimeout#Inactive_tabs.\n          if (maxedOut) {\n            // Reset the `initCount` in case the benchmark is rerun.\n            bench.initCount = initCount;\n            bench.running = false;\n            done = true;\n            times.elapsed = (now - times.timeStamp) / 1e3;\n          }\n          if (bench.hz != Infinity) {\n            bench.hz = 1 / mean;\n            times.cycle = mean * bench.count;\n            times.period = mean;\n          }\n        }\n        // If time permits, increase sample size to reduce the margin of error.\n        if (queue.length < 2 && !maxedOut) {\n          enqueue();\n        }\n        // Abort the `invoke` cycle when done.\n        event.aborted = done;\n      }\n\n      // Init queue and begin.\n      enqueue();\n      invoke(queue, {\n        'name': 'run',\n        'args': { 'async': async },\n        'queued': true,\n        'onCycle': evaluate,\n        'onComplete': function() { bench.emit('complete'); }\n      });\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Cycles a benchmark until a run `count` can be established.\n     *\n     * @private\n     * @param {Object} clone The cloned benchmark instance.\n     * @param {Object} options The options object.\n     */\n    function cycle(clone, options) {\n      options || (options = {});\n\n      var deferred;\n      if (clone instanceof Deferred) {\n        deferred = clone;\n        clone = clone.benchmark;\n      }\n      var clocked,\n          cycles,\n          divisor,\n          event,\n          minTime,\n          period,\n          async = options.async,\n          bench = clone._original,\n          count = clone.count,\n          times = clone.times;\n\n      // Continue, if not aborted between cycles.\n      if (clone.running) {\n        // `minTime` is set to `Benchmark.options.minTime` in `clock()`.\n        cycles = ++clone.cycles;\n        clocked = deferred ? deferred.elapsed : clock(clone);\n        minTime = clone.minTime;\n\n        if (cycles > bench.cycles) {\n          bench.cycles = cycles;\n        }\n        if (clone.error) {\n          event = Event('error');\n          event.message = clone.error;\n          clone.emit(event);\n          if (!event.cancelled) {\n            clone.abort();\n          }\n        }\n      }\n      // Continue, if not errored.\n      if (clone.running) {\n        // Compute the time taken to complete last test cycle.\n        bench.times.cycle = times.cycle = clocked;\n        // Compute the seconds per operation.\n        period = bench.times.period = times.period = clocked / count;\n        // Compute the ops per second.\n        bench.hz = clone.hz = 1 / period;\n        // Avoid working our way up to this next time.\n        bench.initCount = clone.initCount = count;\n        // Do we need to do another cycle?\n        clone.running = clocked < minTime;\n\n        if (clone.running) {\n          // Tests may clock at `0` when `initCount` is a small number,\n          // to avoid that we set its count to something a bit higher.\n          if (!clocked && (divisor = divisors[clone.cycles]) != null) {\n            count = floor(4e6 / divisor);\n          }\n          // Calculate how many more iterations it will take to achieve the `minTime`.\n          if (count <= clone.count) {\n            count += Math.ceil((minTime - clocked) / period);\n          }\n          clone.running = count != Infinity;\n        }\n      }\n      // Should we exit early?\n      event = Event('cycle');\n      clone.emit(event);\n      if (event.aborted) {\n        clone.abort();\n      }\n      // Figure out what to do next.\n      if (clone.running) {\n        // Start a new cycle.\n        clone.count = count;\n        if (deferred) {\n          clone.compiled.call(deferred, context, timer);\n        } else if (async) {\n          delay(clone, function() { cycle(clone, options); });\n        } else {\n          cycle(clone);\n        }\n      }\n      else {\n        // Fix TraceMonkey bug associated with clock fallbacks.\n        // For more information see http://bugzil.la/509069.\n        if (support.browser) {\n          runScript(uid + '=1;delete ' + uid);\n        }\n        // We're done.\n        clone.emit('complete');\n      }\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Runs the benchmark.\n     *\n     * @memberOf Benchmark\n     * @param {Object} [options={}] Options object.\n     * @returns {Object} The benchmark instance.\n     * @example\n     *\n     * // basic usage\n     * bench.run();\n     *\n     * // or with options\n     * bench.run({ 'async': true });\n     */\n    function run(options) {\n      var bench = this,\n          event = Event('start');\n\n      // Set `running` to `false` so `reset()` won't call `abort()`.\n      bench.running = false;\n      bench.reset();\n      bench.running = true;\n\n      bench.count = bench.initCount;\n      bench.times.timeStamp = _.now();\n      bench.emit(event);\n\n      if (!event.cancelled) {\n        options = { 'async': ((options = options && options.async) == null ? bench.async : options) && support.timeout };\n\n        // For clones created within `compute()`.\n        if (bench._original) {\n          if (bench.defer) {\n            Deferred(bench);\n          } else {\n            cycle(bench, options);\n          }\n        }\n        // For original benchmarks.\n        else {\n          compute(bench, options);\n        }\n      }\n      return bench;\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    // Firefox 1 erroneously defines variable and argument names of functions on\n    // the function itself as non-configurable properties with `undefined` values.\n    // The bugginess continues as the `Benchmark` constructor has an argument\n    // named `options` and Firefox 1 will not assign a value to `Benchmark.options`,\n    // making it non-writable in the process, unless it is the first property\n    // assigned by for-in loop of `_.assign()`.\n    _.assign(Benchmark, {\n\n      /**\n       * The default options copied by benchmark instances.\n       *\n       * @static\n       * @memberOf Benchmark\n       * @type Object\n       */\n      'options': {\n\n        /**\n         * A flag to indicate that benchmark cycles will execute asynchronously\n         * by default.\n         *\n         * @memberOf Benchmark.options\n         * @type boolean\n         */\n        'async': false,\n\n        /**\n         * A flag to indicate that the benchmark clock is deferred.\n         *\n         * @memberOf Benchmark.options\n         * @type boolean\n         */\n        'defer': false,\n\n        /**\n         * The delay between test cycles (secs).\n         * @memberOf Benchmark.options\n         * @type number\n         */\n        'delay': 0.005,\n\n        /**\n         * Displayed by `Benchmark#toString` when a `name` is not available\n         * (auto-generated if absent).\n         *\n         * @memberOf Benchmark.options\n         * @type string\n         */\n        'id': undefined,\n\n        /**\n         * The default number of times to execute a test on a benchmark's first cycle.\n         *\n         * @memberOf Benchmark.options\n         * @type number\n         */\n        'initCount': 1,\n\n        /**\n         * The maximum time a benchmark is allowed to run before finishing (secs).\n         *\n         * Note: Cycle delays aren't counted toward the maximum time.\n         *\n         * @memberOf Benchmark.options\n         * @type number\n         */\n        'maxTime': 5,\n\n        /**\n         * The minimum sample size required to perform statistical analysis.\n         *\n         * @memberOf Benchmark.options\n         * @type number\n         */\n        'minSamples': 5,\n\n        /**\n         * The time needed to reduce the percent uncertainty of measurement to 1% (secs).\n         *\n         * @memberOf Benchmark.options\n         * @type number\n         */\n        'minTime': 0,\n\n        /**\n         * The name of the benchmark.\n         *\n         * @memberOf Benchmark.options\n         * @type string\n         */\n        'name': undefined,\n\n        /**\n         * An event listener called when the benchmark is aborted.\n         *\n         * @memberOf Benchmark.options\n         * @type Function\n         */\n        'onAbort': undefined,\n\n        /**\n         * An event listener called when the benchmark completes running.\n         *\n         * @memberOf Benchmark.options\n         * @type Function\n         */\n        'onComplete': undefined,\n\n        /**\n         * An event listener called after each run cycle.\n         *\n         * @memberOf Benchmark.options\n         * @type Function\n         */\n        'onCycle': undefined,\n\n        /**\n         * An event listener called when a test errors.\n         *\n         * @memberOf Benchmark.options\n         * @type Function\n         */\n        'onError': undefined,\n\n        /**\n         * An event listener called when the benchmark is reset.\n         *\n         * @memberOf Benchmark.options\n         * @type Function\n         */\n        'onReset': undefined,\n\n        /**\n         * An event listener called when the benchmark starts running.\n         *\n         * @memberOf Benchmark.options\n         * @type Function\n         */\n        'onStart': undefined\n      },\n\n      /**\n       * Platform object with properties describing things like browser name,\n       * version, and operating system. See [`platform.js`](https://mths.be/platform).\n       *\n       * @static\n       * @memberOf Benchmark\n       * @type Object\n       */\n      'platform': context.platform || require('platform') || ({\n        'description': context.navigator && context.navigator.userAgent || null,\n        'layout': null,\n        'product': null,\n        'name': null,\n        'manufacturer': null,\n        'os': null,\n        'prerelease': null,\n        'version': null,\n        'toString': function() {\n          return this.description || '';\n        }\n      }),\n\n      /**\n       * The semantic version number.\n       *\n       * @static\n       * @memberOf Benchmark\n       * @type string\n       */\n      'version': '2.1.2'\n    });\n\n    _.assign(Benchmark, {\n      'filter': filter,\n      'formatNumber': formatNumber,\n      'invoke': invoke,\n      'join': join,\n      'runInContext': runInContext,\n      'support': support\n    });\n\n    // Add lodash methods to Benchmark.\n    _.each(['each', 'forEach', 'forOwn', 'has', 'indexOf', 'map', 'reduce'], function(methodName) {\n      Benchmark[methodName] = _[methodName];\n    });\n\n    /*------------------------------------------------------------------------*/\n\n    _.assign(Benchmark.prototype, {\n\n      /**\n       * The number of times a test was executed.\n       *\n       * @memberOf Benchmark\n       * @type number\n       */\n      'count': 0,\n\n      /**\n       * The number of cycles performed while benchmarking.\n       *\n       * @memberOf Benchmark\n       * @type number\n       */\n      'cycles': 0,\n\n      /**\n       * The number of executions per second.\n       *\n       * @memberOf Benchmark\n       * @type number\n       */\n      'hz': 0,\n\n      /**\n       * The compiled test function.\n       *\n       * @memberOf Benchmark\n       * @type {Function|string}\n       */\n      'compiled': undefined,\n\n      /**\n       * The error object if the test failed.\n       *\n       * @memberOf Benchmark\n       * @type Object\n       */\n      'error': undefined,\n\n      /**\n       * The test to benchmark.\n       *\n       * @memberOf Benchmark\n       * @type {Function|string}\n       */\n      'fn': undefined,\n\n      /**\n       * A flag to indicate if the benchmark is aborted.\n       *\n       * @memberOf Benchmark\n       * @type boolean\n       */\n      'aborted': false,\n\n      /**\n       * A flag to indicate if the benchmark is running.\n       *\n       * @memberOf Benchmark\n       * @type boolean\n       */\n      'running': false,\n\n      /**\n       * Compiled into the test and executed immediately **before** the test loop.\n       *\n       * @memberOf Benchmark\n       * @type {Function|string}\n       * @example\n       *\n       * // basic usage\n       * var bench = Benchmark({\n       *   'setup': function() {\n       *     var c = this.count,\n       *         element = document.getElementById('container');\n       *     while (c--) {\n       *       element.appendChild(document.createElement('div'));\n       *     }\n       *   },\n       *   'fn': function() {\n       *     element.removeChild(element.lastChild);\n       *   }\n       * });\n       *\n       * // compiles to something like:\n       * var c = this.count,\n       *     element = document.getElementById('container');\n       * while (c--) {\n       *   element.appendChild(document.createElement('div'));\n       * }\n       * var start = new Date;\n       * while (count--) {\n       *   element.removeChild(element.lastChild);\n       * }\n       * var end = new Date - start;\n       *\n       * // or using strings\n       * var bench = Benchmark({\n       *   'setup': '\\\n       *     var a = 0;\\n\\\n       *     (function() {\\n\\\n       *       (function() {\\n\\\n       *         (function() {',\n       *   'fn': 'a += 1;',\n       *   'teardown': '\\\n       *          }())\\n\\\n       *        }())\\n\\\n       *      }())'\n       * });\n       *\n       * // compiles to something like:\n       * var a = 0;\n       * (function() {\n       *   (function() {\n       *     (function() {\n       *       var start = new Date;\n       *       while (count--) {\n       *         a += 1;\n       *       }\n       *       var end = new Date - start;\n       *     }())\n       *   }())\n       * }())\n       */\n      'setup': _.noop,\n\n      /**\n       * Compiled into the test and executed immediately **after** the test loop.\n       *\n       * @memberOf Benchmark\n       * @type {Function|string}\n       */\n      'teardown': _.noop,\n\n      /**\n       * An object of stats including mean, margin or error, and standard deviation.\n       *\n       * @memberOf Benchmark\n       * @type Object\n       */\n      'stats': {\n\n        /**\n         * The margin of error.\n         *\n         * @memberOf Benchmark#stats\n         * @type number\n         */\n        'moe': 0,\n\n        /**\n         * The relative margin of error (expressed as a percentage of the mean).\n         *\n         * @memberOf Benchmark#stats\n         * @type number\n         */\n        'rme': 0,\n\n        /**\n         * The standard error of the mean.\n         *\n         * @memberOf Benchmark#stats\n         * @type number\n         */\n        'sem': 0,\n\n        /**\n         * The sample standard deviation.\n         *\n         * @memberOf Benchmark#stats\n         * @type number\n         */\n        'deviation': 0,\n\n        /**\n         * The sample arithmetic mean (secs).\n         *\n         * @memberOf Benchmark#stats\n         * @type number\n         */\n        'mean': 0,\n\n        /**\n         * The array of sampled periods.\n         *\n         * @memberOf Benchmark#stats\n         * @type Array\n         */\n        'sample': [],\n\n        /**\n         * The sample variance.\n         *\n         * @memberOf Benchmark#stats\n         * @type number\n         */\n        'variance': 0\n      },\n\n      /**\n       * An object of timing data including cycle, elapsed, period, start, and stop.\n       *\n       * @memberOf Benchmark\n       * @type Object\n       */\n      'times': {\n\n        /**\n         * The time taken to complete the last cycle (secs).\n         *\n         * @memberOf Benchmark#times\n         * @type number\n         */\n        'cycle': 0,\n\n        /**\n         * The time taken to complete the benchmark (secs).\n         *\n         * @memberOf Benchmark#times\n         * @type number\n         */\n        'elapsed': 0,\n\n        /**\n         * The time taken to execute the test once (secs).\n         *\n         * @memberOf Benchmark#times\n         * @type number\n         */\n        'period': 0,\n\n        /**\n         * A timestamp of when the benchmark started (ms).\n         *\n         * @memberOf Benchmark#times\n         * @type number\n         */\n        'timeStamp': 0\n      }\n    });\n\n    _.assign(Benchmark.prototype, {\n      'abort': abort,\n      'clone': clone,\n      'compare': compare,\n      'emit': emit,\n      'listeners': listeners,\n      'off': off,\n      'on': on,\n      'reset': reset,\n      'run': run,\n      'toString': toStringBench\n    });\n\n    /*------------------------------------------------------------------------*/\n\n    _.assign(Deferred.prototype, {\n\n      /**\n       * The deferred benchmark instance.\n       *\n       * @memberOf Benchmark.Deferred\n       * @type Object\n       */\n      'benchmark': null,\n\n      /**\n       * The number of deferred cycles performed while benchmarking.\n       *\n       * @memberOf Benchmark.Deferred\n       * @type number\n       */\n      'cycles': 0,\n\n      /**\n       * The time taken to complete the deferred benchmark (secs).\n       *\n       * @memberOf Benchmark.Deferred\n       * @type number\n       */\n      'elapsed': 0,\n\n      /**\n       * A timestamp of when the deferred benchmark started (ms).\n       *\n       * @memberOf Benchmark.Deferred\n       * @type number\n       */\n      'timeStamp': 0\n    });\n\n    _.assign(Deferred.prototype, {\n      'resolve': resolve\n    });\n\n    /*------------------------------------------------------------------------*/\n\n    _.assign(Event.prototype, {\n\n      /**\n       * A flag to indicate if the emitters listener iteration is aborted.\n       *\n       * @memberOf Benchmark.Event\n       * @type boolean\n       */\n      'aborted': false,\n\n      /**\n       * A flag to indicate if the default action is cancelled.\n       *\n       * @memberOf Benchmark.Event\n       * @type boolean\n       */\n      'cancelled': false,\n\n      /**\n       * The object whose listeners are currently being processed.\n       *\n       * @memberOf Benchmark.Event\n       * @type Object\n       */\n      'currentTarget': undefined,\n\n      /**\n       * The return value of the last executed listener.\n       *\n       * @memberOf Benchmark.Event\n       * @type Mixed\n       */\n      'result': undefined,\n\n      /**\n       * The object to which the event was originally emitted.\n       *\n       * @memberOf Benchmark.Event\n       * @type Object\n       */\n      'target': undefined,\n\n      /**\n       * A timestamp of when the event was created (ms).\n       *\n       * @memberOf Benchmark.Event\n       * @type number\n       */\n      'timeStamp': 0,\n\n      /**\n       * The event type.\n       *\n       * @memberOf Benchmark.Event\n       * @type string\n       */\n      'type': ''\n    });\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * The default options copied by suite instances.\n     *\n     * @static\n     * @memberOf Benchmark.Suite\n     * @type Object\n     */\n    Suite.options = {\n\n      /**\n       * The name of the suite.\n       *\n       * @memberOf Benchmark.Suite.options\n       * @type string\n       */\n      'name': undefined\n    };\n\n    /*------------------------------------------------------------------------*/\n\n    _.assign(Suite.prototype, {\n\n      /**\n       * The number of benchmarks in the suite.\n       *\n       * @memberOf Benchmark.Suite\n       * @type number\n       */\n      'length': 0,\n\n      /**\n       * A flag to indicate if the suite is aborted.\n       *\n       * @memberOf Benchmark.Suite\n       * @type boolean\n       */\n      'aborted': false,\n\n      /**\n       * A flag to indicate if the suite is running.\n       *\n       * @memberOf Benchmark.Suite\n       * @type boolean\n       */\n      'running': false\n    });\n\n    _.assign(Suite.prototype, {\n      'abort': abortSuite,\n      'add': add,\n      'clone': cloneSuite,\n      'emit': emit,\n      'filter': filterSuite,\n      'join': arrayRef.join,\n      'listeners': listeners,\n      'off': off,\n      'on': on,\n      'pop': arrayRef.pop,\n      'push': push,\n      'reset': resetSuite,\n      'run': runSuite,\n      'reverse': arrayRef.reverse,\n      'shift': shift,\n      'slice': slice,\n      'sort': arrayRef.sort,\n      'splice': arrayRef.splice,\n      'unshift': unshift\n    });\n\n    /*------------------------------------------------------------------------*/\n\n    // Expose Deferred, Event, and Suite.\n    _.assign(Benchmark, {\n      'Deferred': Deferred,\n      'Event': Event,\n      'Suite': Suite\n    });\n\n    /*------------------------------------------------------------------------*/\n\n    // Add lodash methods as Suite methods.\n    _.each(['each', 'forEach', 'indexOf', 'map', 'reduce'], function(methodName) {\n      var func = _[methodName];\n      Suite.prototype[methodName] = function() {\n        var args = [this];\n        push.apply(args, arguments);\n        return func.apply(_, args);\n      };\n    });\n\n    // Avoid array-like object bugs with `Array#shift` and `Array#splice`\n    // in Firefox < 10 and IE < 9.\n    _.each(['pop', 'shift', 'splice'], function(methodName) {\n      var func = arrayRef[methodName];\n\n      Suite.prototype[methodName] = function() {\n        var value = this,\n            result = func.apply(value, arguments);\n\n        if (value.length === 0) {\n          delete value[0];\n        }\n        return result;\n      };\n    });\n\n    // Avoid buggy `Array#unshift` in IE < 8 which doesn't return the new\n    // length of the array.\n    Suite.prototype.unshift = function() {\n      var value = this;\n      unshift.apply(value, arguments);\n      return value.length;\n    };\n\n    return Benchmark;\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  // Export Benchmark.\n  // Some AMD build optimizers, like r.js, check for condition patterns like the following:\n  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {\n    // Define as an anonymous module so, through path mapping, it can be aliased.\n    define(['lodash', 'platform'], function(_, platform) {\n      return runInContext({\n        '_': _,\n        'platform': platform\n      });\n    });\n  }\n  else {\n    var Benchmark = runInContext();\n\n    // Check for `exports` after `define` in case a build optimizer adds an `exports` object.\n    if (freeExports && freeModule) {\n      // Export for Node.js.\n      if (moduleExports) {\n        (freeModule.exports = Benchmark).Benchmark = Benchmark;\n      }\n      // Export for CommonJS support.\n      freeExports.Benchmark = Benchmark;\n    }\n    else {\n      // Export to the global object.\n      root.Benchmark = Benchmark;\n    }\n  }\n}.call(this));\n\n\n/***/ },\n/* 30 */\n/***/ function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(module, global) {var __WEBPACK_AMD_DEFINE_RESULT__;/*!\r\n * Platform.js <https://mths.be/platform>\r\n * Copyright 2014-2016 Benjamin Tan <https://demoneaux.github.io/>\r\n * Copyright 2011-2013 John-David Dalton <http://allyoucanleet.com/>\r\n * Available under MIT license <https://mths.be/mit>\r\n */\r\n;(function() {\r\n  'use strict';\r\n\r\n  /** Used to determine if values are of the language type `Object`. */\r\n  var objectTypes = {\r\n    'function': true,\r\n    'object': true\r\n  };\r\n\r\n  /** Used as a reference to the global object. */\r\n  var root = (objectTypes[typeof window] && window) || this;\r\n\r\n  /** Backup possible global object. */\r\n  var oldRoot = root;\r\n\r\n  /** Detect free variable `exports`. */\r\n  var freeExports = objectTypes[typeof exports] && exports;\r\n\r\n  /** Detect free variable `module`. */\r\n  var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;\r\n\r\n  /** Detect free variable `global` from Node.js or Browserified code and use it as `root`. */\r\n  var freeGlobal = freeExports && freeModule && typeof global == 'object' && global;\r\n  if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal)) {\r\n    root = freeGlobal;\r\n  }\r\n\r\n  /**\r\n   * Used as the maximum length of an array-like object.\r\n   * See the [ES6 spec](http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength)\r\n   * for more details.\r\n   */\r\n  var maxSafeInteger = Math.pow(2, 53) - 1;\r\n\r\n  /** Regular expression to detect Opera. */\r\n  var reOpera = /\\bOpera/;\r\n\r\n  /** Possible global object. */\r\n  var thisBinding = this;\r\n\r\n  /** Used for native method references. */\r\n  var objectProto = Object.prototype;\r\n\r\n  /** Used to check for own properties of an object. */\r\n  var hasOwnProperty = objectProto.hasOwnProperty;\r\n\r\n  /** Used to resolve the internal `[[Class]]` of values. */\r\n  var toString = objectProto.toString;\r\n\r\n  /*--------------------------------------------------------------------------*/\r\n\r\n  /**\r\n   * Capitalizes a string value.\r\n   *\r\n   * @private\r\n   * @param {string} string The string to capitalize.\r\n   * @returns {string} The capitalized string.\r\n   */\r\n  function capitalize(string) {\r\n    string = String(string);\r\n    return string.charAt(0).toUpperCase() + string.slice(1);\r\n  }\r\n\r\n  /**\r\n   * A utility function to clean up the OS name.\r\n   *\r\n   * @private\r\n   * @param {string} os The OS name to clean up.\r\n   * @param {string} [pattern] A `RegExp` pattern matching the OS name.\r\n   * @param {string} [label] A label for the OS.\r\n   */\r\n  function cleanupOS(os, pattern, label) {\r\n    // Platform tokens are defined at:\r\n    // http://msdn.microsoft.com/en-us/library/ms537503(VS.85).aspx\r\n    // http://web.archive.org/web/20081122053950/http://msdn.microsoft.com/en-us/library/ms537503(VS.85).aspx\r\n    var data = {\r\n      '10.0': '10',\r\n      '6.4':  '10 Technical Preview',\r\n      '6.3':  '8.1',\r\n      '6.2':  '8',\r\n      '6.1':  'Server 2008 R2 / 7',\r\n      '6.0':  'Server 2008 / Vista',\r\n      '5.2':  'Server 2003 / XP 64-bit',\r\n      '5.1':  'XP',\r\n      '5.01': '2000 SP1',\r\n      '5.0':  '2000',\r\n      '4.0':  'NT',\r\n      '4.90': 'ME'\r\n    };\r\n    // Detect Windows version from platform tokens.\r\n    if (pattern && label && /^Win/i.test(os) && !/^Windows Phone /i.test(os) &&\r\n        (data = data[/[\\d.]+$/.exec(os)])) {\r\n      os = 'Windows ' + data;\r\n    }\r\n    // Correct character case and cleanup string.\r\n    os = String(os);\r\n\r\n    if (pattern && label) {\r\n      os = os.replace(RegExp(pattern, 'i'), label);\r\n    }\r\n\r\n    os = format(\r\n      os.replace(/ ce$/i, ' CE')\r\n        .replace(/\\bhpw/i, 'web')\r\n        .replace(/\\bMacintosh\\b/, 'Mac OS')\r\n        .replace(/_PowerPC\\b/i, ' OS')\r\n        .replace(/\\b(OS X) [^ \\d]+/i, '$1')\r\n        .replace(/\\bMac (OS X)\\b/, '$1')\r\n        .replace(/\\/(\\d)/, ' $1')\r\n        .replace(/_/g, '.')\r\n        .replace(/(?: BePC|[ .]*fc[ \\d.]+)$/i, '')\r\n        .replace(/\\bx86\\.64\\b/gi, 'x86_64')\r\n        .replace(/\\b(Windows Phone) OS\\b/, '$1')\r\n        .replace(/\\b(Chrome OS \\w+) [\\d.]+\\b/, '$1')\r\n        .split(' on ')[0]\r\n    );\r\n\r\n    return os;\r\n  }\r\n\r\n  /**\r\n   * An iteration utility for arrays and objects.\r\n   *\r\n   * @private\r\n   * @param {Array|Object} object The object to iterate over.\r\n   * @param {Function} callback The function called per iteration.\r\n   */\r\n  function each(object, callback) {\r\n    var index = -1,\r\n        length = object ? object.length : 0;\r\n\r\n    if (typeof length == 'number' && length > -1 && length <= maxSafeInteger) {\r\n      while (++index < length) {\r\n        callback(object[index], index, object);\r\n      }\r\n    } else {\r\n      forOwn(object, callback);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Trim and conditionally capitalize string values.\r\n   *\r\n   * @private\r\n   * @param {string} string The string to format.\r\n   * @returns {string} The formatted string.\r\n   */\r\n  function format(string) {\r\n    string = trim(string);\r\n    return /^(?:webOS|i(?:OS|P))/.test(string)\r\n      ? string\r\n      : capitalize(string);\r\n  }\r\n\r\n  /**\r\n   * Iterates over an object's own properties, executing the `callback` for each.\r\n   *\r\n   * @private\r\n   * @param {Object} object The object to iterate over.\r\n   * @param {Function} callback The function executed per own property.\r\n   */\r\n  function forOwn(object, callback) {\r\n    for (var key in object) {\r\n      if (hasOwnProperty.call(object, key)) {\r\n        callback(object[key], key, object);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets the internal `[[Class]]` of a value.\r\n   *\r\n   * @private\r\n   * @param {*} value The value.\r\n   * @returns {string} The `[[Class]]`.\r\n   */\r\n  function getClassOf(value) {\r\n    return value == null\r\n      ? capitalize(value)\r\n      : toString.call(value).slice(8, -1);\r\n  }\r\n\r\n  /**\r\n   * Host objects can return type values that are different from their actual\r\n   * data type. The objects we are concerned with usually return non-primitive\r\n   * types of \"object\", \"function\", or \"unknown\".\r\n   *\r\n   * @private\r\n   * @param {*} object The owner of the property.\r\n   * @param {string} property The property to check.\r\n   * @returns {boolean} Returns `true` if the property value is a non-primitive, else `false`.\r\n   */\r\n  function isHostType(object, property) {\r\n    var type = object != null ? typeof object[property] : 'number';\r\n    return !/^(?:boolean|number|string|undefined)$/.test(type) &&\r\n      (type == 'object' ? !!object[property] : true);\r\n  }\r\n\r\n  /**\r\n   * Prepares a string for use in a `RegExp` by making hyphens and spaces optional.\r\n   *\r\n   * @private\r\n   * @param {string} string The string to qualify.\r\n   * @returns {string} The qualified string.\r\n   */\r\n  function qualify(string) {\r\n    return String(string).replace(/([ -])(?!$)/g, '$1?');\r\n  }\r\n\r\n  /**\r\n   * A bare-bones `Array#reduce` like utility function.\r\n   *\r\n   * @private\r\n   * @param {Array} array The array to iterate over.\r\n   * @param {Function} callback The function called per iteration.\r\n   * @returns {*} The accumulated result.\r\n   */\r\n  function reduce(array, callback) {\r\n    var accumulator = null;\r\n    each(array, function(value, index) {\r\n      accumulator = callback(accumulator, value, index, array);\r\n    });\r\n    return accumulator;\r\n  }\r\n\r\n  /**\r\n   * Removes leading and trailing whitespace from a string.\r\n   *\r\n   * @private\r\n   * @param {string} string The string to trim.\r\n   * @returns {string} The trimmed string.\r\n   */\r\n  function trim(string) {\r\n    return String(string).replace(/^ +| +$/g, '');\r\n  }\r\n\r\n  /*--------------------------------------------------------------------------*/\r\n\r\n  /**\r\n   * Creates a new platform object.\r\n   *\r\n   * @memberOf platform\r\n   * @param {Object|string} [ua=navigator.userAgent] The user agent string or\r\n   *  context object.\r\n   * @returns {Object} A platform object.\r\n   */\r\n  function parse(ua) {\r\n\r\n    /** The environment context object. */\r\n    var context = root;\r\n\r\n    /** Used to flag when a custom context is provided. */\r\n    var isCustomContext = ua && typeof ua == 'object' && getClassOf(ua) != 'String';\r\n\r\n    // Juggle arguments.\r\n    if (isCustomContext) {\r\n      context = ua;\r\n      ua = null;\r\n    }\r\n\r\n    /** Browser navigator object. */\r\n    var nav = context.navigator || {};\r\n\r\n    /** Browser user agent string. */\r\n    var userAgent = nav.userAgent || '';\r\n\r\n    ua || (ua = userAgent);\r\n\r\n    /** Used to flag when `thisBinding` is the [ModuleScope]. */\r\n    var isModuleScope = isCustomContext || thisBinding == oldRoot;\r\n\r\n    /** Used to detect if browser is like Chrome. */\r\n    var likeChrome = isCustomContext\r\n      ? !!nav.likeChrome\r\n      : /\\bChrome\\b/.test(ua) && !/internal|\\n/i.test(toString.toString());\r\n\r\n    /** Internal `[[Class]]` value shortcuts. */\r\n    var objectClass = 'Object',\r\n        airRuntimeClass = isCustomContext ? objectClass : 'ScriptBridgingProxyObject',\r\n        enviroClass = isCustomContext ? objectClass : 'Environment',\r\n        javaClass = (isCustomContext && context.java) ? 'JavaPackage' : getClassOf(context.java),\r\n        phantomClass = isCustomContext ? objectClass : 'RuntimeObject';\r\n\r\n    /** Detect Java environments. */\r\n    var java = /\\bJava/.test(javaClass) && context.java;\r\n\r\n    /** Detect Rhino. */\r\n    var rhino = java && getClassOf(context.environment) == enviroClass;\r\n\r\n    /** A character to represent alpha. */\r\n    var alpha = java ? 'a' : '\\u03b1';\r\n\r\n    /** A character to represent beta. */\r\n    var beta = java ? 'b' : '\\u03b2';\r\n\r\n    /** Browser document object. */\r\n    var doc = context.document || {};\r\n\r\n    /**\r\n     * Detect Opera browser (Presto-based).\r\n     * http://www.howtocreate.co.uk/operaStuff/operaObject.html\r\n     * http://dev.opera.com/articles/view/opera-mini-web-content-authoring-guidelines/#operamini\r\n     */\r\n    var opera = context.operamini || context.opera;\r\n\r\n    /** Opera `[[Class]]`. */\r\n    var operaClass = reOpera.test(operaClass = (isCustomContext && opera) ? opera['[[Class]]'] : getClassOf(opera))\r\n      ? operaClass\r\n      : (opera = null);\r\n\r\n    /*------------------------------------------------------------------------*/\r\n\r\n    /** Temporary variable used over the script's lifetime. */\r\n    var data;\r\n\r\n    /** The CPU architecture. */\r\n    var arch = ua;\r\n\r\n    /** Platform description array. */\r\n    var description = [];\r\n\r\n    /** Platform alpha/beta indicator. */\r\n    var prerelease = null;\r\n\r\n    /** A flag to indicate that environment features should be used to resolve the platform. */\r\n    var useFeatures = ua == userAgent;\r\n\r\n    /** The browser/environment version. */\r\n    var version = useFeatures && opera && typeof opera.version == 'function' && opera.version();\r\n\r\n    /** A flag to indicate if the OS ends with \"/ Version\" */\r\n    var isSpecialCasedOS;\r\n\r\n    /* Detectable layout engines (order is important). */\r\n    var layout = getLayout([\r\n      { 'label': 'EdgeHTML', 'pattern': 'Edge' },\r\n      'Trident',\r\n      { 'label': 'WebKit', 'pattern': 'AppleWebKit' },\r\n      'iCab',\r\n      'Presto',\r\n      'NetFront',\r\n      'Tasman',\r\n      'KHTML',\r\n      'Gecko'\r\n    ]);\r\n\r\n    /* Detectable browser names (order is important). */\r\n    var name = getName([\r\n      'Adobe AIR',\r\n      'Arora',\r\n      'Avant Browser',\r\n      'Breach',\r\n      'Camino',\r\n      'Epiphany',\r\n      'Fennec',\r\n      'Flock',\r\n      'Galeon',\r\n      'GreenBrowser',\r\n      'iCab',\r\n      'Iceweasel',\r\n      'K-Meleon',\r\n      'Konqueror',\r\n      'Lunascape',\r\n      'Maxthon',\r\n      { 'label': 'Microsoft Edge', 'pattern': 'Edge' },\r\n      'Midori',\r\n      'Nook Browser',\r\n      'PaleMoon',\r\n      'PhantomJS',\r\n      'Raven',\r\n      'Rekonq',\r\n      'RockMelt',\r\n      'SeaMonkey',\r\n      { 'label': 'Silk', 'pattern': '(?:Cloud9|Silk-Accelerated)' },\r\n      'Sleipnir',\r\n      'SlimBrowser',\r\n      { 'label': 'SRWare Iron', 'pattern': 'Iron' },\r\n      'Sunrise',\r\n      'Swiftfox',\r\n      'WebPositive',\r\n      'Opera Mini',\r\n      { 'label': 'Opera Mini', 'pattern': 'OPiOS' },\r\n      'Opera',\r\n      { 'label': 'Opera', 'pattern': 'OPR' },\r\n      'Chrome',\r\n      { 'label': 'Chrome Mobile', 'pattern': '(?:CriOS|CrMo)' },\r\n      { 'label': 'Firefox', 'pattern': '(?:Firefox|Minefield)' },\r\n      { 'label': 'Firefox for iOS', 'pattern': 'FxiOS' },\r\n      { 'label': 'IE', 'pattern': 'IEMobile' },\r\n      { 'label': 'IE', 'pattern': 'MSIE' },\r\n      'Safari'\r\n    ]);\r\n\r\n    /* Detectable products (order is important). */\r\n    var product = getProduct([\r\n      { 'label': 'BlackBerry', 'pattern': 'BB10' },\r\n      'BlackBerry',\r\n      { 'label': 'Galaxy S', 'pattern': 'GT-I9000' },\r\n      { 'label': 'Galaxy S2', 'pattern': 'GT-I9100' },\r\n      { 'label': 'Galaxy S3', 'pattern': 'GT-I9300' },\r\n      { 'label': 'Galaxy S4', 'pattern': 'GT-I9500' },\r\n      'Google TV',\r\n      'Lumia',\r\n      'iPad',\r\n      'iPod',\r\n      'iPhone',\r\n      'Kindle',\r\n      { 'label': 'Kindle Fire', 'pattern': '(?:Cloud9|Silk-Accelerated)' },\r\n      'Nexus',\r\n      'Nook',\r\n      'PlayBook',\r\n      'PlayStation 3',\r\n      'PlayStation 4',\r\n      'PlayStation Vita',\r\n      'TouchPad',\r\n      'Transformer',\r\n      { 'label': 'Wii U', 'pattern': 'WiiU' },\r\n      'Wii',\r\n      'Xbox One',\r\n      { 'label': 'Xbox 360', 'pattern': 'Xbox' },\r\n      'Xoom'\r\n    ]);\r\n\r\n    /* Detectable manufacturers. */\r\n    var manufacturer = getManufacturer({\r\n      'Apple': { 'iPad': 1, 'iPhone': 1, 'iPod': 1 },\r\n      'Archos': {},\r\n      'Amazon': { 'Kindle': 1, 'Kindle Fire': 1 },\r\n      'Asus': { 'Transformer': 1 },\r\n      'Barnes & Noble': { 'Nook': 1 },\r\n      'BlackBerry': { 'PlayBook': 1 },\r\n      'Google': { 'Google TV': 1, 'Nexus': 1 },\r\n      'HP': { 'TouchPad': 1 },\r\n      'HTC': {},\r\n      'LG': {},\r\n      'Microsoft': { 'Xbox': 1, 'Xbox One': 1 },\r\n      'Motorola': { 'Xoom': 1 },\r\n      'Nintendo': { 'Wii U': 1,  'Wii': 1 },\r\n      'Nokia': { 'Lumia': 1 },\r\n      'Samsung': { 'Galaxy S': 1, 'Galaxy S2': 1, 'Galaxy S3': 1, 'Galaxy S4': 1 },\r\n      'Sony': { 'PlayStation 4': 1, 'PlayStation 3': 1, 'PlayStation Vita': 1 }\r\n    });\r\n\r\n    /* Detectable operating systems (order is important). */\r\n    var os = getOS([\r\n      'Windows Phone',\r\n      'Android',\r\n      'CentOS',\r\n      { 'label': 'Chrome OS', 'pattern': 'CrOS' },\r\n      'Debian',\r\n      'Fedora',\r\n      'FreeBSD',\r\n      'Gentoo',\r\n      'Haiku',\r\n      'Kubuntu',\r\n      'Linux Mint',\r\n      'OpenBSD',\r\n      'Red Hat',\r\n      'SuSE',\r\n      'Ubuntu',\r\n      'Xubuntu',\r\n      'Cygwin',\r\n      'Symbian OS',\r\n      'hpwOS',\r\n      'webOS ',\r\n      'webOS',\r\n      'Tablet OS',\r\n      'Linux',\r\n      'Mac OS X',\r\n      'Macintosh',\r\n      'Mac',\r\n      'Windows 98;',\r\n      'Windows '\r\n    ]);\r\n\r\n    /*------------------------------------------------------------------------*/\r\n\r\n    /**\r\n     * Picks the layout engine from an array of guesses.\r\n     *\r\n     * @private\r\n     * @param {Array} guesses An array of guesses.\r\n     * @returns {null|string} The detected layout engine.\r\n     */\r\n    function getLayout(guesses) {\r\n      return reduce(guesses, function(result, guess) {\r\n        return result || RegExp('\\\\b' + (\r\n          guess.pattern || qualify(guess)\r\n        ) + '\\\\b', 'i').exec(ua) && (guess.label || guess);\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Picks the manufacturer from an array of guesses.\r\n     *\r\n     * @private\r\n     * @param {Array} guesses An object of guesses.\r\n     * @returns {null|string} The detected manufacturer.\r\n     */\r\n    function getManufacturer(guesses) {\r\n      return reduce(guesses, function(result, value, key) {\r\n        // Lookup the manufacturer by product or scan the UA for the manufacturer.\r\n        return result || (\r\n          value[product] ||\r\n          value[/^[a-z]+(?: +[a-z]+\\b)*/i.exec(product)] ||\r\n          RegExp('\\\\b' + qualify(key) + '(?:\\\\b|\\\\w*\\\\d)', 'i').exec(ua)\r\n        ) && key;\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Picks the browser name from an array of guesses.\r\n     *\r\n     * @private\r\n     * @param {Array} guesses An array of guesses.\r\n     * @returns {null|string} The detected browser name.\r\n     */\r\n    function getName(guesses) {\r\n      return reduce(guesses, function(result, guess) {\r\n        return result || RegExp('\\\\b' + (\r\n          guess.pattern || qualify(guess)\r\n        ) + '\\\\b', 'i').exec(ua) && (guess.label || guess);\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Picks the OS name from an array of guesses.\r\n     *\r\n     * @private\r\n     * @param {Array} guesses An array of guesses.\r\n     * @returns {null|string} The detected OS name.\r\n     */\r\n    function getOS(guesses) {\r\n      return reduce(guesses, function(result, guess) {\r\n        var pattern = guess.pattern || qualify(guess);\r\n        if (!result && (result =\r\n              RegExp('\\\\b' + pattern + '(?:/[\\\\d.]+|[ \\\\w.]*)', 'i').exec(ua)\r\n            )) {\r\n          result = cleanupOS(result, pattern, guess.label || guess);\r\n        }\r\n        return result;\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Picks the product name from an array of guesses.\r\n     *\r\n     * @private\r\n     * @param {Array} guesses An array of guesses.\r\n     * @returns {null|string} The detected product name.\r\n     */\r\n    function getProduct(guesses) {\r\n      return reduce(guesses, function(result, guess) {\r\n        var pattern = guess.pattern || qualify(guess);\r\n        if (!result && (result =\r\n              RegExp('\\\\b' + pattern + ' *\\\\d+[.\\\\w_]*', 'i').exec(ua) ||\r\n              RegExp('\\\\b' + pattern + '(?:; *(?:[a-z]+[_-])?[a-z]+\\\\d+|[^ ();-]*)', 'i').exec(ua)\r\n            )) {\r\n          // Split by forward slash and append product version if needed.\r\n          if ((result = String((guess.label && !RegExp(pattern, 'i').test(guess.label)) ? guess.label : result).split('/'))[1] && !/[\\d.]+/.test(result[0])) {\r\n            result[0] += ' ' + result[1];\r\n          }\r\n          // Correct character case and cleanup string.\r\n          guess = guess.label || guess;\r\n          result = format(result[0]\r\n            .replace(RegExp(pattern, 'i'), guess)\r\n            .replace(RegExp('; *(?:' + guess + '[_-])?', 'i'), ' ')\r\n            .replace(RegExp('(' + guess + ')[-_.]?(\\\\w)', 'i'), '$1 $2'));\r\n        }\r\n        return result;\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Resolves the version using an array of UA patterns.\r\n     *\r\n     * @private\r\n     * @param {Array} patterns An array of UA patterns.\r\n     * @returns {null|string} The detected version.\r\n     */\r\n    function getVersion(patterns) {\r\n      return reduce(patterns, function(result, pattern) {\r\n        return result || (RegExp(pattern +\r\n          '(?:-[\\\\d.]+/|(?: for [\\\\w-]+)?[ /-])([\\\\d.]+[^ ();/_-]*)', 'i').exec(ua) || 0)[1] || null;\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Returns `platform.description` when the platform object is coerced to a string.\r\n     *\r\n     * @name toString\r\n     * @memberOf platform\r\n     * @returns {string} Returns `platform.description` if available, else an empty string.\r\n     */\r\n    function toStringPlatform() {\r\n      return this.description || '';\r\n    }\r\n\r\n    /*------------------------------------------------------------------------*/\r\n\r\n    // Convert layout to an array so we can add extra details.\r\n    layout && (layout = [layout]);\r\n\r\n    // Detect product names that contain their manufacturer's name.\r\n    if (manufacturer && !product) {\r\n      product = getProduct([manufacturer]);\r\n    }\r\n    // Clean up Google TV.\r\n    if ((data = /\\bGoogle TV\\b/.exec(product))) {\r\n      product = data[0];\r\n    }\r\n    // Detect simulators.\r\n    if (/\\bSimulator\\b/i.test(ua)) {\r\n      product = (product ? product + ' ' : '') + 'Simulator';\r\n    }\r\n    // Detect Opera Mini 8+ running in Turbo/Uncompressed mode on iOS.\r\n    if (name == 'Opera Mini' && /\\bOPiOS\\b/.test(ua)) {\r\n      description.push('running in Turbo/Uncompressed mode');\r\n    }\r\n    // Detect IE Mobile 11.\r\n    if (name == 'IE' && /\\blike iPhone OS\\b/.test(ua)) {\r\n      data = parse(ua.replace(/like iPhone OS/, ''));\r\n      manufacturer = data.manufacturer;\r\n      product = data.product;\r\n    }\r\n    // Detect iOS.\r\n    else if (/^iP/.test(product)) {\r\n      name || (name = 'Safari');\r\n      os = 'iOS' + ((data = / OS ([\\d_]+)/i.exec(ua))\r\n        ? ' ' + data[1].replace(/_/g, '.')\r\n        : '');\r\n    }\r\n    // Detect Kubuntu.\r\n    else if (name == 'Konqueror' && !/buntu/i.test(os)) {\r\n      os = 'Kubuntu';\r\n    }\r\n    // Detect Android browsers.\r\n    else if ((manufacturer && manufacturer != 'Google' &&\r\n        ((/Chrome/.test(name) && !/\\bMobile Safari\\b/i.test(ua)) || /\\bVita\\b/.test(product))) ||\r\n        (/\\bAndroid\\b/.test(os) && /^Chrome/.test(name) && /\\bVersion\\//i.test(ua))) {\r\n      name = 'Android Browser';\r\n      os = /\\bAndroid\\b/.test(os) ? os : 'Android';\r\n    }\r\n    // Detect Silk desktop/accelerated modes.\r\n    else if (name == 'Silk') {\r\n      if (!/\\bMobi/i.test(ua)) {\r\n        os = 'Android';\r\n        description.unshift('desktop mode');\r\n      }\r\n      if (/Accelerated *= *true/i.test(ua)) {\r\n        description.unshift('accelerated');\r\n      }\r\n    }\r\n    // Detect PaleMoon identifying as Firefox.\r\n    else if (name == 'PaleMoon' && (data = /\\bFirefox\\/([\\d.]+)\\b/.exec(ua))) {\r\n      description.push('identifying as Firefox ' + data[1]);\r\n    }\r\n    // Detect Firefox OS and products running Firefox.\r\n    else if (name == 'Firefox' && (data = /\\b(Mobile|Tablet|TV)\\b/i.exec(ua))) {\r\n      os || (os = 'Firefox OS');\r\n      product || (product = data[1]);\r\n    }\r\n    // Detect false positives for Firefox/Safari.\r\n    else if (!name || (data = !/\\bMinefield\\b/i.test(ua) && /\\b(?:Firefox|Safari)\\b/.exec(name))) {\r\n      // Escape the `/` for Firefox 1.\r\n      if (name && !product && /[\\/,]|^[^(]+?\\)/.test(ua.slice(ua.indexOf(data + '/') + 8))) {\r\n        // Clear name of false positives.\r\n        name = null;\r\n      }\r\n      // Reassign a generic name.\r\n      if ((data = product || manufacturer || os) &&\r\n          (product || manufacturer || /\\b(?:Android|Symbian OS|Tablet OS|webOS)\\b/.test(os))) {\r\n        name = /[a-z]+(?: Hat)?/i.exec(/\\bAndroid\\b/.test(os) ? os : data) + ' Browser';\r\n      }\r\n    }\r\n    // Detect non-Opera (Presto-based) versions (order is important).\r\n    if (!version) {\r\n      version = getVersion([\r\n        '(?:Cloud9|CriOS|CrMo|Edge|FxiOS|IEMobile|Iron|Opera ?Mini|OPiOS|OPR|Raven|Silk(?!/[\\\\d.]+$))',\r\n        'Version',\r\n        qualify(name),\r\n        '(?:Firefox|Minefield|NetFront)'\r\n      ]);\r\n    }\r\n    // Detect stubborn layout engines.\r\n    if ((data =\r\n          layout == 'iCab' && parseFloat(version) > 3 && 'WebKit' ||\r\n          /\\bOpera\\b/.test(name) && (/\\bOPR\\b/.test(ua) ? 'Blink' : 'Presto') ||\r\n          /\\b(?:Midori|Nook|Safari)\\b/i.test(ua) && !/^(?:Trident|EdgeHTML)$/.test(layout) && 'WebKit' ||\r\n          !layout && /\\bMSIE\\b/i.test(ua) && (os == 'Mac OS' ? 'Tasman' : 'Trident') ||\r\n          layout == 'WebKit' && /\\bPlayStation\\b(?! Vita\\b)/i.test(name) && 'NetFront'\r\n        )) {\r\n      layout = [data];\r\n    }\r\n    // Detect Windows Phone 7 desktop mode.\r\n    if (name == 'IE' && (data = (/; *(?:XBLWP|ZuneWP)(\\d+)/i.exec(ua) || 0)[1])) {\r\n      name += ' Mobile';\r\n      os = 'Windows Phone ' + (/\\+$/.test(data) ? data : data + '.x');\r\n      description.unshift('desktop mode');\r\n    }\r\n    // Detect Windows Phone 8.x desktop mode.\r\n    else if (/\\bWPDesktop\\b/i.test(ua)) {\r\n      name = 'IE Mobile';\r\n      os = 'Windows Phone 8.x';\r\n      description.unshift('desktop mode');\r\n      version || (version = (/\\brv:([\\d.]+)/.exec(ua) || 0)[1]);\r\n    }\r\n    // Detect IE 11.\r\n    else if (name != 'IE' && layout == 'Trident' && (data = /\\brv:([\\d.]+)/.exec(ua))) {\r\n      if (name) {\r\n        description.push('identifying as ' + name + (version ? ' ' + version : ''));\r\n      }\r\n      name = 'IE';\r\n      version = data[1];\r\n    }\r\n    // Leverage environment features.\r\n    if (useFeatures) {\r\n      // Detect server-side environments.\r\n      // Rhino has a global function while others have a global object.\r\n      if (isHostType(context, 'global')) {\r\n        if (java) {\r\n          data = java.lang.System;\r\n          arch = data.getProperty('os.arch');\r\n          os = os || data.getProperty('os.name') + ' ' + data.getProperty('os.version');\r\n        }\r\n        if (isModuleScope && isHostType(context, 'system') && (data = [context.system])[0]) {\r\n          os || (os = data[0].os || null);\r\n          try {\r\n            data[1] = context.require('ringo/engine').version;\r\n            version = data[1].join('.');\r\n            name = 'RingoJS';\r\n          } catch(e) {\r\n            if (data[0].global.system == context.system) {\r\n              name = 'Narwhal';\r\n            }\r\n          }\r\n        }\r\n        else if (\r\n          typeof context.process == 'object' && !context.process.browser &&\r\n          (data = context.process)\r\n        ) {\r\n          name = 'Node.js';\r\n          arch = data.arch;\r\n          os = data.platform;\r\n          version = /[\\d.]+/.exec(data.version)[0];\r\n        }\r\n        else if (rhino) {\r\n          name = 'Rhino';\r\n        }\r\n      }\r\n      // Detect Adobe AIR.\r\n      else if (getClassOf((data = context.runtime)) == airRuntimeClass) {\r\n        name = 'Adobe AIR';\r\n        os = data.flash.system.Capabilities.os;\r\n      }\r\n      // Detect PhantomJS.\r\n      else if (getClassOf((data = context.phantom)) == phantomClass) {\r\n        name = 'PhantomJS';\r\n        version = (data = data.version || null) && (data.major + '.' + data.minor + '.' + data.patch);\r\n      }\r\n      // Detect IE compatibility modes.\r\n      else if (typeof doc.documentMode == 'number' && (data = /\\bTrident\\/(\\d+)/i.exec(ua))) {\r\n        // We're in compatibility mode when the Trident version + 4 doesn't\r\n        // equal the document mode.\r\n        version = [version, doc.documentMode];\r\n        if ((data = +data[1] + 4) != version[1]) {\r\n          description.push('IE ' + version[1] + ' mode');\r\n          layout && (layout[1] = '');\r\n          version[1] = data;\r\n        }\r\n        version = name == 'IE' ? String(version[1].toFixed(1)) : version[0];\r\n      }\r\n      os = os && format(os);\r\n    }\r\n    // Detect prerelease phases.\r\n    if (version && (data =\r\n          /(?:[ab]|dp|pre|[ab]\\d+pre)(?:\\d+\\+?)?$/i.exec(version) ||\r\n          /(?:alpha|beta)(?: ?\\d)?/i.exec(ua + ';' + (useFeatures && nav.appMinorVersion)) ||\r\n          /\\bMinefield\\b/i.test(ua) && 'a'\r\n        )) {\r\n      prerelease = /b/i.test(data) ? 'beta' : 'alpha';\r\n      version = version.replace(RegExp(data + '\\\\+?$'), '') +\r\n        (prerelease == 'beta' ? beta : alpha) + (/\\d+\\+?/.exec(data) || '');\r\n    }\r\n    // Detect Firefox Mobile.\r\n    if (name == 'Fennec' || name == 'Firefox' && /\\b(?:Android|Firefox OS)\\b/.test(os)) {\r\n      name = 'Firefox Mobile';\r\n    }\r\n    // Obscure Maxthon's unreliable version.\r\n    else if (name == 'Maxthon' && version) {\r\n      version = version.replace(/\\.[\\d.]+/, '.x');\r\n    }\r\n    // Detect Xbox 360 and Xbox One.\r\n    else if (/\\bXbox\\b/i.test(product)) {\r\n      os = null;\r\n      if (product == 'Xbox 360' && /\\bIEMobile\\b/.test(ua)) {\r\n        description.unshift('mobile mode');\r\n      }\r\n    }\r\n    // Add mobile postfix.\r\n    else if ((/^(?:Chrome|IE|Opera)$/.test(name) || name && !product && !/Browser|Mobi/.test(name)) &&\r\n        (os == 'Windows CE' || /Mobi/i.test(ua))) {\r\n      name += ' Mobile';\r\n    }\r\n    // Detect IE platform preview.\r\n    else if (name == 'IE' && useFeatures && context.external === null) {\r\n      description.unshift('platform preview');\r\n    }\r\n    // Detect BlackBerry OS version.\r\n    // http://docs.blackberry.com/en/developers/deliverables/18169/HTTP_headers_sent_by_BB_Browser_1234911_11.jsp\r\n    else if ((/\\bBlackBerry\\b/.test(product) || /\\bBB10\\b/.test(ua)) && (data =\r\n          (RegExp(product.replace(/ +/g, ' *') + '/([.\\\\d]+)', 'i').exec(ua) || 0)[1] ||\r\n          version\r\n        )) {\r\n      data = [data, /BB10/.test(ua)];\r\n      os = (data[1] ? (product = null, manufacturer = 'BlackBerry') : 'Device Software') + ' ' + data[0];\r\n      version = null;\r\n    }\r\n    // Detect Opera identifying/masking itself as another browser.\r\n    // http://www.opera.com/support/kb/view/843/\r\n    else if (this != forOwn && product != 'Wii' && (\r\n          (useFeatures && opera) ||\r\n          (/Opera/.test(name) && /\\b(?:MSIE|Firefox)\\b/i.test(ua)) ||\r\n          (name == 'Firefox' && /\\bOS X (?:\\d+\\.){2,}/.test(os)) ||\r\n          (name == 'IE' && (\r\n            (os && !/^Win/.test(os) && version > 5.5) ||\r\n            /\\bWindows XP\\b/.test(os) && version > 8 ||\r\n            version == 8 && !/\\bTrident\\b/.test(ua)\r\n          ))\r\n        ) && !reOpera.test((data = parse.call(forOwn, ua.replace(reOpera, '') + ';'))) && data.name) {\r\n      // When \"identifying\", the UA contains both Opera and the other browser's name.\r\n      data = 'ing as ' + data.name + ((data = data.version) ? ' ' + data : '');\r\n      if (reOpera.test(name)) {\r\n        if (/\\bIE\\b/.test(data) && os == 'Mac OS') {\r\n          os = null;\r\n        }\r\n        data = 'identify' + data;\r\n      }\r\n      // When \"masking\", the UA contains only the other browser's name.\r\n      else {\r\n        data = 'mask' + data;\r\n        if (operaClass) {\r\n          name = format(operaClass.replace(/([a-z])([A-Z])/g, '$1 $2'));\r\n        } else {\r\n          name = 'Opera';\r\n        }\r\n        if (/\\bIE\\b/.test(data)) {\r\n          os = null;\r\n        }\r\n        if (!useFeatures) {\r\n          version = null;\r\n        }\r\n      }\r\n      layout = ['Presto'];\r\n      description.push(data);\r\n    }\r\n    // Detect WebKit Nightly and approximate Chrome/Safari versions.\r\n    if ((data = (/\\bAppleWebKit\\/([\\d.]+\\+?)/i.exec(ua) || 0)[1])) {\r\n      // Correct build number for numeric comparison.\r\n      // (e.g. \"532.5\" becomes \"532.05\")\r\n      data = [parseFloat(data.replace(/\\.(\\d)$/, '.0$1')), data];\r\n      // Nightly builds are postfixed with a \"+\".\r\n      if (name == 'Safari' && data[1].slice(-1) == '+') {\r\n        name = 'WebKit Nightly';\r\n        prerelease = 'alpha';\r\n        version = data[1].slice(0, -1);\r\n      }\r\n      // Clear incorrect browser versions.\r\n      else if (version == data[1] ||\r\n          version == (data[2] = (/\\bSafari\\/([\\d.]+\\+?)/i.exec(ua) || 0)[1])) {\r\n        version = null;\r\n      }\r\n      // Use the full Chrome version when available.\r\n      data[1] = (/\\bChrome\\/([\\d.]+)/i.exec(ua) || 0)[1];\r\n      // Detect Blink layout engine.\r\n      if (data[0] == 537.36 && data[2] == 537.36 && parseFloat(data[1]) >= 28 && layout == 'WebKit') {\r\n        layout = ['Blink'];\r\n      }\r\n      // Detect JavaScriptCore.\r\n      // http://stackoverflow.com/questions/6768474/how-can-i-detect-which-javascript-engine-v8-or-jsc-is-used-at-runtime-in-androi\r\n      if (!useFeatures || (!likeChrome && !data[1])) {\r\n        layout && (layout[1] = 'like Safari');\r\n        data = (data = data[0], data < 400 ? 1 : data < 500 ? 2 : data < 526 ? 3 : data < 533 ? 4 : data < 534 ? '4+' : data < 535 ? 5 : data < 537 ? 6 : data < 538 ? 7 : data < 601 ? 8 : '8');\r\n      } else {\r\n        layout && (layout[1] = 'like Chrome');\r\n        data = data[1] || (data = data[0], data < 530 ? 1 : data < 532 ? 2 : data < 532.05 ? 3 : data < 533 ? 4 : data < 534.03 ? 5 : data < 534.07 ? 6 : data < 534.10 ? 7 : data < 534.13 ? 8 : data < 534.16 ? 9 : data < 534.24 ? 10 : data < 534.30 ? 11 : data < 535.01 ? 12 : data < 535.02 ? '13+' : data < 535.07 ? 15 : data < 535.11 ? 16 : data < 535.19 ? 17 : data < 536.05 ? 18 : data < 536.10 ? 19 : data < 537.01 ? 20 : data < 537.11 ? '21+' : data < 537.13 ? 23 : data < 537.18 ? 24 : data < 537.24 ? 25 : data < 537.36 ? 26 : layout != 'Blink' ? '27' : '28');\r\n      }\r\n      // Add the postfix of \".x\" or \"+\" for approximate versions.\r\n      layout && (layout[1] += ' ' + (data += typeof data == 'number' ? '.x' : /[.+]/.test(data) ? '' : '+'));\r\n      // Obscure version for some Safari 1-2 releases.\r\n      if (name == 'Safari' && (!version || parseInt(version) > 45)) {\r\n        version = data;\r\n      }\r\n    }\r\n    // Detect Opera desktop modes.\r\n    if (name == 'Opera' &&  (data = /\\bzbov|zvav$/.exec(os))) {\r\n      name += ' ';\r\n      description.unshift('desktop mode');\r\n      if (data == 'zvav') {\r\n        name += 'Mini';\r\n        version = null;\r\n      } else {\r\n        name += 'Mobile';\r\n      }\r\n      os = os.replace(RegExp(' *' + data + '$'), '');\r\n    }\r\n    // Detect Chrome desktop mode.\r\n    else if (name == 'Safari' && /\\bChrome\\b/.exec(layout && layout[1])) {\r\n      description.unshift('desktop mode');\r\n      name = 'Chrome Mobile';\r\n      version = null;\r\n\r\n      if (/\\bOS X\\b/.test(os)) {\r\n        manufacturer = 'Apple';\r\n        os = 'iOS 4.3+';\r\n      } else {\r\n        os = null;\r\n      }\r\n    }\r\n    // Strip incorrect OS versions.\r\n    if (version && version.indexOf((data = /[\\d.]+$/.exec(os))) == 0 &&\r\n        ua.indexOf('/' + data + '-') > -1) {\r\n      os = trim(os.replace(data, ''));\r\n    }\r\n    // Add layout engine.\r\n    if (layout && !/\\b(?:Avant|Nook)\\b/.test(name) && (\r\n        /Browser|Lunascape|Maxthon/.test(name) ||\r\n        name != 'Safari' && /^iOS/.test(os) && /\\bSafari\\b/.test(layout[1]) ||\r\n        /^(?:Adobe|Arora|Breach|Midori|Opera|Phantom|Rekonq|Rock|Sleipnir|Web)/.test(name) && layout[1])) {\r\n      // Don't add layout details to description if they are falsey.\r\n      (data = layout[layout.length - 1]) && description.push(data);\r\n    }\r\n    // Combine contextual information.\r\n    if (description.length) {\r\n      description = ['(' + description.join('; ') + ')'];\r\n    }\r\n    // Append manufacturer to description.\r\n    if (manufacturer && product && product.indexOf(manufacturer) < 0) {\r\n      description.push('on ' + manufacturer);\r\n    }\r\n    // Append product to description.\r\n    if (product) {\r\n      description.push((/^on /.test(description[description.length - 1]) ? '' : 'on ') + product);\r\n    }\r\n    // Parse the OS into an object.\r\n    if (os) {\r\n      data = / ([\\d.+]+)$/.exec(os);\r\n      isSpecialCasedOS = data && os.charAt(os.length - data[0].length - 1) == '/';\r\n      os = {\r\n        'architecture': 32,\r\n        'family': (data && !isSpecialCasedOS) ? os.replace(data[0], '') : os,\r\n        'version': data ? data[1] : null,\r\n        'toString': function() {\r\n          var version = this.version;\r\n          return this.family + ((version && !isSpecialCasedOS) ? ' ' + version : '') + (this.architecture == 64 ? ' 64-bit' : '');\r\n        }\r\n      };\r\n    }\r\n    // Add browser/OS architecture.\r\n    if ((data = /\\b(?:AMD|IA|Win|WOW|x86_|x)64\\b/i.exec(arch)) && !/\\bi686\\b/i.test(arch)) {\r\n      if (os) {\r\n        os.architecture = 64;\r\n        os.family = os.family.replace(RegExp(' *' + data), '');\r\n      }\r\n      if (\r\n          name && (/\\bWOW64\\b/i.test(ua) ||\r\n          (useFeatures && /\\w(?:86|32)$/.test(nav.cpuClass || nav.platform) && !/\\bWin64; x64\\b/i.test(ua)))\r\n      ) {\r\n        description.unshift('32-bit');\r\n      }\r\n    }\r\n    // Chrome 39 and above on OS X is always 64-bit.\r\n    else if (\r\n        os && /^OS X/.test(os.family) &&\r\n        name == 'Chrome' && parseFloat(version) >= 39\r\n    ) {\r\n      os.architecture = 64;\r\n    }\r\n\r\n    ua || (ua = null);\r\n\r\n    /*------------------------------------------------------------------------*/\r\n\r\n    /**\r\n     * The platform object.\r\n     *\r\n     * @name platform\r\n     * @type Object\r\n     */\r\n    var platform = {};\r\n\r\n    /**\r\n     * The platform description.\r\n     *\r\n     * @memberOf platform\r\n     * @type string|null\r\n     */\r\n    platform.description = ua;\r\n\r\n    /**\r\n     * The name of the browser's layout engine.\r\n     *\r\n     * @memberOf platform\r\n     * @type string|null\r\n     */\r\n    platform.layout = layout && layout[0];\r\n\r\n    /**\r\n     * The name of the product's manufacturer.\r\n     *\r\n     * @memberOf platform\r\n     * @type string|null\r\n     */\r\n    platform.manufacturer = manufacturer;\r\n\r\n    /**\r\n     * The name of the browser/environment.\r\n     *\r\n     * @memberOf platform\r\n     * @type string|null\r\n     */\r\n    platform.name = name;\r\n\r\n    /**\r\n     * The alpha/beta release indicator.\r\n     *\r\n     * @memberOf platform\r\n     * @type string|null\r\n     */\r\n    platform.prerelease = prerelease;\r\n\r\n    /**\r\n     * The name of the product hosting the browser.\r\n     *\r\n     * @memberOf platform\r\n     * @type string|null\r\n     */\r\n    platform.product = product;\r\n\r\n    /**\r\n     * The browser's user agent string.\r\n     *\r\n     * @memberOf platform\r\n     * @type string|null\r\n     */\r\n    platform.ua = ua;\r\n\r\n    /**\r\n     * The browser/environment version.\r\n     *\r\n     * @memberOf platform\r\n     * @type string|null\r\n     */\r\n    platform.version = name && version;\r\n\r\n    /**\r\n     * The name of the operating system.\r\n     *\r\n     * @memberOf platform\r\n     * @type Object\r\n     */\r\n    platform.os = os || {\r\n\r\n      /**\r\n       * The CPU architecture the OS is built for.\r\n       *\r\n       * @memberOf platform.os\r\n       * @type number|null\r\n       */\r\n      'architecture': null,\r\n\r\n      /**\r\n       * The family of the OS.\r\n       *\r\n       * Common values include:\r\n       * \"Windows\", \"Windows Server 2008 R2 / 7\", \"Windows Server 2008 / Vista\",\r\n       * \"Windows XP\", \"OS X\", \"Ubuntu\", \"Debian\", \"Fedora\", \"Red Hat\", \"SuSE\",\r\n       * \"Android\", \"iOS\" and \"Windows Phone\"\r\n       *\r\n       * @memberOf platform.os\r\n       * @type string|null\r\n       */\r\n      'family': null,\r\n\r\n      /**\r\n       * The version of the OS.\r\n       *\r\n       * @memberOf platform.os\r\n       * @type string|null\r\n       */\r\n      'version': null,\r\n\r\n      /**\r\n       * Returns the OS string.\r\n       *\r\n       * @memberOf platform.os\r\n       * @returns {string} The OS string.\r\n       */\r\n      'toString': function() { return 'null'; }\r\n    };\r\n\r\n    platform.parse = parse;\r\n    platform.toString = toStringPlatform;\r\n\r\n    if (platform.version) {\r\n      description.unshift(version);\r\n    }\r\n    if (platform.name) {\r\n      description.unshift(name);\r\n    }\r\n    if (os && name && !(os == String(os).split(' ')[0] && (os == name.split(' ')[0] || product))) {\r\n      description.push(product ? '(' + os + ')' : 'on ' + os);\r\n    }\r\n    if (description.length) {\r\n      platform.description = description.join(' ');\r\n    }\r\n    return platform;\r\n  }\r\n\r\n  /*--------------------------------------------------------------------------*/\r\n\r\n  // Export platform.\r\n  var platform = parse();\r\n\r\n  // Some AMD build optimizers, like r.js, check for condition patterns like the following:\r\n  if (true) {\r\n    // Expose platform on the global object to prevent errors when platform is\r\n    // loaded by a script tag in the presence of an AMD loader.\r\n    // See http://requirejs.org/docs/errors.html#mismatch for more details.\r\n    root.platform = platform;\r\n\r\n    // Define as an anonymous module so platform can be aliased through path mapping.\r\n    !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {\r\n      return platform;\r\n    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n  }\r\n  // Check for `exports` after `define` in case a build optimizer adds an `exports` object.\r\n  else if (freeExports && freeModule) {\r\n    // Export for CommonJS support.\r\n    forOwn(platform, function(value, key) {\r\n      freeExports[key] = value;\r\n    });\r\n  }\r\n  else {\r\n    // Export to the global object.\r\n    root.platform = platform;\r\n  }\r\n}.call(this));\r\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(19)(module), __webpack_require__(0)))\n\n/***/ },\n/* 31 */\n/***/ function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__.p + \"aa8cb5fbc710c7dded973a341ced2e66.js\";\n\n/***/ },\n/* 32 */\n/***/ function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(global, setImmediate) {var __WEBPACK_AMD_DEFINE_RESULT__;/*! Native Promise Only\n    v0.8.1 (c) Kyle Simpson\n    MIT License: http://getify.mit-license.org\n*/\n\n(function UMD(name,context,definition){\n\t// special form of UMD for polyfilling across evironments\n\tcontext[name] = context[name] || definition();\n\tif (typeof module != \"undefined\" && module.exports) { module.exports = context[name]; }\n\telse if (true) { !(__WEBPACK_AMD_DEFINE_RESULT__ = function $AMD$(){ return context[name]; }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); }\n})(\"Promise\",typeof global != \"undefined\" ? global : this,function DEF(){\n\t/*jshint validthis:true */\n\t\"use strict\";\n\n\tvar builtInProp, cycle, scheduling_queue,\n\t\tToString = Object.prototype.toString,\n\t\ttimer = (typeof setImmediate != \"undefined\") ?\n\t\t\tfunction timer(fn) { return setImmediate(fn); } :\n\t\t\tsetTimeout\n\t;\n\n\t// dammit, IE8.\n\ttry {\n\t\tObject.defineProperty({},\"x\",{});\n\t\tbuiltInProp = function builtInProp(obj,name,val,config) {\n\t\t\treturn Object.defineProperty(obj,name,{\n\t\t\t\tvalue: val,\n\t\t\t\twritable: true,\n\t\t\t\tconfigurable: config !== false\n\t\t\t});\n\t\t};\n\t}\n\tcatch (err) {\n\t\tbuiltInProp = function builtInProp(obj,name,val) {\n\t\t\tobj[name] = val;\n\t\t\treturn obj;\n\t\t};\n\t}\n\n\t// Note: using a queue instead of array for efficiency\n\tscheduling_queue = (function Queue() {\n\t\tvar first, last, item;\n\n\t\tfunction Item(fn,self) {\n\t\t\tthis.fn = fn;\n\t\t\tthis.self = self;\n\t\t\tthis.next = void 0;\n\t\t}\n\n\t\treturn {\n\t\t\tadd: function add(fn,self) {\n\t\t\t\titem = new Item(fn,self);\n\t\t\t\tif (last) {\n\t\t\t\t\tlast.next = item;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tfirst = item;\n\t\t\t\t}\n\t\t\t\tlast = item;\n\t\t\t\titem = void 0;\n\t\t\t},\n\t\t\tdrain: function drain() {\n\t\t\t\tvar f = first;\n\t\t\t\tfirst = last = cycle = void 0;\n\n\t\t\t\twhile (f) {\n\t\t\t\t\tf.fn.call(f.self);\n\t\t\t\t\tf = f.next;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t})();\n\n\tfunction schedule(fn,self) {\n\t\tscheduling_queue.add(fn,self);\n\t\tif (!cycle) {\n\t\t\tcycle = timer(scheduling_queue.drain);\n\t\t}\n\t}\n\n\t// promise duck typing\n\tfunction isThenable(o) {\n\t\tvar _then, o_type = typeof o;\n\n\t\tif (o != null &&\n\t\t\t(\n\t\t\t\to_type == \"object\" || o_type == \"function\"\n\t\t\t)\n\t\t) {\n\t\t\t_then = o.then;\n\t\t}\n\t\treturn typeof _then == \"function\" ? _then : false;\n\t}\n\n\tfunction notify() {\n\t\tfor (var i=0; i<this.chain.length; i++) {\n\t\t\tnotifyIsolated(\n\t\t\t\tthis,\n\t\t\t\t(this.state === 1) ? this.chain[i].success : this.chain[i].failure,\n\t\t\t\tthis.chain[i]\n\t\t\t);\n\t\t}\n\t\tthis.chain.length = 0;\n\t}\n\n\t// NOTE: This is a separate function to isolate\n\t// the `try..catch` so that other code can be\n\t// optimized better\n\tfunction notifyIsolated(self,cb,chain) {\n\t\tvar ret, _then;\n\t\ttry {\n\t\t\tif (cb === false) {\n\t\t\t\tchain.reject(self.msg);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (cb === true) {\n\t\t\t\t\tret = self.msg;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tret = cb.call(void 0,self.msg);\n\t\t\t\t}\n\n\t\t\t\tif (ret === chain.promise) {\n\t\t\t\t\tchain.reject(TypeError(\"Promise-chain cycle\"));\n\t\t\t\t}\n\t\t\t\telse if (_then = isThenable(ret)) {\n\t\t\t\t\t_then.call(ret,chain.resolve,chain.reject);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tchain.resolve(ret);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcatch (err) {\n\t\t\tchain.reject(err);\n\t\t}\n\t}\n\n\tfunction resolve(msg) {\n\t\tvar _then, self = this;\n\n\t\t// already triggered?\n\t\tif (self.triggered) { return; }\n\n\t\tself.triggered = true;\n\n\t\t// unwrap\n\t\tif (self.def) {\n\t\t\tself = self.def;\n\t\t}\n\n\t\ttry {\n\t\t\tif (_then = isThenable(msg)) {\n\t\t\t\tschedule(function(){\n\t\t\t\t\tvar def_wrapper = new MakeDefWrapper(self);\n\t\t\t\t\ttry {\n\t\t\t\t\t\t_then.call(msg,\n\t\t\t\t\t\t\tfunction $resolve$(){ resolve.apply(def_wrapper,arguments); },\n\t\t\t\t\t\t\tfunction $reject$(){ reject.apply(def_wrapper,arguments); }\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tcatch (err) {\n\t\t\t\t\t\treject.call(def_wrapper,err);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t}\n\t\t\telse {\n\t\t\t\tself.msg = msg;\n\t\t\t\tself.state = 1;\n\t\t\t\tif (self.chain.length > 0) {\n\t\t\t\t\tschedule(notify,self);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcatch (err) {\n\t\t\treject.call(new MakeDefWrapper(self),err);\n\t\t}\n\t}\n\n\tfunction reject(msg) {\n\t\tvar self = this;\n\n\t\t// already triggered?\n\t\tif (self.triggered) { return; }\n\n\t\tself.triggered = true;\n\n\t\t// unwrap\n\t\tif (self.def) {\n\t\t\tself = self.def;\n\t\t}\n\n\t\tself.msg = msg;\n\t\tself.state = 2;\n\t\tif (self.chain.length > 0) {\n\t\t\tschedule(notify,self);\n\t\t}\n\t}\n\n\tfunction iteratePromises(Constructor,arr,resolver,rejecter) {\n\t\tfor (var idx=0; idx<arr.length; idx++) {\n\t\t\t(function IIFE(idx){\n\t\t\t\tConstructor.resolve(arr[idx])\n\t\t\t\t.then(\n\t\t\t\t\tfunction $resolver$(msg){\n\t\t\t\t\t\tresolver(idx,msg);\n\t\t\t\t\t},\n\t\t\t\t\trejecter\n\t\t\t\t);\n\t\t\t})(idx);\n\t\t}\n\t}\n\n\tfunction MakeDefWrapper(self) {\n\t\tthis.def = self;\n\t\tthis.triggered = false;\n\t}\n\n\tfunction MakeDef(self) {\n\t\tthis.promise = self;\n\t\tthis.state = 0;\n\t\tthis.triggered = false;\n\t\tthis.chain = [];\n\t\tthis.msg = void 0;\n\t}\n\n\tfunction Promise(executor) {\n\t\tif (typeof executor != \"function\") {\n\t\t\tthrow TypeError(\"Not a function\");\n\t\t}\n\n\t\tif (this.__NPO__ !== 0) {\n\t\t\tthrow TypeError(\"Not a promise\");\n\t\t}\n\n\t\t// instance shadowing the inherited \"brand\"\n\t\t// to signal an already \"initialized\" promise\n\t\tthis.__NPO__ = 1;\n\n\t\tvar def = new MakeDef(this);\n\n\t\tthis[\"then\"] = function then(success,failure) {\n\t\t\tvar o = {\n\t\t\t\tsuccess: typeof success == \"function\" ? success : true,\n\t\t\t\tfailure: typeof failure == \"function\" ? failure : false\n\t\t\t};\n\t\t\t// Note: `then(..)` itself can be borrowed to be used against\n\t\t\t// a different promise constructor for making the chained promise,\n\t\t\t// by substituting a different `this` binding.\n\t\t\to.promise = new this.constructor(function extractChain(resolve,reject) {\n\t\t\t\tif (typeof resolve != \"function\" || typeof reject != \"function\") {\n\t\t\t\t\tthrow TypeError(\"Not a function\");\n\t\t\t\t}\n\n\t\t\t\to.resolve = resolve;\n\t\t\t\to.reject = reject;\n\t\t\t});\n\t\t\tdef.chain.push(o);\n\n\t\t\tif (def.state !== 0) {\n\t\t\t\tschedule(notify,def);\n\t\t\t}\n\n\t\t\treturn o.promise;\n\t\t};\n\t\tthis[\"catch\"] = function $catch$(failure) {\n\t\t\treturn this.then(void 0,failure);\n\t\t};\n\n\t\ttry {\n\t\t\texecutor.call(\n\t\t\t\tvoid 0,\n\t\t\t\tfunction publicResolve(msg){\n\t\t\t\t\tresolve.call(def,msg);\n\t\t\t\t},\n\t\t\t\tfunction publicReject(msg) {\n\t\t\t\t\treject.call(def,msg);\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\t\tcatch (err) {\n\t\t\treject.call(def,err);\n\t\t}\n\t}\n\n\tvar PromisePrototype = builtInProp({},\"constructor\",Promise,\n\t\t/*configurable=*/false\n\t);\n\n\t// Note: Android 4 cannot use `Object.defineProperty(..)` here\n\tPromise.prototype = PromisePrototype;\n\n\t// built-in \"brand\" to signal an \"uninitialized\" promise\n\tbuiltInProp(PromisePrototype,\"__NPO__\",0,\n\t\t/*configurable=*/false\n\t);\n\n\tbuiltInProp(Promise,\"resolve\",function Promise$resolve(msg) {\n\t\tvar Constructor = this;\n\n\t\t// spec mandated checks\n\t\t// note: best \"isPromise\" check that's practical for now\n\t\tif (msg && typeof msg == \"object\" && msg.__NPO__ === 1) {\n\t\t\treturn msg;\n\t\t}\n\n\t\treturn new Constructor(function executor(resolve,reject){\n\t\t\tif (typeof resolve != \"function\" || typeof reject != \"function\") {\n\t\t\t\tthrow TypeError(\"Not a function\");\n\t\t\t}\n\n\t\t\tresolve(msg);\n\t\t});\n\t});\n\n\tbuiltInProp(Promise,\"reject\",function Promise$reject(msg) {\n\t\treturn new this(function executor(resolve,reject){\n\t\t\tif (typeof resolve != \"function\" || typeof reject != \"function\") {\n\t\t\t\tthrow TypeError(\"Not a function\");\n\t\t\t}\n\n\t\t\treject(msg);\n\t\t});\n\t});\n\n\tbuiltInProp(Promise,\"all\",function Promise$all(arr) {\n\t\tvar Constructor = this;\n\n\t\t// spec mandated checks\n\t\tif (ToString.call(arr) != \"[object Array]\") {\n\t\t\treturn Constructor.reject(TypeError(\"Not an array\"));\n\t\t}\n\t\tif (arr.length === 0) {\n\t\t\treturn Constructor.resolve([]);\n\t\t}\n\n\t\treturn new Constructor(function executor(resolve,reject){\n\t\t\tif (typeof resolve != \"function\" || typeof reject != \"function\") {\n\t\t\t\tthrow TypeError(\"Not a function\");\n\t\t\t}\n\n\t\t\tvar len = arr.length, msgs = Array(len), count = 0;\n\n\t\t\titeratePromises(Constructor,arr,function resolver(idx,msg) {\n\t\t\t\tmsgs[idx] = msg;\n\t\t\t\tif (++count === len) {\n\t\t\t\t\tresolve(msgs);\n\t\t\t\t}\n\t\t\t},reject);\n\t\t});\n\t});\n\n\tbuiltInProp(Promise,\"race\",function Promise$race(arr) {\n\t\tvar Constructor = this;\n\n\t\t// spec mandated checks\n\t\tif (ToString.call(arr) != \"[object Array]\") {\n\t\t\treturn Constructor.reject(TypeError(\"Not an array\"));\n\t\t}\n\n\t\treturn new Constructor(function executor(resolve,reject){\n\t\t\tif (typeof resolve != \"function\" || typeof reject != \"function\") {\n\t\t\t\tthrow TypeError(\"Not a function\");\n\t\t\t}\n\n\t\t\titeratePromises(Constructor,arr,function resolver(idx,msg){\n\t\t\t\tresolve(msg);\n\t\t\t},reject);\n\t\t});\n\t});\n\n\treturn Promise;\n});\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0), __webpack_require__(14).setImmediate))\n\n/***/ },\n/* 33 */,\n/* 34 */\n/***/ function(module, exports) {\n\n\"use strict\";\n\"use strict\";\n\nexports.__esModule = true;\n/*eslint-env browser*/\n\nexports.default = {\n  pool: {\n    size: navigator.hardwareConcurrency || 8\n  }\n};\n//# sourceMappingURL=defaults.browser.js.map\n\n\n/***/ },\n/* 35 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n'use strict';\n\nexports.__esModule = true;\n\nvar _os = __webpack_require__(43);\n\nexports.default = {\n  pool: {\n    size: (0, _os.cpus)().length\n  }\n};\n//# sourceMappingURL=defaults.node.js.map\n\n\n/***/ },\n/* 36 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n'use strict';\n\nexports.__esModule = true;\n\nvar _eventemitter = __webpack_require__(3);\n\nvar _eventemitter2 = _interopRequireDefault(_eventemitter);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Job = function (_EventEmitter) {\n  _inherits(Job, _EventEmitter);\n\n  function Job(pool) {\n    _classCallCheck(this, Job);\n\n    var _this = _possibleConstructorReturn(this, _EventEmitter.call(this));\n\n    _this.pool = pool;\n    _this.thread = null;\n\n    _this.runArgs = [];\n    _this.sendArgs = [];\n\n    pool.emit('newJob', _this);\n    return _this;\n  }\n\n  Job.prototype.run = function run() {\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    if (args.length === 0) {\n      throw new Error('Cannot call .run() without arguments.');\n    }\n\n    this.runArgs = args;\n    return this;\n  };\n\n  Job.prototype.send = function send() {\n    if (this.runArgs.length === 0) {\n      throw new Error('Cannot .send() before .run().');\n    }\n\n    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    this.sendArgs = args;\n\n    this.emit('readyToRun');\n    return this;\n  };\n\n  Job.prototype.executeOn = function executeOn(thread) {\n    var _thread$once$once$run, _thread$once$once;\n\n    (_thread$once$once$run = (_thread$once$once = thread.once('message', this.emit.bind(this, 'done')).once('error', this.emit.bind(this, 'error'))).run.apply(_thread$once$once, this.runArgs)).send.apply(_thread$once$once$run, this.sendArgs);\n\n    this.thread = thread;\n\n    this.emit('threadChanged');\n    return this;\n  };\n\n  Job.prototype.promise = function promise() {\n    var _this2 = this;\n\n    // Always return a promise\n    return new Promise(function (resolve) {\n      // If the thread isn't set, listen for the threadChanged event\n      if (!_this2.thread) {\n        _this2.once('threadChanged', function () {\n          resolve(_this2.thread.promise());\n        });\n      } else {\n        resolve(_this2.thread.promise());\n      }\n    });\n  };\n\n  return Job;\n}(_eventemitter2.default);\n\nexports.default = Job;\n//# sourceMappingURL=job.js.map\n\n\n/***/ },\n/* 37 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n'use strict';\n\nexports.__esModule = true;\n\nvar _eventemitter = __webpack_require__(3);\n\nvar _eventemitter2 = _interopRequireDefault(_eventemitter);\n\nvar _job = __webpack_require__(36);\n\nvar _job2 = _interopRequireDefault(_job);\n\nvar _defaults = __webpack_require__(18);\n\nvar _defaults2 = _interopRequireDefault(_defaults);\n\nvar _ = __webpack_require__(15);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Pool = function (_EventEmitter) {\n  _inherits(Pool, _EventEmitter);\n\n  function Pool(threads) {\n    _classCallCheck(this, Pool);\n\n    var _this = _possibleConstructorReturn(this, _EventEmitter.call(this));\n\n    _this.threads = Pool.spawn(threads || _defaults2.default.pool.size);\n    _this.idleThreads = _this.threads.slice();\n    _this.jobQueue = [];\n    _this.runArgs = [];\n\n    _this.on('newJob', function (job) {\n      return _this.handleNewJob(job);\n    });\n    _this.on('threadAvailable', function () {\n      return _this.dequeue();\n    });\n    return _this;\n  }\n\n  Pool.prototype.run = function run() {\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    this.runArgs = args;\n    return this;\n  };\n\n  Pool.prototype.send = function send() {\n    if (!this.runArgs) {\n      throw new Error('Pool.send() called without prior Pool.run(). You need to define what to run first.');\n    }\n\n    var job = new _job2.default(this);\n    job.run.apply(job, this.runArgs);\n    return job.send.apply(job, arguments);\n  };\n\n  Pool.prototype.killAll = function killAll() {\n    this.threads.forEach(function (thread) {\n      thread.kill();\n    });\n  };\n\n  Pool.prototype.queueJob = function queueJob(job) {\n    this.jobQueue.push(job);\n    this.dequeue();\n  };\n\n  Pool.prototype.dequeue = function dequeue() {\n    var _this2 = this;\n\n    if (this.jobQueue.length === 0 || this.idleThreads.length === 0) {\n      return;\n    }\n\n    var job = this.jobQueue.shift();\n    var thread = this.idleThreads.shift();\n\n    job.once('done', function () {\n      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      return _this2.handleJobSuccess.apply(_this2, [thread, job].concat(args));\n    }).once('error', function () {\n      for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n\n      return _this2.handleJobError.apply(_this2, [thread, job].concat(args));\n    });\n\n    job.executeOn(thread);\n  };\n\n  Pool.prototype.handleNewJob = function handleNewJob(job) {\n    var _this3 = this;\n\n    this.lastCreatedJob = job;\n    job.once('readyToRun', function () {\n      return _this3.queueJob(job);\n    }); // triggered by job.send()\n  };\n\n  Pool.prototype.handleJobSuccess = function handleJobSuccess(thread, job) {\n    for (var _len4 = arguments.length, responseArgs = Array(_len4 > 2 ? _len4 - 2 : 0), _key4 = 2; _key4 < _len4; _key4++) {\n      responseArgs[_key4 - 2] = arguments[_key4];\n    }\n\n    this.emit.apply(this, ['done', job].concat(responseArgs));\n    this.handleJobDone(thread);\n  };\n\n  Pool.prototype.handleJobError = function handleJobError(thread, job, error) {\n    this.emit('error', job, error);\n    this.handleJobDone(thread);\n  };\n\n  Pool.prototype.handleJobDone = function handleJobDone(thread) {\n    var _this4 = this;\n\n    this.idleThreads.push(thread);\n    this.emit('threadAvailable');\n\n    if (this.idleThreads.length === this.threads.length) {\n      // run deferred to give other job.on('done') handlers time to run first\n      setTimeout(function () {\n        _this4.emit('finished');\n      }, 0);\n    }\n  };\n\n  return Pool;\n}(_eventemitter2.default);\n\nexports.default = Pool;\n\n\nPool.spawn = function (threadCount) {\n  var threads = [];\n\n  for (var threadIndex = 0; threadIndex < threadCount; threadIndex++) {\n    threads.push((0, _.spawn)());\n  }\n\n  return threads;\n};\n//# sourceMappingURL=pool.js.map\n\n\n/***/ },\n/* 38 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n'use strict';\n\nexports.__esModule = true;\n\nvar _slaveCode = __webpack_require__(39);\n\nvar _slaveCode2 = _interopRequireDefault(_slaveCode);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar slaveCodeDataUri = 'data:text/javascript;charset=utf-8,' + encodeURI(_slaveCode2.default);\nvar createBlobURL = window.createBlobURL || window.createObjectURL;\n\nif (!createBlobURL) {\n  var URL = window.URL || window.webkitURL;\n\n  if (URL) {\n    createBlobURL = URL.createObjectURL;\n  } else {\n    throw new Error('No Blob creation implementation found.');\n  }\n}\n\nif (typeof window.BlobBuilder === 'function' && typeof createBlobURL === 'function') {\n  var blobBuilder = new window.BlobBuilder();\n  blobBuilder.append(_slaveCode2.default);\n  slaveCodeDataUri = createBlobURL(blobBuilder.getBlob());\n} else if (typeof window.Blob === 'function' && typeof createBlobURL === 'function') {\n  var blob = new window.Blob([_slaveCode2.default], { type: 'text/javascript' });\n  slaveCodeDataUri = createBlobURL(blob);\n}\n\nexports.default = slaveCodeDataUri;\n//# sourceMappingURL=slave-code-uri.js.map\n\n\n/***/ },\n/* 39 */\n/***/ function(module, exports) {\n\nmodule.exports = \"/*eslint-env worker*/\\n/*global importScripts*/\\n/*eslint-disable no-console*/\\nself.module = {\\n  exports : function() {\\n    if (console) { console.error('No thread logic initialized.'); }\\n  }\\n};\\n\\nfunction handlerDone() {\\n  var args = Array.prototype.slice.call(arguments, 0);\\n  this.postMessage({ response : args });\\n}\\n\\nfunction handlerProgress(progress) {\\n  this.postMessage({ progress : progress });\\n}\\n\\nfunction handlerDoneTransfer() {\\n  var args = Array.prototype.slice.call(arguments);\\n  var lastArg = args.pop();\\n\\n  if (!(lastArg instanceof Array) && this.console) {\\n    console.error('Expected 2nd parameter of <doneCallback>.transfer() to be an array. Got:', lastArg);\\n  }\\n\\n  this.postMessage({ response : args }, lastArg);\\n}\\n\\nself.onmessage = function (event) {\\n  var scripts = event.data.scripts;\\n  if (scripts && scripts.length > 0 && typeof importScripts !== 'function') {\\n    throw new Error('importScripts() not supported.');\\n  }\\n\\n  if (event.data.initByScripts) {\\n    importScripts.apply(null, scripts);\\n  }\\n\\n  if (event.data.initByMethod) {\\n    var method = event.data.method;\\n    this.module.exports = Function.apply(null, method.args.concat(method.body));\\n\\n    if (scripts && scripts.length > 0) {\\n      importScripts.apply(null, scripts);\\n    }\\n  }\\n\\n  if (event.data.doRun) {\\n    var handler = this.module.exports;\\n    if (typeof handler !== 'function') {\\n      throw new Error('Cannot run thread logic. No handler has been exported.');\\n    }\\n\\n    var preparedHandlerDone = handlerDone.bind(this);\\n    preparedHandlerDone.transfer = handlerDoneTransfer.bind(this);\\n\\n    handler.call(this, event.data.param, preparedHandlerDone, handlerProgress.bind(this));\\n  }\\n}.bind(self);\\n\";\n\n/***/ },\n/* 40 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n'use strict';\n\nexports.__esModule = true;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _eventemitter = __webpack_require__(3);\n\nvar _eventemitter2 = _interopRequireDefault(_eventemitter);\n\nvar _slaveCodeUri = __webpack_require__(38);\n\nvar _slaveCodeUri2 = _interopRequireDefault(_slaveCodeUri);\n\nvar _config = __webpack_require__(13);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nif (_typeof(window.Worker) !== 'object' && typeof window.Worker !== 'function') {\n  throw new Error('Browser does not support web workers!');\n}\n\nfunction joinPaths(path1, path2) {\n  if (!path1 || !path2) {\n    return path1 + path2;\n  } else if (path1.charAt(path1.length - 1) === '/' || path2.charAt(0) === '/') {\n    return path1 + path2;\n  } else {\n    return path1 + '/' + path2;\n  }\n}\n\nfunction prependScriptUrl(scriptUrl) {\n  var prefix = (0, _config.getConfig)().basepath.web;\n  return prefix ? joinPaths(prefix, scriptUrl) : scriptUrl;\n}\n\nfunction convertToArray(input) {\n  var outputArray = [];\n  var index = 0;\n\n  while (typeof input[index] !== 'undefined') {\n    outputArray.push(input[index]);\n    index++;\n  }\n\n  return outputArray;\n}\n\nfunction logError(error) {\n  if (error.stack) {\n    console.error(error.stack); // eslint-disable-line no-console\n  } else if (error.message && error.filename && error.lineno) {\n    var fileName = error.filename.match(/^data:text\\/javascript/) && error.filename.length > 50 ? error.filename.substr(0, 50) + '...' : error.filename;\n    console.error(error.message + ' @' + fileName + ':' + error.lineno); // eslint-disable-line no-console\n  } else {\n    console.error(error); // eslint-disable-line no-console\n  }\n}\n\nvar Worker = function (_EventEmitter) {\n  _inherits(Worker, _EventEmitter);\n\n  function Worker() {\n    var initialScript = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    var importScripts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n    _classCallCheck(this, Worker);\n\n    // used by `run()` to decide if the worker must be re-initialized\n    var _this = _possibleConstructorReturn(this, _EventEmitter.call(this));\n\n    _this.currentRunnable = null;\n    _this.currentImportScripts = [];\n\n    _this.initWorker();\n    _this.worker.addEventListener('message', _this.handleMessage.bind(_this));\n    _this.worker.addEventListener('error', _this.handleError.bind(_this));\n\n    if (initialScript) {\n      _this.run(initialScript, importScripts);\n    }\n    return _this;\n  }\n\n  Worker.prototype.initWorker = function initWorker() {\n    try {\n      this.worker = new window.Worker(_slaveCodeUri2.default);\n    } catch (error) {\n      var slaveScriptUrl = (0, _config.getConfig)().fallback.slaveScriptUrl;\n      if (slaveScriptUrl) {\n        // try using the slave script file instead of the data URI\n        this.worker = new window.Worker(_slaveCodeUri2.default);\n      } else {\n        // re-throw\n        throw error;\n      }\n    }\n  };\n\n  Worker.prototype.run = function run(toRun) {\n    var importScripts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n    if (this.alreadyInitializedToRun(toRun, importScripts)) {\n      // don't re-initialize with the new logic if it already has been\n      return this;\n    }\n\n    if (typeof toRun === 'function') {\n      this.runMethod(toRun, importScripts);\n    } else {\n      this.runScripts(toRun, importScripts);\n    }\n\n    this.currentRunnable = toRun;\n    this.currentImportScripts = importScripts;\n\n    return this;\n  };\n\n  Worker.prototype.runMethod = function runMethod(method, importScripts) {\n    var methodStr = method.toString();\n    var args = methodStr.substring(methodStr.indexOf('(') + 1, methodStr.indexOf(')')).split(',');\n    var body = methodStr.substring(methodStr.indexOf('{') + 1, methodStr.lastIndexOf('}'));\n\n    this.worker.postMessage({\n      initByMethod: true,\n      method: { args: args, body: body },\n      scripts: importScripts.map(prependScriptUrl)\n    });\n  };\n\n  Worker.prototype.runScripts = function runScripts(script, importScripts) {\n    if (!script) {\n      throw new Error('Must pass a function or a script URL to run().');\n    }\n\n    // attention: array for browser, single script for node\n    this.worker.postMessage({\n      initByScripts: true,\n      scripts: importScripts.concat([script]).map(prependScriptUrl)\n    });\n  };\n\n  Worker.prototype.send = function send(param) {\n    var transferables = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n    this.worker.postMessage({\n      doRun: true,\n      param: param\n    }, transferables);\n    return this;\n  };\n\n  Worker.prototype.kill = function kill() {\n    this.worker.terminate();\n    this.emit('exit');\n    return this;\n  };\n\n  Worker.prototype.promise = function promise() {\n    var _this2 = this;\n\n    return new Promise(function (resolve, reject) {\n      var resolved = void 0,\n          rejected = void 0;\n      resolved = function resolved(result) {\n        _this2.removeListener('error', rejected);\n        resolve(result);\n      };\n      rejected = function rejected(err) {\n        _this2.removeListener('message', resolved);\n        reject(err);\n      };\n\n      _this2.once('message', resolved).once('error', rejected);\n    });\n  };\n\n  Worker.prototype.alreadyInitializedToRun = function alreadyInitializedToRun(toRun, importScripts) {\n    var runnablesMatch = this.currentRunnable === toRun;\n    var importScriptsMatch = this.currentImportScripts === importScripts || importScripts.length === 0 && this.currentImportScripts.length === 0;\n\n    return runnablesMatch && importScriptsMatch;\n  };\n\n  Worker.prototype.handleMessage = function handleMessage(event) {\n    if (event.data.error) {\n      this.handleError(event.data.error);\n    } else if (event.data.progress) {\n      this.handleProgress(event.data.progress);\n    } else {\n      var responseArgs = convertToArray(event.data.response);\n      this.emit.apply(this, ['message'].concat(responseArgs));\n      this.emit.apply(this, ['done'].concat(responseArgs)); // this one is just for convenience\n    }\n  };\n\n  Worker.prototype.handleProgress = function handleProgress(progress) {\n    this.emit('progress', progress);\n  };\n\n  Worker.prototype.handleError = function handleError(error) {\n    if (!this.listeners('error', true)) {\n      logError(error);\n    }\n\n    if (error.preventDefault) {\n      error.preventDefault();\n    }\n\n    this.emit('error', error);\n  };\n\n  return Worker;\n}(_eventemitter2.default);\n\nexports.default = Worker;\n//# sourceMappingURL=worker.js.map\n\n\n/***/ },\n/* 41 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(process) {'use strict';\n\n/*eslint-env node*/\n/*\n * This file is only a stub to make './worker' resolve the './worker.node/worker' module.\n * Loading the browser worker into the browser bundle is done in the gulpfile by\n * configuring a browserify override.\n */\n\nif (typeof process !== 'undefined' && 'pid' in process) {\n  module.exports = __webpack_require__(42);\n} else {\n  module.exports = __webpack_require__(40);\n}\n//# sourceMappingURL=worker.js.map\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))\n\n/***/ },\n/* 42 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(__dirname) {'use strict';\n\nexports.__esModule = true;\n\nvar _child_process = __webpack_require__(44);\n\nvar _child_process2 = _interopRequireDefault(_child_process);\n\nvar _path = __webpack_require__(45);\n\nvar _path2 = _interopRequireDefault(_path);\n\nvar _eventemitter = __webpack_require__(3);\n\nvar _eventemitter2 = _interopRequireDefault(_eventemitter);\n\nvar _config = __webpack_require__(13);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Worker = function (_EventEmitter) {\n  _inherits(Worker, _EventEmitter);\n\n  function Worker(initialRunnable) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Worker);\n\n    var _this = _possibleConstructorReturn(this, _EventEmitter.call(this));\n\n    _this.slave = _child_process2.default.fork(_path2.default.join(__dirname, 'slave.js'), [], options);\n    _this.slave.on('message', _this.handleMessage.bind(_this));\n    _this.slave.on('error', _this.handleError.bind(_this));\n    _this.slave.on('exit', _this.emit.bind(_this, 'exit'));\n\n    if (initialRunnable) {\n      _this.run(initialRunnable);\n    }\n    return _this;\n  }\n\n  Worker.prototype.run = function run(toRun) {\n    if (typeof toRun === 'function') {\n      this.runMethod(toRun);\n    } else {\n      this.runScript(toRun);\n    }\n    return this;\n  };\n\n  Worker.prototype.runMethod = function runMethod(method) {\n    this.slave.send({\n      initByMethod: true,\n      method: method.toString()\n    });\n  };\n\n  Worker.prototype.runScript = function runScript(script) {\n    if (!script) {\n      throw new Error('Must pass a function or a script path to run().');\n    }\n\n    var prefixedScriptPath = _path2.default.join((0, _config.getConfig)().basepath.node, script);\n\n    // attention: single script for node, array for browser\n    this.slave.send({\n      initByScript: true,\n      script: _path2.default.resolve(prefixedScriptPath)\n    });\n  };\n\n  Worker.prototype.send = function send(param) {\n    this.slave.send({\n      doRun: true,\n      param: param\n    });\n    return this;\n  };\n\n  Worker.prototype.kill = function kill() {\n    this.slave.kill();\n    return this;\n  };\n\n  Worker.prototype.promise = function promise() {\n    var _this2 = this;\n\n    return new Promise(function (resolve, reject) {\n      var resolved = void 0,\n          rejected = void 0;\n      resolved = function resolved(result) {\n        _this2.removeListener('error', rejected);\n        resolve(result);\n      };\n      rejected = function rejected(err) {\n        _this2.removeListener('message', resolved);\n        reject(err);\n      };\n\n      _this2.once('message', resolved).once('error', rejected);\n    });\n  };\n\n  Worker.prototype.handleMessage = function handleMessage(message) {\n    if (message.error) {\n      var error = new Error(message.error.message);\n      error.stack = message.error.stack;\n\n      this.handleError(error);\n    } else if (message.progress) {\n      this.handleProgress(message.progress);\n    } else {\n      this.emit.apply(this, ['message'].concat(message.response));\n      this.emit.apply(this, ['done'].concat(message.response)); // this one is just for convenience\n    }\n  };\n\n  Worker.prototype.handleProgress = function handleProgress(progress) {\n    this.emit('progress', progress);\n  };\n\n  Worker.prototype.handleError = function handleError(error) {\n    if (!this.listeners('error', true)) {\n      console.error(error.stack || error); // eslint-disable-line no-console\n    }\n    this.emit('error', error);\n  };\n\n  return Worker;\n}(_eventemitter2.default);\n\nexports.default = Worker;\n//# sourceMappingURL=worker.js.map\n\n/* WEBPACK VAR INJECTION */}.call(exports, \"/\"))\n\n/***/ },\n/* 43 */\n/***/ function(module, exports) {\n\n/* (ignored) */\n\n/***/ },\n/* 44 */\n43,\n/* 45 */\n43,\n/* 46 */,\n/* 47 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash__ = __webpack_require__(2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_lodash__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_benchmark__ = __webpack_require__(29);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_benchmark___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_benchmark__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__transpiled_mandelbrot__ = __webpack_require__(9);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__transpiled_knights_tour__ = __webpack_require__(8);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__transpiled_monte_carlo__ = __webpack_require__(10);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__dynamic_knights_tour__ = __webpack_require__(5);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__dynamic_mandelbrot__ = __webpack_require__(6);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__dynamic_monte_carlo__ = __webpack_require__(7);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__paralleljs_mandelbrot__ = __webpack_require__(24);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__paralleljs_monte_carlo__ = __webpack_require__(25);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__paralleljs_knights_tour__ = __webpack_require__(23);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__threads_monte_carlo__ = __webpack_require__(28);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__threads_mandelbrot__ = __webpack_require__(27);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__threads_knights_tour__ = __webpack_require__(26);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14_threads__ = __webpack_require__(15);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14_threads___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_14_threads__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__hamstersjs_mandelbrot__ = __webpack_require__(21);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__hamstersjs_knights_tour__ = __webpack_require__(20);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17__hamstersjs_monte_carlo__ = __webpack_require__(22);\n\n/* tslint:disable:no-var-requires */\n\nvar platform = __webpack_require__(30);\n/* tslint:enable:no-var-requires */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar Benchmark = __WEBPACK_IMPORTED_MODULE_1_benchmark__[\"runInContext\"]({ _: __WEBPACK_IMPORTED_MODULE_0_lodash__ });\nwindow.Benchmark = Benchmark;\nvar runButton = document.querySelector(\"#run\");\nvar outputTable = document.querySelector(\"#output-table\");\nvar jsonOutputField = document.querySelector(\"#json-output\");\nvar setCheckboxes = document.querySelectorAll('[id*=\"-set\"]');\nvar knightRunner6x6 = document.querySelector(\"#knight-runner-6-6\");\nfunction addAsyncTest(suite, optionsOrTitle, fn) {\n    var options = typeof optionsOrTitle === \"string\" ? { name: optionsOrTitle, fn: fn } : optionsOrTitle;\n    var asyncFn = options.fn;\n    options.defer = true;\n    options.fn = function (deferred) {\n        var benchmark = this;\n        asyncFn.apply(undefined, []).then(function () {\n            deferred.resolve();\n        }, function (error) {\n            console.error(error);\n            benchmark.error = error;\n            deferred.resolve();\n        });\n    };\n    return suite.add(options);\n}\n/**\n * Helper for threadjs tests. Creates the thread pool before the tests are run. A new thread pool for each test run is needed\n * to avoid caching of the environment across runs.\n */\nfunction addThreadJsTest(suite, name, _fn) {\n    for (var _len = arguments.length, args = Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {\n        args[_key - 3] = arguments[_key];\n    }\n\n    var _this = this;\n\n    var argsWithPool = void 0;\n    var pool = void 0;\n    addAsyncTest(suite, {\n        name: name,\n        setup: function setup() {\n            pool = new __WEBPACK_IMPORTED_MODULE_14_threads__[\"Pool\"]();\n            argsWithPool = args.slice();\n            argsWithPool.push(pool);\n        },\n        fn: function fn() {\n            return _fn.apply(_this, argsWithPool);\n        },\n        teardown: function teardown() {\n            if (pool) {\n                pool.killAll();\n            }\n        }\n    });\n}\nfunction addKnightBoardTests(suite) {\n    var boardSizes = knightRunner6x6.checked ? [5, 6] : [5];\n\n    var _loop = function _loop() {\n        if (_isArray) {\n            if (_i >= _iterator.length) return \"break\";\n            _ref = _iterator[_i++];\n        } else {\n            _i = _iterator.next();\n            if (_i.done) return \"break\";\n            _ref = _i.value;\n        }\n\n        var boardSize = _ref;\n\n        var title = \"Knights Tour (\" + boardSize + \"x\" + boardSize + \")\";\n        suite.add(\"sync: \" + title, function () {\n            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__transpiled_knights_tour__[\"b\" /* syncKnightTours */])({ x: 0, y: 0 }, boardSize);\n        });\n        addAsyncTest(suite, \"parallel-dynamic: \" + title, function () {\n            return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__dynamic_knights_tour__[\"a\" /* parallelKnightTours */])({ x: 0, y: 0 }, boardSize);\n        });\n        addAsyncTest(suite, \"parallel-transpiled: \" + title, function () {\n            return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__transpiled_knights_tour__[\"a\" /* parallelKnightTours */])({ x: 0, y: 0 }, boardSize);\n        });\n        addAsyncTest(suite, \"paralleljs: \" + title, function () {\n            return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_10__paralleljs_knights_tour__[\"a\" /* parallelJSKnightTours */])({ x: 0, y: 0 }, boardSize);\n        });\n        addThreadJsTest(suite, \"threadsjs: \" + title, __WEBPACK_IMPORTED_MODULE_13__threads_knights_tour__[\"a\" /* threadsKnightTours */], { x: 0, y: 0 }, boardSize);\n        addAsyncTest(suite, \"hamstersjs: \" + title, function () {\n            return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_16__hamstersjs_knights_tour__[\"a\" /* parallelKnightTours */])({ x: 0, y: 0 }, boardSize);\n        });\n    };\n\n    for (var _iterator = boardSizes, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n        var _ref;\n\n        var _ret = _loop();\n\n        if (_ret === \"break\") break;\n    }\n}\nfunction addMonteCarloTest(suite, options) {\n    var runOptions = __WEBPACK_IMPORTED_MODULE_0_lodash__[\"extend\"](options, {\n        projects: createProjects(options.numberOfProjects)\n    });\n    var configName = \"(projects: \" + options.numberOfProjects + \", runs: \" + options.numRuns.toLocaleString() + \")\";\n    suite.add(\"sync: Monte Carlo Math.random \" + configName, function () {\n        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7__dynamic_monte_carlo__[\"a\" /* syncMonteCarlo */])(options);\n    });\n    addAsyncTest(suite, \"parallel-dynamic: Monte Carlo Math.random \" + configName, function () {\n        return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7__dynamic_monte_carlo__[\"b\" /* parallelMonteCarlo */])(runOptions);\n    });\n    suite.add(\"sync: Monte Carlo simjs \" + configName, function () {\n        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__transpiled_monte_carlo__[\"b\" /* syncMonteCarlo */])(options);\n    });\n    addAsyncTest(suite, \"parallel-transpiled: Monte Carlo simjs \" + configName, function () {\n        return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__transpiled_monte_carlo__[\"a\" /* parallelMonteCarlo */])(runOptions);\n    });\n    addAsyncTest(suite, \"paralleljs: Monte Carlo simjs \" + configName, function () {\n        return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__paralleljs_monte_carlo__[\"a\" /* parallelJSMonteCarlo */])(runOptions);\n    });\n    addThreadJsTest(suite, \"threadsjs: Monte Carlo simjs \" + configName, __WEBPACK_IMPORTED_MODULE_11__threads_monte_carlo__[\"a\" /* threadsMonteCarlo */], runOptions);\n    addAsyncTest(suite, \"hamstersjs: Monte Carlo Math.random \" + configName, function () {\n        return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_17__hamstersjs_monte_carlo__[\"a\" /* parallelMonteCarlo */])(runOptions);\n    });\n}\nfunction addMonteCarloTests(suite) {\n    var oneMillionRuns = document.querySelector(\"#monte-carlo-1m\").checked;\n    var monteCarloOptions = {\n        investmentAmount: 620000,\n        numYears: 15,\n        performance: 0.0340000,\n        seed: 10,\n        volatility: 0.0896000\n    };\n    var runs = [Math.pow(10, 4), Math.pow(10, 5)];\n    if (oneMillionRuns) {\n        runs.push(Math.pow(10, 6));\n    }\n    for (var _iterator2 = runs, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n        var _ref2;\n\n        if (_isArray2) {\n            if (_i2 >= _iterator2.length) break;\n            _ref2 = _iterator2[_i2++];\n        } else {\n            _i2 = _iterator2.next();\n            if (_i2.done) break;\n            _ref2 = _i2.value;\n        }\n\n        var numRuns = _ref2;\n        var _arr = [8, 16];\n\n        for (var _i3 = 0; _i3 < _arr.length; _i3++) {\n            var numberOfProjects = _arr[_i3];\n            var options = __WEBPACK_IMPORTED_MODULE_0_lodash__[\"extend\"]({}, monteCarloOptions, { numberOfProjects: numberOfProjects, numRuns: numRuns });\n            addMonteCarloTest(suite, options);\n        }\n    }\n}\nfunction addMandelbrotTests(suite) {\n    var mandelbrotHeight = parseInt(document.querySelector(\"#mandelbrot-height\").value, 10);\n    var mandelbrotWidth = parseInt(document.querySelector(\"#mandelbrot-width\").value, 10);\n    var mandelbrotIterations = parseInt(document.querySelector(\"#mandelbrot-iterations\").value, 10);\n    var onlyDefaultScheduling = document.querySelector(\"#mandelbrot-only-default-scheduling\").checked;\n    var mandelbrotOptions = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__dynamic_mandelbrot__[\"a\" /* createMandelOptions */])(mandelbrotWidth, mandelbrotHeight, mandelbrotIterations);\n    suite.add(\"sync: Mandelbrot \" + mandelbrotWidth + \"x\" + mandelbrotHeight + \", \" + mandelbrotIterations, function () {\n        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__dynamic_mandelbrot__[\"b\" /* syncMandelbrot */])(mandelbrotOptions, function () {\n            return undefined;\n        });\n    });\n    var taskSizes = onlyDefaultScheduling ? [undefined] : [undefined, 1, 150, 312, 625, 1250, 2500];\n\n    var _loop2 = function _loop2() {\n        if (_isArray3) {\n            if (_i4 >= _iterator3.length) return \"break\";\n            _ref3 = _iterator3[_i4++];\n        } else {\n            _i4 = _iterator3.next();\n            if (_i4.done) return \"break\";\n            _ref3 = _i4.value;\n        }\n\n        var valuesPerTask = _ref3;\n\n        var parallelOptions = { maxValuesPerTask: valuesPerTask, minValuesPerTask: valuesPerTask };\n        var title = \"Mandelbrot \" + mandelbrotOptions.imageWidth + \"x\" + mandelbrotOptions.imageHeight + \", \" + mandelbrotOptions.iterations;\n        if (valuesPerTask) {\n            title += \" (\" + valuesPerTask + \")\";\n        }\n        addAsyncTest(suite, \"parallel-dynamic: \" + title, function () {\n            return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__dynamic_mandelbrot__[\"c\" /* parallelMandelbrot */])(mandelbrotOptions, parallelOptions);\n        });\n        addAsyncTest(suite, \"parallel-transpiled: \" + title, function () {\n            return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__transpiled_mandelbrot__[\"a\" /* mandelbrot */])(mandelbrotOptions, parallelOptions);\n        });\n    };\n\n    for (var _iterator3 = taskSizes, _isArray3 = Array.isArray(_iterator3), _i4 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {\n        var _ref3;\n\n        var _ret2 = _loop2();\n\n        if (_ret2 === \"break\") break;\n    }\n    addAsyncTest(suite, \"paralleljs: Mandelbrot \" + mandelbrotWidth + \"x\" + mandelbrotHeight + \", \" + mandelbrotIterations, function () {\n        return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_8__paralleljs_mandelbrot__[\"a\" /* parallelJSMandelbrot */])(mandelbrotOptions);\n    });\n    addThreadJsTest(suite, \"threadsjs: Mandelbrot \" + mandelbrotWidth + \"x\" + mandelbrotHeight + \", \" + mandelbrotIterations, __WEBPACK_IMPORTED_MODULE_12__threads_mandelbrot__[\"a\" /* threadsMandelbrot */], mandelbrotOptions);\n    addAsyncTest(suite, \"hamstersjs: Mandelbrot \" + mandelbrotWidth + \"x\" + mandelbrotHeight + \", \" + mandelbrotIterations, function () {\n        return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_15__hamstersjs_mandelbrot__[\"a\" /* mandelbrot */])(mandelbrotOptions);\n    });\n}\nfunction measure() {\n    var runMonteCarlo = document.querySelector(\"#monte-carlo\").checked;\n    var runMandelbrot = document.querySelector(\"#mandelbrot-field\").checked;\n    var runKnightTour = document.querySelector(\"#knight-runner\").checked;\n    var allTestsSuite = new Benchmark.Suite();\n    if (runMandelbrot) {\n        addMandelbrotTests(allTestsSuite);\n    }\n    if (runKnightTour) {\n        addKnightBoardTests(allTestsSuite);\n    }\n    if (runMonteCarlo) {\n        addMonteCarloTests(allTestsSuite);\n    }\n    var suite = allTestsSuite.filter(function (benchmark) {\n        for (var i = 0; i < setCheckboxes.length; ++i) {\n            var checkbox = setCheckboxes[i];\n            var parts = checkbox.id.split(\"-\");\n            var name = parts.slice(0, parts.length - 1).join(\"-\");\n            if (checkbox.checked && benchmark.name.indexOf(name) === 0) {\n                return true;\n            }\n        }\n        return false;\n    });\n    suite.forEach(function (benchmark) {\n        var index = suite.indexOf(benchmark);\n        benchmark.on(\"cycle\", function () {\n            return appendTestResults(benchmark, index);\n        });\n    });\n    suite.on(\"cycle\", function (event) {\n        var benchmark = event.target;\n        var index = event.currentTarget.indexOf(benchmark);\n        appendTestResults(benchmark, index);\n    });\n    suite.on(\"complete\", function (event) {\n        var benchmarks = event.currentTarget.map(function (benchmark) {\n            return {\n                info: benchmark.toString,\n                name: benchmark.name,\n                stats: benchmark.stats,\n                times: benchmark.times\n            };\n        });\n        jsonOutputField.textContent = JSON.stringify({ benchmarks: benchmarks, platform: platform }, undefined, \"    \");\n        runButton.disabled = false;\n    });\n    suite.on(\"start\", initResultTable);\n    suite.run({ async: true });\n}\nrunButton.addEventListener(\"click\", function (event) {\n    event.preventDefault();\n    runButton.disabled = true;\n    measure();\n});\nfunction initResultTable(event) {\n    clearOutputTable();\n    function clearOutputTable() {\n        while (outputTable.tBodies.length > 0) {\n            outputTable.removeChild(outputTable.tBodies[0]);\n        }\n    }\n    var body = outputTable.createTBody();\n    event.currentTarget.forEach(function (suite) {\n        var row = body.insertRow();\n\n        var _suite$name$split = suite.name.split(\":\"),\n            set = _suite$name$split[0],\n            nameParts = _suite$name$split.slice(1);\n\n        row.insertCell().textContent = set;\n        row.insertCell().textContent = nameParts.join(\":\");\n        var columns = outputTable.tHead.rows[0].cells.length;\n        for (var i = 0; i < columns; ++i) {\n            row.insertCell();\n        }\n    });\n}\nfunction appendTestResults(benchmark, index) {\n    var body = outputTable.tBodies[0];\n    var row = body.rows[index];\n    row.cells[2].textContent = benchmark.stats.deviation.toFixed(4);\n    row.cells[3].textContent = benchmark.stats.mean.toFixed(4);\n    row.cells[4].textContent = benchmark.stats.moe.toFixed(4);\n    row.cells[5].textContent = benchmark.stats.rme.toFixed(4);\n    row.cells[6].textContent = benchmark.stats.sem.toFixed(4);\n    row.cells[7].textContent = benchmark.stats.variance.toFixed(4);\n    row.cells[8].textContent = benchmark.stats.sample.length.toFixed(0);\n    row.cells[9].textContent = benchmark.hz.toFixed(4);\n}\nfunction createProjects(count) {\n    var projects = [];\n    for (var i = 0; i < count; ++i) {\n        projects.push({\n            startYear: Math.round(Math.random() * 15),\n            totalAmount: Math.round(Math.random() * 100000)\n        });\n    }\n    return projects;\n}\n\n/***/ }\n],[47]);\n\n\n// WEBPACK FOOTER //\n// performance-measurements.js","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() { return this; })();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/global.js\n// module id = 0\n// module chunks = 0","/**\n * @license\n * lodash <https://lodash.com/>\n * Copyright JS Foundation and other contributors <https://js.foundation/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n;(function() {\n\n  /** Used as a safe reference for `undefined` in pre-ES5 environments. */\n  var undefined;\n\n  /** Used as the semantic version number. */\n  var VERSION = '4.16.6';\n\n  /** Used as the size to enable large array optimizations. */\n  var LARGE_ARRAY_SIZE = 200;\n\n  /** Error message constants. */\n  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://github.com/es-shims.',\n      FUNC_ERROR_TEXT = 'Expected a function';\n\n  /** Used to stand-in for `undefined` hash values. */\n  var HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n  /** Used as the maximum memoize cache size. */\n  var MAX_MEMOIZE_SIZE = 500;\n\n  /** Used as the internal argument placeholder. */\n  var PLACEHOLDER = '__lodash_placeholder__';\n\n  /** Used to compose bitmasks for function metadata. */\n  var BIND_FLAG = 1,\n      BIND_KEY_FLAG = 2,\n      CURRY_BOUND_FLAG = 4,\n      CURRY_FLAG = 8,\n      CURRY_RIGHT_FLAG = 16,\n      PARTIAL_FLAG = 32,\n      PARTIAL_RIGHT_FLAG = 64,\n      ARY_FLAG = 128,\n      REARG_FLAG = 256,\n      FLIP_FLAG = 512;\n\n  /** Used to compose bitmasks for comparison styles. */\n  var UNORDERED_COMPARE_FLAG = 1,\n      PARTIAL_COMPARE_FLAG = 2;\n\n  /** Used as default options for `_.truncate`. */\n  var DEFAULT_TRUNC_LENGTH = 30,\n      DEFAULT_TRUNC_OMISSION = '...';\n\n  /** Used to detect hot functions by number of calls within a span of milliseconds. */\n  var HOT_COUNT = 800,\n      HOT_SPAN = 16;\n\n  /** Used to indicate the type of lazy iteratees. */\n  var LAZY_FILTER_FLAG = 1,\n      LAZY_MAP_FLAG = 2,\n      LAZY_WHILE_FLAG = 3;\n\n  /** Used as references for various `Number` constants. */\n  var INFINITY = 1 / 0,\n      MAX_SAFE_INTEGER = 9007199254740991,\n      MAX_INTEGER = 1.7976931348623157e+308,\n      NAN = 0 / 0;\n\n  /** Used as references for the maximum length and index of an array. */\n  var MAX_ARRAY_LENGTH = 4294967295,\n      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,\n      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;\n\n  /** Used to associate wrap methods with their bit flags. */\n  var wrapFlags = [\n    ['ary', ARY_FLAG],\n    ['bind', BIND_FLAG],\n    ['bindKey', BIND_KEY_FLAG],\n    ['curry', CURRY_FLAG],\n    ['curryRight', CURRY_RIGHT_FLAG],\n    ['flip', FLIP_FLAG],\n    ['partial', PARTIAL_FLAG],\n    ['partialRight', PARTIAL_RIGHT_FLAG],\n    ['rearg', REARG_FLAG]\n  ];\n\n  /** `Object#toString` result references. */\n  var argsTag = '[object Arguments]',\n      arrayTag = '[object Array]',\n      asyncTag = '[object AsyncFunction]',\n      boolTag = '[object Boolean]',\n      dateTag = '[object Date]',\n      domExcTag = '[object DOMException]',\n      errorTag = '[object Error]',\n      funcTag = '[object Function]',\n      genTag = '[object GeneratorFunction]',\n      mapTag = '[object Map]',\n      numberTag = '[object Number]',\n      nullTag = '[object Null]',\n      objectTag = '[object Object]',\n      promiseTag = '[object Promise]',\n      proxyTag = '[object Proxy]',\n      regexpTag = '[object RegExp]',\n      setTag = '[object Set]',\n      stringTag = '[object String]',\n      symbolTag = '[object Symbol]',\n      undefinedTag = '[object Undefined]',\n      weakMapTag = '[object WeakMap]',\n      weakSetTag = '[object WeakSet]';\n\n  var arrayBufferTag = '[object ArrayBuffer]',\n      dataViewTag = '[object DataView]',\n      float32Tag = '[object Float32Array]',\n      float64Tag = '[object Float64Array]',\n      int8Tag = '[object Int8Array]',\n      int16Tag = '[object Int16Array]',\n      int32Tag = '[object Int32Array]',\n      uint8Tag = '[object Uint8Array]',\n      uint8ClampedTag = '[object Uint8ClampedArray]',\n      uint16Tag = '[object Uint16Array]',\n      uint32Tag = '[object Uint32Array]';\n\n  /** Used to match empty string literals in compiled template source. */\n  var reEmptyStringLeading = /\\b__p \\+= '';/g,\n      reEmptyStringMiddle = /\\b(__p \\+=) '' \\+/g,\n      reEmptyStringTrailing = /(__e\\(.*?\\)|\\b__t\\)) \\+\\n'';/g;\n\n  /** Used to match HTML entities and HTML characters. */\n  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,\n      reUnescapedHtml = /[&<>\"']/g,\n      reHasEscapedHtml = RegExp(reEscapedHtml.source),\n      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);\n\n  /** Used to match template delimiters. */\n  var reEscape = /<%-([\\s\\S]+?)%>/g,\n      reEvaluate = /<%([\\s\\S]+?)%>/g,\n      reInterpolate = /<%=([\\s\\S]+?)%>/g;\n\n  /** Used to match property names within property paths. */\n  var reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n      reIsPlainProp = /^\\w*$/,\n      reLeadingDot = /^\\./,\n      rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n  /**\n   * Used to match `RegExp`\n   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n   */\n  var reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g,\n      reHasRegExpChar = RegExp(reRegExpChar.source);\n\n  /** Used to match leading and trailing whitespace. */\n  var reTrim = /^\\s+|\\s+$/g,\n      reTrimStart = /^\\s+/,\n      reTrimEnd = /\\s+$/;\n\n  /** Used to match wrap detail comments. */\n  var reWrapComment = /\\{(?:\\n\\/\\* \\[wrapped with .+\\] \\*\\/)?\\n?/,\n      reWrapDetails = /\\{\\n\\/\\* \\[wrapped with (.+)\\] \\*/,\n      reSplitDetails = /,? & /;\n\n  /** Used to match words composed of alphanumeric characters. */\n  var reAsciiWord = /[^\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\x7f]+/g;\n\n  /** Used to match backslashes in property paths. */\n  var reEscapeChar = /\\\\(\\\\)?/g;\n\n  /**\n   * Used to match\n   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).\n   */\n  var reEsTemplate = /\\$\\{([^\\\\}]*(?:\\\\.[^\\\\}]*)*)\\}/g;\n\n  /** Used to match `RegExp` flags from their coerced string values. */\n  var reFlags = /\\w*$/;\n\n  /** Used to detect bad signed hexadecimal string values. */\n  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n  /** Used to detect binary string values. */\n  var reIsBinary = /^0b[01]+$/i;\n\n  /** Used to detect host constructors (Safari). */\n  var reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n  /** Used to detect octal string values. */\n  var reIsOctal = /^0o[0-7]+$/i;\n\n  /** Used to detect unsigned integer values. */\n  var reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n  /** Used to match Latin Unicode letters (excluding mathematical operators). */\n  var reLatin = /[\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\xff\\u0100-\\u017f]/g;\n\n  /** Used to ensure capturing order of template delimiters. */\n  var reNoMatch = /($^)/;\n\n  /** Used to match unescaped characters in compiled string literals. */\n  var reUnescapedString = /['\\n\\r\\u2028\\u2029\\\\]/g;\n\n  /** Used to compose unicode character classes. */\n  var rsAstralRange = '\\\\ud800-\\\\udfff',\n      rsComboMarksRange = '\\\\u0300-\\\\u036f\\\\ufe20-\\\\ufe23',\n      rsComboSymbolsRange = '\\\\u20d0-\\\\u20f0',\n      rsDingbatRange = '\\\\u2700-\\\\u27bf',\n      rsLowerRange = 'a-z\\\\xdf-\\\\xf6\\\\xf8-\\\\xff',\n      rsMathOpRange = '\\\\xac\\\\xb1\\\\xd7\\\\xf7',\n      rsNonCharRange = '\\\\x00-\\\\x2f\\\\x3a-\\\\x40\\\\x5b-\\\\x60\\\\x7b-\\\\xbf',\n      rsPunctuationRange = '\\\\u2000-\\\\u206f',\n      rsSpaceRange = ' \\\\t\\\\x0b\\\\f\\\\xa0\\\\ufeff\\\\n\\\\r\\\\u2028\\\\u2029\\\\u1680\\\\u180e\\\\u2000\\\\u2001\\\\u2002\\\\u2003\\\\u2004\\\\u2005\\\\u2006\\\\u2007\\\\u2008\\\\u2009\\\\u200a\\\\u202f\\\\u205f\\\\u3000',\n      rsUpperRange = 'A-Z\\\\xc0-\\\\xd6\\\\xd8-\\\\xde',\n      rsVarRange = '\\\\ufe0e\\\\ufe0f',\n      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;\n\n  /** Used to compose unicode capture groups. */\n  var rsApos = \"['\\u2019]\",\n      rsAstral = '[' + rsAstralRange + ']',\n      rsBreak = '[' + rsBreakRange + ']',\n      rsCombo = '[' + rsComboMarksRange + rsComboSymbolsRange + ']',\n      rsDigits = '\\\\d+',\n      rsDingbat = '[' + rsDingbatRange + ']',\n      rsLower = '[' + rsLowerRange + ']',\n      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',\n      rsFitz = '\\\\ud83c[\\\\udffb-\\\\udfff]',\n      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',\n      rsNonAstral = '[^' + rsAstralRange + ']',\n      rsRegional = '(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}',\n      rsSurrPair = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]',\n      rsUpper = '[' + rsUpperRange + ']',\n      rsZWJ = '\\\\u200d';\n\n  /** Used to compose unicode regexes. */\n  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',\n      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',\n      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',\n      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',\n      reOptMod = rsModifier + '?',\n      rsOptVar = '[' + rsVarRange + ']?',\n      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',\n      rsOrdLower = '\\\\d*(?:(?:1st|2nd|3rd|(?![123])\\\\dth)\\\\b)',\n      rsOrdUpper = '\\\\d*(?:(?:1ST|2ND|3RD|(?![123])\\\\dTH)\\\\b)',\n      rsSeq = rsOptVar + reOptMod + rsOptJoin,\n      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,\n      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';\n\n  /** Used to match apostrophes. */\n  var reApos = RegExp(rsApos, 'g');\n\n  /**\n   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and\n   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).\n   */\n  var reComboMark = RegExp(rsCombo, 'g');\n\n  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */\n  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');\n\n  /** Used to match complex or compound words. */\n  var reUnicodeWord = RegExp([\n    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',\n    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',\n    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,\n    rsUpper + '+' + rsOptContrUpper,\n    rsOrdUpper,\n    rsOrdLower,\n    rsDigits,\n    rsEmoji\n  ].join('|'), 'g');\n\n  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */\n  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboMarksRange + rsComboSymbolsRange + rsVarRange + ']');\n\n  /** Used to detect strings that need a more robust regexp to match words. */\n  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;\n\n  /** Used to assign default `context` object properties. */\n  var contextProps = [\n    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',\n    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',\n    'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',\n    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',\n    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'\n  ];\n\n  /** Used to make template sourceURLs easier to identify. */\n  var templateCounter = -1;\n\n  /** Used to identify `toStringTag` values of typed arrays. */\n  var typedArrayTags = {};\n  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\n  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\n  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\n  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\n  typedArrayTags[uint32Tag] = true;\n  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =\n  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\n  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\n  typedArrayTags[errorTag] = typedArrayTags[funcTag] =\n  typedArrayTags[mapTag] = typedArrayTags[numberTag] =\n  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =\n  typedArrayTags[setTag] = typedArrayTags[stringTag] =\n  typedArrayTags[weakMapTag] = false;\n\n  /** Used to identify `toStringTag` values supported by `_.clone`. */\n  var cloneableTags = {};\n  cloneableTags[argsTag] = cloneableTags[arrayTag] =\n  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\n  cloneableTags[boolTag] = cloneableTags[dateTag] =\n  cloneableTags[float32Tag] = cloneableTags[float64Tag] =\n  cloneableTags[int8Tag] = cloneableTags[int16Tag] =\n  cloneableTags[int32Tag] = cloneableTags[mapTag] =\n  cloneableTags[numberTag] = cloneableTags[objectTag] =\n  cloneableTags[regexpTag] = cloneableTags[setTag] =\n  cloneableTags[stringTag] = cloneableTags[symbolTag] =\n  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\n  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\n  cloneableTags[errorTag] = cloneableTags[funcTag] =\n  cloneableTags[weakMapTag] = false;\n\n  /** Used to map Latin Unicode letters to basic Latin letters. */\n  var deburredLetters = {\n    // Latin-1 Supplement block.\n    '\\xc0': 'A',  '\\xc1': 'A', '\\xc2': 'A', '\\xc3': 'A', '\\xc4': 'A', '\\xc5': 'A',\n    '\\xe0': 'a',  '\\xe1': 'a', '\\xe2': 'a', '\\xe3': 'a', '\\xe4': 'a', '\\xe5': 'a',\n    '\\xc7': 'C',  '\\xe7': 'c',\n    '\\xd0': 'D',  '\\xf0': 'd',\n    '\\xc8': 'E',  '\\xc9': 'E', '\\xca': 'E', '\\xcb': 'E',\n    '\\xe8': 'e',  '\\xe9': 'e', '\\xea': 'e', '\\xeb': 'e',\n    '\\xcc': 'I',  '\\xcd': 'I', '\\xce': 'I', '\\xcf': 'I',\n    '\\xec': 'i',  '\\xed': 'i', '\\xee': 'i', '\\xef': 'i',\n    '\\xd1': 'N',  '\\xf1': 'n',\n    '\\xd2': 'O',  '\\xd3': 'O', '\\xd4': 'O', '\\xd5': 'O', '\\xd6': 'O', '\\xd8': 'O',\n    '\\xf2': 'o',  '\\xf3': 'o', '\\xf4': 'o', '\\xf5': 'o', '\\xf6': 'o', '\\xf8': 'o',\n    '\\xd9': 'U',  '\\xda': 'U', '\\xdb': 'U', '\\xdc': 'U',\n    '\\xf9': 'u',  '\\xfa': 'u', '\\xfb': 'u', '\\xfc': 'u',\n    '\\xdd': 'Y',  '\\xfd': 'y', '\\xff': 'y',\n    '\\xc6': 'Ae', '\\xe6': 'ae',\n    '\\xde': 'Th', '\\xfe': 'th',\n    '\\xdf': 'ss',\n    // Latin Extended-A block.\n    '\\u0100': 'A',  '\\u0102': 'A', '\\u0104': 'A',\n    '\\u0101': 'a',  '\\u0103': 'a', '\\u0105': 'a',\n    '\\u0106': 'C',  '\\u0108': 'C', '\\u010a': 'C', '\\u010c': 'C',\n    '\\u0107': 'c',  '\\u0109': 'c', '\\u010b': 'c', '\\u010d': 'c',\n    '\\u010e': 'D',  '\\u0110': 'D', '\\u010f': 'd', '\\u0111': 'd',\n    '\\u0112': 'E',  '\\u0114': 'E', '\\u0116': 'E', '\\u0118': 'E', '\\u011a': 'E',\n    '\\u0113': 'e',  '\\u0115': 'e', '\\u0117': 'e', '\\u0119': 'e', '\\u011b': 'e',\n    '\\u011c': 'G',  '\\u011e': 'G', '\\u0120': 'G', '\\u0122': 'G',\n    '\\u011d': 'g',  '\\u011f': 'g', '\\u0121': 'g', '\\u0123': 'g',\n    '\\u0124': 'H',  '\\u0126': 'H', '\\u0125': 'h', '\\u0127': 'h',\n    '\\u0128': 'I',  '\\u012a': 'I', '\\u012c': 'I', '\\u012e': 'I', '\\u0130': 'I',\n    '\\u0129': 'i',  '\\u012b': 'i', '\\u012d': 'i', '\\u012f': 'i', '\\u0131': 'i',\n    '\\u0134': 'J',  '\\u0135': 'j',\n    '\\u0136': 'K',  '\\u0137': 'k', '\\u0138': 'k',\n    '\\u0139': 'L',  '\\u013b': 'L', '\\u013d': 'L', '\\u013f': 'L', '\\u0141': 'L',\n    '\\u013a': 'l',  '\\u013c': 'l', '\\u013e': 'l', '\\u0140': 'l', '\\u0142': 'l',\n    '\\u0143': 'N',  '\\u0145': 'N', '\\u0147': 'N', '\\u014a': 'N',\n    '\\u0144': 'n',  '\\u0146': 'n', '\\u0148': 'n', '\\u014b': 'n',\n    '\\u014c': 'O',  '\\u014e': 'O', '\\u0150': 'O',\n    '\\u014d': 'o',  '\\u014f': 'o', '\\u0151': 'o',\n    '\\u0154': 'R',  '\\u0156': 'R', '\\u0158': 'R',\n    '\\u0155': 'r',  '\\u0157': 'r', '\\u0159': 'r',\n    '\\u015a': 'S',  '\\u015c': 'S', '\\u015e': 'S', '\\u0160': 'S',\n    '\\u015b': 's',  '\\u015d': 's', '\\u015f': 's', '\\u0161': 's',\n    '\\u0162': 'T',  '\\u0164': 'T', '\\u0166': 'T',\n    '\\u0163': 't',  '\\u0165': 't', '\\u0167': 't',\n    '\\u0168': 'U',  '\\u016a': 'U', '\\u016c': 'U', '\\u016e': 'U', '\\u0170': 'U', '\\u0172': 'U',\n    '\\u0169': 'u',  '\\u016b': 'u', '\\u016d': 'u', '\\u016f': 'u', '\\u0171': 'u', '\\u0173': 'u',\n    '\\u0174': 'W',  '\\u0175': 'w',\n    '\\u0176': 'Y',  '\\u0177': 'y', '\\u0178': 'Y',\n    '\\u0179': 'Z',  '\\u017b': 'Z', '\\u017d': 'Z',\n    '\\u017a': 'z',  '\\u017c': 'z', '\\u017e': 'z',\n    '\\u0132': 'IJ', '\\u0133': 'ij',\n    '\\u0152': 'Oe', '\\u0153': 'oe',\n    '\\u0149': \"'n\", '\\u017f': 's'\n  };\n\n  /** Used to map characters to HTML entities. */\n  var htmlEscapes = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;'\n  };\n\n  /** Used to map HTML entities to characters. */\n  var htmlUnescapes = {\n    '&amp;': '&',\n    '&lt;': '<',\n    '&gt;': '>',\n    '&quot;': '\"',\n    '&#39;': \"'\"\n  };\n\n  /** Used to escape characters for inclusion in compiled string literals. */\n  var stringEscapes = {\n    '\\\\': '\\\\',\n    \"'\": \"'\",\n    '\\n': 'n',\n    '\\r': 'r',\n    '\\u2028': 'u2028',\n    '\\u2029': 'u2029'\n  };\n\n  /** Built-in method references without a dependency on `root`. */\n  var freeParseFloat = parseFloat,\n      freeParseInt = parseInt;\n\n  /** Detect free variable `global` from Node.js. */\n  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n  /** Detect free variable `self`. */\n  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n  /** Used as a reference to the global object. */\n  var root = freeGlobal || freeSelf || Function('return this')();\n\n  /** Detect free variable `exports`. */\n  var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n  /** Detect free variable `module`. */\n  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n  /** Detect the popular CommonJS extension `module.exports`. */\n  var moduleExports = freeModule && freeModule.exports === freeExports;\n\n  /** Detect free variable `process` from Node.js. */\n  var freeProcess = moduleExports && freeGlobal.process;\n\n  /** Used to access faster Node.js helpers. */\n  var nodeUtil = (function() {\n    try {\n      return freeProcess && freeProcess.binding('util');\n    } catch (e) {}\n  }());\n\n  /* Node.js helper references. */\n  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,\n      nodeIsDate = nodeUtil && nodeUtil.isDate,\n      nodeIsMap = nodeUtil && nodeUtil.isMap,\n      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,\n      nodeIsSet = nodeUtil && nodeUtil.isSet,\n      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Adds the key-value `pair` to `map`.\n   *\n   * @private\n   * @param {Object} map The map to modify.\n   * @param {Array} pair The key-value pair to add.\n   * @returns {Object} Returns `map`.\n   */\n  function addMapEntry(map, pair) {\n    // Don't return `map.set` because it's not chainable in IE 11.\n    map.set(pair[0], pair[1]);\n    return map;\n  }\n\n  /**\n   * Adds `value` to `set`.\n   *\n   * @private\n   * @param {Object} set The set to modify.\n   * @param {*} value The value to add.\n   * @returns {Object} Returns `set`.\n   */\n  function addSetEntry(set, value) {\n    // Don't return `set.add` because it's not chainable in IE 11.\n    set.add(value);\n    return set;\n  }\n\n  /**\n   * A faster alternative to `Function#apply`, this function invokes `func`\n   * with the `this` binding of `thisArg` and the arguments of `args`.\n   *\n   * @private\n   * @param {Function} func The function to invoke.\n   * @param {*} thisArg The `this` binding of `func`.\n   * @param {Array} args The arguments to invoke `func` with.\n   * @returns {*} Returns the result of `func`.\n   */\n  function apply(func, thisArg, args) {\n    switch (args.length) {\n      case 0: return func.call(thisArg);\n      case 1: return func.call(thisArg, args[0]);\n      case 2: return func.call(thisArg, args[0], args[1]);\n      case 3: return func.call(thisArg, args[0], args[1], args[2]);\n    }\n    return func.apply(thisArg, args);\n  }\n\n  /**\n   * A specialized version of `baseAggregator` for arrays.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} setter The function to set `accumulator` values.\n   * @param {Function} iteratee The iteratee to transform keys.\n   * @param {Object} accumulator The initial aggregated object.\n   * @returns {Function} Returns `accumulator`.\n   */\n  function arrayAggregator(array, setter, iteratee, accumulator) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    while (++index < length) {\n      var value = array[index];\n      setter(accumulator, value, iteratee(value), array);\n    }\n    return accumulator;\n  }\n\n  /**\n   * A specialized version of `_.forEach` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns `array`.\n   */\n  function arrayEach(array, iteratee) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    while (++index < length) {\n      if (iteratee(array[index], index, array) === false) {\n        break;\n      }\n    }\n    return array;\n  }\n\n  /**\n   * A specialized version of `_.forEachRight` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns `array`.\n   */\n  function arrayEachRight(array, iteratee) {\n    var length = array == null ? 0 : array.length;\n\n    while (length--) {\n      if (iteratee(array[length], length, array) === false) {\n        break;\n      }\n    }\n    return array;\n  }\n\n  /**\n   * A specialized version of `_.every` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} predicate The function invoked per iteration.\n   * @returns {boolean} Returns `true` if all elements pass the predicate check,\n   *  else `false`.\n   */\n  function arrayEvery(array, predicate) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    while (++index < length) {\n      if (!predicate(array[index], index, array)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * A specialized version of `_.filter` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} predicate The function invoked per iteration.\n   * @returns {Array} Returns the new filtered array.\n   */\n  function arrayFilter(array, predicate) {\n    var index = -1,\n        length = array == null ? 0 : array.length,\n        resIndex = 0,\n        result = [];\n\n    while (++index < length) {\n      var value = array[index];\n      if (predicate(value, index, array)) {\n        result[resIndex++] = value;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * A specialized version of `_.includes` for arrays without support for\n   * specifying an index to search from.\n   *\n   * @private\n   * @param {Array} [array] The array to inspect.\n   * @param {*} target The value to search for.\n   * @returns {boolean} Returns `true` if `target` is found, else `false`.\n   */\n  function arrayIncludes(array, value) {\n    var length = array == null ? 0 : array.length;\n    return !!length && baseIndexOf(array, value, 0) > -1;\n  }\n\n  /**\n   * This function is like `arrayIncludes` except that it accepts a comparator.\n   *\n   * @private\n   * @param {Array} [array] The array to inspect.\n   * @param {*} target The value to search for.\n   * @param {Function} comparator The comparator invoked per element.\n   * @returns {boolean} Returns `true` if `target` is found, else `false`.\n   */\n  function arrayIncludesWith(array, value, comparator) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    while (++index < length) {\n      if (comparator(value, array[index])) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * A specialized version of `_.map` for arrays without support for iteratee\n   * shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns the new mapped array.\n   */\n  function arrayMap(array, iteratee) {\n    var index = -1,\n        length = array == null ? 0 : array.length,\n        result = Array(length);\n\n    while (++index < length) {\n      result[index] = iteratee(array[index], index, array);\n    }\n    return result;\n  }\n\n  /**\n   * Appends the elements of `values` to `array`.\n   *\n   * @private\n   * @param {Array} array The array to modify.\n   * @param {Array} values The values to append.\n   * @returns {Array} Returns `array`.\n   */\n  function arrayPush(array, values) {\n    var index = -1,\n        length = values.length,\n        offset = array.length;\n\n    while (++index < length) {\n      array[offset + index] = values[index];\n    }\n    return array;\n  }\n\n  /**\n   * A specialized version of `_.reduce` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @param {*} [accumulator] The initial value.\n   * @param {boolean} [initAccum] Specify using the first element of `array` as\n   *  the initial value.\n   * @returns {*} Returns the accumulated value.\n   */\n  function arrayReduce(array, iteratee, accumulator, initAccum) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    if (initAccum && length) {\n      accumulator = array[++index];\n    }\n    while (++index < length) {\n      accumulator = iteratee(accumulator, array[index], index, array);\n    }\n    return accumulator;\n  }\n\n  /**\n   * A specialized version of `_.reduceRight` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @param {*} [accumulator] The initial value.\n   * @param {boolean} [initAccum] Specify using the last element of `array` as\n   *  the initial value.\n   * @returns {*} Returns the accumulated value.\n   */\n  function arrayReduceRight(array, iteratee, accumulator, initAccum) {\n    var length = array == null ? 0 : array.length;\n    if (initAccum && length) {\n      accumulator = array[--length];\n    }\n    while (length--) {\n      accumulator = iteratee(accumulator, array[length], length, array);\n    }\n    return accumulator;\n  }\n\n  /**\n   * A specialized version of `_.some` for arrays without support for iteratee\n   * shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} predicate The function invoked per iteration.\n   * @returns {boolean} Returns `true` if any element passes the predicate check,\n   *  else `false`.\n   */\n  function arraySome(array, predicate) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    while (++index < length) {\n      if (predicate(array[index], index, array)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Gets the size of an ASCII `string`.\n   *\n   * @private\n   * @param {string} string The string inspect.\n   * @returns {number} Returns the string size.\n   */\n  var asciiSize = baseProperty('length');\n\n  /**\n   * Converts an ASCII `string` to an array.\n   *\n   * @private\n   * @param {string} string The string to convert.\n   * @returns {Array} Returns the converted array.\n   */\n  function asciiToArray(string) {\n    return string.split('');\n  }\n\n  /**\n   * Splits an ASCII `string` into an array of its words.\n   *\n   * @private\n   * @param {string} The string to inspect.\n   * @returns {Array} Returns the words of `string`.\n   */\n  function asciiWords(string) {\n    return string.match(reAsciiWord) || [];\n  }\n\n  /**\n   * The base implementation of methods like `_.findKey` and `_.findLastKey`,\n   * without support for iteratee shorthands, which iterates over `collection`\n   * using `eachFunc`.\n   *\n   * @private\n   * @param {Array|Object} collection The collection to inspect.\n   * @param {Function} predicate The function invoked per iteration.\n   * @param {Function} eachFunc The function to iterate over `collection`.\n   * @returns {*} Returns the found element or its key, else `undefined`.\n   */\n  function baseFindKey(collection, predicate, eachFunc) {\n    var result;\n    eachFunc(collection, function(value, key, collection) {\n      if (predicate(value, key, collection)) {\n        result = key;\n        return false;\n      }\n    });\n    return result;\n  }\n\n  /**\n   * The base implementation of `_.findIndex` and `_.findLastIndex` without\n   * support for iteratee shorthands.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {Function} predicate The function invoked per iteration.\n   * @param {number} fromIndex The index to search from.\n   * @param {boolean} [fromRight] Specify iterating from right to left.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function baseFindIndex(array, predicate, fromIndex, fromRight) {\n    var length = array.length,\n        index = fromIndex + (fromRight ? 1 : -1);\n\n    while ((fromRight ? index-- : ++index < length)) {\n      if (predicate(array[index], index, array)) {\n        return index;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} value The value to search for.\n   * @param {number} fromIndex The index to search from.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function baseIndexOf(array, value, fromIndex) {\n    return value === value\n      ? strictIndexOf(array, value, fromIndex)\n      : baseFindIndex(array, baseIsNaN, fromIndex);\n  }\n\n  /**\n   * This function is like `baseIndexOf` except that it accepts a comparator.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} value The value to search for.\n   * @param {number} fromIndex The index to search from.\n   * @param {Function} comparator The comparator invoked per element.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function baseIndexOfWith(array, value, fromIndex, comparator) {\n    var index = fromIndex - 1,\n        length = array.length;\n\n    while (++index < length) {\n      if (comparator(array[index], value)) {\n        return index;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * The base implementation of `_.isNaN` without support for number objects.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\n   */\n  function baseIsNaN(value) {\n    return value !== value;\n  }\n\n  /**\n   * The base implementation of `_.mean` and `_.meanBy` without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} array The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {number} Returns the mean.\n   */\n  function baseMean(array, iteratee) {\n    var length = array == null ? 0 : array.length;\n    return length ? (baseSum(array, iteratee) / length) : NAN;\n  }\n\n  /**\n   * The base implementation of `_.property` without support for deep paths.\n   *\n   * @private\n   * @param {string} key The key of the property to get.\n   * @returns {Function} Returns the new accessor function.\n   */\n  function baseProperty(key) {\n    return function(object) {\n      return object == null ? undefined : object[key];\n    };\n  }\n\n  /**\n   * The base implementation of `_.propertyOf` without support for deep paths.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @returns {Function} Returns the new accessor function.\n   */\n  function basePropertyOf(object) {\n    return function(key) {\n      return object == null ? undefined : object[key];\n    };\n  }\n\n  /**\n   * The base implementation of `_.reduce` and `_.reduceRight`, without support\n   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.\n   *\n   * @private\n   * @param {Array|Object} collection The collection to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @param {*} accumulator The initial value.\n   * @param {boolean} initAccum Specify using the first or last element of\n   *  `collection` as the initial value.\n   * @param {Function} eachFunc The function to iterate over `collection`.\n   * @returns {*} Returns the accumulated value.\n   */\n  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {\n    eachFunc(collection, function(value, index, collection) {\n      accumulator = initAccum\n        ? (initAccum = false, value)\n        : iteratee(accumulator, value, index, collection);\n    });\n    return accumulator;\n  }\n\n  /**\n   * The base implementation of `_.sortBy` which uses `comparer` to define the\n   * sort order of `array` and replaces criteria objects with their corresponding\n   * values.\n   *\n   * @private\n   * @param {Array} array The array to sort.\n   * @param {Function} comparer The function to define sort order.\n   * @returns {Array} Returns `array`.\n   */\n  function baseSortBy(array, comparer) {\n    var length = array.length;\n\n    array.sort(comparer);\n    while (length--) {\n      array[length] = array[length].value;\n    }\n    return array;\n  }\n\n  /**\n   * The base implementation of `_.sum` and `_.sumBy` without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} array The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {number} Returns the sum.\n   */\n  function baseSum(array, iteratee) {\n    var result,\n        index = -1,\n        length = array.length;\n\n    while (++index < length) {\n      var current = iteratee(array[index]);\n      if (current !== undefined) {\n        result = result === undefined ? current : (result + current);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * The base implementation of `_.times` without support for iteratee shorthands\n   * or max array length checks.\n   *\n   * @private\n   * @param {number} n The number of times to invoke `iteratee`.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns the array of results.\n   */\n  function baseTimes(n, iteratee) {\n    var index = -1,\n        result = Array(n);\n\n    while (++index < n) {\n      result[index] = iteratee(index);\n    }\n    return result;\n  }\n\n  /**\n   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array\n   * of key-value pairs for `object` corresponding to the property names of `props`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @param {Array} props The property names to get values for.\n   * @returns {Object} Returns the key-value pairs.\n   */\n  function baseToPairs(object, props) {\n    return arrayMap(props, function(key) {\n      return [key, object[key]];\n    });\n  }\n\n  /**\n   * The base implementation of `_.unary` without support for storing metadata.\n   *\n   * @private\n   * @param {Function} func The function to cap arguments for.\n   * @returns {Function} Returns the new capped function.\n   */\n  function baseUnary(func) {\n    return function(value) {\n      return func(value);\n    };\n  }\n\n  /**\n   * The base implementation of `_.values` and `_.valuesIn` which creates an\n   * array of `object` property values corresponding to the property names\n   * of `props`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @param {Array} props The property names to get values for.\n   * @returns {Object} Returns the array of property values.\n   */\n  function baseValues(object, props) {\n    return arrayMap(props, function(key) {\n      return object[key];\n    });\n  }\n\n  /**\n   * Checks if a `cache` value for `key` exists.\n   *\n   * @private\n   * @param {Object} cache The cache to query.\n   * @param {string} key The key of the entry to check.\n   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n   */\n  function cacheHas(cache, key) {\n    return cache.has(key);\n  }\n\n  /**\n   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol\n   * that is not found in the character symbols.\n   *\n   * @private\n   * @param {Array} strSymbols The string symbols to inspect.\n   * @param {Array} chrSymbols The character symbols to find.\n   * @returns {number} Returns the index of the first unmatched string symbol.\n   */\n  function charsStartIndex(strSymbols, chrSymbols) {\n    var index = -1,\n        length = strSymbols.length;\n\n    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}\n    return index;\n  }\n\n  /**\n   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol\n   * that is not found in the character symbols.\n   *\n   * @private\n   * @param {Array} strSymbols The string symbols to inspect.\n   * @param {Array} chrSymbols The character symbols to find.\n   * @returns {number} Returns the index of the last unmatched string symbol.\n   */\n  function charsEndIndex(strSymbols, chrSymbols) {\n    var index = strSymbols.length;\n\n    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}\n    return index;\n  }\n\n  /**\n   * Gets the number of `placeholder` occurrences in `array`.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} placeholder The placeholder to search for.\n   * @returns {number} Returns the placeholder count.\n   */\n  function countHolders(array, placeholder) {\n    var length = array.length,\n        result = 0;\n\n    while (length--) {\n      if (array[length] === placeholder) {\n        ++result;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A\n   * letters to basic Latin letters.\n   *\n   * @private\n   * @param {string} letter The matched letter to deburr.\n   * @returns {string} Returns the deburred letter.\n   */\n  var deburrLetter = basePropertyOf(deburredLetters);\n\n  /**\n   * Used by `_.escape` to convert characters to HTML entities.\n   *\n   * @private\n   * @param {string} chr The matched character to escape.\n   * @returns {string} Returns the escaped character.\n   */\n  var escapeHtmlChar = basePropertyOf(htmlEscapes);\n\n  /**\n   * Used by `_.template` to escape characters for inclusion in compiled string literals.\n   *\n   * @private\n   * @param {string} chr The matched character to escape.\n   * @returns {string} Returns the escaped character.\n   */\n  function escapeStringChar(chr) {\n    return '\\\\' + stringEscapes[chr];\n  }\n\n  /**\n   * Gets the value at `key` of `object`.\n   *\n   * @private\n   * @param {Object} [object] The object to query.\n   * @param {string} key The key of the property to get.\n   * @returns {*} Returns the property value.\n   */\n  function getValue(object, key) {\n    return object == null ? undefined : object[key];\n  }\n\n  /**\n   * Checks if `string` contains Unicode symbols.\n   *\n   * @private\n   * @param {string} string The string to inspect.\n   * @returns {boolean} Returns `true` if a symbol is found, else `false`.\n   */\n  function hasUnicode(string) {\n    return reHasUnicode.test(string);\n  }\n\n  /**\n   * Checks if `string` contains a word composed of Unicode symbols.\n   *\n   * @private\n   * @param {string} string The string to inspect.\n   * @returns {boolean} Returns `true` if a word is found, else `false`.\n   */\n  function hasUnicodeWord(string) {\n    return reHasUnicodeWord.test(string);\n  }\n\n  /**\n   * Converts `iterator` to an array.\n   *\n   * @private\n   * @param {Object} iterator The iterator to convert.\n   * @returns {Array} Returns the converted array.\n   */\n  function iteratorToArray(iterator) {\n    var data,\n        result = [];\n\n    while (!(data = iterator.next()).done) {\n      result.push(data.value);\n    }\n    return result;\n  }\n\n  /**\n   * Converts `map` to its key-value pairs.\n   *\n   * @private\n   * @param {Object} map The map to convert.\n   * @returns {Array} Returns the key-value pairs.\n   */\n  function mapToArray(map) {\n    var index = -1,\n        result = Array(map.size);\n\n    map.forEach(function(value, key) {\n      result[++index] = [key, value];\n    });\n    return result;\n  }\n\n  /**\n   * Creates a unary function that invokes `func` with its argument transformed.\n   *\n   * @private\n   * @param {Function} func The function to wrap.\n   * @param {Function} transform The argument transform.\n   * @returns {Function} Returns the new function.\n   */\n  function overArg(func, transform) {\n    return function(arg) {\n      return func(transform(arg));\n    };\n  }\n\n  /**\n   * Replaces all `placeholder` elements in `array` with an internal placeholder\n   * and returns an array of their indexes.\n   *\n   * @private\n   * @param {Array} array The array to modify.\n   * @param {*} placeholder The placeholder to replace.\n   * @returns {Array} Returns the new array of placeholder indexes.\n   */\n  function replaceHolders(array, placeholder) {\n    var index = -1,\n        length = array.length,\n        resIndex = 0,\n        result = [];\n\n    while (++index < length) {\n      var value = array[index];\n      if (value === placeholder || value === PLACEHOLDER) {\n        array[index] = PLACEHOLDER;\n        result[resIndex++] = index;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Converts `set` to an array of its values.\n   *\n   * @private\n   * @param {Object} set The set to convert.\n   * @returns {Array} Returns the values.\n   */\n  function setToArray(set) {\n    var index = -1,\n        result = Array(set.size);\n\n    set.forEach(function(value) {\n      result[++index] = value;\n    });\n    return result;\n  }\n\n  /**\n   * Converts `set` to its value-value pairs.\n   *\n   * @private\n   * @param {Object} set The set to convert.\n   * @returns {Array} Returns the value-value pairs.\n   */\n  function setToPairs(set) {\n    var index = -1,\n        result = Array(set.size);\n\n    set.forEach(function(value) {\n      result[++index] = [value, value];\n    });\n    return result;\n  }\n\n  /**\n   * A specialized version of `_.indexOf` which performs strict equality\n   * comparisons of values, i.e. `===`.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} value The value to search for.\n   * @param {number} fromIndex The index to search from.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function strictIndexOf(array, value, fromIndex) {\n    var index = fromIndex - 1,\n        length = array.length;\n\n    while (++index < length) {\n      if (array[index] === value) {\n        return index;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * A specialized version of `_.lastIndexOf` which performs strict equality\n   * comparisons of values, i.e. `===`.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} value The value to search for.\n   * @param {number} fromIndex The index to search from.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function strictLastIndexOf(array, value, fromIndex) {\n    var index = fromIndex + 1;\n    while (index--) {\n      if (array[index] === value) {\n        return index;\n      }\n    }\n    return index;\n  }\n\n  /**\n   * Gets the number of symbols in `string`.\n   *\n   * @private\n   * @param {string} string The string to inspect.\n   * @returns {number} Returns the string size.\n   */\n  function stringSize(string) {\n    return hasUnicode(string)\n      ? unicodeSize(string)\n      : asciiSize(string);\n  }\n\n  /**\n   * Converts `string` to an array.\n   *\n   * @private\n   * @param {string} string The string to convert.\n   * @returns {Array} Returns the converted array.\n   */\n  function stringToArray(string) {\n    return hasUnicode(string)\n      ? unicodeToArray(string)\n      : asciiToArray(string);\n  }\n\n  /**\n   * Used by `_.unescape` to convert HTML entities to characters.\n   *\n   * @private\n   * @param {string} chr The matched character to unescape.\n   * @returns {string} Returns the unescaped character.\n   */\n  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);\n\n  /**\n   * Gets the size of a Unicode `string`.\n   *\n   * @private\n   * @param {string} string The string inspect.\n   * @returns {number} Returns the string size.\n   */\n  function unicodeSize(string) {\n    var result = reUnicode.lastIndex = 0;\n    while (reUnicode.test(string)) {\n      ++result;\n    }\n    return result;\n  }\n\n  /**\n   * Converts a Unicode `string` to an array.\n   *\n   * @private\n   * @param {string} string The string to convert.\n   * @returns {Array} Returns the converted array.\n   */\n  function unicodeToArray(string) {\n    return string.match(reUnicode) || [];\n  }\n\n  /**\n   * Splits a Unicode `string` into an array of its words.\n   *\n   * @private\n   * @param {string} The string to inspect.\n   * @returns {Array} Returns the words of `string`.\n   */\n  function unicodeWords(string) {\n    return string.match(reUnicodeWord) || [];\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Create a new pristine `lodash` function using the `context` object.\n   *\n   * @static\n   * @memberOf _\n   * @since 1.1.0\n   * @category Util\n   * @param {Object} [context=root] The context object.\n   * @returns {Function} Returns a new `lodash` function.\n   * @example\n   *\n   * _.mixin({ 'foo': _.constant('foo') });\n   *\n   * var lodash = _.runInContext();\n   * lodash.mixin({ 'bar': lodash.constant('bar') });\n   *\n   * _.isFunction(_.foo);\n   * // => true\n   * _.isFunction(_.bar);\n   * // => false\n   *\n   * lodash.isFunction(lodash.foo);\n   * // => false\n   * lodash.isFunction(lodash.bar);\n   * // => true\n   *\n   * // Create a suped-up `defer` in Node.js.\n   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;\n   */\n  var runInContext = (function runInContext(context) {\n    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));\n\n    /** Built-in constructor references. */\n    var Array = context.Array,\n        Date = context.Date,\n        Error = context.Error,\n        Function = context.Function,\n        Math = context.Math,\n        Object = context.Object,\n        RegExp = context.RegExp,\n        String = context.String,\n        TypeError = context.TypeError;\n\n    /** Used for built-in method references. */\n    var arrayProto = Array.prototype,\n        funcProto = Function.prototype,\n        objectProto = Object.prototype;\n\n    /** Used to detect overreaching core-js shims. */\n    var coreJsData = context['__core-js_shared__'];\n\n    /** Used to resolve the decompiled source of functions. */\n    var funcToString = funcProto.toString;\n\n    /** Used to check objects for own properties. */\n    var hasOwnProperty = objectProto.hasOwnProperty;\n\n    /** Used to generate unique IDs. */\n    var idCounter = 0;\n\n    /** Used to detect methods masquerading as native. */\n    var maskSrcKey = (function() {\n      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n      return uid ? ('Symbol(src)_1.' + uid) : '';\n    }());\n\n    /**\n     * Used to resolve the\n     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n     * of values.\n     */\n    var nativeObjectToString = objectProto.toString;\n\n    /** Used to infer the `Object` constructor. */\n    var objectCtorString = funcToString.call(Object);\n\n    /** Used to restore the original `_` reference in `_.noConflict`. */\n    var oldDash = root._;\n\n    /** Used to detect if a method is native. */\n    var reIsNative = RegExp('^' +\n      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n      .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n    );\n\n    /** Built-in value references. */\n    var Buffer = moduleExports ? context.Buffer : undefined,\n        Symbol = context.Symbol,\n        Uint8Array = context.Uint8Array,\n        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,\n        getPrototype = overArg(Object.getPrototypeOf, Object),\n        objectCreate = Object.create,\n        propertyIsEnumerable = objectProto.propertyIsEnumerable,\n        splice = arrayProto.splice,\n        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,\n        symIterator = Symbol ? Symbol.iterator : undefined,\n        symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n    var defineProperty = (function() {\n      try {\n        var func = getNative(Object, 'defineProperty');\n        func({}, '', {});\n        return func;\n      } catch (e) {}\n    }());\n\n    /** Mocked built-ins. */\n    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,\n        ctxNow = Date && Date.now !== root.Date.now && Date.now,\n        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;\n\n    /* Built-in method references for those with the same name as other `lodash` methods. */\n    var nativeCeil = Math.ceil,\n        nativeFloor = Math.floor,\n        nativeGetSymbols = Object.getOwnPropertySymbols,\n        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n        nativeIsFinite = context.isFinite,\n        nativeJoin = arrayProto.join,\n        nativeKeys = overArg(Object.keys, Object),\n        nativeMax = Math.max,\n        nativeMin = Math.min,\n        nativeNow = Date.now,\n        nativeParseInt = context.parseInt,\n        nativeRandom = Math.random,\n        nativeReverse = arrayProto.reverse;\n\n    /* Built-in method references that are verified to be native. */\n    var DataView = getNative(context, 'DataView'),\n        Map = getNative(context, 'Map'),\n        Promise = getNative(context, 'Promise'),\n        Set = getNative(context, 'Set'),\n        WeakMap = getNative(context, 'WeakMap'),\n        nativeCreate = getNative(Object, 'create');\n\n    /** Used to store function metadata. */\n    var metaMap = WeakMap && new WeakMap;\n\n    /** Used to lookup unminified function names. */\n    var realNames = {};\n\n    /** Used to detect maps, sets, and weakmaps. */\n    var dataViewCtorString = toSource(DataView),\n        mapCtorString = toSource(Map),\n        promiseCtorString = toSource(Promise),\n        setCtorString = toSource(Set),\n        weakMapCtorString = toSource(WeakMap);\n\n    /** Used to convert symbols to primitives and strings. */\n    var symbolProto = Symbol ? Symbol.prototype : undefined,\n        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,\n        symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a `lodash` object which wraps `value` to enable implicit method\n     * chain sequences. Methods that operate on and return arrays, collections,\n     * and functions can be chained together. Methods that retrieve a single value\n     * or may return a primitive value will automatically end the chain sequence\n     * and return the unwrapped value. Otherwise, the value must be unwrapped\n     * with `_#value`.\n     *\n     * Explicit chain sequences, which must be unwrapped with `_#value`, may be\n     * enabled using `_.chain`.\n     *\n     * The execution of chained methods is lazy, that is, it's deferred until\n     * `_#value` is implicitly or explicitly called.\n     *\n     * Lazy evaluation allows several methods to support shortcut fusion.\n     * Shortcut fusion is an optimization to merge iteratee calls; this avoids\n     * the creation of intermediate arrays and can greatly reduce the number of\n     * iteratee executions. Sections of a chain sequence qualify for shortcut\n     * fusion if the section is applied to an array of at least `200` elements\n     * and any iteratees accept only one argument. The heuristic for whether a\n     * section qualifies for shortcut fusion is subject to change.\n     *\n     * Chaining is supported in custom builds as long as the `_#value` method is\n     * directly or indirectly included in the build.\n     *\n     * In addition to lodash methods, wrappers have `Array` and `String` methods.\n     *\n     * The wrapper `Array` methods are:\n     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`\n     *\n     * The wrapper `String` methods are:\n     * `replace` and `split`\n     *\n     * The wrapper methods that support shortcut fusion are:\n     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,\n     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,\n     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`\n     *\n     * The chainable wrapper methods are:\n     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,\n     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,\n     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,\n     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,\n     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,\n     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,\n     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,\n     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,\n     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,\n     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,\n     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,\n     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,\n     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,\n     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,\n     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,\n     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,\n     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,\n     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,\n     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,\n     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,\n     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,\n     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,\n     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,\n     * `zipObject`, `zipObjectDeep`, and `zipWith`\n     *\n     * The wrapper methods that are **not** chainable by default are:\n     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,\n     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,\n     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,\n     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,\n     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,\n     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,\n     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,\n     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,\n     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,\n     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,\n     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,\n     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,\n     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,\n     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,\n     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,\n     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,\n     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,\n     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,\n     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,\n     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,\n     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,\n     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,\n     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,\n     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,\n     * `upperFirst`, `value`, and `words`\n     *\n     * @name _\n     * @constructor\n     * @category Seq\n     * @param {*} value The value to wrap in a `lodash` instance.\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var wrapped = _([1, 2, 3]);\n     *\n     * // Returns an unwrapped value.\n     * wrapped.reduce(_.add);\n     * // => 6\n     *\n     * // Returns a wrapped value.\n     * var squares = wrapped.map(square);\n     *\n     * _.isArray(squares);\n     * // => false\n     *\n     * _.isArray(squares.value());\n     * // => true\n     */\n    function lodash(value) {\n      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {\n        if (value instanceof LodashWrapper) {\n          return value;\n        }\n        if (hasOwnProperty.call(value, '__wrapped__')) {\n          return wrapperClone(value);\n        }\n      }\n      return new LodashWrapper(value);\n    }\n\n    /**\n     * The base implementation of `_.create` without support for assigning\n     * properties to the created object.\n     *\n     * @private\n     * @param {Object} proto The object to inherit from.\n     * @returns {Object} Returns the new object.\n     */\n    var baseCreate = (function() {\n      function object() {}\n      return function(proto) {\n        if (!isObject(proto)) {\n          return {};\n        }\n        if (objectCreate) {\n          return objectCreate(proto);\n        }\n        object.prototype = proto;\n        var result = new object;\n        object.prototype = undefined;\n        return result;\n      };\n    }());\n\n    /**\n     * The function whose prototype chain sequence wrappers inherit from.\n     *\n     * @private\n     */\n    function baseLodash() {\n      // No operation performed.\n    }\n\n    /**\n     * The base constructor for creating `lodash` wrapper objects.\n     *\n     * @private\n     * @param {*} value The value to wrap.\n     * @param {boolean} [chainAll] Enable explicit method chain sequences.\n     */\n    function LodashWrapper(value, chainAll) {\n      this.__wrapped__ = value;\n      this.__actions__ = [];\n      this.__chain__ = !!chainAll;\n      this.__index__ = 0;\n      this.__values__ = undefined;\n    }\n\n    /**\n     * By default, the template delimiters used by lodash are like those in\n     * embedded Ruby (ERB). Change the following template settings to use\n     * alternative delimiters.\n     *\n     * @static\n     * @memberOf _\n     * @type {Object}\n     */\n    lodash.templateSettings = {\n\n      /**\n       * Used to detect `data` property values to be HTML-escaped.\n       *\n       * @memberOf _.templateSettings\n       * @type {RegExp}\n       */\n      'escape': reEscape,\n\n      /**\n       * Used to detect code to be evaluated.\n       *\n       * @memberOf _.templateSettings\n       * @type {RegExp}\n       */\n      'evaluate': reEvaluate,\n\n      /**\n       * Used to detect `data` property values to inject.\n       *\n       * @memberOf _.templateSettings\n       * @type {RegExp}\n       */\n      'interpolate': reInterpolate,\n\n      /**\n       * Used to reference the data object in the template text.\n       *\n       * @memberOf _.templateSettings\n       * @type {string}\n       */\n      'variable': '',\n\n      /**\n       * Used to import variables into the compiled template.\n       *\n       * @memberOf _.templateSettings\n       * @type {Object}\n       */\n      'imports': {\n\n        /**\n         * A reference to the `lodash` function.\n         *\n         * @memberOf _.templateSettings.imports\n         * @type {Function}\n         */\n        '_': lodash\n      }\n    };\n\n    // Ensure wrappers are instances of `baseLodash`.\n    lodash.prototype = baseLodash.prototype;\n    lodash.prototype.constructor = lodash;\n\n    LodashWrapper.prototype = baseCreate(baseLodash.prototype);\n    LodashWrapper.prototype.constructor = LodashWrapper;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.\n     *\n     * @private\n     * @constructor\n     * @param {*} value The value to wrap.\n     */\n    function LazyWrapper(value) {\n      this.__wrapped__ = value;\n      this.__actions__ = [];\n      this.__dir__ = 1;\n      this.__filtered__ = false;\n      this.__iteratees__ = [];\n      this.__takeCount__ = MAX_ARRAY_LENGTH;\n      this.__views__ = [];\n    }\n\n    /**\n     * Creates a clone of the lazy wrapper object.\n     *\n     * @private\n     * @name clone\n     * @memberOf LazyWrapper\n     * @returns {Object} Returns the cloned `LazyWrapper` object.\n     */\n    function lazyClone() {\n      var result = new LazyWrapper(this.__wrapped__);\n      result.__actions__ = copyArray(this.__actions__);\n      result.__dir__ = this.__dir__;\n      result.__filtered__ = this.__filtered__;\n      result.__iteratees__ = copyArray(this.__iteratees__);\n      result.__takeCount__ = this.__takeCount__;\n      result.__views__ = copyArray(this.__views__);\n      return result;\n    }\n\n    /**\n     * Reverses the direction of lazy iteration.\n     *\n     * @private\n     * @name reverse\n     * @memberOf LazyWrapper\n     * @returns {Object} Returns the new reversed `LazyWrapper` object.\n     */\n    function lazyReverse() {\n      if (this.__filtered__) {\n        var result = new LazyWrapper(this);\n        result.__dir__ = -1;\n        result.__filtered__ = true;\n      } else {\n        result = this.clone();\n        result.__dir__ *= -1;\n      }\n      return result;\n    }\n\n    /**\n     * Extracts the unwrapped value from its lazy wrapper.\n     *\n     * @private\n     * @name value\n     * @memberOf LazyWrapper\n     * @returns {*} Returns the unwrapped value.\n     */\n    function lazyValue() {\n      var array = this.__wrapped__.value(),\n          dir = this.__dir__,\n          isArr = isArray(array),\n          isRight = dir < 0,\n          arrLength = isArr ? array.length : 0,\n          view = getView(0, arrLength, this.__views__),\n          start = view.start,\n          end = view.end,\n          length = end - start,\n          index = isRight ? end : (start - 1),\n          iteratees = this.__iteratees__,\n          iterLength = iteratees.length,\n          resIndex = 0,\n          takeCount = nativeMin(length, this.__takeCount__);\n\n      if (!isArr || arrLength < LARGE_ARRAY_SIZE ||\n          (arrLength == length && takeCount == length)) {\n        return baseWrapperValue(array, this.__actions__);\n      }\n      var result = [];\n\n      outer:\n      while (length-- && resIndex < takeCount) {\n        index += dir;\n\n        var iterIndex = -1,\n            value = array[index];\n\n        while (++iterIndex < iterLength) {\n          var data = iteratees[iterIndex],\n              iteratee = data.iteratee,\n              type = data.type,\n              computed = iteratee(value);\n\n          if (type == LAZY_MAP_FLAG) {\n            value = computed;\n          } else if (!computed) {\n            if (type == LAZY_FILTER_FLAG) {\n              continue outer;\n            } else {\n              break outer;\n            }\n          }\n        }\n        result[resIndex++] = value;\n      }\n      return result;\n    }\n\n    // Ensure `LazyWrapper` is an instance of `baseLodash`.\n    LazyWrapper.prototype = baseCreate(baseLodash.prototype);\n    LazyWrapper.prototype.constructor = LazyWrapper;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a hash object.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [entries] The key-value pairs to cache.\n     */\n    function Hash(entries) {\n      var index = -1,\n          length = entries == null ? 0 : entries.length;\n\n      this.clear();\n      while (++index < length) {\n        var entry = entries[index];\n        this.set(entry[0], entry[1]);\n      }\n    }\n\n    /**\n     * Removes all key-value entries from the hash.\n     *\n     * @private\n     * @name clear\n     * @memberOf Hash\n     */\n    function hashClear() {\n      this.__data__ = nativeCreate ? nativeCreate(null) : {};\n      this.size = 0;\n    }\n\n    /**\n     * Removes `key` and its value from the hash.\n     *\n     * @private\n     * @name delete\n     * @memberOf Hash\n     * @param {Object} hash The hash to modify.\n     * @param {string} key The key of the value to remove.\n     * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n     */\n    function hashDelete(key) {\n      var result = this.has(key) && delete this.__data__[key];\n      this.size -= result ? 1 : 0;\n      return result;\n    }\n\n    /**\n     * Gets the hash value for `key`.\n     *\n     * @private\n     * @name get\n     * @memberOf Hash\n     * @param {string} key The key of the value to get.\n     * @returns {*} Returns the entry value.\n     */\n    function hashGet(key) {\n      var data = this.__data__;\n      if (nativeCreate) {\n        var result = data[key];\n        return result === HASH_UNDEFINED ? undefined : result;\n      }\n      return hasOwnProperty.call(data, key) ? data[key] : undefined;\n    }\n\n    /**\n     * Checks if a hash value for `key` exists.\n     *\n     * @private\n     * @name has\n     * @memberOf Hash\n     * @param {string} key The key of the entry to check.\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n     */\n    function hashHas(key) {\n      var data = this.__data__;\n      return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n    }\n\n    /**\n     * Sets the hash `key` to `value`.\n     *\n     * @private\n     * @name set\n     * @memberOf Hash\n     * @param {string} key The key of the value to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns the hash instance.\n     */\n    function hashSet(key, value) {\n      var data = this.__data__;\n      this.size += this.has(key) ? 0 : 1;\n      data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n      return this;\n    }\n\n    // Add methods to `Hash`.\n    Hash.prototype.clear = hashClear;\n    Hash.prototype['delete'] = hashDelete;\n    Hash.prototype.get = hashGet;\n    Hash.prototype.has = hashHas;\n    Hash.prototype.set = hashSet;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates an list cache object.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [entries] The key-value pairs to cache.\n     */\n    function ListCache(entries) {\n      var index = -1,\n          length = entries == null ? 0 : entries.length;\n\n      this.clear();\n      while (++index < length) {\n        var entry = entries[index];\n        this.set(entry[0], entry[1]);\n      }\n    }\n\n    /**\n     * Removes all key-value entries from the list cache.\n     *\n     * @private\n     * @name clear\n     * @memberOf ListCache\n     */\n    function listCacheClear() {\n      this.__data__ = [];\n      this.size = 0;\n    }\n\n    /**\n     * Removes `key` and its value from the list cache.\n     *\n     * @private\n     * @name delete\n     * @memberOf ListCache\n     * @param {string} key The key of the value to remove.\n     * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n     */\n    function listCacheDelete(key) {\n      var data = this.__data__,\n          index = assocIndexOf(data, key);\n\n      if (index < 0) {\n        return false;\n      }\n      var lastIndex = data.length - 1;\n      if (index == lastIndex) {\n        data.pop();\n      } else {\n        splice.call(data, index, 1);\n      }\n      --this.size;\n      return true;\n    }\n\n    /**\n     * Gets the list cache value for `key`.\n     *\n     * @private\n     * @name get\n     * @memberOf ListCache\n     * @param {string} key The key of the value to get.\n     * @returns {*} Returns the entry value.\n     */\n    function listCacheGet(key) {\n      var data = this.__data__,\n          index = assocIndexOf(data, key);\n\n      return index < 0 ? undefined : data[index][1];\n    }\n\n    /**\n     * Checks if a list cache value for `key` exists.\n     *\n     * @private\n     * @name has\n     * @memberOf ListCache\n     * @param {string} key The key of the entry to check.\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n     */\n    function listCacheHas(key) {\n      return assocIndexOf(this.__data__, key) > -1;\n    }\n\n    /**\n     * Sets the list cache `key` to `value`.\n     *\n     * @private\n     * @name set\n     * @memberOf ListCache\n     * @param {string} key The key of the value to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns the list cache instance.\n     */\n    function listCacheSet(key, value) {\n      var data = this.__data__,\n          index = assocIndexOf(data, key);\n\n      if (index < 0) {\n        ++this.size;\n        data.push([key, value]);\n      } else {\n        data[index][1] = value;\n      }\n      return this;\n    }\n\n    // Add methods to `ListCache`.\n    ListCache.prototype.clear = listCacheClear;\n    ListCache.prototype['delete'] = listCacheDelete;\n    ListCache.prototype.get = listCacheGet;\n    ListCache.prototype.has = listCacheHas;\n    ListCache.prototype.set = listCacheSet;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a map cache object to store key-value pairs.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [entries] The key-value pairs to cache.\n     */\n    function MapCache(entries) {\n      var index = -1,\n          length = entries == null ? 0 : entries.length;\n\n      this.clear();\n      while (++index < length) {\n        var entry = entries[index];\n        this.set(entry[0], entry[1]);\n      }\n    }\n\n    /**\n     * Removes all key-value entries from the map.\n     *\n     * @private\n     * @name clear\n     * @memberOf MapCache\n     */\n    function mapCacheClear() {\n      this.size = 0;\n      this.__data__ = {\n        'hash': new Hash,\n        'map': new (Map || ListCache),\n        'string': new Hash\n      };\n    }\n\n    /**\n     * Removes `key` and its value from the map.\n     *\n     * @private\n     * @name delete\n     * @memberOf MapCache\n     * @param {string} key The key of the value to remove.\n     * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n     */\n    function mapCacheDelete(key) {\n      var result = getMapData(this, key)['delete'](key);\n      this.size -= result ? 1 : 0;\n      return result;\n    }\n\n    /**\n     * Gets the map value for `key`.\n     *\n     * @private\n     * @name get\n     * @memberOf MapCache\n     * @param {string} key The key of the value to get.\n     * @returns {*} Returns the entry value.\n     */\n    function mapCacheGet(key) {\n      return getMapData(this, key).get(key);\n    }\n\n    /**\n     * Checks if a map value for `key` exists.\n     *\n     * @private\n     * @name has\n     * @memberOf MapCache\n     * @param {string} key The key of the entry to check.\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n     */\n    function mapCacheHas(key) {\n      return getMapData(this, key).has(key);\n    }\n\n    /**\n     * Sets the map `key` to `value`.\n     *\n     * @private\n     * @name set\n     * @memberOf MapCache\n     * @param {string} key The key of the value to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns the map cache instance.\n     */\n    function mapCacheSet(key, value) {\n      var data = getMapData(this, key),\n          size = data.size;\n\n      data.set(key, value);\n      this.size += data.size == size ? 0 : 1;\n      return this;\n    }\n\n    // Add methods to `MapCache`.\n    MapCache.prototype.clear = mapCacheClear;\n    MapCache.prototype['delete'] = mapCacheDelete;\n    MapCache.prototype.get = mapCacheGet;\n    MapCache.prototype.has = mapCacheHas;\n    MapCache.prototype.set = mapCacheSet;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     *\n     * Creates an array cache object to store unique values.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [values] The values to cache.\n     */\n    function SetCache(values) {\n      var index = -1,\n          length = values == null ? 0 : values.length;\n\n      this.__data__ = new MapCache;\n      while (++index < length) {\n        this.add(values[index]);\n      }\n    }\n\n    /**\n     * Adds `value` to the array cache.\n     *\n     * @private\n     * @name add\n     * @memberOf SetCache\n     * @alias push\n     * @param {*} value The value to cache.\n     * @returns {Object} Returns the cache instance.\n     */\n    function setCacheAdd(value) {\n      this.__data__.set(value, HASH_UNDEFINED);\n      return this;\n    }\n\n    /**\n     * Checks if `value` is in the array cache.\n     *\n     * @private\n     * @name has\n     * @memberOf SetCache\n     * @param {*} value The value to search for.\n     * @returns {number} Returns `true` if `value` is found, else `false`.\n     */\n    function setCacheHas(value) {\n      return this.__data__.has(value);\n    }\n\n    // Add methods to `SetCache`.\n    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\n    SetCache.prototype.has = setCacheHas;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a stack cache object to store key-value pairs.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [entries] The key-value pairs to cache.\n     */\n    function Stack(entries) {\n      var data = this.__data__ = new ListCache(entries);\n      this.size = data.size;\n    }\n\n    /**\n     * Removes all key-value entries from the stack.\n     *\n     * @private\n     * @name clear\n     * @memberOf Stack\n     */\n    function stackClear() {\n      this.__data__ = new ListCache;\n      this.size = 0;\n    }\n\n    /**\n     * Removes `key` and its value from the stack.\n     *\n     * @private\n     * @name delete\n     * @memberOf Stack\n     * @param {string} key The key of the value to remove.\n     * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n     */\n    function stackDelete(key) {\n      var data = this.__data__,\n          result = data['delete'](key);\n\n      this.size = data.size;\n      return result;\n    }\n\n    /**\n     * Gets the stack value for `key`.\n     *\n     * @private\n     * @name get\n     * @memberOf Stack\n     * @param {string} key The key of the value to get.\n     * @returns {*} Returns the entry value.\n     */\n    function stackGet(key) {\n      return this.__data__.get(key);\n    }\n\n    /**\n     * Checks if a stack value for `key` exists.\n     *\n     * @private\n     * @name has\n     * @memberOf Stack\n     * @param {string} key The key of the entry to check.\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n     */\n    function stackHas(key) {\n      return this.__data__.has(key);\n    }\n\n    /**\n     * Sets the stack `key` to `value`.\n     *\n     * @private\n     * @name set\n     * @memberOf Stack\n     * @param {string} key The key of the value to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns the stack cache instance.\n     */\n    function stackSet(key, value) {\n      var data = this.__data__;\n      if (data instanceof ListCache) {\n        var pairs = data.__data__;\n        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n          pairs.push([key, value]);\n          this.size = ++data.size;\n          return this;\n        }\n        data = this.__data__ = new MapCache(pairs);\n      }\n      data.set(key, value);\n      this.size = data.size;\n      return this;\n    }\n\n    // Add methods to `Stack`.\n    Stack.prototype.clear = stackClear;\n    Stack.prototype['delete'] = stackDelete;\n    Stack.prototype.get = stackGet;\n    Stack.prototype.has = stackHas;\n    Stack.prototype.set = stackSet;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates an array of the enumerable property names of the array-like `value`.\n     *\n     * @private\n     * @param {*} value The value to query.\n     * @param {boolean} inherited Specify returning inherited property names.\n     * @returns {Array} Returns the array of property names.\n     */\n    function arrayLikeKeys(value, inherited) {\n      var isArr = isArray(value),\n          isArg = !isArr && isArguments(value),\n          isBuff = !isArr && !isArg && isBuffer(value),\n          isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n          skipIndexes = isArr || isArg || isBuff || isType,\n          result = skipIndexes ? baseTimes(value.length, String) : [],\n          length = result.length;\n\n      for (var key in value) {\n        if ((inherited || hasOwnProperty.call(value, key)) &&\n            !(skipIndexes && (\n               // Safari 9 has enumerable `arguments.length` in strict mode.\n               key == 'length' ||\n               // Node.js 0.10 has enumerable non-index properties on buffers.\n               (isBuff && (key == 'offset' || key == 'parent')) ||\n               // PhantomJS 2 has enumerable non-index properties on typed arrays.\n               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n               // Skip index properties.\n               isIndex(key, length)\n            ))) {\n          result.push(key);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * A specialized version of `_.sample` for arrays.\n     *\n     * @private\n     * @param {Array} array The array to sample.\n     * @returns {*} Returns the random element.\n     */\n    function arraySample(array) {\n      var length = array.length;\n      return length ? array[baseRandom(0, length - 1)] : undefined;\n    }\n\n    /**\n     * A specialized version of `_.sampleSize` for arrays.\n     *\n     * @private\n     * @param {Array} array The array to sample.\n     * @param {number} n The number of elements to sample.\n     * @returns {Array} Returns the random elements.\n     */\n    function arraySampleSize(array, n) {\n      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));\n    }\n\n    /**\n     * A specialized version of `_.shuffle` for arrays.\n     *\n     * @private\n     * @param {Array} array The array to shuffle.\n     * @returns {Array} Returns the new shuffled array.\n     */\n    function arrayShuffle(array) {\n      return shuffleSelf(copyArray(array));\n    }\n\n    /**\n     * Used by `_.defaults` to customize its `_.assignIn` use.\n     *\n     * @private\n     * @param {*} objValue The destination value.\n     * @param {*} srcValue The source value.\n     * @param {string} key The key of the property to assign.\n     * @param {Object} object The parent object of `objValue`.\n     * @returns {*} Returns the value to assign.\n     */\n    function assignInDefaults(objValue, srcValue, key, object) {\n      if (objValue === undefined ||\n          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {\n        return srcValue;\n      }\n      return objValue;\n    }\n\n    /**\n     * This function is like `assignValue` except that it doesn't assign\n     * `undefined` values.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {string} key The key of the property to assign.\n     * @param {*} value The value to assign.\n     */\n    function assignMergeValue(object, key, value) {\n      if ((value !== undefined && !eq(object[key], value)) ||\n          (value === undefined && !(key in object))) {\n        baseAssignValue(object, key, value);\n      }\n    }\n\n    /**\n     * Assigns `value` to `key` of `object` if the existing value is not equivalent\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {string} key The key of the property to assign.\n     * @param {*} value The value to assign.\n     */\n    function assignValue(object, key, value) {\n      var objValue = object[key];\n      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n          (value === undefined && !(key in object))) {\n        baseAssignValue(object, key, value);\n      }\n    }\n\n    /**\n     * Gets the index at which the `key` is found in `array` of key-value pairs.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {*} key The key to search for.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     */\n    function assocIndexOf(array, key) {\n      var length = array.length;\n      while (length--) {\n        if (eq(array[length][0], key)) {\n          return length;\n        }\n      }\n      return -1;\n    }\n\n    /**\n     * Aggregates elements of `collection` on `accumulator` with keys transformed\n     * by `iteratee` and values set by `setter`.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} setter The function to set `accumulator` values.\n     * @param {Function} iteratee The iteratee to transform keys.\n     * @param {Object} accumulator The initial aggregated object.\n     * @returns {Function} Returns `accumulator`.\n     */\n    function baseAggregator(collection, setter, iteratee, accumulator) {\n      baseEach(collection, function(value, key, collection) {\n        setter(accumulator, value, iteratee(value), collection);\n      });\n      return accumulator;\n    }\n\n    /**\n     * The base implementation of `_.assign` without support for multiple sources\n     * or `customizer` functions.\n     *\n     * @private\n     * @param {Object} object The destination object.\n     * @param {Object} source The source object.\n     * @returns {Object} Returns `object`.\n     */\n    function baseAssign(object, source) {\n      return object && copyObject(source, keys(source), object);\n    }\n\n    /**\n     * The base implementation of `assignValue` and `assignMergeValue` without\n     * value checks.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {string} key The key of the property to assign.\n     * @param {*} value The value to assign.\n     */\n    function baseAssignValue(object, key, value) {\n      if (key == '__proto__' && defineProperty) {\n        defineProperty(object, key, {\n          'configurable': true,\n          'enumerable': true,\n          'value': value,\n          'writable': true\n        });\n      } else {\n        object[key] = value;\n      }\n    }\n\n    /**\n     * The base implementation of `_.at` without support for individual paths.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {string[]} paths The property paths of elements to pick.\n     * @returns {Array} Returns the picked elements.\n     */\n    function baseAt(object, paths) {\n      var index = -1,\n          length = paths.length,\n          result = Array(length),\n          skip = object == null;\n\n      while (++index < length) {\n        result[index] = skip ? undefined : get(object, paths[index]);\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.clamp` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {number} number The number to clamp.\n     * @param {number} [lower] The lower bound.\n     * @param {number} upper The upper bound.\n     * @returns {number} Returns the clamped number.\n     */\n    function baseClamp(number, lower, upper) {\n      if (number === number) {\n        if (upper !== undefined) {\n          number = number <= upper ? number : upper;\n        }\n        if (lower !== undefined) {\n          number = number >= lower ? number : lower;\n        }\n      }\n      return number;\n    }\n\n    /**\n     * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n     * traversed objects.\n     *\n     * @private\n     * @param {*} value The value to clone.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @param {boolean} [isFull] Specify a clone including symbols.\n     * @param {Function} [customizer] The function to customize cloning.\n     * @param {string} [key] The key of `value`.\n     * @param {Object} [object] The parent object of `value`.\n     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n     * @returns {*} Returns the cloned value.\n     */\n    function baseClone(value, isDeep, isFull, customizer, key, object, stack) {\n      var result;\n      if (customizer) {\n        result = object ? customizer(value, key, object, stack) : customizer(value);\n      }\n      if (result !== undefined) {\n        return result;\n      }\n      if (!isObject(value)) {\n        return value;\n      }\n      var isArr = isArray(value);\n      if (isArr) {\n        result = initCloneArray(value);\n        if (!isDeep) {\n          return copyArray(value, result);\n        }\n      } else {\n        var tag = getTag(value),\n            isFunc = tag == funcTag || tag == genTag;\n\n        if (isBuffer(value)) {\n          return cloneBuffer(value, isDeep);\n        }\n        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n          result = initCloneObject(isFunc ? {} : value);\n          if (!isDeep) {\n            return copySymbols(value, baseAssign(result, value));\n          }\n        } else {\n          if (!cloneableTags[tag]) {\n            return object ? value : {};\n          }\n          result = initCloneByTag(value, tag, baseClone, isDeep);\n        }\n      }\n      // Check for circular references and return its corresponding clone.\n      stack || (stack = new Stack);\n      var stacked = stack.get(value);\n      if (stacked) {\n        return stacked;\n      }\n      stack.set(value, result);\n\n      var props = isArr ? undefined : (isFull ? getAllKeys : keys)(value);\n      arrayEach(props || value, function(subValue, key) {\n        if (props) {\n          key = subValue;\n          subValue = value[key];\n        }\n        // Recursively populate clone (susceptible to call stack limits).\n        assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));\n      });\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.conforms` which doesn't clone `source`.\n     *\n     * @private\n     * @param {Object} source The object of property predicates to conform to.\n     * @returns {Function} Returns the new spec function.\n     */\n    function baseConforms(source) {\n      var props = keys(source);\n      return function(object) {\n        return baseConformsTo(object, source, props);\n      };\n    }\n\n    /**\n     * The base implementation of `_.conformsTo` which accepts `props` to check.\n     *\n     * @private\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property predicates to conform to.\n     * @returns {boolean} Returns `true` if `object` conforms, else `false`.\n     */\n    function baseConformsTo(object, source, props) {\n      var length = props.length;\n      if (object == null) {\n        return !length;\n      }\n      object = Object(object);\n      while (length--) {\n        var key = props[length],\n            predicate = source[key],\n            value = object[key];\n\n        if ((value === undefined && !(key in object)) || !predicate(value)) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n    /**\n     * The base implementation of `_.delay` and `_.defer` which accepts `args`\n     * to provide to `func`.\n     *\n     * @private\n     * @param {Function} func The function to delay.\n     * @param {number} wait The number of milliseconds to delay invocation.\n     * @param {Array} args The arguments to provide to `func`.\n     * @returns {number|Object} Returns the timer id or timeout object.\n     */\n    function baseDelay(func, wait, args) {\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      return setTimeout(function() { func.apply(undefined, args); }, wait);\n    }\n\n    /**\n     * The base implementation of methods like `_.difference` without support\n     * for excluding multiple arrays or iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {Array} values The values to exclude.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     */\n    function baseDifference(array, values, iteratee, comparator) {\n      var index = -1,\n          includes = arrayIncludes,\n          isCommon = true,\n          length = array.length,\n          result = [],\n          valuesLength = values.length;\n\n      if (!length) {\n        return result;\n      }\n      if (iteratee) {\n        values = arrayMap(values, baseUnary(iteratee));\n      }\n      if (comparator) {\n        includes = arrayIncludesWith;\n        isCommon = false;\n      }\n      else if (values.length >= LARGE_ARRAY_SIZE) {\n        includes = cacheHas;\n        isCommon = false;\n        values = new SetCache(values);\n      }\n      outer:\n      while (++index < length) {\n        var value = array[index],\n            computed = iteratee == null ? value : iteratee(value);\n\n        value = (comparator || value !== 0) ? value : 0;\n        if (isCommon && computed === computed) {\n          var valuesIndex = valuesLength;\n          while (valuesIndex--) {\n            if (values[valuesIndex] === computed) {\n              continue outer;\n            }\n          }\n          result.push(value);\n        }\n        else if (!includes(values, computed, comparator)) {\n          result.push(value);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.forEach` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Array|Object} Returns `collection`.\n     */\n    var baseEach = createBaseEach(baseForOwn);\n\n    /**\n     * The base implementation of `_.forEachRight` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Array|Object} Returns `collection`.\n     */\n    var baseEachRight = createBaseEach(baseForOwnRight, true);\n\n    /**\n     * The base implementation of `_.every` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} predicate The function invoked per iteration.\n     * @returns {boolean} Returns `true` if all elements pass the predicate check,\n     *  else `false`\n     */\n    function baseEvery(collection, predicate) {\n      var result = true;\n      baseEach(collection, function(value, index, collection) {\n        result = !!predicate(value, index, collection);\n        return result;\n      });\n      return result;\n    }\n\n    /**\n     * The base implementation of methods like `_.max` and `_.min` which accepts a\n     * `comparator` to determine the extremum value.\n     *\n     * @private\n     * @param {Array} array The array to iterate over.\n     * @param {Function} iteratee The iteratee invoked per iteration.\n     * @param {Function} comparator The comparator used to compare values.\n     * @returns {*} Returns the extremum value.\n     */\n    function baseExtremum(array, iteratee, comparator) {\n      var index = -1,\n          length = array.length;\n\n      while (++index < length) {\n        var value = array[index],\n            current = iteratee(value);\n\n        if (current != null && (computed === undefined\n              ? (current === current && !isSymbol(current))\n              : comparator(current, computed)\n            )) {\n          var computed = current,\n              result = value;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.fill` without an iteratee call guard.\n     *\n     * @private\n     * @param {Array} array The array to fill.\n     * @param {*} value The value to fill `array` with.\n     * @param {number} [start=0] The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns `array`.\n     */\n    function baseFill(array, value, start, end) {\n      var length = array.length;\n\n      start = toInteger(start);\n      if (start < 0) {\n        start = -start > length ? 0 : (length + start);\n      }\n      end = (end === undefined || end > length) ? length : toInteger(end);\n      if (end < 0) {\n        end += length;\n      }\n      end = start > end ? 0 : toLength(end);\n      while (start < end) {\n        array[start++] = value;\n      }\n      return array;\n    }\n\n    /**\n     * The base implementation of `_.filter` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} predicate The function invoked per iteration.\n     * @returns {Array} Returns the new filtered array.\n     */\n    function baseFilter(collection, predicate) {\n      var result = [];\n      baseEach(collection, function(value, index, collection) {\n        if (predicate(value, index, collection)) {\n          result.push(value);\n        }\n      });\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.flatten` with support for restricting flattening.\n     *\n     * @private\n     * @param {Array} array The array to flatten.\n     * @param {number} depth The maximum recursion depth.\n     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.\n     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.\n     * @param {Array} [result=[]] The initial result value.\n     * @returns {Array} Returns the new flattened array.\n     */\n    function baseFlatten(array, depth, predicate, isStrict, result) {\n      var index = -1,\n          length = array.length;\n\n      predicate || (predicate = isFlattenable);\n      result || (result = []);\n\n      while (++index < length) {\n        var value = array[index];\n        if (depth > 0 && predicate(value)) {\n          if (depth > 1) {\n            // Recursively flatten arrays (susceptible to call stack limits).\n            baseFlatten(value, depth - 1, predicate, isStrict, result);\n          } else {\n            arrayPush(result, value);\n          }\n        } else if (!isStrict) {\n          result[result.length] = value;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `baseForOwn` which iterates over `object`\n     * properties returned by `keysFunc` and invokes `iteratee` for each property.\n     * Iteratee functions may exit iteration early by explicitly returning `false`.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @param {Function} keysFunc The function to get the keys of `object`.\n     * @returns {Object} Returns `object`.\n     */\n    var baseFor = createBaseFor();\n\n    /**\n     * This function is like `baseFor` except that it iterates over properties\n     * in the opposite order.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @param {Function} keysFunc The function to get the keys of `object`.\n     * @returns {Object} Returns `object`.\n     */\n    var baseForRight = createBaseFor(true);\n\n    /**\n     * The base implementation of `_.forOwn` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     */\n    function baseForOwn(object, iteratee) {\n      return object && baseFor(object, iteratee, keys);\n    }\n\n    /**\n     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     */\n    function baseForOwnRight(object, iteratee) {\n      return object && baseForRight(object, iteratee, keys);\n    }\n\n    /**\n     * The base implementation of `_.functions` which creates an array of\n     * `object` function property names filtered from `props`.\n     *\n     * @private\n     * @param {Object} object The object to inspect.\n     * @param {Array} props The property names to filter.\n     * @returns {Array} Returns the function names.\n     */\n    function baseFunctions(object, props) {\n      return arrayFilter(props, function(key) {\n        return isFunction(object[key]);\n      });\n    }\n\n    /**\n     * The base implementation of `_.get` without support for default values.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the property to get.\n     * @returns {*} Returns the resolved value.\n     */\n    function baseGet(object, path) {\n      path = isKey(path, object) ? [path] : castPath(path);\n\n      var index = 0,\n          length = path.length;\n\n      while (object != null && index < length) {\n        object = object[toKey(path[index++])];\n      }\n      return (index && index == length) ? object : undefined;\n    }\n\n    /**\n     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n     * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n     * symbols of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Function} keysFunc The function to get the keys of `object`.\n     * @param {Function} symbolsFunc The function to get the symbols of `object`.\n     * @returns {Array} Returns the array of property names and symbols.\n     */\n    function baseGetAllKeys(object, keysFunc, symbolsFunc) {\n      var result = keysFunc(object);\n      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n    }\n\n    /**\n     * The base implementation of `getTag` without fallbacks for buggy environments.\n     *\n     * @private\n     * @param {*} value The value to query.\n     * @returns {string} Returns the `toStringTag`.\n     */\n    function baseGetTag(value) {\n      if (value == null) {\n        return value === undefined ? undefinedTag : nullTag;\n      }\n      value = Object(value);\n      return (symToStringTag && symToStringTag in value)\n        ? getRawTag(value)\n        : objectToString(value);\n    }\n\n    /**\n     * The base implementation of `_.gt` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is greater than `other`,\n     *  else `false`.\n     */\n    function baseGt(value, other) {\n      return value > other;\n    }\n\n    /**\n     * The base implementation of `_.has` without support for deep paths.\n     *\n     * @private\n     * @param {Object} [object] The object to query.\n     * @param {Array|string} key The key to check.\n     * @returns {boolean} Returns `true` if `key` exists, else `false`.\n     */\n    function baseHas(object, key) {\n      return object != null && hasOwnProperty.call(object, key);\n    }\n\n    /**\n     * The base implementation of `_.hasIn` without support for deep paths.\n     *\n     * @private\n     * @param {Object} [object] The object to query.\n     * @param {Array|string} key The key to check.\n     * @returns {boolean} Returns `true` if `key` exists, else `false`.\n     */\n    function baseHasIn(object, key) {\n      return object != null && key in Object(object);\n    }\n\n    /**\n     * The base implementation of `_.inRange` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {number} number The number to check.\n     * @param {number} start The start of the range.\n     * @param {number} end The end of the range.\n     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.\n     */\n    function baseInRange(number, start, end) {\n      return number >= nativeMin(start, end) && number < nativeMax(start, end);\n    }\n\n    /**\n     * The base implementation of methods like `_.intersection`, without support\n     * for iteratee shorthands, that accepts an array of arrays to inspect.\n     *\n     * @private\n     * @param {Array} arrays The arrays to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of shared values.\n     */\n    function baseIntersection(arrays, iteratee, comparator) {\n      var includes = comparator ? arrayIncludesWith : arrayIncludes,\n          length = arrays[0].length,\n          othLength = arrays.length,\n          othIndex = othLength,\n          caches = Array(othLength),\n          maxLength = Infinity,\n          result = [];\n\n      while (othIndex--) {\n        var array = arrays[othIndex];\n        if (othIndex && iteratee) {\n          array = arrayMap(array, baseUnary(iteratee));\n        }\n        maxLength = nativeMin(array.length, maxLength);\n        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))\n          ? new SetCache(othIndex && array)\n          : undefined;\n      }\n      array = arrays[0];\n\n      var index = -1,\n          seen = caches[0];\n\n      outer:\n      while (++index < length && result.length < maxLength) {\n        var value = array[index],\n            computed = iteratee ? iteratee(value) : value;\n\n        value = (comparator || value !== 0) ? value : 0;\n        if (!(seen\n              ? cacheHas(seen, computed)\n              : includes(result, computed, comparator)\n            )) {\n          othIndex = othLength;\n          while (--othIndex) {\n            var cache = caches[othIndex];\n            if (!(cache\n                  ? cacheHas(cache, computed)\n                  : includes(arrays[othIndex], computed, comparator))\n                ) {\n              continue outer;\n            }\n          }\n          if (seen) {\n            seen.push(computed);\n          }\n          result.push(value);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.invert` and `_.invertBy` which inverts\n     * `object` with values transformed by `iteratee` and set by `setter`.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} setter The function to set `accumulator` values.\n     * @param {Function} iteratee The iteratee to transform values.\n     * @param {Object} accumulator The initial inverted object.\n     * @returns {Function} Returns `accumulator`.\n     */\n    function baseInverter(object, setter, iteratee, accumulator) {\n      baseForOwn(object, function(value, key, object) {\n        setter(accumulator, iteratee(value), key, object);\n      });\n      return accumulator;\n    }\n\n    /**\n     * The base implementation of `_.invoke` without support for individual\n     * method arguments.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the method to invoke.\n     * @param {Array} args The arguments to invoke the method with.\n     * @returns {*} Returns the result of the invoked method.\n     */\n    function baseInvoke(object, path, args) {\n      if (!isKey(path, object)) {\n        path = castPath(path);\n        object = parent(object, path);\n        path = last(path);\n      }\n      var func = object == null ? object : object[toKey(path)];\n      return func == null ? undefined : apply(func, object, args);\n    }\n\n    /**\n     * The base implementation of `_.isArguments`.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n     */\n    function baseIsArguments(value) {\n      return isObjectLike(value) && baseGetTag(value) == argsTag;\n    }\n\n    /**\n     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.\n     */\n    function baseIsArrayBuffer(value) {\n      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;\n    }\n\n    /**\n     * The base implementation of `_.isDate` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.\n     */\n    function baseIsDate(value) {\n      return isObjectLike(value) && baseGetTag(value) == dateTag;\n    }\n\n    /**\n     * The base implementation of `_.isEqual` which supports partial comparisons\n     * and tracks traversed objects.\n     *\n     * @private\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @param {Function} [customizer] The function to customize comparisons.\n     * @param {boolean} [bitmask] The bitmask of comparison flags.\n     *  The bitmask may be composed of the following flags:\n     *     1 - Unordered comparison\n     *     2 - Partial comparison\n     * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n     */\n    function baseIsEqual(value, other, customizer, bitmask, stack) {\n      if (value === other) {\n        return true;\n      }\n      if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {\n        return value !== value && other !== other;\n      }\n      return baseIsEqualDeep(value, other, baseIsEqual, customizer, bitmask, stack);\n    }\n\n    /**\n     * A specialized version of `baseIsEqual` for arrays and objects which performs\n     * deep comparisons and tracks traversed objects enabling objects with circular\n     * references to be compared.\n     *\n     * @private\n     * @param {Object} object The object to compare.\n     * @param {Object} other The other object to compare.\n     * @param {Function} equalFunc The function to determine equivalents of values.\n     * @param {Function} [customizer] The function to customize comparisons.\n     * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual`\n     *  for more details.\n     * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n     */\n    function baseIsEqualDeep(object, other, equalFunc, customizer, bitmask, stack) {\n      var objIsArr = isArray(object),\n          othIsArr = isArray(other),\n          objTag = arrayTag,\n          othTag = arrayTag;\n\n      if (!objIsArr) {\n        objTag = getTag(object);\n        objTag = objTag == argsTag ? objectTag : objTag;\n      }\n      if (!othIsArr) {\n        othTag = getTag(other);\n        othTag = othTag == argsTag ? objectTag : othTag;\n      }\n      var objIsObj = objTag == objectTag,\n          othIsObj = othTag == objectTag,\n          isSameTag = objTag == othTag;\n\n      if (isSameTag && isBuffer(object)) {\n        if (!isBuffer(other)) {\n          return false;\n        }\n        objIsArr = true;\n        objIsObj = false;\n      }\n      if (isSameTag && !objIsObj) {\n        stack || (stack = new Stack);\n        return (objIsArr || isTypedArray(object))\n          ? equalArrays(object, other, equalFunc, customizer, bitmask, stack)\n          : equalByTag(object, other, objTag, equalFunc, customizer, bitmask, stack);\n      }\n      if (!(bitmask & PARTIAL_COMPARE_FLAG)) {\n        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n        if (objIsWrapped || othIsWrapped) {\n          var objUnwrapped = objIsWrapped ? object.value() : object,\n              othUnwrapped = othIsWrapped ? other.value() : other;\n\n          stack || (stack = new Stack);\n          return equalFunc(objUnwrapped, othUnwrapped, customizer, bitmask, stack);\n        }\n      }\n      if (!isSameTag) {\n        return false;\n      }\n      stack || (stack = new Stack);\n      return equalObjects(object, other, equalFunc, customizer, bitmask, stack);\n    }\n\n    /**\n     * The base implementation of `_.isMap` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a map, else `false`.\n     */\n    function baseIsMap(value) {\n      return isObjectLike(value) && getTag(value) == mapTag;\n    }\n\n    /**\n     * The base implementation of `_.isMatch` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property values to match.\n     * @param {Array} matchData The property names, values, and compare flags to match.\n     * @param {Function} [customizer] The function to customize comparisons.\n     * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n     */\n    function baseIsMatch(object, source, matchData, customizer) {\n      var index = matchData.length,\n          length = index,\n          noCustomizer = !customizer;\n\n      if (object == null) {\n        return !length;\n      }\n      object = Object(object);\n      while (index--) {\n        var data = matchData[index];\n        if ((noCustomizer && data[2])\n              ? data[1] !== object[data[0]]\n              : !(data[0] in object)\n            ) {\n          return false;\n        }\n      }\n      while (++index < length) {\n        data = matchData[index];\n        var key = data[0],\n            objValue = object[key],\n            srcValue = data[1];\n\n        if (noCustomizer && data[2]) {\n          if (objValue === undefined && !(key in object)) {\n            return false;\n          }\n        } else {\n          var stack = new Stack;\n          if (customizer) {\n            var result = customizer(objValue, srcValue, key, object, source, stack);\n          }\n          if (!(result === undefined\n                ? baseIsEqual(srcValue, objValue, customizer, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG, stack)\n                : result\n              )) {\n            return false;\n          }\n        }\n      }\n      return true;\n    }\n\n    /**\n     * The base implementation of `_.isNative` without bad shim checks.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a native function,\n     *  else `false`.\n     */\n    function baseIsNative(value) {\n      if (!isObject(value) || isMasked(value)) {\n        return false;\n      }\n      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n      return pattern.test(toSource(value));\n    }\n\n    /**\n     * The base implementation of `_.isRegExp` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.\n     */\n    function baseIsRegExp(value) {\n      return isObjectLike(value) && baseGetTag(value) == regexpTag;\n    }\n\n    /**\n     * The base implementation of `_.isSet` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n     */\n    function baseIsSet(value) {\n      return isObjectLike(value) && getTag(value) == setTag;\n    }\n\n    /**\n     * The base implementation of `_.isTypedArray` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n     */\n    function baseIsTypedArray(value) {\n      return isObjectLike(value) &&\n        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n    }\n\n    /**\n     * The base implementation of `_.iteratee`.\n     *\n     * @private\n     * @param {*} [value=_.identity] The value to convert to an iteratee.\n     * @returns {Function} Returns the iteratee.\n     */\n    function baseIteratee(value) {\n      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.\n      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.\n      if (typeof value == 'function') {\n        return value;\n      }\n      if (value == null) {\n        return identity;\n      }\n      if (typeof value == 'object') {\n        return isArray(value)\n          ? baseMatchesProperty(value[0], value[1])\n          : baseMatches(value);\n      }\n      return property(value);\n    }\n\n    /**\n     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     */\n    function baseKeys(object) {\n      if (!isPrototype(object)) {\n        return nativeKeys(object);\n      }\n      var result = [];\n      for (var key in Object(object)) {\n        if (hasOwnProperty.call(object, key) && key != 'constructor') {\n          result.push(key);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     */\n    function baseKeysIn(object) {\n      if (!isObject(object)) {\n        return nativeKeysIn(object);\n      }\n      var isProto = isPrototype(object),\n          result = [];\n\n      for (var key in object) {\n        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {\n          result.push(key);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.lt` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is less than `other`,\n     *  else `false`.\n     */\n    function baseLt(value, other) {\n      return value < other;\n    }\n\n    /**\n     * The base implementation of `_.map` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Array} Returns the new mapped array.\n     */\n    function baseMap(collection, iteratee) {\n      var index = -1,\n          result = isArrayLike(collection) ? Array(collection.length) : [];\n\n      baseEach(collection, function(value, key, collection) {\n        result[++index] = iteratee(value, key, collection);\n      });\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.matches` which doesn't clone `source`.\n     *\n     * @private\n     * @param {Object} source The object of property values to match.\n     * @returns {Function} Returns the new spec function.\n     */\n    function baseMatches(source) {\n      var matchData = getMatchData(source);\n      if (matchData.length == 1 && matchData[0][2]) {\n        return matchesStrictComparable(matchData[0][0], matchData[0][1]);\n      }\n      return function(object) {\n        return object === source || baseIsMatch(object, source, matchData);\n      };\n    }\n\n    /**\n     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.\n     *\n     * @private\n     * @param {string} path The path of the property to get.\n     * @param {*} srcValue The value to match.\n     * @returns {Function} Returns the new spec function.\n     */\n    function baseMatchesProperty(path, srcValue) {\n      if (isKey(path) && isStrictComparable(srcValue)) {\n        return matchesStrictComparable(toKey(path), srcValue);\n      }\n      return function(object) {\n        var objValue = get(object, path);\n        return (objValue === undefined && objValue === srcValue)\n          ? hasIn(object, path)\n          : baseIsEqual(srcValue, objValue, undefined, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG);\n      };\n    }\n\n    /**\n     * The base implementation of `_.merge` without support for multiple sources.\n     *\n     * @private\n     * @param {Object} object The destination object.\n     * @param {Object} source The source object.\n     * @param {number} srcIndex The index of `source`.\n     * @param {Function} [customizer] The function to customize merged values.\n     * @param {Object} [stack] Tracks traversed source values and their merged\n     *  counterparts.\n     */\n    function baseMerge(object, source, srcIndex, customizer, stack) {\n      if (object === source) {\n        return;\n      }\n      baseFor(source, function(srcValue, key) {\n        if (isObject(srcValue)) {\n          stack || (stack = new Stack);\n          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);\n        }\n        else {\n          var newValue = customizer\n            ? customizer(object[key], srcValue, (key + ''), object, source, stack)\n            : undefined;\n\n          if (newValue === undefined) {\n            newValue = srcValue;\n          }\n          assignMergeValue(object, key, newValue);\n        }\n      }, keysIn);\n    }\n\n    /**\n     * A specialized version of `baseMerge` for arrays and objects which performs\n     * deep merges and tracks traversed objects enabling objects with circular\n     * references to be merged.\n     *\n     * @private\n     * @param {Object} object The destination object.\n     * @param {Object} source The source object.\n     * @param {string} key The key of the value to merge.\n     * @param {number} srcIndex The index of `source`.\n     * @param {Function} mergeFunc The function to merge values.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @param {Object} [stack] Tracks traversed source values and their merged\n     *  counterparts.\n     */\n    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {\n      var objValue = object[key],\n          srcValue = source[key],\n          stacked = stack.get(srcValue);\n\n      if (stacked) {\n        assignMergeValue(object, key, stacked);\n        return;\n      }\n      var newValue = customizer\n        ? customizer(objValue, srcValue, (key + ''), object, source, stack)\n        : undefined;\n\n      var isCommon = newValue === undefined;\n\n      if (isCommon) {\n        var isArr = isArray(srcValue),\n            isBuff = !isArr && isBuffer(srcValue),\n            isTyped = !isArr && !isBuff && isTypedArray(srcValue);\n\n        newValue = srcValue;\n        if (isArr || isBuff || isTyped) {\n          if (isArray(objValue)) {\n            newValue = objValue;\n          }\n          else if (isArrayLikeObject(objValue)) {\n            newValue = copyArray(objValue);\n          }\n          else if (isBuff) {\n            isCommon = false;\n            newValue = cloneBuffer(srcValue, true);\n          }\n          else if (isTyped) {\n            isCommon = false;\n            newValue = cloneTypedArray(srcValue, true);\n          }\n          else {\n            newValue = [];\n          }\n        }\n        else if (isPlainObject(srcValue) || isArguments(srcValue)) {\n          newValue = objValue;\n          if (isArguments(objValue)) {\n            newValue = toPlainObject(objValue);\n          }\n          else if (!isObject(objValue) || (srcIndex && isFunction(objValue))) {\n            newValue = initCloneObject(srcValue);\n          }\n        }\n        else {\n          isCommon = false;\n        }\n      }\n      if (isCommon) {\n        // Recursively merge objects and arrays (susceptible to call stack limits).\n        stack.set(srcValue, newValue);\n        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);\n        stack['delete'](srcValue);\n      }\n      assignMergeValue(object, key, newValue);\n    }\n\n    /**\n     * The base implementation of `_.nth` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {Array} array The array to query.\n     * @param {number} n The index of the element to return.\n     * @returns {*} Returns the nth element of `array`.\n     */\n    function baseNth(array, n) {\n      var length = array.length;\n      if (!length) {\n        return;\n      }\n      n += n < 0 ? length : 0;\n      return isIndex(n, length) ? array[n] : undefined;\n    }\n\n    /**\n     * The base implementation of `_.orderBy` without param guards.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.\n     * @param {string[]} orders The sort orders of `iteratees`.\n     * @returns {Array} Returns the new sorted array.\n     */\n    function baseOrderBy(collection, iteratees, orders) {\n      var index = -1;\n      iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(getIteratee()));\n\n      var result = baseMap(collection, function(value, key, collection) {\n        var criteria = arrayMap(iteratees, function(iteratee) {\n          return iteratee(value);\n        });\n        return { 'criteria': criteria, 'index': ++index, 'value': value };\n      });\n\n      return baseSortBy(result, function(object, other) {\n        return compareMultiple(object, other, orders);\n      });\n    }\n\n    /**\n     * The base implementation of `_.pick` without support for individual\n     * property identifiers.\n     *\n     * @private\n     * @param {Object} object The source object.\n     * @param {string[]} props The property identifiers to pick.\n     * @returns {Object} Returns the new object.\n     */\n    function basePick(object, props) {\n      object = Object(object);\n      return basePickBy(object, props, function(value, key) {\n        return key in object;\n      });\n    }\n\n    /**\n     * The base implementation of  `_.pickBy` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Object} object The source object.\n     * @param {string[]} props The property identifiers to pick from.\n     * @param {Function} predicate The function invoked per property.\n     * @returns {Object} Returns the new object.\n     */\n    function basePickBy(object, props, predicate) {\n      var index = -1,\n          length = props.length,\n          result = {};\n\n      while (++index < length) {\n        var key = props[index],\n            value = object[key];\n\n        if (predicate(value, key)) {\n          baseAssignValue(result, key, value);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * A specialized version of `baseProperty` which supports deep paths.\n     *\n     * @private\n     * @param {Array|string} path The path of the property to get.\n     * @returns {Function} Returns the new accessor function.\n     */\n    function basePropertyDeep(path) {\n      return function(object) {\n        return baseGet(object, path);\n      };\n    }\n\n    /**\n     * The base implementation of `_.pullAllBy` without support for iteratee\n     * shorthands.\n     *\n     * @private\n     * @param {Array} array The array to modify.\n     * @param {Array} values The values to remove.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns `array`.\n     */\n    function basePullAll(array, values, iteratee, comparator) {\n      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,\n          index = -1,\n          length = values.length,\n          seen = array;\n\n      if (array === values) {\n        values = copyArray(values);\n      }\n      if (iteratee) {\n        seen = arrayMap(array, baseUnary(iteratee));\n      }\n      while (++index < length) {\n        var fromIndex = 0,\n            value = values[index],\n            computed = iteratee ? iteratee(value) : value;\n\n        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {\n          if (seen !== array) {\n            splice.call(seen, fromIndex, 1);\n          }\n          splice.call(array, fromIndex, 1);\n        }\n      }\n      return array;\n    }\n\n    /**\n     * The base implementation of `_.pullAt` without support for individual\n     * indexes or capturing the removed elements.\n     *\n     * @private\n     * @param {Array} array The array to modify.\n     * @param {number[]} indexes The indexes of elements to remove.\n     * @returns {Array} Returns `array`.\n     */\n    function basePullAt(array, indexes) {\n      var length = array ? indexes.length : 0,\n          lastIndex = length - 1;\n\n      while (length--) {\n        var index = indexes[length];\n        if (length == lastIndex || index !== previous) {\n          var previous = index;\n          if (isIndex(index)) {\n            splice.call(array, index, 1);\n          }\n          else if (!isKey(index, array)) {\n            var path = castPath(index),\n                object = parent(array, path);\n\n            if (object != null) {\n              delete object[toKey(last(path))];\n            }\n          }\n          else {\n            delete array[toKey(index)];\n          }\n        }\n      }\n      return array;\n    }\n\n    /**\n     * The base implementation of `_.random` without support for returning\n     * floating-point numbers.\n     *\n     * @private\n     * @param {number} lower The lower bound.\n     * @param {number} upper The upper bound.\n     * @returns {number} Returns the random number.\n     */\n    function baseRandom(lower, upper) {\n      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));\n    }\n\n    /**\n     * The base implementation of `_.range` and `_.rangeRight` which doesn't\n     * coerce arguments.\n     *\n     * @private\n     * @param {number} start The start of the range.\n     * @param {number} end The end of the range.\n     * @param {number} step The value to increment or decrement by.\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Array} Returns the range of numbers.\n     */\n    function baseRange(start, end, step, fromRight) {\n      var index = -1,\n          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),\n          result = Array(length);\n\n      while (length--) {\n        result[fromRight ? length : ++index] = start;\n        start += step;\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.repeat` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {string} string The string to repeat.\n     * @param {number} n The number of times to repeat the string.\n     * @returns {string} Returns the repeated string.\n     */\n    function baseRepeat(string, n) {\n      var result = '';\n      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {\n        return result;\n      }\n      // Leverage the exponentiation by squaring algorithm for a faster repeat.\n      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.\n      do {\n        if (n % 2) {\n          result += string;\n        }\n        n = nativeFloor(n / 2);\n        if (n) {\n          string += string;\n        }\n      } while (n);\n\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.rest` which doesn't validate or coerce arguments.\n     *\n     * @private\n     * @param {Function} func The function to apply a rest parameter to.\n     * @param {number} [start=func.length-1] The start position of the rest parameter.\n     * @returns {Function} Returns the new function.\n     */\n    function baseRest(func, start) {\n      return setToString(overRest(func, start, identity), func + '');\n    }\n\n    /**\n     * The base implementation of `_.sample`.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to sample.\n     * @returns {*} Returns the random element.\n     */\n    function baseSample(collection) {\n      return arraySample(values(collection));\n    }\n\n    /**\n     * The base implementation of `_.sampleSize` without param guards.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to sample.\n     * @param {number} n The number of elements to sample.\n     * @returns {Array} Returns the random elements.\n     */\n    function baseSampleSize(collection, n) {\n      var array = values(collection);\n      return shuffleSelf(array, baseClamp(n, 0, array.length));\n    }\n\n    /**\n     * The base implementation of `_.set`.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {*} value The value to set.\n     * @param {Function} [customizer] The function to customize path creation.\n     * @returns {Object} Returns `object`.\n     */\n    function baseSet(object, path, value, customizer) {\n      if (!isObject(object)) {\n        return object;\n      }\n      path = isKey(path, object) ? [path] : castPath(path);\n\n      var index = -1,\n          length = path.length,\n          lastIndex = length - 1,\n          nested = object;\n\n      while (nested != null && ++index < length) {\n        var key = toKey(path[index]),\n            newValue = value;\n\n        if (index != lastIndex) {\n          var objValue = nested[key];\n          newValue = customizer ? customizer(objValue, key, nested) : undefined;\n          if (newValue === undefined) {\n            newValue = isObject(objValue)\n              ? objValue\n              : (isIndex(path[index + 1]) ? [] : {});\n          }\n        }\n        assignValue(nested, key, newValue);\n        nested = nested[key];\n      }\n      return object;\n    }\n\n    /**\n     * The base implementation of `setData` without support for hot loop shorting.\n     *\n     * @private\n     * @param {Function} func The function to associate metadata with.\n     * @param {*} data The metadata.\n     * @returns {Function} Returns `func`.\n     */\n    var baseSetData = !metaMap ? identity : function(func, data) {\n      metaMap.set(func, data);\n      return func;\n    };\n\n    /**\n     * The base implementation of `setToString` without support for hot loop shorting.\n     *\n     * @private\n     * @param {Function} func The function to modify.\n     * @param {Function} string The `toString` result.\n     * @returns {Function} Returns `func`.\n     */\n    var baseSetToString = !defineProperty ? identity : function(func, string) {\n      return defineProperty(func, 'toString', {\n        'configurable': true,\n        'enumerable': false,\n        'value': constant(string),\n        'writable': true\n      });\n    };\n\n    /**\n     * The base implementation of `_.shuffle`.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to shuffle.\n     * @returns {Array} Returns the new shuffled array.\n     */\n    function baseShuffle(collection) {\n      return shuffleSelf(values(collection));\n    }\n\n    /**\n     * The base implementation of `_.slice` without an iteratee call guard.\n     *\n     * @private\n     * @param {Array} array The array to slice.\n     * @param {number} [start=0] The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns the slice of `array`.\n     */\n    function baseSlice(array, start, end) {\n      var index = -1,\n          length = array.length;\n\n      if (start < 0) {\n        start = -start > length ? 0 : (length + start);\n      }\n      end = end > length ? length : end;\n      if (end < 0) {\n        end += length;\n      }\n      length = start > end ? 0 : ((end - start) >>> 0);\n      start >>>= 0;\n\n      var result = Array(length);\n      while (++index < length) {\n        result[index] = array[index + start];\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.some` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} predicate The function invoked per iteration.\n     * @returns {boolean} Returns `true` if any element passes the predicate check,\n     *  else `false`.\n     */\n    function baseSome(collection, predicate) {\n      var result;\n\n      baseEach(collection, function(value, index, collection) {\n        result = predicate(value, index, collection);\n        return !result;\n      });\n      return !!result;\n    }\n\n    /**\n     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which\n     * performs a binary search of `array` to determine the index at which `value`\n     * should be inserted into `array` in order to maintain its sort order.\n     *\n     * @private\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @param {boolean} [retHighest] Specify returning the highest qualified index.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     */\n    function baseSortedIndex(array, value, retHighest) {\n      var low = 0,\n          high = array == null ? low : array.length;\n\n      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {\n        while (low < high) {\n          var mid = (low + high) >>> 1,\n              computed = array[mid];\n\n          if (computed !== null && !isSymbol(computed) &&\n              (retHighest ? (computed <= value) : (computed < value))) {\n            low = mid + 1;\n          } else {\n            high = mid;\n          }\n        }\n        return high;\n      }\n      return baseSortedIndexBy(array, value, identity, retHighest);\n    }\n\n    /**\n     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`\n     * which invokes `iteratee` for `value` and each element of `array` to compute\n     * their sort ranking. The iteratee is invoked with one argument; (value).\n     *\n     * @private\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @param {Function} iteratee The iteratee invoked per element.\n     * @param {boolean} [retHighest] Specify returning the highest qualified index.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     */\n    function baseSortedIndexBy(array, value, iteratee, retHighest) {\n      value = iteratee(value);\n\n      var low = 0,\n          high = array == null ? 0 : array.length,\n          valIsNaN = value !== value,\n          valIsNull = value === null,\n          valIsSymbol = isSymbol(value),\n          valIsUndefined = value === undefined;\n\n      while (low < high) {\n        var mid = nativeFloor((low + high) / 2),\n            computed = iteratee(array[mid]),\n            othIsDefined = computed !== undefined,\n            othIsNull = computed === null,\n            othIsReflexive = computed === computed,\n            othIsSymbol = isSymbol(computed);\n\n        if (valIsNaN) {\n          var setLow = retHighest || othIsReflexive;\n        } else if (valIsUndefined) {\n          setLow = othIsReflexive && (retHighest || othIsDefined);\n        } else if (valIsNull) {\n          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);\n        } else if (valIsSymbol) {\n          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);\n        } else if (othIsNull || othIsSymbol) {\n          setLow = false;\n        } else {\n          setLow = retHighest ? (computed <= value) : (computed < value);\n        }\n        if (setLow) {\n          low = mid + 1;\n        } else {\n          high = mid;\n        }\n      }\n      return nativeMin(high, MAX_ARRAY_INDEX);\n    }\n\n    /**\n     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without\n     * support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     */\n    function baseSortedUniq(array, iteratee) {\n      var index = -1,\n          length = array.length,\n          resIndex = 0,\n          result = [];\n\n      while (++index < length) {\n        var value = array[index],\n            computed = iteratee ? iteratee(value) : value;\n\n        if (!index || !eq(computed, seen)) {\n          var seen = computed;\n          result[resIndex++] = value === 0 ? 0 : value;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.toNumber` which doesn't ensure correct\n     * conversions of binary, hexadecimal, or octal string values.\n     *\n     * @private\n     * @param {*} value The value to process.\n     * @returns {number} Returns the number.\n     */\n    function baseToNumber(value) {\n      if (typeof value == 'number') {\n        return value;\n      }\n      if (isSymbol(value)) {\n        return NAN;\n      }\n      return +value;\n    }\n\n    /**\n     * The base implementation of `_.toString` which doesn't convert nullish\n     * values to empty strings.\n     *\n     * @private\n     * @param {*} value The value to process.\n     * @returns {string} Returns the string.\n     */\n    function baseToString(value) {\n      // Exit early for strings to avoid a performance hit in some environments.\n      if (typeof value == 'string') {\n        return value;\n      }\n      if (isArray(value)) {\n        // Recursively convert values (susceptible to call stack limits).\n        return arrayMap(value, baseToString) + '';\n      }\n      if (isSymbol(value)) {\n        return symbolToString ? symbolToString.call(value) : '';\n      }\n      var result = (value + '');\n      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n    }\n\n    /**\n     * The base implementation of `_.uniqBy` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     */\n    function baseUniq(array, iteratee, comparator) {\n      var index = -1,\n          includes = arrayIncludes,\n          length = array.length,\n          isCommon = true,\n          result = [],\n          seen = result;\n\n      if (comparator) {\n        isCommon = false;\n        includes = arrayIncludesWith;\n      }\n      else if (length >= LARGE_ARRAY_SIZE) {\n        var set = iteratee ? null : createSet(array);\n        if (set) {\n          return setToArray(set);\n        }\n        isCommon = false;\n        includes = cacheHas;\n        seen = new SetCache;\n      }\n      else {\n        seen = iteratee ? [] : result;\n      }\n      outer:\n      while (++index < length) {\n        var value = array[index],\n            computed = iteratee ? iteratee(value) : value;\n\n        value = (comparator || value !== 0) ? value : 0;\n        if (isCommon && computed === computed) {\n          var seenIndex = seen.length;\n          while (seenIndex--) {\n            if (seen[seenIndex] === computed) {\n              continue outer;\n            }\n          }\n          if (iteratee) {\n            seen.push(computed);\n          }\n          result.push(value);\n        }\n        else if (!includes(seen, computed, comparator)) {\n          if (seen !== result) {\n            seen.push(computed);\n          }\n          result.push(value);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.unset`.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to unset.\n     * @returns {boolean} Returns `true` if the property is deleted, else `false`.\n     */\n    function baseUnset(object, path) {\n      path = isKey(path, object) ? [path] : castPath(path);\n      object = parent(object, path);\n\n      var key = toKey(last(path));\n      return !(object != null && hasOwnProperty.call(object, key)) || delete object[key];\n    }\n\n    /**\n     * The base implementation of `_.update`.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to update.\n     * @param {Function} updater The function to produce the updated value.\n     * @param {Function} [customizer] The function to customize path creation.\n     * @returns {Object} Returns `object`.\n     */\n    function baseUpdate(object, path, updater, customizer) {\n      return baseSet(object, path, updater(baseGet(object, path)), customizer);\n    }\n\n    /**\n     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`\n     * without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to query.\n     * @param {Function} predicate The function invoked per iteration.\n     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Array} Returns the slice of `array`.\n     */\n    function baseWhile(array, predicate, isDrop, fromRight) {\n      var length = array.length,\n          index = fromRight ? length : -1;\n\n      while ((fromRight ? index-- : ++index < length) &&\n        predicate(array[index], index, array)) {}\n\n      return isDrop\n        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))\n        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));\n    }\n\n    /**\n     * The base implementation of `wrapperValue` which returns the result of\n     * performing a sequence of actions on the unwrapped `value`, where each\n     * successive action is supplied the return value of the previous.\n     *\n     * @private\n     * @param {*} value The unwrapped value.\n     * @param {Array} actions Actions to perform to resolve the unwrapped value.\n     * @returns {*} Returns the resolved value.\n     */\n    function baseWrapperValue(value, actions) {\n      var result = value;\n      if (result instanceof LazyWrapper) {\n        result = result.value();\n      }\n      return arrayReduce(actions, function(result, action) {\n        return action.func.apply(action.thisArg, arrayPush([result], action.args));\n      }, result);\n    }\n\n    /**\n     * The base implementation of methods like `_.xor`, without support for\n     * iteratee shorthands, that accepts an array of arrays to inspect.\n     *\n     * @private\n     * @param {Array} arrays The arrays to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of values.\n     */\n    function baseXor(arrays, iteratee, comparator) {\n      var length = arrays.length;\n      if (length < 2) {\n        return length ? baseUniq(arrays[0]) : [];\n      }\n      var index = -1,\n          result = Array(length);\n\n      while (++index < length) {\n        var array = arrays[index],\n            othIndex = -1;\n\n        while (++othIndex < length) {\n          if (othIndex != index) {\n            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);\n          }\n        }\n      }\n      return baseUniq(baseFlatten(result, 1), iteratee, comparator);\n    }\n\n    /**\n     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.\n     *\n     * @private\n     * @param {Array} props The property identifiers.\n     * @param {Array} values The property values.\n     * @param {Function} assignFunc The function to assign values.\n     * @returns {Object} Returns the new object.\n     */\n    function baseZipObject(props, values, assignFunc) {\n      var index = -1,\n          length = props.length,\n          valsLength = values.length,\n          result = {};\n\n      while (++index < length) {\n        var value = index < valsLength ? values[index] : undefined;\n        assignFunc(result, props[index], value);\n      }\n      return result;\n    }\n\n    /**\n     * Casts `value` to an empty array if it's not an array like object.\n     *\n     * @private\n     * @param {*} value The value to inspect.\n     * @returns {Array|Object} Returns the cast array-like object.\n     */\n    function castArrayLikeObject(value) {\n      return isArrayLikeObject(value) ? value : [];\n    }\n\n    /**\n     * Casts `value` to `identity` if it's not a function.\n     *\n     * @private\n     * @param {*} value The value to inspect.\n     * @returns {Function} Returns cast function.\n     */\n    function castFunction(value) {\n      return typeof value == 'function' ? value : identity;\n    }\n\n    /**\n     * Casts `value` to a path array if it's not one.\n     *\n     * @private\n     * @param {*} value The value to inspect.\n     * @returns {Array} Returns the cast property path array.\n     */\n    function castPath(value) {\n      return isArray(value) ? value : stringToPath(value);\n    }\n\n    /**\n     * A `baseRest` alias which can be replaced with `identity` by module\n     * replacement plugins.\n     *\n     * @private\n     * @type {Function}\n     * @param {Function} func The function to apply a rest parameter to.\n     * @returns {Function} Returns the new function.\n     */\n    var castRest = baseRest;\n\n    /**\n     * Casts `array` to a slice if it's needed.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {number} start The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns the cast slice.\n     */\n    function castSlice(array, start, end) {\n      var length = array.length;\n      end = end === undefined ? length : end;\n      return (!start && end >= length) ? array : baseSlice(array, start, end);\n    }\n\n    /**\n     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).\n     *\n     * @private\n     * @param {number|Object} id The timer id or timeout object of the timer to clear.\n     */\n    var clearTimeout = ctxClearTimeout || function(id) {\n      return root.clearTimeout(id);\n    };\n\n    /**\n     * Creates a clone of  `buffer`.\n     *\n     * @private\n     * @param {Buffer} buffer The buffer to clone.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Buffer} Returns the cloned buffer.\n     */\n    function cloneBuffer(buffer, isDeep) {\n      if (isDeep) {\n        return buffer.slice();\n      }\n      var length = buffer.length,\n          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);\n\n      buffer.copy(result);\n      return result;\n    }\n\n    /**\n     * Creates a clone of `arrayBuffer`.\n     *\n     * @private\n     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n     * @returns {ArrayBuffer} Returns the cloned array buffer.\n     */\n    function cloneArrayBuffer(arrayBuffer) {\n      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n      new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n      return result;\n    }\n\n    /**\n     * Creates a clone of `dataView`.\n     *\n     * @private\n     * @param {Object} dataView The data view to clone.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Object} Returns the cloned data view.\n     */\n    function cloneDataView(dataView, isDeep) {\n      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n    }\n\n    /**\n     * Creates a clone of `map`.\n     *\n     * @private\n     * @param {Object} map The map to clone.\n     * @param {Function} cloneFunc The function to clone values.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Object} Returns the cloned map.\n     */\n    function cloneMap(map, isDeep, cloneFunc) {\n      var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);\n      return arrayReduce(array, addMapEntry, new map.constructor);\n    }\n\n    /**\n     * Creates a clone of `regexp`.\n     *\n     * @private\n     * @param {Object} regexp The regexp to clone.\n     * @returns {Object} Returns the cloned regexp.\n     */\n    function cloneRegExp(regexp) {\n      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n      result.lastIndex = regexp.lastIndex;\n      return result;\n    }\n\n    /**\n     * Creates a clone of `set`.\n     *\n     * @private\n     * @param {Object} set The set to clone.\n     * @param {Function} cloneFunc The function to clone values.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Object} Returns the cloned set.\n     */\n    function cloneSet(set, isDeep, cloneFunc) {\n      var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);\n      return arrayReduce(array, addSetEntry, new set.constructor);\n    }\n\n    /**\n     * Creates a clone of the `symbol` object.\n     *\n     * @private\n     * @param {Object} symbol The symbol object to clone.\n     * @returns {Object} Returns the cloned symbol object.\n     */\n    function cloneSymbol(symbol) {\n      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n    }\n\n    /**\n     * Creates a clone of `typedArray`.\n     *\n     * @private\n     * @param {Object} typedArray The typed array to clone.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Object} Returns the cloned typed array.\n     */\n    function cloneTypedArray(typedArray, isDeep) {\n      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n    }\n\n    /**\n     * Compares values to sort them in ascending order.\n     *\n     * @private\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {number} Returns the sort order indicator for `value`.\n     */\n    function compareAscending(value, other) {\n      if (value !== other) {\n        var valIsDefined = value !== undefined,\n            valIsNull = value === null,\n            valIsReflexive = value === value,\n            valIsSymbol = isSymbol(value);\n\n        var othIsDefined = other !== undefined,\n            othIsNull = other === null,\n            othIsReflexive = other === other,\n            othIsSymbol = isSymbol(other);\n\n        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||\n            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||\n            (valIsNull && othIsDefined && othIsReflexive) ||\n            (!valIsDefined && othIsReflexive) ||\n            !valIsReflexive) {\n          return 1;\n        }\n        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||\n            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||\n            (othIsNull && valIsDefined && valIsReflexive) ||\n            (!othIsDefined && valIsReflexive) ||\n            !othIsReflexive) {\n          return -1;\n        }\n      }\n      return 0;\n    }\n\n    /**\n     * Used by `_.orderBy` to compare multiple properties of a value to another\n     * and stable sort them.\n     *\n     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,\n     * specify an order of \"desc\" for descending or \"asc\" for ascending sort order\n     * of corresponding values.\n     *\n     * @private\n     * @param {Object} object The object to compare.\n     * @param {Object} other The other object to compare.\n     * @param {boolean[]|string[]} orders The order to sort by for each property.\n     * @returns {number} Returns the sort order indicator for `object`.\n     */\n    function compareMultiple(object, other, orders) {\n      var index = -1,\n          objCriteria = object.criteria,\n          othCriteria = other.criteria,\n          length = objCriteria.length,\n          ordersLength = orders.length;\n\n      while (++index < length) {\n        var result = compareAscending(objCriteria[index], othCriteria[index]);\n        if (result) {\n          if (index >= ordersLength) {\n            return result;\n          }\n          var order = orders[index];\n          return result * (order == 'desc' ? -1 : 1);\n        }\n      }\n      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications\n      // that causes it, under certain circumstances, to provide the same value for\n      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247\n      // for more details.\n      //\n      // This also ensures a stable sort in V8 and other engines.\n      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.\n      return object.index - other.index;\n    }\n\n    /**\n     * Creates an array that is the composition of partially applied arguments,\n     * placeholders, and provided arguments into a single array of arguments.\n     *\n     * @private\n     * @param {Array} args The provided arguments.\n     * @param {Array} partials The arguments to prepend to those provided.\n     * @param {Array} holders The `partials` placeholder indexes.\n     * @params {boolean} [isCurried] Specify composing for a curried function.\n     * @returns {Array} Returns the new array of composed arguments.\n     */\n    function composeArgs(args, partials, holders, isCurried) {\n      var argsIndex = -1,\n          argsLength = args.length,\n          holdersLength = holders.length,\n          leftIndex = -1,\n          leftLength = partials.length,\n          rangeLength = nativeMax(argsLength - holdersLength, 0),\n          result = Array(leftLength + rangeLength),\n          isUncurried = !isCurried;\n\n      while (++leftIndex < leftLength) {\n        result[leftIndex] = partials[leftIndex];\n      }\n      while (++argsIndex < holdersLength) {\n        if (isUncurried || argsIndex < argsLength) {\n          result[holders[argsIndex]] = args[argsIndex];\n        }\n      }\n      while (rangeLength--) {\n        result[leftIndex++] = args[argsIndex++];\n      }\n      return result;\n    }\n\n    /**\n     * This function is like `composeArgs` except that the arguments composition\n     * is tailored for `_.partialRight`.\n     *\n     * @private\n     * @param {Array} args The provided arguments.\n     * @param {Array} partials The arguments to append to those provided.\n     * @param {Array} holders The `partials` placeholder indexes.\n     * @params {boolean} [isCurried] Specify composing for a curried function.\n     * @returns {Array} Returns the new array of composed arguments.\n     */\n    function composeArgsRight(args, partials, holders, isCurried) {\n      var argsIndex = -1,\n          argsLength = args.length,\n          holdersIndex = -1,\n          holdersLength = holders.length,\n          rightIndex = -1,\n          rightLength = partials.length,\n          rangeLength = nativeMax(argsLength - holdersLength, 0),\n          result = Array(rangeLength + rightLength),\n          isUncurried = !isCurried;\n\n      while (++argsIndex < rangeLength) {\n        result[argsIndex] = args[argsIndex];\n      }\n      var offset = argsIndex;\n      while (++rightIndex < rightLength) {\n        result[offset + rightIndex] = partials[rightIndex];\n      }\n      while (++holdersIndex < holdersLength) {\n        if (isUncurried || argsIndex < argsLength) {\n          result[offset + holders[holdersIndex]] = args[argsIndex++];\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Copies the values of `source` to `array`.\n     *\n     * @private\n     * @param {Array} source The array to copy values from.\n     * @param {Array} [array=[]] The array to copy values to.\n     * @returns {Array} Returns `array`.\n     */\n    function copyArray(source, array) {\n      var index = -1,\n          length = source.length;\n\n      array || (array = Array(length));\n      while (++index < length) {\n        array[index] = source[index];\n      }\n      return array;\n    }\n\n    /**\n     * Copies properties of `source` to `object`.\n     *\n     * @private\n     * @param {Object} source The object to copy properties from.\n     * @param {Array} props The property identifiers to copy.\n     * @param {Object} [object={}] The object to copy properties to.\n     * @param {Function} [customizer] The function to customize copied values.\n     * @returns {Object} Returns `object`.\n     */\n    function copyObject(source, props, object, customizer) {\n      var isNew = !object;\n      object || (object = {});\n\n      var index = -1,\n          length = props.length;\n\n      while (++index < length) {\n        var key = props[index];\n\n        var newValue = customizer\n          ? customizer(object[key], source[key], key, object, source)\n          : undefined;\n\n        if (newValue === undefined) {\n          newValue = source[key];\n        }\n        if (isNew) {\n          baseAssignValue(object, key, newValue);\n        } else {\n          assignValue(object, key, newValue);\n        }\n      }\n      return object;\n    }\n\n    /**\n     * Copies own symbol properties of `source` to `object`.\n     *\n     * @private\n     * @param {Object} source The object to copy symbols from.\n     * @param {Object} [object={}] The object to copy symbols to.\n     * @returns {Object} Returns `object`.\n     */\n    function copySymbols(source, object) {\n      return copyObject(source, getSymbols(source), object);\n    }\n\n    /**\n     * Creates a function like `_.groupBy`.\n     *\n     * @private\n     * @param {Function} setter The function to set accumulator values.\n     * @param {Function} [initializer] The accumulator object initializer.\n     * @returns {Function} Returns the new aggregator function.\n     */\n    function createAggregator(setter, initializer) {\n      return function(collection, iteratee) {\n        var func = isArray(collection) ? arrayAggregator : baseAggregator,\n            accumulator = initializer ? initializer() : {};\n\n        return func(collection, setter, getIteratee(iteratee, 2), accumulator);\n      };\n    }\n\n    /**\n     * Creates a function like `_.assign`.\n     *\n     * @private\n     * @param {Function} assigner The function to assign values.\n     * @returns {Function} Returns the new assigner function.\n     */\n    function createAssigner(assigner) {\n      return baseRest(function(object, sources) {\n        var index = -1,\n            length = sources.length,\n            customizer = length > 1 ? sources[length - 1] : undefined,\n            guard = length > 2 ? sources[2] : undefined;\n\n        customizer = (assigner.length > 3 && typeof customizer == 'function')\n          ? (length--, customizer)\n          : undefined;\n\n        if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n          customizer = length < 3 ? undefined : customizer;\n          length = 1;\n        }\n        object = Object(object);\n        while (++index < length) {\n          var source = sources[index];\n          if (source) {\n            assigner(object, source, index, customizer);\n          }\n        }\n        return object;\n      });\n    }\n\n    /**\n     * Creates a `baseEach` or `baseEachRight` function.\n     *\n     * @private\n     * @param {Function} eachFunc The function to iterate over a collection.\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Function} Returns the new base function.\n     */\n    function createBaseEach(eachFunc, fromRight) {\n      return function(collection, iteratee) {\n        if (collection == null) {\n          return collection;\n        }\n        if (!isArrayLike(collection)) {\n          return eachFunc(collection, iteratee);\n        }\n        var length = collection.length,\n            index = fromRight ? length : -1,\n            iterable = Object(collection);\n\n        while ((fromRight ? index-- : ++index < length)) {\n          if (iteratee(iterable[index], index, iterable) === false) {\n            break;\n          }\n        }\n        return collection;\n      };\n    }\n\n    /**\n     * Creates a base function for methods like `_.forIn` and `_.forOwn`.\n     *\n     * @private\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Function} Returns the new base function.\n     */\n    function createBaseFor(fromRight) {\n      return function(object, iteratee, keysFunc) {\n        var index = -1,\n            iterable = Object(object),\n            props = keysFunc(object),\n            length = props.length;\n\n        while (length--) {\n          var key = props[fromRight ? length : ++index];\n          if (iteratee(iterable[key], key, iterable) === false) {\n            break;\n          }\n        }\n        return object;\n      };\n    }\n\n    /**\n     * Creates a function that wraps `func` to invoke it with the optional `this`\n     * binding of `thisArg`.\n     *\n     * @private\n     * @param {Function} func The function to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {*} [thisArg] The `this` binding of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createBind(func, bitmask, thisArg) {\n      var isBind = bitmask & BIND_FLAG,\n          Ctor = createCtor(func);\n\n      function wrapper() {\n        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\n        return fn.apply(isBind ? thisArg : this, arguments);\n      }\n      return wrapper;\n    }\n\n    /**\n     * Creates a function like `_.lowerFirst`.\n     *\n     * @private\n     * @param {string} methodName The name of the `String` case method to use.\n     * @returns {Function} Returns the new case function.\n     */\n    function createCaseFirst(methodName) {\n      return function(string) {\n        string = toString(string);\n\n        var strSymbols = hasUnicode(string)\n          ? stringToArray(string)\n          : undefined;\n\n        var chr = strSymbols\n          ? strSymbols[0]\n          : string.charAt(0);\n\n        var trailing = strSymbols\n          ? castSlice(strSymbols, 1).join('')\n          : string.slice(1);\n\n        return chr[methodName]() + trailing;\n      };\n    }\n\n    /**\n     * Creates a function like `_.camelCase`.\n     *\n     * @private\n     * @param {Function} callback The function to combine each word.\n     * @returns {Function} Returns the new compounder function.\n     */\n    function createCompounder(callback) {\n      return function(string) {\n        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');\n      };\n    }\n\n    /**\n     * Creates a function that produces an instance of `Ctor` regardless of\n     * whether it was invoked as part of a `new` expression or by `call` or `apply`.\n     *\n     * @private\n     * @param {Function} Ctor The constructor to wrap.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createCtor(Ctor) {\n      return function() {\n        // Use a `switch` statement to work with class constructors. See\n        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist\n        // for more details.\n        var args = arguments;\n        switch (args.length) {\n          case 0: return new Ctor;\n          case 1: return new Ctor(args[0]);\n          case 2: return new Ctor(args[0], args[1]);\n          case 3: return new Ctor(args[0], args[1], args[2]);\n          case 4: return new Ctor(args[0], args[1], args[2], args[3]);\n          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);\n          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);\n          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);\n        }\n        var thisBinding = baseCreate(Ctor.prototype),\n            result = Ctor.apply(thisBinding, args);\n\n        // Mimic the constructor's `return` behavior.\n        // See https://es5.github.io/#x13.2.2 for more details.\n        return isObject(result) ? result : thisBinding;\n      };\n    }\n\n    /**\n     * Creates a function that wraps `func` to enable currying.\n     *\n     * @private\n     * @param {Function} func The function to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {number} arity The arity of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createCurry(func, bitmask, arity) {\n      var Ctor = createCtor(func);\n\n      function wrapper() {\n        var length = arguments.length,\n            args = Array(length),\n            index = length,\n            placeholder = getHolder(wrapper);\n\n        while (index--) {\n          args[index] = arguments[index];\n        }\n        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)\n          ? []\n          : replaceHolders(args, placeholder);\n\n        length -= holders.length;\n        if (length < arity) {\n          return createRecurry(\n            func, bitmask, createHybrid, wrapper.placeholder, undefined,\n            args, holders, undefined, undefined, arity - length);\n        }\n        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\n        return apply(fn, this, args);\n      }\n      return wrapper;\n    }\n\n    /**\n     * Creates a `_.find` or `_.findLast` function.\n     *\n     * @private\n     * @param {Function} findIndexFunc The function to find the collection index.\n     * @returns {Function} Returns the new find function.\n     */\n    function createFind(findIndexFunc) {\n      return function(collection, predicate, fromIndex) {\n        var iterable = Object(collection);\n        if (!isArrayLike(collection)) {\n          var iteratee = getIteratee(predicate, 3);\n          collection = keys(collection);\n          predicate = function(key) { return iteratee(iterable[key], key, iterable); };\n        }\n        var index = findIndexFunc(collection, predicate, fromIndex);\n        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;\n      };\n    }\n\n    /**\n     * Creates a `_.flow` or `_.flowRight` function.\n     *\n     * @private\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Function} Returns the new flow function.\n     */\n    function createFlow(fromRight) {\n      return flatRest(function(funcs) {\n        var length = funcs.length,\n            index = length,\n            prereq = LodashWrapper.prototype.thru;\n\n        if (fromRight) {\n          funcs.reverse();\n        }\n        while (index--) {\n          var func = funcs[index];\n          if (typeof func != 'function') {\n            throw new TypeError(FUNC_ERROR_TEXT);\n          }\n          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {\n            var wrapper = new LodashWrapper([], true);\n          }\n        }\n        index = wrapper ? index : length;\n        while (++index < length) {\n          func = funcs[index];\n\n          var funcName = getFuncName(func),\n              data = funcName == 'wrapper' ? getData(func) : undefined;\n\n          if (data && isLaziable(data[0]) &&\n                data[1] == (ARY_FLAG | CURRY_FLAG | PARTIAL_FLAG | REARG_FLAG) &&\n                !data[4].length && data[9] == 1\n              ) {\n            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);\n          } else {\n            wrapper = (func.length == 1 && isLaziable(func))\n              ? wrapper[funcName]()\n              : wrapper.thru(func);\n          }\n        }\n        return function() {\n          var args = arguments,\n              value = args[0];\n\n          if (wrapper && args.length == 1 &&\n              isArray(value) && value.length >= LARGE_ARRAY_SIZE) {\n            return wrapper.plant(value).value();\n          }\n          var index = 0,\n              result = length ? funcs[index].apply(this, args) : value;\n\n          while (++index < length) {\n            result = funcs[index].call(this, result);\n          }\n          return result;\n        };\n      });\n    }\n\n    /**\n     * Creates a function that wraps `func` to invoke it with optional `this`\n     * binding of `thisArg`, partial application, and currying.\n     *\n     * @private\n     * @param {Function|string} func The function or method name to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {*} [thisArg] The `this` binding of `func`.\n     * @param {Array} [partials] The arguments to prepend to those provided to\n     *  the new function.\n     * @param {Array} [holders] The `partials` placeholder indexes.\n     * @param {Array} [partialsRight] The arguments to append to those provided\n     *  to the new function.\n     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.\n     * @param {Array} [argPos] The argument positions of the new function.\n     * @param {number} [ary] The arity cap of `func`.\n     * @param {number} [arity] The arity of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {\n      var isAry = bitmask & ARY_FLAG,\n          isBind = bitmask & BIND_FLAG,\n          isBindKey = bitmask & BIND_KEY_FLAG,\n          isCurried = bitmask & (CURRY_FLAG | CURRY_RIGHT_FLAG),\n          isFlip = bitmask & FLIP_FLAG,\n          Ctor = isBindKey ? undefined : createCtor(func);\n\n      function wrapper() {\n        var length = arguments.length,\n            args = Array(length),\n            index = length;\n\n        while (index--) {\n          args[index] = arguments[index];\n        }\n        if (isCurried) {\n          var placeholder = getHolder(wrapper),\n              holdersCount = countHolders(args, placeholder);\n        }\n        if (partials) {\n          args = composeArgs(args, partials, holders, isCurried);\n        }\n        if (partialsRight) {\n          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);\n        }\n        length -= holdersCount;\n        if (isCurried && length < arity) {\n          var newHolders = replaceHolders(args, placeholder);\n          return createRecurry(\n            func, bitmask, createHybrid, wrapper.placeholder, thisArg,\n            args, newHolders, argPos, ary, arity - length\n          );\n        }\n        var thisBinding = isBind ? thisArg : this,\n            fn = isBindKey ? thisBinding[func] : func;\n\n        length = args.length;\n        if (argPos) {\n          args = reorder(args, argPos);\n        } else if (isFlip && length > 1) {\n          args.reverse();\n        }\n        if (isAry && ary < length) {\n          args.length = ary;\n        }\n        if (this && this !== root && this instanceof wrapper) {\n          fn = Ctor || createCtor(fn);\n        }\n        return fn.apply(thisBinding, args);\n      }\n      return wrapper;\n    }\n\n    /**\n     * Creates a function like `_.invertBy`.\n     *\n     * @private\n     * @param {Function} setter The function to set accumulator values.\n     * @param {Function} toIteratee The function to resolve iteratees.\n     * @returns {Function} Returns the new inverter function.\n     */\n    function createInverter(setter, toIteratee) {\n      return function(object, iteratee) {\n        return baseInverter(object, setter, toIteratee(iteratee), {});\n      };\n    }\n\n    /**\n     * Creates a function that performs a mathematical operation on two values.\n     *\n     * @private\n     * @param {Function} operator The function to perform the operation.\n     * @param {number} [defaultValue] The value used for `undefined` arguments.\n     * @returns {Function} Returns the new mathematical operation function.\n     */\n    function createMathOperation(operator, defaultValue) {\n      return function(value, other) {\n        var result;\n        if (value === undefined && other === undefined) {\n          return defaultValue;\n        }\n        if (value !== undefined) {\n          result = value;\n        }\n        if (other !== undefined) {\n          if (result === undefined) {\n            return other;\n          }\n          if (typeof value == 'string' || typeof other == 'string') {\n            value = baseToString(value);\n            other = baseToString(other);\n          } else {\n            value = baseToNumber(value);\n            other = baseToNumber(other);\n          }\n          result = operator(value, other);\n        }\n        return result;\n      };\n    }\n\n    /**\n     * Creates a function like `_.over`.\n     *\n     * @private\n     * @param {Function} arrayFunc The function to iterate over iteratees.\n     * @returns {Function} Returns the new over function.\n     */\n    function createOver(arrayFunc) {\n      return flatRest(function(iteratees) {\n        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));\n        return baseRest(function(args) {\n          var thisArg = this;\n          return arrayFunc(iteratees, function(iteratee) {\n            return apply(iteratee, thisArg, args);\n          });\n        });\n      });\n    }\n\n    /**\n     * Creates the padding for `string` based on `length`. The `chars` string\n     * is truncated if the number of characters exceeds `length`.\n     *\n     * @private\n     * @param {number} length The padding length.\n     * @param {string} [chars=' '] The string used as padding.\n     * @returns {string} Returns the padding for `string`.\n     */\n    function createPadding(length, chars) {\n      chars = chars === undefined ? ' ' : baseToString(chars);\n\n      var charsLength = chars.length;\n      if (charsLength < 2) {\n        return charsLength ? baseRepeat(chars, length) : chars;\n      }\n      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));\n      return hasUnicode(chars)\n        ? castSlice(stringToArray(result), 0, length).join('')\n        : result.slice(0, length);\n    }\n\n    /**\n     * Creates a function that wraps `func` to invoke it with the `this` binding\n     * of `thisArg` and `partials` prepended to the arguments it receives.\n     *\n     * @private\n     * @param {Function} func The function to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {*} thisArg The `this` binding of `func`.\n     * @param {Array} partials The arguments to prepend to those provided to\n     *  the new function.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createPartial(func, bitmask, thisArg, partials) {\n      var isBind = bitmask & BIND_FLAG,\n          Ctor = createCtor(func);\n\n      function wrapper() {\n        var argsIndex = -1,\n            argsLength = arguments.length,\n            leftIndex = -1,\n            leftLength = partials.length,\n            args = Array(leftLength + argsLength),\n            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\n\n        while (++leftIndex < leftLength) {\n          args[leftIndex] = partials[leftIndex];\n        }\n        while (argsLength--) {\n          args[leftIndex++] = arguments[++argsIndex];\n        }\n        return apply(fn, isBind ? thisArg : this, args);\n      }\n      return wrapper;\n    }\n\n    /**\n     * Creates a `_.range` or `_.rangeRight` function.\n     *\n     * @private\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Function} Returns the new range function.\n     */\n    function createRange(fromRight) {\n      return function(start, end, step) {\n        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {\n          end = step = undefined;\n        }\n        // Ensure the sign of `-0` is preserved.\n        start = toFinite(start);\n        if (end === undefined) {\n          end = start;\n          start = 0;\n        } else {\n          end = toFinite(end);\n        }\n        step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);\n        return baseRange(start, end, step, fromRight);\n      };\n    }\n\n    /**\n     * Creates a function that performs a relational operation on two values.\n     *\n     * @private\n     * @param {Function} operator The function to perform the operation.\n     * @returns {Function} Returns the new relational operation function.\n     */\n    function createRelationalOperation(operator) {\n      return function(value, other) {\n        if (!(typeof value == 'string' && typeof other == 'string')) {\n          value = toNumber(value);\n          other = toNumber(other);\n        }\n        return operator(value, other);\n      };\n    }\n\n    /**\n     * Creates a function that wraps `func` to continue currying.\n     *\n     * @private\n     * @param {Function} func The function to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {Function} wrapFunc The function to create the `func` wrapper.\n     * @param {*} placeholder The placeholder value.\n     * @param {*} [thisArg] The `this` binding of `func`.\n     * @param {Array} [partials] The arguments to prepend to those provided to\n     *  the new function.\n     * @param {Array} [holders] The `partials` placeholder indexes.\n     * @param {Array} [argPos] The argument positions of the new function.\n     * @param {number} [ary] The arity cap of `func`.\n     * @param {number} [arity] The arity of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {\n      var isCurry = bitmask & CURRY_FLAG,\n          newHolders = isCurry ? holders : undefined,\n          newHoldersRight = isCurry ? undefined : holders,\n          newPartials = isCurry ? partials : undefined,\n          newPartialsRight = isCurry ? undefined : partials;\n\n      bitmask |= (isCurry ? PARTIAL_FLAG : PARTIAL_RIGHT_FLAG);\n      bitmask &= ~(isCurry ? PARTIAL_RIGHT_FLAG : PARTIAL_FLAG);\n\n      if (!(bitmask & CURRY_BOUND_FLAG)) {\n        bitmask &= ~(BIND_FLAG | BIND_KEY_FLAG);\n      }\n      var newData = [\n        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,\n        newHoldersRight, argPos, ary, arity\n      ];\n\n      var result = wrapFunc.apply(undefined, newData);\n      if (isLaziable(func)) {\n        setData(result, newData);\n      }\n      result.placeholder = placeholder;\n      return setWrapToString(result, func, bitmask);\n    }\n\n    /**\n     * Creates a function like `_.round`.\n     *\n     * @private\n     * @param {string} methodName The name of the `Math` method to use when rounding.\n     * @returns {Function} Returns the new round function.\n     */\n    function createRound(methodName) {\n      var func = Math[methodName];\n      return function(number, precision) {\n        number = toNumber(number);\n        precision = nativeMin(toInteger(precision), 292);\n        if (precision) {\n          // Shift with exponential notation to avoid floating-point issues.\n          // See [MDN](https://mdn.io/round#Examples) for more details.\n          var pair = (toString(number) + 'e').split('e'),\n              value = func(pair[0] + 'e' + (+pair[1] + precision));\n\n          pair = (toString(value) + 'e').split('e');\n          return +(pair[0] + 'e' + (+pair[1] - precision));\n        }\n        return func(number);\n      };\n    }\n\n    /**\n     * Creates a set object of `values`.\n     *\n     * @private\n     * @param {Array} values The values to add to the set.\n     * @returns {Object} Returns the new set.\n     */\n    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {\n      return new Set(values);\n    };\n\n    /**\n     * Creates a `_.toPairs` or `_.toPairsIn` function.\n     *\n     * @private\n     * @param {Function} keysFunc The function to get the keys of a given object.\n     * @returns {Function} Returns the new pairs function.\n     */\n    function createToPairs(keysFunc) {\n      return function(object) {\n        var tag = getTag(object);\n        if (tag == mapTag) {\n          return mapToArray(object);\n        }\n        if (tag == setTag) {\n          return setToPairs(object);\n        }\n        return baseToPairs(object, keysFunc(object));\n      };\n    }\n\n    /**\n     * Creates a function that either curries or invokes `func` with optional\n     * `this` binding and partially applied arguments.\n     *\n     * @private\n     * @param {Function|string} func The function or method name to wrap.\n     * @param {number} bitmask The bitmask flags.\n     *  The bitmask may be composed of the following flags:\n     *     1 - `_.bind`\n     *     2 - `_.bindKey`\n     *     4 - `_.curry` or `_.curryRight` of a bound function\n     *     8 - `_.curry`\n     *    16 - `_.curryRight`\n     *    32 - `_.partial`\n     *    64 - `_.partialRight`\n     *   128 - `_.rearg`\n     *   256 - `_.ary`\n     *   512 - `_.flip`\n     * @param {*} [thisArg] The `this` binding of `func`.\n     * @param {Array} [partials] The arguments to be partially applied.\n     * @param {Array} [holders] The `partials` placeholder indexes.\n     * @param {Array} [argPos] The argument positions of the new function.\n     * @param {number} [ary] The arity cap of `func`.\n     * @param {number} [arity] The arity of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {\n      var isBindKey = bitmask & BIND_KEY_FLAG;\n      if (!isBindKey && typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      var length = partials ? partials.length : 0;\n      if (!length) {\n        bitmask &= ~(PARTIAL_FLAG | PARTIAL_RIGHT_FLAG);\n        partials = holders = undefined;\n      }\n      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);\n      arity = arity === undefined ? arity : toInteger(arity);\n      length -= holders ? holders.length : 0;\n\n      if (bitmask & PARTIAL_RIGHT_FLAG) {\n        var partialsRight = partials,\n            holdersRight = holders;\n\n        partials = holders = undefined;\n      }\n      var data = isBindKey ? undefined : getData(func);\n\n      var newData = [\n        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,\n        argPos, ary, arity\n      ];\n\n      if (data) {\n        mergeData(newData, data);\n      }\n      func = newData[0];\n      bitmask = newData[1];\n      thisArg = newData[2];\n      partials = newData[3];\n      holders = newData[4];\n      arity = newData[9] = newData[9] == null\n        ? (isBindKey ? 0 : func.length)\n        : nativeMax(newData[9] - length, 0);\n\n      if (!arity && bitmask & (CURRY_FLAG | CURRY_RIGHT_FLAG)) {\n        bitmask &= ~(CURRY_FLAG | CURRY_RIGHT_FLAG);\n      }\n      if (!bitmask || bitmask == BIND_FLAG) {\n        var result = createBind(func, bitmask, thisArg);\n      } else if (bitmask == CURRY_FLAG || bitmask == CURRY_RIGHT_FLAG) {\n        result = createCurry(func, bitmask, arity);\n      } else if ((bitmask == PARTIAL_FLAG || bitmask == (BIND_FLAG | PARTIAL_FLAG)) && !holders.length) {\n        result = createPartial(func, bitmask, thisArg, partials);\n      } else {\n        result = createHybrid.apply(undefined, newData);\n      }\n      var setter = data ? baseSetData : setData;\n      return setWrapToString(setter(result, newData), func, bitmask);\n    }\n\n    /**\n     * A specialized version of `baseIsEqualDeep` for arrays with support for\n     * partial deep comparisons.\n     *\n     * @private\n     * @param {Array} array The array to compare.\n     * @param {Array} other The other array to compare.\n     * @param {Function} equalFunc The function to determine equivalents of values.\n     * @param {Function} customizer The function to customize comparisons.\n     * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`\n     *  for more details.\n     * @param {Object} stack Tracks traversed `array` and `other` objects.\n     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n     */\n    function equalArrays(array, other, equalFunc, customizer, bitmask, stack) {\n      var isPartial = bitmask & PARTIAL_COMPARE_FLAG,\n          arrLength = array.length,\n          othLength = other.length;\n\n      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(array);\n      if (stacked && stack.get(other)) {\n        return stacked == other;\n      }\n      var index = -1,\n          result = true,\n          seen = (bitmask & UNORDERED_COMPARE_FLAG) ? new SetCache : undefined;\n\n      stack.set(array, other);\n      stack.set(other, array);\n\n      // Ignore non-index properties.\n      while (++index < arrLength) {\n        var arrValue = array[index],\n            othValue = other[index];\n\n        if (customizer) {\n          var compared = isPartial\n            ? customizer(othValue, arrValue, index, other, array, stack)\n            : customizer(arrValue, othValue, index, array, other, stack);\n        }\n        if (compared !== undefined) {\n          if (compared) {\n            continue;\n          }\n          result = false;\n          break;\n        }\n        // Recursively compare arrays (susceptible to call stack limits).\n        if (seen) {\n          if (!arraySome(other, function(othValue, othIndex) {\n                if (!cacheHas(seen, othIndex) &&\n                    (arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack))) {\n                  return seen.push(othIndex);\n                }\n              })) {\n            result = false;\n            break;\n          }\n        } else if (!(\n              arrValue === othValue ||\n                equalFunc(arrValue, othValue, customizer, bitmask, stack)\n            )) {\n          result = false;\n          break;\n        }\n      }\n      stack['delete'](array);\n      stack['delete'](other);\n      return result;\n    }\n\n    /**\n     * A specialized version of `baseIsEqualDeep` for comparing objects of\n     * the same `toStringTag`.\n     *\n     * **Note:** This function only supports comparing values with tags of\n     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n     *\n     * @private\n     * @param {Object} object The object to compare.\n     * @param {Object} other The other object to compare.\n     * @param {string} tag The `toStringTag` of the objects to compare.\n     * @param {Function} equalFunc The function to determine equivalents of values.\n     * @param {Function} customizer The function to customize comparisons.\n     * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`\n     *  for more details.\n     * @param {Object} stack Tracks traversed `object` and `other` objects.\n     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n     */\n    function equalByTag(object, other, tag, equalFunc, customizer, bitmask, stack) {\n      switch (tag) {\n        case dataViewTag:\n          if ((object.byteLength != other.byteLength) ||\n              (object.byteOffset != other.byteOffset)) {\n            return false;\n          }\n          object = object.buffer;\n          other = other.buffer;\n\n        case arrayBufferTag:\n          if ((object.byteLength != other.byteLength) ||\n              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n            return false;\n          }\n          return true;\n\n        case boolTag:\n        case dateTag:\n        case numberTag:\n          // Coerce booleans to `1` or `0` and dates to milliseconds.\n          // Invalid dates are coerced to `NaN`.\n          return eq(+object, +other);\n\n        case errorTag:\n          return object.name == other.name && object.message == other.message;\n\n        case regexpTag:\n        case stringTag:\n          // Coerce regexes to strings and treat strings, primitives and objects,\n          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n          // for more details.\n          return object == (other + '');\n\n        case mapTag:\n          var convert = mapToArray;\n\n        case setTag:\n          var isPartial = bitmask & PARTIAL_COMPARE_FLAG;\n          convert || (convert = setToArray);\n\n          if (object.size != other.size && !isPartial) {\n            return false;\n          }\n          // Assume cyclic values are equal.\n          var stacked = stack.get(object);\n          if (stacked) {\n            return stacked == other;\n          }\n          bitmask |= UNORDERED_COMPARE_FLAG;\n\n          // Recursively compare objects (susceptible to call stack limits).\n          stack.set(object, other);\n          var result = equalArrays(convert(object), convert(other), equalFunc, customizer, bitmask, stack);\n          stack['delete'](object);\n          return result;\n\n        case symbolTag:\n          if (symbolValueOf) {\n            return symbolValueOf.call(object) == symbolValueOf.call(other);\n          }\n      }\n      return false;\n    }\n\n    /**\n     * A specialized version of `baseIsEqualDeep` for objects with support for\n     * partial deep comparisons.\n     *\n     * @private\n     * @param {Object} object The object to compare.\n     * @param {Object} other The other object to compare.\n     * @param {Function} equalFunc The function to determine equivalents of values.\n     * @param {Function} customizer The function to customize comparisons.\n     * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`\n     *  for more details.\n     * @param {Object} stack Tracks traversed `object` and `other` objects.\n     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n     */\n    function equalObjects(object, other, equalFunc, customizer, bitmask, stack) {\n      var isPartial = bitmask & PARTIAL_COMPARE_FLAG,\n          objProps = keys(object),\n          objLength = objProps.length,\n          othProps = keys(other),\n          othLength = othProps.length;\n\n      if (objLength != othLength && !isPartial) {\n        return false;\n      }\n      var index = objLength;\n      while (index--) {\n        var key = objProps[index];\n        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n          return false;\n        }\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked && stack.get(other)) {\n        return stacked == other;\n      }\n      var result = true;\n      stack.set(object, other);\n      stack.set(other, object);\n\n      var skipCtor = isPartial;\n      while (++index < objLength) {\n        key = objProps[index];\n        var objValue = object[key],\n            othValue = other[key];\n\n        if (customizer) {\n          var compared = isPartial\n            ? customizer(othValue, objValue, key, other, object, stack)\n            : customizer(objValue, othValue, key, object, other, stack);\n        }\n        // Recursively compare objects (susceptible to call stack limits).\n        if (!(compared === undefined\n              ? (objValue === othValue || equalFunc(objValue, othValue, customizer, bitmask, stack))\n              : compared\n            )) {\n          result = false;\n          break;\n        }\n        skipCtor || (skipCtor = key == 'constructor');\n      }\n      if (result && !skipCtor) {\n        var objCtor = object.constructor,\n            othCtor = other.constructor;\n\n        // Non `Object` object instances with different constructors are not equal.\n        if (objCtor != othCtor &&\n            ('constructor' in object && 'constructor' in other) &&\n            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n              typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n          result = false;\n        }\n      }\n      stack['delete'](object);\n      stack['delete'](other);\n      return result;\n    }\n\n    /**\n     * A specialized version of `baseRest` which flattens the rest array.\n     *\n     * @private\n     * @param {Function} func The function to apply a rest parameter to.\n     * @returns {Function} Returns the new function.\n     */\n    function flatRest(func) {\n      return setToString(overRest(func, undefined, flatten), func + '');\n    }\n\n    /**\n     * Creates an array of own enumerable property names and symbols of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names and symbols.\n     */\n    function getAllKeys(object) {\n      return baseGetAllKeys(object, keys, getSymbols);\n    }\n\n    /**\n     * Creates an array of own and inherited enumerable property names and\n     * symbols of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names and symbols.\n     */\n    function getAllKeysIn(object) {\n      return baseGetAllKeys(object, keysIn, getSymbolsIn);\n    }\n\n    /**\n     * Gets metadata for `func`.\n     *\n     * @private\n     * @param {Function} func The function to query.\n     * @returns {*} Returns the metadata for `func`.\n     */\n    var getData = !metaMap ? noop : function(func) {\n      return metaMap.get(func);\n    };\n\n    /**\n     * Gets the name of `func`.\n     *\n     * @private\n     * @param {Function} func The function to query.\n     * @returns {string} Returns the function name.\n     */\n    function getFuncName(func) {\n      var result = (func.name + ''),\n          array = realNames[result],\n          length = hasOwnProperty.call(realNames, result) ? array.length : 0;\n\n      while (length--) {\n        var data = array[length],\n            otherFunc = data.func;\n        if (otherFunc == null || otherFunc == func) {\n          return data.name;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Gets the argument placeholder value for `func`.\n     *\n     * @private\n     * @param {Function} func The function to inspect.\n     * @returns {*} Returns the placeholder value.\n     */\n    function getHolder(func) {\n      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;\n      return object.placeholder;\n    }\n\n    /**\n     * Gets the appropriate \"iteratee\" function. If `_.iteratee` is customized,\n     * this function returns the custom method, otherwise it returns `baseIteratee`.\n     * If arguments are provided, the chosen function is invoked with them and\n     * its result is returned.\n     *\n     * @private\n     * @param {*} [value] The value to convert to an iteratee.\n     * @param {number} [arity] The arity of the created iteratee.\n     * @returns {Function} Returns the chosen function or its result.\n     */\n    function getIteratee() {\n      var result = lodash.iteratee || iteratee;\n      result = result === iteratee ? baseIteratee : result;\n      return arguments.length ? result(arguments[0], arguments[1]) : result;\n    }\n\n    /**\n     * Gets the data for `map`.\n     *\n     * @private\n     * @param {Object} map The map to query.\n     * @param {string} key The reference key.\n     * @returns {*} Returns the map data.\n     */\n    function getMapData(map, key) {\n      var data = map.__data__;\n      return isKeyable(key)\n        ? data[typeof key == 'string' ? 'string' : 'hash']\n        : data.map;\n    }\n\n    /**\n     * Gets the property names, values, and compare flags of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the match data of `object`.\n     */\n    function getMatchData(object) {\n      var result = keys(object),\n          length = result.length;\n\n      while (length--) {\n        var key = result[length],\n            value = object[key];\n\n        result[length] = [key, value, isStrictComparable(value)];\n      }\n      return result;\n    }\n\n    /**\n     * Gets the native function at `key` of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {string} key The key of the method to get.\n     * @returns {*} Returns the function if it's native, else `undefined`.\n     */\n    function getNative(object, key) {\n      var value = getValue(object, key);\n      return baseIsNative(value) ? value : undefined;\n    }\n\n    /**\n     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n     *\n     * @private\n     * @param {*} value The value to query.\n     * @returns {string} Returns the raw `toStringTag`.\n     */\n    function getRawTag(value) {\n      var isOwn = hasOwnProperty.call(value, symToStringTag),\n          tag = value[symToStringTag];\n\n      try {\n        value[symToStringTag] = undefined;\n        var unmasked = true;\n      } catch (e) {}\n\n      var result = nativeObjectToString.call(value);\n      if (unmasked) {\n        if (isOwn) {\n          value[symToStringTag] = tag;\n        } else {\n          delete value[symToStringTag];\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Creates an array of the own enumerable symbol properties of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of symbols.\n     */\n    var getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;\n\n    /**\n     * Creates an array of the own and inherited enumerable symbol properties\n     * of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of symbols.\n     */\n    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {\n      var result = [];\n      while (object) {\n        arrayPush(result, getSymbols(object));\n        object = getPrototype(object);\n      }\n      return result;\n    };\n\n    /**\n     * Gets the `toStringTag` of `value`.\n     *\n     * @private\n     * @param {*} value The value to query.\n     * @returns {string} Returns the `toStringTag`.\n     */\n    var getTag = baseGetTag;\n\n    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\n    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n        (Map && getTag(new Map) != mapTag) ||\n        (Promise && getTag(Promise.resolve()) != promiseTag) ||\n        (Set && getTag(new Set) != setTag) ||\n        (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n      getTag = function(value) {\n        var result = baseGetTag(value),\n            Ctor = result == objectTag ? value.constructor : undefined,\n            ctorString = Ctor ? toSource(Ctor) : '';\n\n        if (ctorString) {\n          switch (ctorString) {\n            case dataViewCtorString: return dataViewTag;\n            case mapCtorString: return mapTag;\n            case promiseCtorString: return promiseTag;\n            case setCtorString: return setTag;\n            case weakMapCtorString: return weakMapTag;\n          }\n        }\n        return result;\n      };\n    }\n\n    /**\n     * Gets the view, applying any `transforms` to the `start` and `end` positions.\n     *\n     * @private\n     * @param {number} start The start of the view.\n     * @param {number} end The end of the view.\n     * @param {Array} transforms The transformations to apply to the view.\n     * @returns {Object} Returns an object containing the `start` and `end`\n     *  positions of the view.\n     */\n    function getView(start, end, transforms) {\n      var index = -1,\n          length = transforms.length;\n\n      while (++index < length) {\n        var data = transforms[index],\n            size = data.size;\n\n        switch (data.type) {\n          case 'drop':      start += size; break;\n          case 'dropRight': end -= size; break;\n          case 'take':      end = nativeMin(end, start + size); break;\n          case 'takeRight': start = nativeMax(start, end - size); break;\n        }\n      }\n      return { 'start': start, 'end': end };\n    }\n\n    /**\n     * Extracts wrapper details from the `source` body comment.\n     *\n     * @private\n     * @param {string} source The source to inspect.\n     * @returns {Array} Returns the wrapper details.\n     */\n    function getWrapDetails(source) {\n      var match = source.match(reWrapDetails);\n      return match ? match[1].split(reSplitDetails) : [];\n    }\n\n    /**\n     * Checks if `path` exists on `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path to check.\n     * @param {Function} hasFunc The function to check properties.\n     * @returns {boolean} Returns `true` if `path` exists, else `false`.\n     */\n    function hasPath(object, path, hasFunc) {\n      path = isKey(path, object) ? [path] : castPath(path);\n\n      var index = -1,\n          length = path.length,\n          result = false;\n\n      while (++index < length) {\n        var key = toKey(path[index]);\n        if (!(result = object != null && hasFunc(object, key))) {\n          break;\n        }\n        object = object[key];\n      }\n      if (result || ++index != length) {\n        return result;\n      }\n      length = object == null ? 0 : object.length;\n      return !!length && isLength(length) && isIndex(key, length) &&\n        (isArray(object) || isArguments(object));\n    }\n\n    /**\n     * Initializes an array clone.\n     *\n     * @private\n     * @param {Array} array The array to clone.\n     * @returns {Array} Returns the initialized clone.\n     */\n    function initCloneArray(array) {\n      var length = array.length,\n          result = array.constructor(length);\n\n      // Add properties assigned by `RegExp#exec`.\n      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n        result.index = array.index;\n        result.input = array.input;\n      }\n      return result;\n    }\n\n    /**\n     * Initializes an object clone.\n     *\n     * @private\n     * @param {Object} object The object to clone.\n     * @returns {Object} Returns the initialized clone.\n     */\n    function initCloneObject(object) {\n      return (typeof object.constructor == 'function' && !isPrototype(object))\n        ? baseCreate(getPrototype(object))\n        : {};\n    }\n\n    /**\n     * Initializes an object clone based on its `toStringTag`.\n     *\n     * **Note:** This function only supports cloning values with tags of\n     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n     *\n     * @private\n     * @param {Object} object The object to clone.\n     * @param {string} tag The `toStringTag` of the object to clone.\n     * @param {Function} cloneFunc The function to clone values.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Object} Returns the initialized clone.\n     */\n    function initCloneByTag(object, tag, cloneFunc, isDeep) {\n      var Ctor = object.constructor;\n      switch (tag) {\n        case arrayBufferTag:\n          return cloneArrayBuffer(object);\n\n        case boolTag:\n        case dateTag:\n          return new Ctor(+object);\n\n        case dataViewTag:\n          return cloneDataView(object, isDeep);\n\n        case float32Tag: case float64Tag:\n        case int8Tag: case int16Tag: case int32Tag:\n        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n          return cloneTypedArray(object, isDeep);\n\n        case mapTag:\n          return cloneMap(object, isDeep, cloneFunc);\n\n        case numberTag:\n        case stringTag:\n          return new Ctor(object);\n\n        case regexpTag:\n          return cloneRegExp(object);\n\n        case setTag:\n          return cloneSet(object, isDeep, cloneFunc);\n\n        case symbolTag:\n          return cloneSymbol(object);\n      }\n    }\n\n    /**\n     * Inserts wrapper `details` in a comment at the top of the `source` body.\n     *\n     * @private\n     * @param {string} source The source to modify.\n     * @returns {Array} details The details to insert.\n     * @returns {string} Returns the modified source.\n     */\n    function insertWrapDetails(source, details) {\n      var length = details.length;\n      if (!length) {\n        return source;\n      }\n      var lastIndex = length - 1;\n      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];\n      details = details.join(length > 2 ? ', ' : ' ');\n      return source.replace(reWrapComment, '{\\n/* [wrapped with ' + details + '] */\\n');\n    }\n\n    /**\n     * Checks if `value` is a flattenable `arguments` object or array.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.\n     */\n    function isFlattenable(value) {\n      return isArray(value) || isArguments(value) ||\n        !!(spreadableSymbol && value && value[spreadableSymbol]);\n    }\n\n    /**\n     * Checks if `value` is a valid array-like index.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n     */\n    function isIndex(value, length) {\n      length = length == null ? MAX_SAFE_INTEGER : length;\n      return !!length &&\n        (typeof value == 'number' || reIsUint.test(value)) &&\n        (value > -1 && value % 1 == 0 && value < length);\n    }\n\n    /**\n     * Checks if the given arguments are from an iteratee call.\n     *\n     * @private\n     * @param {*} value The potential iteratee value argument.\n     * @param {*} index The potential iteratee index or key argument.\n     * @param {*} object The potential iteratee object argument.\n     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,\n     *  else `false`.\n     */\n    function isIterateeCall(value, index, object) {\n      if (!isObject(object)) {\n        return false;\n      }\n      var type = typeof index;\n      if (type == 'number'\n            ? (isArrayLike(object) && isIndex(index, object.length))\n            : (type == 'string' && index in object)\n          ) {\n        return eq(object[index], value);\n      }\n      return false;\n    }\n\n    /**\n     * Checks if `value` is a property name and not a property path.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @param {Object} [object] The object to query keys on.\n     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n     */\n    function isKey(value, object) {\n      if (isArray(value)) {\n        return false;\n      }\n      var type = typeof value;\n      if (type == 'number' || type == 'symbol' || type == 'boolean' ||\n          value == null || isSymbol(value)) {\n        return true;\n      }\n      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n        (object != null && value in Object(object));\n    }\n\n    /**\n     * Checks if `value` is suitable for use as unique object key.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n     */\n    function isKeyable(value) {\n      var type = typeof value;\n      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n        ? (value !== '__proto__')\n        : (value === null);\n    }\n\n    /**\n     * Checks if `func` has a lazy counterpart.\n     *\n     * @private\n     * @param {Function} func The function to check.\n     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,\n     *  else `false`.\n     */\n    function isLaziable(func) {\n      var funcName = getFuncName(func),\n          other = lodash[funcName];\n\n      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {\n        return false;\n      }\n      if (func === other) {\n        return true;\n      }\n      var data = getData(other);\n      return !!data && func === data[0];\n    }\n\n    /**\n     * Checks if `func` has its source masked.\n     *\n     * @private\n     * @param {Function} func The function to check.\n     * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n     */\n    function isMasked(func) {\n      return !!maskSrcKey && (maskSrcKey in func);\n    }\n\n    /**\n     * Checks if `func` is capable of being masked.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.\n     */\n    var isMaskable = coreJsData ? isFunction : stubFalse;\n\n    /**\n     * Checks if `value` is likely a prototype object.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n     */\n    function isPrototype(value) {\n      var Ctor = value && value.constructor,\n          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n      return value === proto;\n    }\n\n    /**\n     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` if suitable for strict\n     *  equality comparisons, else `false`.\n     */\n    function isStrictComparable(value) {\n      return value === value && !isObject(value);\n    }\n\n    /**\n     * A specialized version of `matchesProperty` for source values suitable\n     * for strict equality comparisons, i.e. `===`.\n     *\n     * @private\n     * @param {string} key The key of the property to get.\n     * @param {*} srcValue The value to match.\n     * @returns {Function} Returns the new spec function.\n     */\n    function matchesStrictComparable(key, srcValue) {\n      return function(object) {\n        if (object == null) {\n          return false;\n        }\n        return object[key] === srcValue &&\n          (srcValue !== undefined || (key in Object(object)));\n      };\n    }\n\n    /**\n     * A specialized version of `_.memoize` which clears the memoized function's\n     * cache when it exceeds `MAX_MEMOIZE_SIZE`.\n     *\n     * @private\n     * @param {Function} func The function to have its output memoized.\n     * @returns {Function} Returns the new memoized function.\n     */\n    function memoizeCapped(func) {\n      var result = memoize(func, function(key) {\n        if (cache.size === MAX_MEMOIZE_SIZE) {\n          cache.clear();\n        }\n        return key;\n      });\n\n      var cache = result.cache;\n      return result;\n    }\n\n    /**\n     * Merges the function metadata of `source` into `data`.\n     *\n     * Merging metadata reduces the number of wrappers used to invoke a function.\n     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`\n     * may be applied regardless of execution order. Methods like `_.ary` and\n     * `_.rearg` modify function arguments, making the order in which they are\n     * executed important, preventing the merging of metadata. However, we make\n     * an exception for a safe combined case where curried functions have `_.ary`\n     * and or `_.rearg` applied.\n     *\n     * @private\n     * @param {Array} data The destination metadata.\n     * @param {Array} source The source metadata.\n     * @returns {Array} Returns `data`.\n     */\n    function mergeData(data, source) {\n      var bitmask = data[1],\n          srcBitmask = source[1],\n          newBitmask = bitmask | srcBitmask,\n          isCommon = newBitmask < (BIND_FLAG | BIND_KEY_FLAG | ARY_FLAG);\n\n      var isCombo =\n        ((srcBitmask == ARY_FLAG) && (bitmask == CURRY_FLAG)) ||\n        ((srcBitmask == ARY_FLAG) && (bitmask == REARG_FLAG) && (data[7].length <= source[8])) ||\n        ((srcBitmask == (ARY_FLAG | REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == CURRY_FLAG));\n\n      // Exit early if metadata can't be merged.\n      if (!(isCommon || isCombo)) {\n        return data;\n      }\n      // Use source `thisArg` if available.\n      if (srcBitmask & BIND_FLAG) {\n        data[2] = source[2];\n        // Set when currying a bound function.\n        newBitmask |= bitmask & BIND_FLAG ? 0 : CURRY_BOUND_FLAG;\n      }\n      // Compose partial arguments.\n      var value = source[3];\n      if (value) {\n        var partials = data[3];\n        data[3] = partials ? composeArgs(partials, value, source[4]) : value;\n        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];\n      }\n      // Compose partial right arguments.\n      value = source[5];\n      if (value) {\n        partials = data[5];\n        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;\n        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];\n      }\n      // Use source `argPos` if available.\n      value = source[7];\n      if (value) {\n        data[7] = value;\n      }\n      // Use source `ary` if it's smaller.\n      if (srcBitmask & ARY_FLAG) {\n        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);\n      }\n      // Use source `arity` if one is not provided.\n      if (data[9] == null) {\n        data[9] = source[9];\n      }\n      // Use source `func` and merge bitmasks.\n      data[0] = source[0];\n      data[1] = newBitmask;\n\n      return data;\n    }\n\n    /**\n     * Used by `_.defaultsDeep` to customize its `_.merge` use.\n     *\n     * @private\n     * @param {*} objValue The destination value.\n     * @param {*} srcValue The source value.\n     * @param {string} key The key of the property to merge.\n     * @param {Object} object The parent object of `objValue`.\n     * @param {Object} source The parent object of `srcValue`.\n     * @param {Object} [stack] Tracks traversed source values and their merged\n     *  counterparts.\n     * @returns {*} Returns the value to assign.\n     */\n    function mergeDefaults(objValue, srcValue, key, object, source, stack) {\n      if (isObject(objValue) && isObject(srcValue)) {\n        // Recursively merge objects and arrays (susceptible to call stack limits).\n        stack.set(srcValue, objValue);\n        baseMerge(objValue, srcValue, undefined, mergeDefaults, stack);\n        stack['delete'](srcValue);\n      }\n      return objValue;\n    }\n\n    /**\n     * This function is like\n     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n     * except that it includes inherited enumerable properties.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     */\n    function nativeKeysIn(object) {\n      var result = [];\n      if (object != null) {\n        for (var key in Object(object)) {\n          result.push(key);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Converts `value` to a string using `Object.prototype.toString`.\n     *\n     * @private\n     * @param {*} value The value to convert.\n     * @returns {string} Returns the converted string.\n     */\n    function objectToString(value) {\n      return nativeObjectToString.call(value);\n    }\n\n    /**\n     * A specialized version of `baseRest` which transforms the rest array.\n     *\n     * @private\n     * @param {Function} func The function to apply a rest parameter to.\n     * @param {number} [start=func.length-1] The start position of the rest parameter.\n     * @param {Function} transform The rest array transform.\n     * @returns {Function} Returns the new function.\n     */\n    function overRest(func, start, transform) {\n      start = nativeMax(start === undefined ? (func.length - 1) : start, 0);\n      return function() {\n        var args = arguments,\n            index = -1,\n            length = nativeMax(args.length - start, 0),\n            array = Array(length);\n\n        while (++index < length) {\n          array[index] = args[start + index];\n        }\n        index = -1;\n        var otherArgs = Array(start + 1);\n        while (++index < start) {\n          otherArgs[index] = args[index];\n        }\n        otherArgs[start] = transform(array);\n        return apply(func, this, otherArgs);\n      };\n    }\n\n    /**\n     * Gets the parent value at `path` of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Array} path The path to get the parent value of.\n     * @returns {*} Returns the parent value.\n     */\n    function parent(object, path) {\n      return path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));\n    }\n\n    /**\n     * Reorder `array` according to the specified indexes where the element at\n     * the first index is assigned as the first element, the element at\n     * the second index is assigned as the second element, and so on.\n     *\n     * @private\n     * @param {Array} array The array to reorder.\n     * @param {Array} indexes The arranged array indexes.\n     * @returns {Array} Returns `array`.\n     */\n    function reorder(array, indexes) {\n      var arrLength = array.length,\n          length = nativeMin(indexes.length, arrLength),\n          oldArray = copyArray(array);\n\n      while (length--) {\n        var index = indexes[length];\n        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;\n      }\n      return array;\n    }\n\n    /**\n     * Sets metadata for `func`.\n     *\n     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short\n     * period of time, it will trip its breaker and transition to an identity\n     * function to avoid garbage collection pauses in V8. See\n     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)\n     * for more details.\n     *\n     * @private\n     * @param {Function} func The function to associate metadata with.\n     * @param {*} data The metadata.\n     * @returns {Function} Returns `func`.\n     */\n    var setData = shortOut(baseSetData);\n\n    /**\n     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).\n     *\n     * @private\n     * @param {Function} func The function to delay.\n     * @param {number} wait The number of milliseconds to delay invocation.\n     * @returns {number|Object} Returns the timer id or timeout object.\n     */\n    var setTimeout = ctxSetTimeout || function(func, wait) {\n      return root.setTimeout(func, wait);\n    };\n\n    /**\n     * Sets the `toString` method of `func` to return `string`.\n     *\n     * @private\n     * @param {Function} func The function to modify.\n     * @param {Function} string The `toString` result.\n     * @returns {Function} Returns `func`.\n     */\n    var setToString = shortOut(baseSetToString);\n\n    /**\n     * Sets the `toString` method of `wrapper` to mimic the source of `reference`\n     * with wrapper details in a comment at the top of the source body.\n     *\n     * @private\n     * @param {Function} wrapper The function to modify.\n     * @param {Function} reference The reference function.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @returns {Function} Returns `wrapper`.\n     */\n    function setWrapToString(wrapper, reference, bitmask) {\n      var source = (reference + '');\n      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));\n    }\n\n    /**\n     * Creates a function that'll short out and invoke `identity` instead\n     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`\n     * milliseconds.\n     *\n     * @private\n     * @param {Function} func The function to restrict.\n     * @returns {Function} Returns the new shortable function.\n     */\n    function shortOut(func) {\n      var count = 0,\n          lastCalled = 0;\n\n      return function() {\n        var stamp = nativeNow(),\n            remaining = HOT_SPAN - (stamp - lastCalled);\n\n        lastCalled = stamp;\n        if (remaining > 0) {\n          if (++count >= HOT_COUNT) {\n            return arguments[0];\n          }\n        } else {\n          count = 0;\n        }\n        return func.apply(undefined, arguments);\n      };\n    }\n\n    /**\n     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.\n     *\n     * @private\n     * @param {Array} array The array to shuffle.\n     * @param {number} [size=array.length] The size of `array`.\n     * @returns {Array} Returns `array`.\n     */\n    function shuffleSelf(array, size) {\n      var index = -1,\n          length = array.length,\n          lastIndex = length - 1;\n\n      size = size === undefined ? length : size;\n      while (++index < size) {\n        var rand = baseRandom(index, lastIndex),\n            value = array[rand];\n\n        array[rand] = array[index];\n        array[index] = value;\n      }\n      array.length = size;\n      return array;\n    }\n\n    /**\n     * Converts `string` to a property path array.\n     *\n     * @private\n     * @param {string} string The string to convert.\n     * @returns {Array} Returns the property path array.\n     */\n    var stringToPath = memoizeCapped(function(string) {\n      string = toString(string);\n\n      var result = [];\n      if (reLeadingDot.test(string)) {\n        result.push('');\n      }\n      string.replace(rePropName, function(match, number, quote, string) {\n        result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));\n      });\n      return result;\n    });\n\n    /**\n     * Converts `value` to a string key if it's not a string or symbol.\n     *\n     * @private\n     * @param {*} value The value to inspect.\n     * @returns {string|symbol} Returns the key.\n     */\n    function toKey(value) {\n      if (typeof value == 'string' || isSymbol(value)) {\n        return value;\n      }\n      var result = (value + '');\n      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n    }\n\n    /**\n     * Converts `func` to its source code.\n     *\n     * @private\n     * @param {Function} func The function to convert.\n     * @returns {string} Returns the source code.\n     */\n    function toSource(func) {\n      if (func != null) {\n        try {\n          return funcToString.call(func);\n        } catch (e) {}\n        try {\n          return (func + '');\n        } catch (e) {}\n      }\n      return '';\n    }\n\n    /**\n     * Updates wrapper `details` based on `bitmask` flags.\n     *\n     * @private\n     * @returns {Array} details The details to modify.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @returns {Array} Returns `details`.\n     */\n    function updateWrapDetails(details, bitmask) {\n      arrayEach(wrapFlags, function(pair) {\n        var value = '_.' + pair[0];\n        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {\n          details.push(value);\n        }\n      });\n      return details.sort();\n    }\n\n    /**\n     * Creates a clone of `wrapper`.\n     *\n     * @private\n     * @param {Object} wrapper The wrapper to clone.\n     * @returns {Object} Returns the cloned wrapper.\n     */\n    function wrapperClone(wrapper) {\n      if (wrapper instanceof LazyWrapper) {\n        return wrapper.clone();\n      }\n      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);\n      result.__actions__ = copyArray(wrapper.__actions__);\n      result.__index__  = wrapper.__index__;\n      result.__values__ = wrapper.__values__;\n      return result;\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates an array of elements split into groups the length of `size`.\n     * If `array` can't be split evenly, the final chunk will be the remaining\n     * elements.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to process.\n     * @param {number} [size=1] The length of each chunk\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the new array of chunks.\n     * @example\n     *\n     * _.chunk(['a', 'b', 'c', 'd'], 2);\n     * // => [['a', 'b'], ['c', 'd']]\n     *\n     * _.chunk(['a', 'b', 'c', 'd'], 3);\n     * // => [['a', 'b', 'c'], ['d']]\n     */\n    function chunk(array, size, guard) {\n      if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {\n        size = 1;\n      } else {\n        size = nativeMax(toInteger(size), 0);\n      }\n      var length = array == null ? 0 : array.length;\n      if (!length || size < 1) {\n        return [];\n      }\n      var index = 0,\n          resIndex = 0,\n          result = Array(nativeCeil(length / size));\n\n      while (index < length) {\n        result[resIndex++] = baseSlice(array, index, (index += size));\n      }\n      return result;\n    }\n\n    /**\n     * Creates an array with all falsey values removed. The values `false`, `null`,\n     * `0`, `\"\"`, `undefined`, and `NaN` are falsey.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to compact.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * _.compact([0, 1, false, 2, '', 3]);\n     * // => [1, 2, 3]\n     */\n    function compact(array) {\n      var index = -1,\n          length = array == null ? 0 : array.length,\n          resIndex = 0,\n          result = [];\n\n      while (++index < length) {\n        var value = array[index];\n        if (value) {\n          result[resIndex++] = value;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Creates a new array concatenating `array` with any additional arrays\n     * and/or values.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to concatenate.\n     * @param {...*} [values] The values to concatenate.\n     * @returns {Array} Returns the new concatenated array.\n     * @example\n     *\n     * var array = [1];\n     * var other = _.concat(array, 2, [3], [[4]]);\n     *\n     * console.log(other);\n     * // => [1, 2, 3, [4]]\n     *\n     * console.log(array);\n     * // => [1]\n     */\n    function concat() {\n      var length = arguments.length;\n      if (!length) {\n        return [];\n      }\n      var args = Array(length - 1),\n          array = arguments[0],\n          index = length;\n\n      while (index--) {\n        args[index - 1] = arguments[index];\n      }\n      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));\n    }\n\n    /**\n     * Creates an array of `array` values not included in the other given arrays\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons. The order and references of result values are\n     * determined by the first array.\n     *\n     * **Note:** Unlike `_.pullAll`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {...Array} [values] The values to exclude.\n     * @returns {Array} Returns the new array of filtered values.\n     * @see _.without, _.xor\n     * @example\n     *\n     * _.difference([2, 1], [2, 3]);\n     * // => [1]\n     */\n    var difference = baseRest(function(array, values) {\n      return isArrayLikeObject(array)\n        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))\n        : [];\n    });\n\n    /**\n     * This method is like `_.difference` except that it accepts `iteratee` which\n     * is invoked for each element of `array` and `values` to generate the criterion\n     * by which they're compared. The order and references of result values are\n     * determined by the first array. The iteratee is invoked with one argument:\n     * (value).\n     *\n     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {...Array} [values] The values to exclude.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n     * // => [1.2]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');\n     * // => [{ 'x': 2 }]\n     */\n    var differenceBy = baseRest(function(array, values) {\n      var iteratee = last(values);\n      if (isArrayLikeObject(iteratee)) {\n        iteratee = undefined;\n      }\n      return isArrayLikeObject(array)\n        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))\n        : [];\n    });\n\n    /**\n     * This method is like `_.difference` except that it accepts `comparator`\n     * which is invoked to compare elements of `array` to `values`. The order and\n     * references of result values are determined by the first array. The comparator\n     * is invoked with two arguments: (arrVal, othVal).\n     *\n     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {...Array} [values] The values to exclude.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n     *\n     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);\n     * // => [{ 'x': 2, 'y': 1 }]\n     */\n    var differenceWith = baseRest(function(array, values) {\n      var comparator = last(values);\n      if (isArrayLikeObject(comparator)) {\n        comparator = undefined;\n      }\n      return isArrayLikeObject(array)\n        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)\n        : [];\n    });\n\n    /**\n     * Creates a slice of `array` with `n` elements dropped from the beginning.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.5.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=1] The number of elements to drop.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.drop([1, 2, 3]);\n     * // => [2, 3]\n     *\n     * _.drop([1, 2, 3], 2);\n     * // => [3]\n     *\n     * _.drop([1, 2, 3], 5);\n     * // => []\n     *\n     * _.drop([1, 2, 3], 0);\n     * // => [1, 2, 3]\n     */\n    function drop(array, n, guard) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      n = (guard || n === undefined) ? 1 : toInteger(n);\n      return baseSlice(array, n < 0 ? 0 : n, length);\n    }\n\n    /**\n     * Creates a slice of `array` with `n` elements dropped from the end.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=1] The number of elements to drop.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.dropRight([1, 2, 3]);\n     * // => [1, 2]\n     *\n     * _.dropRight([1, 2, 3], 2);\n     * // => [1]\n     *\n     * _.dropRight([1, 2, 3], 5);\n     * // => []\n     *\n     * _.dropRight([1, 2, 3], 0);\n     * // => [1, 2, 3]\n     */\n    function dropRight(array, n, guard) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      n = (guard || n === undefined) ? 1 : toInteger(n);\n      n = length - n;\n      return baseSlice(array, 0, n < 0 ? 0 : n);\n    }\n\n    /**\n     * Creates a slice of `array` excluding elements dropped from the end.\n     * Elements are dropped until `predicate` returns falsey. The predicate is\n     * invoked with three arguments: (value, index, array).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': true },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': false }\n     * ];\n     *\n     * _.dropRightWhile(users, function(o) { return !o.active; });\n     * // => objects for ['barney']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });\n     * // => objects for ['barney', 'fred']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.dropRightWhile(users, ['active', false]);\n     * // => objects for ['barney']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.dropRightWhile(users, 'active');\n     * // => objects for ['barney', 'fred', 'pebbles']\n     */\n    function dropRightWhile(array, predicate) {\n      return (array && array.length)\n        ? baseWhile(array, getIteratee(predicate, 3), true, true)\n        : [];\n    }\n\n    /**\n     * Creates a slice of `array` excluding elements dropped from the beginning.\n     * Elements are dropped until `predicate` returns falsey. The predicate is\n     * invoked with three arguments: (value, index, array).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': false },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': true }\n     * ];\n     *\n     * _.dropWhile(users, function(o) { return !o.active; });\n     * // => objects for ['pebbles']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.dropWhile(users, { 'user': 'barney', 'active': false });\n     * // => objects for ['fred', 'pebbles']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.dropWhile(users, ['active', false]);\n     * // => objects for ['pebbles']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.dropWhile(users, 'active');\n     * // => objects for ['barney', 'fred', 'pebbles']\n     */\n    function dropWhile(array, predicate) {\n      return (array && array.length)\n        ? baseWhile(array, getIteratee(predicate, 3), true)\n        : [];\n    }\n\n    /**\n     * Fills elements of `array` with `value` from `start` up to, but not\n     * including, `end`.\n     *\n     * **Note:** This method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.2.0\n     * @category Array\n     * @param {Array} array The array to fill.\n     * @param {*} value The value to fill `array` with.\n     * @param {number} [start=0] The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = [1, 2, 3];\n     *\n     * _.fill(array, 'a');\n     * console.log(array);\n     * // => ['a', 'a', 'a']\n     *\n     * _.fill(Array(3), 2);\n     * // => [2, 2, 2]\n     *\n     * _.fill([4, 6, 8, 10], '*', 1, 3);\n     * // => [4, '*', '*', 10]\n     */\n    function fill(array, value, start, end) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {\n        start = 0;\n        end = length;\n      }\n      return baseFill(array, value, start, end);\n    }\n\n    /**\n     * This method is like `_.find` except that it returns the index of the first\n     * element `predicate` returns truthy for instead of the element itself.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param {number} [fromIndex=0] The index to search from.\n     * @returns {number} Returns the index of the found element, else `-1`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': false },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': true }\n     * ];\n     *\n     * _.findIndex(users, function(o) { return o.user == 'barney'; });\n     * // => 0\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.findIndex(users, { 'user': 'fred', 'active': false });\n     * // => 1\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.findIndex(users, ['active', false]);\n     * // => 0\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.findIndex(users, 'active');\n     * // => 2\n     */\n    function findIndex(array, predicate, fromIndex) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return -1;\n      }\n      var index = fromIndex == null ? 0 : toInteger(fromIndex);\n      if (index < 0) {\n        index = nativeMax(length + index, 0);\n      }\n      return baseFindIndex(array, getIteratee(predicate, 3), index);\n    }\n\n    /**\n     * This method is like `_.findIndex` except that it iterates over elements\n     * of `collection` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param {number} [fromIndex=array.length-1] The index to search from.\n     * @returns {number} Returns the index of the found element, else `-1`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': true },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': false }\n     * ];\n     *\n     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });\n     * // => 2\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.findLastIndex(users, { 'user': 'barney', 'active': true });\n     * // => 0\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.findLastIndex(users, ['active', false]);\n     * // => 2\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.findLastIndex(users, 'active');\n     * // => 0\n     */\n    function findLastIndex(array, predicate, fromIndex) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return -1;\n      }\n      var index = length - 1;\n      if (fromIndex !== undefined) {\n        index = toInteger(fromIndex);\n        index = fromIndex < 0\n          ? nativeMax(length + index, 0)\n          : nativeMin(index, length - 1);\n      }\n      return baseFindIndex(array, getIteratee(predicate, 3), index, true);\n    }\n\n    /**\n     * Flattens `array` a single level deep.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to flatten.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * _.flatten([1, [2, [3, [4]], 5]]);\n     * // => [1, 2, [3, [4]], 5]\n     */\n    function flatten(array) {\n      var length = array == null ? 0 : array.length;\n      return length ? baseFlatten(array, 1) : [];\n    }\n\n    /**\n     * Recursively flattens `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to flatten.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * _.flattenDeep([1, [2, [3, [4]], 5]]);\n     * // => [1, 2, 3, 4, 5]\n     */\n    function flattenDeep(array) {\n      var length = array == null ? 0 : array.length;\n      return length ? baseFlatten(array, INFINITY) : [];\n    }\n\n    /**\n     * Recursively flatten `array` up to `depth` times.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.4.0\n     * @category Array\n     * @param {Array} array The array to flatten.\n     * @param {number} [depth=1] The maximum recursion depth.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * var array = [1, [2, [3, [4]], 5]];\n     *\n     * _.flattenDepth(array, 1);\n     * // => [1, 2, [3, [4]], 5]\n     *\n     * _.flattenDepth(array, 2);\n     * // => [1, 2, 3, [4], 5]\n     */\n    function flattenDepth(array, depth) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      depth = depth === undefined ? 1 : toInteger(depth);\n      return baseFlatten(array, depth);\n    }\n\n    /**\n     * The inverse of `_.toPairs`; this method returns an object composed\n     * from key-value `pairs`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} pairs The key-value pairs.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * _.fromPairs([['a', 1], ['b', 2]]);\n     * // => { 'a': 1, 'b': 2 }\n     */\n    function fromPairs(pairs) {\n      var index = -1,\n          length = pairs == null ? 0 : pairs.length,\n          result = {};\n\n      while (++index < length) {\n        var pair = pairs[index];\n        result[pair[0]] = pair[1];\n      }\n      return result;\n    }\n\n    /**\n     * Gets the first element of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @alias first\n     * @category Array\n     * @param {Array} array The array to query.\n     * @returns {*} Returns the first element of `array`.\n     * @example\n     *\n     * _.head([1, 2, 3]);\n     * // => 1\n     *\n     * _.head([]);\n     * // => undefined\n     */\n    function head(array) {\n      return (array && array.length) ? array[0] : undefined;\n    }\n\n    /**\n     * Gets the index at which the first occurrence of `value` is found in `array`\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons. If `fromIndex` is negative, it's used as the\n     * offset from the end of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {*} value The value to search for.\n     * @param {number} [fromIndex=0] The index to search from.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     * @example\n     *\n     * _.indexOf([1, 2, 1, 2], 2);\n     * // => 1\n     *\n     * // Search from the `fromIndex`.\n     * _.indexOf([1, 2, 1, 2], 2, 2);\n     * // => 3\n     */\n    function indexOf(array, value, fromIndex) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return -1;\n      }\n      var index = fromIndex == null ? 0 : toInteger(fromIndex);\n      if (index < 0) {\n        index = nativeMax(length + index, 0);\n      }\n      return baseIndexOf(array, value, index);\n    }\n\n    /**\n     * Gets all but the last element of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.initial([1, 2, 3]);\n     * // => [1, 2]\n     */\n    function initial(array) {\n      var length = array == null ? 0 : array.length;\n      return length ? baseSlice(array, 0, -1) : [];\n    }\n\n    /**\n     * Creates an array of unique values that are included in all given arrays\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons. The order and references of result values are\n     * determined by the first array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @returns {Array} Returns the new array of intersecting values.\n     * @example\n     *\n     * _.intersection([2, 1], [2, 3]);\n     * // => [2]\n     */\n    var intersection = baseRest(function(arrays) {\n      var mapped = arrayMap(arrays, castArrayLikeObject);\n      return (mapped.length && mapped[0] === arrays[0])\n        ? baseIntersection(mapped)\n        : [];\n    });\n\n    /**\n     * This method is like `_.intersection` except that it accepts `iteratee`\n     * which is invoked for each element of each `arrays` to generate the criterion\n     * by which they're compared. The order and references of result values are\n     * determined by the first array. The iteratee is invoked with one argument:\n     * (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns the new array of intersecting values.\n     * @example\n     *\n     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n     * // => [2.1]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n     * // => [{ 'x': 1 }]\n     */\n    var intersectionBy = baseRest(function(arrays) {\n      var iteratee = last(arrays),\n          mapped = arrayMap(arrays, castArrayLikeObject);\n\n      if (iteratee === last(mapped)) {\n        iteratee = undefined;\n      } else {\n        mapped.pop();\n      }\n      return (mapped.length && mapped[0] === arrays[0])\n        ? baseIntersection(mapped, getIteratee(iteratee, 2))\n        : [];\n    });\n\n    /**\n     * This method is like `_.intersection` except that it accepts `comparator`\n     * which is invoked to compare elements of `arrays`. The order and references\n     * of result values are determined by the first array. The comparator is\n     * invoked with two arguments: (arrVal, othVal).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of intersecting values.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n     *\n     * _.intersectionWith(objects, others, _.isEqual);\n     * // => [{ 'x': 1, 'y': 2 }]\n     */\n    var intersectionWith = baseRest(function(arrays) {\n      var comparator = last(arrays),\n          mapped = arrayMap(arrays, castArrayLikeObject);\n\n      comparator = typeof comparator == 'function' ? comparator : undefined;\n      if (comparator) {\n        mapped.pop();\n      }\n      return (mapped.length && mapped[0] === arrays[0])\n        ? baseIntersection(mapped, undefined, comparator)\n        : [];\n    });\n\n    /**\n     * Converts all elements in `array` into a string separated by `separator`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to convert.\n     * @param {string} [separator=','] The element separator.\n     * @returns {string} Returns the joined string.\n     * @example\n     *\n     * _.join(['a', 'b', 'c'], '~');\n     * // => 'a~b~c'\n     */\n    function join(array, separator) {\n      return array == null ? '' : nativeJoin.call(array, separator);\n    }\n\n    /**\n     * Gets the last element of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @returns {*} Returns the last element of `array`.\n     * @example\n     *\n     * _.last([1, 2, 3]);\n     * // => 3\n     */\n    function last(array) {\n      var length = array == null ? 0 : array.length;\n      return length ? array[length - 1] : undefined;\n    }\n\n    /**\n     * This method is like `_.indexOf` except that it iterates over elements of\n     * `array` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {*} value The value to search for.\n     * @param {number} [fromIndex=array.length-1] The index to search from.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     * @example\n     *\n     * _.lastIndexOf([1, 2, 1, 2], 2);\n     * // => 3\n     *\n     * // Search from the `fromIndex`.\n     * _.lastIndexOf([1, 2, 1, 2], 2, 2);\n     * // => 1\n     */\n    function lastIndexOf(array, value, fromIndex) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return -1;\n      }\n      var index = length;\n      if (fromIndex !== undefined) {\n        index = toInteger(fromIndex);\n        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);\n      }\n      return value === value\n        ? strictLastIndexOf(array, value, index)\n        : baseFindIndex(array, baseIsNaN, index, true);\n    }\n\n    /**\n     * Gets the element at index `n` of `array`. If `n` is negative, the nth\n     * element from the end is returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.11.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=0] The index of the element to return.\n     * @returns {*} Returns the nth element of `array`.\n     * @example\n     *\n     * var array = ['a', 'b', 'c', 'd'];\n     *\n     * _.nth(array, 1);\n     * // => 'b'\n     *\n     * _.nth(array, -2);\n     * // => 'c';\n     */\n    function nth(array, n) {\n      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;\n    }\n\n    /**\n     * Removes all given values from `array` using\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons.\n     *\n     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`\n     * to remove elements from an array by predicate.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {...*} [values] The values to remove.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];\n     *\n     * _.pull(array, 'a', 'c');\n     * console.log(array);\n     * // => ['b', 'b']\n     */\n    var pull = baseRest(pullAll);\n\n    /**\n     * This method is like `_.pull` except that it accepts an array of values to remove.\n     *\n     * **Note:** Unlike `_.difference`, this method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {Array} values The values to remove.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];\n     *\n     * _.pullAll(array, ['a', 'c']);\n     * console.log(array);\n     * // => ['b', 'b']\n     */\n    function pullAll(array, values) {\n      return (array && array.length && values && values.length)\n        ? basePullAll(array, values)\n        : array;\n    }\n\n    /**\n     * This method is like `_.pullAll` except that it accepts `iteratee` which is\n     * invoked for each element of `array` and `values` to generate the criterion\n     * by which they're compared. The iteratee is invoked with one argument: (value).\n     *\n     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {Array} values The values to remove.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];\n     *\n     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');\n     * console.log(array);\n     * // => [{ 'x': 2 }]\n     */\n    function pullAllBy(array, values, iteratee) {\n      return (array && array.length && values && values.length)\n        ? basePullAll(array, values, getIteratee(iteratee, 2))\n        : array;\n    }\n\n    /**\n     * This method is like `_.pullAll` except that it accepts `comparator` which\n     * is invoked to compare elements of `array` to `values`. The comparator is\n     * invoked with two arguments: (arrVal, othVal).\n     *\n     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.6.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {Array} values The values to remove.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];\n     *\n     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);\n     * console.log(array);\n     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]\n     */\n    function pullAllWith(array, values, comparator) {\n      return (array && array.length && values && values.length)\n        ? basePullAll(array, values, undefined, comparator)\n        : array;\n    }\n\n    /**\n     * Removes elements from `array` corresponding to `indexes` and returns an\n     * array of removed elements.\n     *\n     * **Note:** Unlike `_.at`, this method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {...(number|number[])} [indexes] The indexes of elements to remove.\n     * @returns {Array} Returns the new array of removed elements.\n     * @example\n     *\n     * var array = ['a', 'b', 'c', 'd'];\n     * var pulled = _.pullAt(array, [1, 3]);\n     *\n     * console.log(array);\n     * // => ['a', 'c']\n     *\n     * console.log(pulled);\n     * // => ['b', 'd']\n     */\n    var pullAt = flatRest(function(array, indexes) {\n      var length = array == null ? 0 : array.length,\n          result = baseAt(array, indexes);\n\n      basePullAt(array, arrayMap(indexes, function(index) {\n        return isIndex(index, length) ? +index : index;\n      }).sort(compareAscending));\n\n      return result;\n    });\n\n    /**\n     * Removes all elements from `array` that `predicate` returns truthy for\n     * and returns an array of the removed elements. The predicate is invoked\n     * with three arguments: (value, index, array).\n     *\n     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`\n     * to pull elements from an array by value.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new array of removed elements.\n     * @example\n     *\n     * var array = [1, 2, 3, 4];\n     * var evens = _.remove(array, function(n) {\n     *   return n % 2 == 0;\n     * });\n     *\n     * console.log(array);\n     * // => [1, 3]\n     *\n     * console.log(evens);\n     * // => [2, 4]\n     */\n    function remove(array, predicate) {\n      var result = [];\n      if (!(array && array.length)) {\n        return result;\n      }\n      var index = -1,\n          indexes = [],\n          length = array.length;\n\n      predicate = getIteratee(predicate, 3);\n      while (++index < length) {\n        var value = array[index];\n        if (predicate(value, index, array)) {\n          result.push(value);\n          indexes.push(index);\n        }\n      }\n      basePullAt(array, indexes);\n      return result;\n    }\n\n    /**\n     * Reverses `array` so that the first element becomes the last, the second\n     * element becomes the second to last, and so on.\n     *\n     * **Note:** This method mutates `array` and is based on\n     * [`Array#reverse`](https://mdn.io/Array/reverse).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = [1, 2, 3];\n     *\n     * _.reverse(array);\n     * // => [3, 2, 1]\n     *\n     * console.log(array);\n     * // => [3, 2, 1]\n     */\n    function reverse(array) {\n      return array == null ? array : nativeReverse.call(array);\n    }\n\n    /**\n     * Creates a slice of `array` from `start` up to, but not including, `end`.\n     *\n     * **Note:** This method is used instead of\n     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are\n     * returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to slice.\n     * @param {number} [start=0] The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns the slice of `array`.\n     */\n    function slice(array, start, end) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {\n        start = 0;\n        end = length;\n      }\n      else {\n        start = start == null ? 0 : toInteger(start);\n        end = end === undefined ? length : toInteger(end);\n      }\n      return baseSlice(array, start, end);\n    }\n\n    /**\n     * Uses a binary search to determine the lowest index at which `value`\n     * should be inserted into `array` in order to maintain its sort order.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     * @example\n     *\n     * _.sortedIndex([30, 50], 40);\n     * // => 1\n     */\n    function sortedIndex(array, value) {\n      return baseSortedIndex(array, value);\n    }\n\n    /**\n     * This method is like `_.sortedIndex` except that it accepts `iteratee`\n     * which is invoked for `value` and each element of `array` to compute their\n     * sort ranking. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     * @example\n     *\n     * var objects = [{ 'x': 4 }, { 'x': 5 }];\n     *\n     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });\n     * // => 0\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');\n     * // => 0\n     */\n    function sortedIndexBy(array, value, iteratee) {\n      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));\n    }\n\n    /**\n     * This method is like `_.indexOf` except that it performs a binary\n     * search on a sorted `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {*} value The value to search for.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     * @example\n     *\n     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);\n     * // => 1\n     */\n    function sortedIndexOf(array, value) {\n      var length = array == null ? 0 : array.length;\n      if (length) {\n        var index = baseSortedIndex(array, value);\n        if (index < length && eq(array[index], value)) {\n          return index;\n        }\n      }\n      return -1;\n    }\n\n    /**\n     * This method is like `_.sortedIndex` except that it returns the highest\n     * index at which `value` should be inserted into `array` in order to\n     * maintain its sort order.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     * @example\n     *\n     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);\n     * // => 4\n     */\n    function sortedLastIndex(array, value) {\n      return baseSortedIndex(array, value, true);\n    }\n\n    /**\n     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`\n     * which is invoked for `value` and each element of `array` to compute their\n     * sort ranking. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     * @example\n     *\n     * var objects = [{ 'x': 4 }, { 'x': 5 }];\n     *\n     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });\n     * // => 1\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');\n     * // => 1\n     */\n    function sortedLastIndexBy(array, value, iteratee) {\n      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);\n    }\n\n    /**\n     * This method is like `_.lastIndexOf` except that it performs a binary\n     * search on a sorted `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {*} value The value to search for.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     * @example\n     *\n     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);\n     * // => 3\n     */\n    function sortedLastIndexOf(array, value) {\n      var length = array == null ? 0 : array.length;\n      if (length) {\n        var index = baseSortedIndex(array, value, true) - 1;\n        if (eq(array[index], value)) {\n          return index;\n        }\n      }\n      return -1;\n    }\n\n    /**\n     * This method is like `_.uniq` except that it's designed and optimized\n     * for sorted arrays.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * _.sortedUniq([1, 1, 2]);\n     * // => [1, 2]\n     */\n    function sortedUniq(array) {\n      return (array && array.length)\n        ? baseSortedUniq(array)\n        : [];\n    }\n\n    /**\n     * This method is like `_.uniqBy` except that it's designed and optimized\n     * for sorted arrays.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);\n     * // => [1.1, 2.3]\n     */\n    function sortedUniqBy(array, iteratee) {\n      return (array && array.length)\n        ? baseSortedUniq(array, getIteratee(iteratee, 2))\n        : [];\n    }\n\n    /**\n     * Gets all but the first element of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.tail([1, 2, 3]);\n     * // => [2, 3]\n     */\n    function tail(array) {\n      var length = array == null ? 0 : array.length;\n      return length ? baseSlice(array, 1, length) : [];\n    }\n\n    /**\n     * Creates a slice of `array` with `n` elements taken from the beginning.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=1] The number of elements to take.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.take([1, 2, 3]);\n     * // => [1]\n     *\n     * _.take([1, 2, 3], 2);\n     * // => [1, 2]\n     *\n     * _.take([1, 2, 3], 5);\n     * // => [1, 2, 3]\n     *\n     * _.take([1, 2, 3], 0);\n     * // => []\n     */\n    function take(array, n, guard) {\n      if (!(array && array.length)) {\n        return [];\n      }\n      n = (guard || n === undefined) ? 1 : toInteger(n);\n      return baseSlice(array, 0, n < 0 ? 0 : n);\n    }\n\n    /**\n     * Creates a slice of `array` with `n` elements taken from the end.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=1] The number of elements to take.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.takeRight([1, 2, 3]);\n     * // => [3]\n     *\n     * _.takeRight([1, 2, 3], 2);\n     * // => [2, 3]\n     *\n     * _.takeRight([1, 2, 3], 5);\n     * // => [1, 2, 3]\n     *\n     * _.takeRight([1, 2, 3], 0);\n     * // => []\n     */\n    function takeRight(array, n, guard) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      n = (guard || n === undefined) ? 1 : toInteger(n);\n      n = length - n;\n      return baseSlice(array, n < 0 ? 0 : n, length);\n    }\n\n    /**\n     * Creates a slice of `array` with elements taken from the end. Elements are\n     * taken until `predicate` returns falsey. The predicate is invoked with\n     * three arguments: (value, index, array).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': true },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': false }\n     * ];\n     *\n     * _.takeRightWhile(users, function(o) { return !o.active; });\n     * // => objects for ['fred', 'pebbles']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });\n     * // => objects for ['pebbles']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.takeRightWhile(users, ['active', false]);\n     * // => objects for ['fred', 'pebbles']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.takeRightWhile(users, 'active');\n     * // => []\n     */\n    function takeRightWhile(array, predicate) {\n      return (array && array.length)\n        ? baseWhile(array, getIteratee(predicate, 3), false, true)\n        : [];\n    }\n\n    /**\n     * Creates a slice of `array` with elements taken from the beginning. Elements\n     * are taken until `predicate` returns falsey. The predicate is invoked with\n     * three arguments: (value, index, array).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': false },\n     *   { 'user': 'fred',    'active': false},\n     *   { 'user': 'pebbles', 'active': true }\n     * ];\n     *\n     * _.takeWhile(users, function(o) { return !o.active; });\n     * // => objects for ['barney', 'fred']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.takeWhile(users, { 'user': 'barney', 'active': false });\n     * // => objects for ['barney']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.takeWhile(users, ['active', false]);\n     * // => objects for ['barney', 'fred']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.takeWhile(users, 'active');\n     * // => []\n     */\n    function takeWhile(array, predicate) {\n      return (array && array.length)\n        ? baseWhile(array, getIteratee(predicate, 3))\n        : [];\n    }\n\n    /**\n     * Creates an array of unique values, in order, from all given arrays using\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @returns {Array} Returns the new array of combined values.\n     * @example\n     *\n     * _.union([2], [1, 2]);\n     * // => [2, 1]\n     */\n    var union = baseRest(function(arrays) {\n      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));\n    });\n\n    /**\n     * This method is like `_.union` except that it accepts `iteratee` which is\n     * invoked for each element of each `arrays` to generate the criterion by\n     * which uniqueness is computed. Result values are chosen from the first\n     * array in which the value occurs. The iteratee is invoked with one argument:\n     * (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns the new array of combined values.\n     * @example\n     *\n     * _.unionBy([2.1], [1.2, 2.3], Math.floor);\n     * // => [2.1, 1.2]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n     * // => [{ 'x': 1 }, { 'x': 2 }]\n     */\n    var unionBy = baseRest(function(arrays) {\n      var iteratee = last(arrays);\n      if (isArrayLikeObject(iteratee)) {\n        iteratee = undefined;\n      }\n      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));\n    });\n\n    /**\n     * This method is like `_.union` except that it accepts `comparator` which\n     * is invoked to compare elements of `arrays`. Result values are chosen from\n     * the first array in which the value occurs. The comparator is invoked\n     * with two arguments: (arrVal, othVal).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of combined values.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n     *\n     * _.unionWith(objects, others, _.isEqual);\n     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]\n     */\n    var unionWith = baseRest(function(arrays) {\n      var comparator = last(arrays);\n      comparator = typeof comparator == 'function' ? comparator : undefined;\n      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);\n    });\n\n    /**\n     * Creates a duplicate-free version of an array, using\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons, in which only the first occurrence of each element\n     * is kept. The order of result values is determined by the order they occur\n     * in the array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * _.uniq([2, 1, 2]);\n     * // => [2, 1]\n     */\n    function uniq(array) {\n      return (array && array.length) ? baseUniq(array) : [];\n    }\n\n    /**\n     * This method is like `_.uniq` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the criterion by which\n     * uniqueness is computed. The order of result values is determined by the\n     * order they occur in the array. The iteratee is invoked with one argument:\n     * (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);\n     * // => [2.1, 1.2]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');\n     * // => [{ 'x': 1 }, { 'x': 2 }]\n     */\n    function uniqBy(array, iteratee) {\n      return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];\n    }\n\n    /**\n     * This method is like `_.uniq` except that it accepts `comparator` which\n     * is invoked to compare elements of `array`. The order of result values is\n     * determined by the order they occur in the array.The comparator is invoked\n     * with two arguments: (arrVal, othVal).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];\n     *\n     * _.uniqWith(objects, _.isEqual);\n     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]\n     */\n    function uniqWith(array, comparator) {\n      comparator = typeof comparator == 'function' ? comparator : undefined;\n      return (array && array.length) ? baseUniq(array, undefined, comparator) : [];\n    }\n\n    /**\n     * This method is like `_.zip` except that it accepts an array of grouped\n     * elements and creates an array regrouping the elements to their pre-zip\n     * configuration.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.2.0\n     * @category Array\n     * @param {Array} array The array of grouped elements to process.\n     * @returns {Array} Returns the new array of regrouped elements.\n     * @example\n     *\n     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);\n     * // => [['a', 1, true], ['b', 2, false]]\n     *\n     * _.unzip(zipped);\n     * // => [['a', 'b'], [1, 2], [true, false]]\n     */\n    function unzip(array) {\n      if (!(array && array.length)) {\n        return [];\n      }\n      var length = 0;\n      array = arrayFilter(array, function(group) {\n        if (isArrayLikeObject(group)) {\n          length = nativeMax(group.length, length);\n          return true;\n        }\n      });\n      return baseTimes(length, function(index) {\n        return arrayMap(array, baseProperty(index));\n      });\n    }\n\n    /**\n     * This method is like `_.unzip` except that it accepts `iteratee` to specify\n     * how regrouped values should be combined. The iteratee is invoked with the\n     * elements of each group: (...group).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.8.0\n     * @category Array\n     * @param {Array} array The array of grouped elements to process.\n     * @param {Function} [iteratee=_.identity] The function to combine\n     *  regrouped values.\n     * @returns {Array} Returns the new array of regrouped elements.\n     * @example\n     *\n     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);\n     * // => [[1, 10, 100], [2, 20, 200]]\n     *\n     * _.unzipWith(zipped, _.add);\n     * // => [3, 30, 300]\n     */\n    function unzipWith(array, iteratee) {\n      if (!(array && array.length)) {\n        return [];\n      }\n      var result = unzip(array);\n      if (iteratee == null) {\n        return result;\n      }\n      return arrayMap(result, function(group) {\n        return apply(iteratee, undefined, group);\n      });\n    }\n\n    /**\n     * Creates an array excluding all given values using\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons.\n     *\n     * **Note:** Unlike `_.pull`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {...*} [values] The values to exclude.\n     * @returns {Array} Returns the new array of filtered values.\n     * @see _.difference, _.xor\n     * @example\n     *\n     * _.without([2, 1, 2, 3], 1, 2);\n     * // => [3]\n     */\n    var without = baseRest(function(array, values) {\n      return isArrayLikeObject(array)\n        ? baseDifference(array, values)\n        : [];\n    });\n\n    /**\n     * Creates an array of unique values that is the\n     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)\n     * of the given arrays. The order of result values is determined by the order\n     * they occur in the arrays.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @returns {Array} Returns the new array of filtered values.\n     * @see _.difference, _.without\n     * @example\n     *\n     * _.xor([2, 1], [2, 3]);\n     * // => [1, 3]\n     */\n    var xor = baseRest(function(arrays) {\n      return baseXor(arrayFilter(arrays, isArrayLikeObject));\n    });\n\n    /**\n     * This method is like `_.xor` except that it accepts `iteratee` which is\n     * invoked for each element of each `arrays` to generate the criterion by\n     * which by which they're compared. The order of result values is determined\n     * by the order they occur in the arrays. The iteratee is invoked with one\n     * argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n     * // => [1.2, 3.4]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n     * // => [{ 'x': 2 }]\n     */\n    var xorBy = baseRest(function(arrays) {\n      var iteratee = last(arrays);\n      if (isArrayLikeObject(iteratee)) {\n        iteratee = undefined;\n      }\n      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));\n    });\n\n    /**\n     * This method is like `_.xor` except that it accepts `comparator` which is\n     * invoked to compare elements of `arrays`. The order of result values is\n     * determined by the order they occur in the arrays. The comparator is invoked\n     * with two arguments: (arrVal, othVal).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n     *\n     * _.xorWith(objects, others, _.isEqual);\n     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]\n     */\n    var xorWith = baseRest(function(arrays) {\n      var comparator = last(arrays);\n      comparator = typeof comparator == 'function' ? comparator : undefined;\n      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);\n    });\n\n    /**\n     * Creates an array of grouped elements, the first of which contains the\n     * first elements of the given arrays, the second of which contains the\n     * second elements of the given arrays, and so on.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to process.\n     * @returns {Array} Returns the new array of grouped elements.\n     * @example\n     *\n     * _.zip(['a', 'b'], [1, 2], [true, false]);\n     * // => [['a', 1, true], ['b', 2, false]]\n     */\n    var zip = baseRest(unzip);\n\n    /**\n     * This method is like `_.fromPairs` except that it accepts two arrays,\n     * one of property identifiers and one of corresponding values.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.4.0\n     * @category Array\n     * @param {Array} [props=[]] The property identifiers.\n     * @param {Array} [values=[]] The property values.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * _.zipObject(['a', 'b'], [1, 2]);\n     * // => { 'a': 1, 'b': 2 }\n     */\n    function zipObject(props, values) {\n      return baseZipObject(props || [], values || [], assignValue);\n    }\n\n    /**\n     * This method is like `_.zipObject` except that it supports property paths.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.1.0\n     * @category Array\n     * @param {Array} [props=[]] The property identifiers.\n     * @param {Array} [values=[]] The property values.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);\n     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }\n     */\n    function zipObjectDeep(props, values) {\n      return baseZipObject(props || [], values || [], baseSet);\n    }\n\n    /**\n     * This method is like `_.zip` except that it accepts `iteratee` to specify\n     * how grouped values should be combined. The iteratee is invoked with the\n     * elements of each group: (...group).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.8.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to process.\n     * @param {Function} [iteratee=_.identity] The function to combine\n     *  grouped values.\n     * @returns {Array} Returns the new array of grouped elements.\n     * @example\n     *\n     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {\n     *   return a + b + c;\n     * });\n     * // => [111, 222]\n     */\n    var zipWith = baseRest(function(arrays) {\n      var length = arrays.length,\n          iteratee = length > 1 ? arrays[length - 1] : undefined;\n\n      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;\n      return unzipWith(arrays, iteratee);\n    });\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a `lodash` wrapper instance that wraps `value` with explicit method\n     * chain sequences enabled. The result of such sequences must be unwrapped\n     * with `_#value`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.3.0\n     * @category Seq\n     * @param {*} value The value to wrap.\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'age': 36 },\n     *   { 'user': 'fred',    'age': 40 },\n     *   { 'user': 'pebbles', 'age': 1 }\n     * ];\n     *\n     * var youngest = _\n     *   .chain(users)\n     *   .sortBy('age')\n     *   .map(function(o) {\n     *     return o.user + ' is ' + o.age;\n     *   })\n     *   .head()\n     *   .value();\n     * // => 'pebbles is 1'\n     */\n    function chain(value) {\n      var result = lodash(value);\n      result.__chain__ = true;\n      return result;\n    }\n\n    /**\n     * This method invokes `interceptor` and returns `value`. The interceptor\n     * is invoked with one argument; (value). The purpose of this method is to\n     * \"tap into\" a method chain sequence in order to modify intermediate results.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Seq\n     * @param {*} value The value to provide to `interceptor`.\n     * @param {Function} interceptor The function to invoke.\n     * @returns {*} Returns `value`.\n     * @example\n     *\n     * _([1, 2, 3])\n     *  .tap(function(array) {\n     *    // Mutate input array.\n     *    array.pop();\n     *  })\n     *  .reverse()\n     *  .value();\n     * // => [2, 1]\n     */\n    function tap(value, interceptor) {\n      interceptor(value);\n      return value;\n    }\n\n    /**\n     * This method is like `_.tap` except that it returns the result of `interceptor`.\n     * The purpose of this method is to \"pass thru\" values replacing intermediate\n     * results in a method chain sequence.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Seq\n     * @param {*} value The value to provide to `interceptor`.\n     * @param {Function} interceptor The function to invoke.\n     * @returns {*} Returns the result of `interceptor`.\n     * @example\n     *\n     * _('  abc  ')\n     *  .chain()\n     *  .trim()\n     *  .thru(function(value) {\n     *    return [value];\n     *  })\n     *  .value();\n     * // => ['abc']\n     */\n    function thru(value, interceptor) {\n      return interceptor(value);\n    }\n\n    /**\n     * This method is the wrapper version of `_.at`.\n     *\n     * @name at\n     * @memberOf _\n     * @since 1.0.0\n     * @category Seq\n     * @param {...(string|string[])} [paths] The property paths of elements to pick.\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };\n     *\n     * _(object).at(['a[0].b.c', 'a[1]']).value();\n     * // => [3, 4]\n     */\n    var wrapperAt = flatRest(function(paths) {\n      var length = paths.length,\n          start = length ? paths[0] : 0,\n          value = this.__wrapped__,\n          interceptor = function(object) { return baseAt(object, paths); };\n\n      if (length > 1 || this.__actions__.length ||\n          !(value instanceof LazyWrapper) || !isIndex(start)) {\n        return this.thru(interceptor);\n      }\n      value = value.slice(start, +start + (length ? 1 : 0));\n      value.__actions__.push({\n        'func': thru,\n        'args': [interceptor],\n        'thisArg': undefined\n      });\n      return new LodashWrapper(value, this.__chain__).thru(function(array) {\n        if (length && !array.length) {\n          array.push(undefined);\n        }\n        return array;\n      });\n    });\n\n    /**\n     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.\n     *\n     * @name chain\n     * @memberOf _\n     * @since 0.1.0\n     * @category Seq\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36 },\n     *   { 'user': 'fred',   'age': 40 }\n     * ];\n     *\n     * // A sequence without explicit chaining.\n     * _(users).head();\n     * // => { 'user': 'barney', 'age': 36 }\n     *\n     * // A sequence with explicit chaining.\n     * _(users)\n     *   .chain()\n     *   .head()\n     *   .pick('user')\n     *   .value();\n     * // => { 'user': 'barney' }\n     */\n    function wrapperChain() {\n      return chain(this);\n    }\n\n    /**\n     * Executes the chain sequence and returns the wrapped result.\n     *\n     * @name commit\n     * @memberOf _\n     * @since 3.2.0\n     * @category Seq\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var array = [1, 2];\n     * var wrapped = _(array).push(3);\n     *\n     * console.log(array);\n     * // => [1, 2]\n     *\n     * wrapped = wrapped.commit();\n     * console.log(array);\n     * // => [1, 2, 3]\n     *\n     * wrapped.last();\n     * // => 3\n     *\n     * console.log(array);\n     * // => [1, 2, 3]\n     */\n    function wrapperCommit() {\n      return new LodashWrapper(this.value(), this.__chain__);\n    }\n\n    /**\n     * Gets the next value on a wrapped object following the\n     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).\n     *\n     * @name next\n     * @memberOf _\n     * @since 4.0.0\n     * @category Seq\n     * @returns {Object} Returns the next iterator value.\n     * @example\n     *\n     * var wrapped = _([1, 2]);\n     *\n     * wrapped.next();\n     * // => { 'done': false, 'value': 1 }\n     *\n     * wrapped.next();\n     * // => { 'done': false, 'value': 2 }\n     *\n     * wrapped.next();\n     * // => { 'done': true, 'value': undefined }\n     */\n    function wrapperNext() {\n      if (this.__values__ === undefined) {\n        this.__values__ = toArray(this.value());\n      }\n      var done = this.__index__ >= this.__values__.length,\n          value = done ? undefined : this.__values__[this.__index__++];\n\n      return { 'done': done, 'value': value };\n    }\n\n    /**\n     * Enables the wrapper to be iterable.\n     *\n     * @name Symbol.iterator\n     * @memberOf _\n     * @since 4.0.0\n     * @category Seq\n     * @returns {Object} Returns the wrapper object.\n     * @example\n     *\n     * var wrapped = _([1, 2]);\n     *\n     * wrapped[Symbol.iterator]() === wrapped;\n     * // => true\n     *\n     * Array.from(wrapped);\n     * // => [1, 2]\n     */\n    function wrapperToIterator() {\n      return this;\n    }\n\n    /**\n     * Creates a clone of the chain sequence planting `value` as the wrapped value.\n     *\n     * @name plant\n     * @memberOf _\n     * @since 3.2.0\n     * @category Seq\n     * @param {*} value The value to plant.\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var wrapped = _([1, 2]).map(square);\n     * var other = wrapped.plant([3, 4]);\n     *\n     * other.value();\n     * // => [9, 16]\n     *\n     * wrapped.value();\n     * // => [1, 4]\n     */\n    function wrapperPlant(value) {\n      var result,\n          parent = this;\n\n      while (parent instanceof baseLodash) {\n        var clone = wrapperClone(parent);\n        clone.__index__ = 0;\n        clone.__values__ = undefined;\n        if (result) {\n          previous.__wrapped__ = clone;\n        } else {\n          result = clone;\n        }\n        var previous = clone;\n        parent = parent.__wrapped__;\n      }\n      previous.__wrapped__ = value;\n      return result;\n    }\n\n    /**\n     * This method is the wrapper version of `_.reverse`.\n     *\n     * **Note:** This method mutates the wrapped array.\n     *\n     * @name reverse\n     * @memberOf _\n     * @since 0.1.0\n     * @category Seq\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var array = [1, 2, 3];\n     *\n     * _(array).reverse().value()\n     * // => [3, 2, 1]\n     *\n     * console.log(array);\n     * // => [3, 2, 1]\n     */\n    function wrapperReverse() {\n      var value = this.__wrapped__;\n      if (value instanceof LazyWrapper) {\n        var wrapped = value;\n        if (this.__actions__.length) {\n          wrapped = new LazyWrapper(this);\n        }\n        wrapped = wrapped.reverse();\n        wrapped.__actions__.push({\n          'func': thru,\n          'args': [reverse],\n          'thisArg': undefined\n        });\n        return new LodashWrapper(wrapped, this.__chain__);\n      }\n      return this.thru(reverse);\n    }\n\n    /**\n     * Executes the chain sequence to resolve the unwrapped value.\n     *\n     * @name value\n     * @memberOf _\n     * @since 0.1.0\n     * @alias toJSON, valueOf\n     * @category Seq\n     * @returns {*} Returns the resolved unwrapped value.\n     * @example\n     *\n     * _([1, 2, 3]).value();\n     * // => [1, 2, 3]\n     */\n    function wrapperValue() {\n      return baseWrapperValue(this.__wrapped__, this.__actions__);\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates an object composed of keys generated from the results of running\n     * each element of `collection` thru `iteratee`. The corresponding value of\n     * each key is the number of times the key was returned by `iteratee`. The\n     * iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.5.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.\n     * @returns {Object} Returns the composed aggregate object.\n     * @example\n     *\n     * _.countBy([6.1, 4.2, 6.3], Math.floor);\n     * // => { '4': 1, '6': 2 }\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.countBy(['one', 'two', 'three'], 'length');\n     * // => { '3': 2, '5': 1 }\n     */\n    var countBy = createAggregator(function(result, value, key) {\n      if (hasOwnProperty.call(result, key)) {\n        ++result[key];\n      } else {\n        baseAssignValue(result, key, 1);\n      }\n    });\n\n    /**\n     * Checks if `predicate` returns truthy for **all** elements of `collection`.\n     * Iteration is stopped once `predicate` returns falsey. The predicate is\n     * invoked with three arguments: (value, index|key, collection).\n     *\n     * **Note:** This method returns `true` for\n     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because\n     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of\n     * elements of empty collections.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {boolean} Returns `true` if all elements pass the predicate check,\n     *  else `false`.\n     * @example\n     *\n     * _.every([true, 1, null, 'yes'], Boolean);\n     * // => false\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36, 'active': false },\n     *   { 'user': 'fred',   'age': 40, 'active': false }\n     * ];\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.every(users, { 'user': 'barney', 'active': false });\n     * // => false\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.every(users, ['active', false]);\n     * // => true\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.every(users, 'active');\n     * // => false\n     */\n    function every(collection, predicate, guard) {\n      var func = isArray(collection) ? arrayEvery : baseEvery;\n      if (guard && isIterateeCall(collection, predicate, guard)) {\n        predicate = undefined;\n      }\n      return func(collection, getIteratee(predicate, 3));\n    }\n\n    /**\n     * Iterates over elements of `collection`, returning an array of all elements\n     * `predicate` returns truthy for. The predicate is invoked with three\n     * arguments: (value, index|key, collection).\n     *\n     * **Note:** Unlike `_.remove`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new filtered array.\n     * @see _.reject\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36, 'active': true },\n     *   { 'user': 'fred',   'age': 40, 'active': false }\n     * ];\n     *\n     * _.filter(users, function(o) { return !o.active; });\n     * // => objects for ['fred']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.filter(users, { 'age': 36, 'active': true });\n     * // => objects for ['barney']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.filter(users, ['active', false]);\n     * // => objects for ['fred']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.filter(users, 'active');\n     * // => objects for ['barney']\n     */\n    function filter(collection, predicate) {\n      var func = isArray(collection) ? arrayFilter : baseFilter;\n      return func(collection, getIteratee(predicate, 3));\n    }\n\n    /**\n     * Iterates over elements of `collection`, returning the first element\n     * `predicate` returns truthy for. The predicate is invoked with three\n     * arguments: (value, index|key, collection).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param {number} [fromIndex=0] The index to search from.\n     * @returns {*} Returns the matched element, else `undefined`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'age': 36, 'active': true },\n     *   { 'user': 'fred',    'age': 40, 'active': false },\n     *   { 'user': 'pebbles', 'age': 1,  'active': true }\n     * ];\n     *\n     * _.find(users, function(o) { return o.age < 40; });\n     * // => object for 'barney'\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.find(users, { 'age': 1, 'active': true });\n     * // => object for 'pebbles'\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.find(users, ['active', false]);\n     * // => object for 'fred'\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.find(users, 'active');\n     * // => object for 'barney'\n     */\n    var find = createFind(findIndex);\n\n    /**\n     * This method is like `_.find` except that it iterates over elements of\n     * `collection` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param {number} [fromIndex=collection.length-1] The index to search from.\n     * @returns {*} Returns the matched element, else `undefined`.\n     * @example\n     *\n     * _.findLast([1, 2, 3, 4], function(n) {\n     *   return n % 2 == 1;\n     * });\n     * // => 3\n     */\n    var findLast = createFind(findLastIndex);\n\n    /**\n     * Creates a flattened array of values by running each element in `collection`\n     * thru `iteratee` and flattening the mapped results. The iteratee is invoked\n     * with three arguments: (value, index|key, collection).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * function duplicate(n) {\n     *   return [n, n];\n     * }\n     *\n     * _.flatMap([1, 2], duplicate);\n     * // => [1, 1, 2, 2]\n     */\n    function flatMap(collection, iteratee) {\n      return baseFlatten(map(collection, iteratee), 1);\n    }\n\n    /**\n     * This method is like `_.flatMap` except that it recursively flattens the\n     * mapped results.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * function duplicate(n) {\n     *   return [[[n, n]]];\n     * }\n     *\n     * _.flatMapDeep([1, 2], duplicate);\n     * // => [1, 1, 2, 2]\n     */\n    function flatMapDeep(collection, iteratee) {\n      return baseFlatten(map(collection, iteratee), INFINITY);\n    }\n\n    /**\n     * This method is like `_.flatMap` except that it recursively flattens the\n     * mapped results up to `depth` times.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @param {number} [depth=1] The maximum recursion depth.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * function duplicate(n) {\n     *   return [[[n, n]]];\n     * }\n     *\n     * _.flatMapDepth([1, 2], duplicate, 2);\n     * // => [[1, 1], [2, 2]]\n     */\n    function flatMapDepth(collection, iteratee, depth) {\n      depth = depth === undefined ? 1 : toInteger(depth);\n      return baseFlatten(map(collection, iteratee), depth);\n    }\n\n    /**\n     * Iterates over elements of `collection` and invokes `iteratee` for each element.\n     * The iteratee is invoked with three arguments: (value, index|key, collection).\n     * Iteratee functions may exit iteration early by explicitly returning `false`.\n     *\n     * **Note:** As with other \"Collections\" methods, objects with a \"length\"\n     * property are iterated like arrays. To avoid this behavior use `_.forIn`\n     * or `_.forOwn` for object iteration.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @alias each\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array|Object} Returns `collection`.\n     * @see _.forEachRight\n     * @example\n     *\n     * _.forEach([1, 2], function(value) {\n     *   console.log(value);\n     * });\n     * // => Logs `1` then `2`.\n     *\n     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'a' then 'b' (iteration order is not guaranteed).\n     */\n    function forEach(collection, iteratee) {\n      var func = isArray(collection) ? arrayEach : baseEach;\n      return func(collection, getIteratee(iteratee, 3));\n    }\n\n    /**\n     * This method is like `_.forEach` except that it iterates over elements of\n     * `collection` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @alias eachRight\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array|Object} Returns `collection`.\n     * @see _.forEach\n     * @example\n     *\n     * _.forEachRight([1, 2], function(value) {\n     *   console.log(value);\n     * });\n     * // => Logs `2` then `1`.\n     */\n    function forEachRight(collection, iteratee) {\n      var func = isArray(collection) ? arrayEachRight : baseEachRight;\n      return func(collection, getIteratee(iteratee, 3));\n    }\n\n    /**\n     * Creates an object composed of keys generated from the results of running\n     * each element of `collection` thru `iteratee`. The order of grouped values\n     * is determined by the order they occur in `collection`. The corresponding\n     * value of each key is an array of elements responsible for generating the\n     * key. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.\n     * @returns {Object} Returns the composed aggregate object.\n     * @example\n     *\n     * _.groupBy([6.1, 4.2, 6.3], Math.floor);\n     * // => { '4': [4.2], '6': [6.1, 6.3] }\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.groupBy(['one', 'two', 'three'], 'length');\n     * // => { '3': ['one', 'two'], '5': ['three'] }\n     */\n    var groupBy = createAggregator(function(result, value, key) {\n      if (hasOwnProperty.call(result, key)) {\n        result[key].push(value);\n      } else {\n        baseAssignValue(result, key, [value]);\n      }\n    });\n\n    /**\n     * Checks if `value` is in `collection`. If `collection` is a string, it's\n     * checked for a substring of `value`, otherwise\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * is used for equality comparisons. If `fromIndex` is negative, it's used as\n     * the offset from the end of `collection`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object|string} collection The collection to inspect.\n     * @param {*} value The value to search for.\n     * @param {number} [fromIndex=0] The index to search from.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\n     * @returns {boolean} Returns `true` if `value` is found, else `false`.\n     * @example\n     *\n     * _.includes([1, 2, 3], 1);\n     * // => true\n     *\n     * _.includes([1, 2, 3], 1, 2);\n     * // => false\n     *\n     * _.includes({ 'a': 1, 'b': 2 }, 1);\n     * // => true\n     *\n     * _.includes('abcd', 'bc');\n     * // => true\n     */\n    function includes(collection, value, fromIndex, guard) {\n      collection = isArrayLike(collection) ? collection : values(collection);\n      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;\n\n      var length = collection.length;\n      if (fromIndex < 0) {\n        fromIndex = nativeMax(length + fromIndex, 0);\n      }\n      return isString(collection)\n        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)\n        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);\n    }\n\n    /**\n     * Invokes the method at `path` of each element in `collection`, returning\n     * an array of the results of each invoked method. Any additional arguments\n     * are provided to each invoked method. If `path` is a function, it's invoked\n     * for, and `this` bound to, each element in `collection`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Array|Function|string} path The path of the method to invoke or\n     *  the function invoked per iteration.\n     * @param {...*} [args] The arguments to invoke each method with.\n     * @returns {Array} Returns the array of results.\n     * @example\n     *\n     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');\n     * // => [[1, 5, 7], [1, 2, 3]]\n     *\n     * _.invokeMap([123, 456], String.prototype.split, '');\n     * // => [['1', '2', '3'], ['4', '5', '6']]\n     */\n    var invokeMap = baseRest(function(collection, path, args) {\n      var index = -1,\n          isFunc = typeof path == 'function',\n          isProp = isKey(path),\n          result = isArrayLike(collection) ? Array(collection.length) : [];\n\n      baseEach(collection, function(value) {\n        var func = isFunc ? path : ((isProp && value != null) ? value[path] : undefined);\n        result[++index] = func ? apply(func, value, args) : baseInvoke(value, path, args);\n      });\n      return result;\n    });\n\n    /**\n     * Creates an object composed of keys generated from the results of running\n     * each element of `collection` thru `iteratee`. The corresponding value of\n     * each key is the last element responsible for generating the key. The\n     * iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.\n     * @returns {Object} Returns the composed aggregate object.\n     * @example\n     *\n     * var array = [\n     *   { 'dir': 'left', 'code': 97 },\n     *   { 'dir': 'right', 'code': 100 }\n     * ];\n     *\n     * _.keyBy(array, function(o) {\n     *   return String.fromCharCode(o.code);\n     * });\n     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }\n     *\n     * _.keyBy(array, 'dir');\n     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }\n     */\n    var keyBy = createAggregator(function(result, value, key) {\n      baseAssignValue(result, key, value);\n    });\n\n    /**\n     * Creates an array of values by running each element in `collection` thru\n     * `iteratee`. The iteratee is invoked with three arguments:\n     * (value, index|key, collection).\n     *\n     * Many lodash methods are guarded to work as iteratees for methods like\n     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.\n     *\n     * The guarded methods are:\n     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,\n     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,\n     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,\n     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new mapped array.\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * _.map([4, 8], square);\n     * // => [16, 64]\n     *\n     * _.map({ 'a': 4, 'b': 8 }, square);\n     * // => [16, 64] (iteration order is not guaranteed)\n     *\n     * var users = [\n     *   { 'user': 'barney' },\n     *   { 'user': 'fred' }\n     * ];\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.map(users, 'user');\n     * // => ['barney', 'fred']\n     */\n    function map(collection, iteratee) {\n      var func = isArray(collection) ? arrayMap : baseMap;\n      return func(collection, getIteratee(iteratee, 3));\n    }\n\n    /**\n     * This method is like `_.sortBy` except that it allows specifying the sort\n     * orders of the iteratees to sort by. If `orders` is unspecified, all values\n     * are sorted in ascending order. Otherwise, specify an order of \"desc\" for\n     * descending or \"asc\" for ascending sort order of corresponding values.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]\n     *  The iteratees to sort by.\n     * @param {string[]} [orders] The sort orders of `iteratees`.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\n     * @returns {Array} Returns the new sorted array.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'fred',   'age': 48 },\n     *   { 'user': 'barney', 'age': 34 },\n     *   { 'user': 'fred',   'age': 40 },\n     *   { 'user': 'barney', 'age': 36 }\n     * ];\n     *\n     * // Sort by `user` in ascending order and by `age` in descending order.\n     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);\n     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]\n     */\n    function orderBy(collection, iteratees, orders, guard) {\n      if (collection == null) {\n        return [];\n      }\n      if (!isArray(iteratees)) {\n        iteratees = iteratees == null ? [] : [iteratees];\n      }\n      orders = guard ? undefined : orders;\n      if (!isArray(orders)) {\n        orders = orders == null ? [] : [orders];\n      }\n      return baseOrderBy(collection, iteratees, orders);\n    }\n\n    /**\n     * Creates an array of elements split into two groups, the first of which\n     * contains elements `predicate` returns truthy for, the second of which\n     * contains elements `predicate` returns falsey for. The predicate is\n     * invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the array of grouped elements.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'age': 36, 'active': false },\n     *   { 'user': 'fred',    'age': 40, 'active': true },\n     *   { 'user': 'pebbles', 'age': 1,  'active': false }\n     * ];\n     *\n     * _.partition(users, function(o) { return o.active; });\n     * // => objects for [['fred'], ['barney', 'pebbles']]\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.partition(users, { 'age': 1, 'active': false });\n     * // => objects for [['pebbles'], ['barney', 'fred']]\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.partition(users, ['active', false]);\n     * // => objects for [['barney', 'pebbles'], ['fred']]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.partition(users, 'active');\n     * // => objects for [['fred'], ['barney', 'pebbles']]\n     */\n    var partition = createAggregator(function(result, value, key) {\n      result[key ? 0 : 1].push(value);\n    }, function() { return [[], []]; });\n\n    /**\n     * Reduces `collection` to a value which is the accumulated result of running\n     * each element in `collection` thru `iteratee`, where each successive\n     * invocation is supplied the return value of the previous. If `accumulator`\n     * is not given, the first element of `collection` is used as the initial\n     * value. The iteratee is invoked with four arguments:\n     * (accumulator, value, index|key, collection).\n     *\n     * Many lodash methods are guarded to work as iteratees for methods like\n     * `_.reduce`, `_.reduceRight`, and `_.transform`.\n     *\n     * The guarded methods are:\n     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,\n     * and `sortBy`\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @param {*} [accumulator] The initial value.\n     * @returns {*} Returns the accumulated value.\n     * @see _.reduceRight\n     * @example\n     *\n     * _.reduce([1, 2], function(sum, n) {\n     *   return sum + n;\n     * }, 0);\n     * // => 3\n     *\n     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\n     *   (result[value] || (result[value] = [])).push(key);\n     *   return result;\n     * }, {});\n     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)\n     */\n    function reduce(collection, iteratee, accumulator) {\n      var func = isArray(collection) ? arrayReduce : baseReduce,\n          initAccum = arguments.length < 3;\n\n      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);\n    }\n\n    /**\n     * This method is like `_.reduce` except that it iterates over elements of\n     * `collection` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @param {*} [accumulator] The initial value.\n     * @returns {*} Returns the accumulated value.\n     * @see _.reduce\n     * @example\n     *\n     * var array = [[0, 1], [2, 3], [4, 5]];\n     *\n     * _.reduceRight(array, function(flattened, other) {\n     *   return flattened.concat(other);\n     * }, []);\n     * // => [4, 5, 2, 3, 0, 1]\n     */\n    function reduceRight(collection, iteratee, accumulator) {\n      var func = isArray(collection) ? arrayReduceRight : baseReduce,\n          initAccum = arguments.length < 3;\n\n      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);\n    }\n\n    /**\n     * The opposite of `_.filter`; this method returns the elements of `collection`\n     * that `predicate` does **not** return truthy for.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new filtered array.\n     * @see _.filter\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36, 'active': false },\n     *   { 'user': 'fred',   'age': 40, 'active': true }\n     * ];\n     *\n     * _.reject(users, function(o) { return !o.active; });\n     * // => objects for ['fred']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.reject(users, { 'age': 40, 'active': true });\n     * // => objects for ['barney']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.reject(users, ['active', false]);\n     * // => objects for ['fred']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.reject(users, 'active');\n     * // => objects for ['barney']\n     */\n    function reject(collection, predicate) {\n      var func = isArray(collection) ? arrayFilter : baseFilter;\n      return func(collection, negate(getIteratee(predicate, 3)));\n    }\n\n    /**\n     * Gets a random element from `collection`.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to sample.\n     * @returns {*} Returns the random element.\n     * @example\n     *\n     * _.sample([1, 2, 3, 4]);\n     * // => 2\n     */\n    function sample(collection) {\n      var func = isArray(collection) ? arraySample : baseSample;\n      return func(collection);\n    }\n\n    /**\n     * Gets `n` random elements at unique keys from `collection` up to the\n     * size of `collection`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to sample.\n     * @param {number} [n=1] The number of elements to sample.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the random elements.\n     * @example\n     *\n     * _.sampleSize([1, 2, 3], 2);\n     * // => [3, 1]\n     *\n     * _.sampleSize([1, 2, 3], 4);\n     * // => [2, 3, 1]\n     */\n    function sampleSize(collection, n, guard) {\n      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {\n        n = 1;\n      } else {\n        n = toInteger(n);\n      }\n      var func = isArray(collection) ? arraySampleSize : baseSampleSize;\n      return func(collection, n);\n    }\n\n    /**\n     * Creates an array of shuffled values, using a version of the\n     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to shuffle.\n     * @returns {Array} Returns the new shuffled array.\n     * @example\n     *\n     * _.shuffle([1, 2, 3, 4]);\n     * // => [4, 1, 3, 2]\n     */\n    function shuffle(collection) {\n      var func = isArray(collection) ? arrayShuffle : baseShuffle;\n      return func(collection);\n    }\n\n    /**\n     * Gets the size of `collection` by returning its length for array-like\n     * values or the number of own enumerable string keyed properties for objects.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object|string} collection The collection to inspect.\n     * @returns {number} Returns the collection size.\n     * @example\n     *\n     * _.size([1, 2, 3]);\n     * // => 3\n     *\n     * _.size({ 'a': 1, 'b': 2 });\n     * // => 2\n     *\n     * _.size('pebbles');\n     * // => 7\n     */\n    function size(collection) {\n      if (collection == null) {\n        return 0;\n      }\n      if (isArrayLike(collection)) {\n        return isString(collection) ? stringSize(collection) : collection.length;\n      }\n      var tag = getTag(collection);\n      if (tag == mapTag || tag == setTag) {\n        return collection.size;\n      }\n      return baseKeys(collection).length;\n    }\n\n    /**\n     * Checks if `predicate` returns truthy for **any** element of `collection`.\n     * Iteration is stopped once `predicate` returns truthy. The predicate is\n     * invoked with three arguments: (value, index|key, collection).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {boolean} Returns `true` if any element passes the predicate check,\n     *  else `false`.\n     * @example\n     *\n     * _.some([null, 0, 'yes', false], Boolean);\n     * // => true\n     *\n     * var users = [\n     *   { 'user': 'barney', 'active': true },\n     *   { 'user': 'fred',   'active': false }\n     * ];\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.some(users, { 'user': 'barney', 'active': false });\n     * // => false\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.some(users, ['active', false]);\n     * // => true\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.some(users, 'active');\n     * // => true\n     */\n    function some(collection, predicate, guard) {\n      var func = isArray(collection) ? arraySome : baseSome;\n      if (guard && isIterateeCall(collection, predicate, guard)) {\n        predicate = undefined;\n      }\n      return func(collection, getIteratee(predicate, 3));\n    }\n\n    /**\n     * Creates an array of elements, sorted in ascending order by the results of\n     * running each element in a collection thru each iteratee. This method\n     * performs a stable sort, that is, it preserves the original sort order of\n     * equal elements. The iteratees are invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {...(Function|Function[])} [iteratees=[_.identity]]\n     *  The iteratees to sort by.\n     * @returns {Array} Returns the new sorted array.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'fred',   'age': 48 },\n     *   { 'user': 'barney', 'age': 36 },\n     *   { 'user': 'fred',   'age': 40 },\n     *   { 'user': 'barney', 'age': 34 }\n     * ];\n     *\n     * _.sortBy(users, [function(o) { return o.user; }]);\n     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]\n     *\n     * _.sortBy(users, ['user', 'age']);\n     * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]\n     */\n    var sortBy = baseRest(function(collection, iteratees) {\n      if (collection == null) {\n        return [];\n      }\n      var length = iteratees.length;\n      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {\n        iteratees = [];\n      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {\n        iteratees = [iteratees[0]];\n      }\n      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);\n    });\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Gets the timestamp of the number of milliseconds that have elapsed since\n     * the Unix epoch (1 January 1970 00:00:00 UTC).\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Date\n     * @returns {number} Returns the timestamp.\n     * @example\n     *\n     * _.defer(function(stamp) {\n     *   console.log(_.now() - stamp);\n     * }, _.now());\n     * // => Logs the number of milliseconds it took for the deferred invocation.\n     */\n    var now = ctxNow || function() {\n      return root.Date.now();\n    };\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * The opposite of `_.before`; this method creates a function that invokes\n     * `func` once it's called `n` or more times.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {number} n The number of calls before `func` is invoked.\n     * @param {Function} func The function to restrict.\n     * @returns {Function} Returns the new restricted function.\n     * @example\n     *\n     * var saves = ['profile', 'settings'];\n     *\n     * var done = _.after(saves.length, function() {\n     *   console.log('done saving!');\n     * });\n     *\n     * _.forEach(saves, function(type) {\n     *   asyncSave({ 'type': type, 'complete': done });\n     * });\n     * // => Logs 'done saving!' after the two async saves have completed.\n     */\n    function after(n, func) {\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      n = toInteger(n);\n      return function() {\n        if (--n < 1) {\n          return func.apply(this, arguments);\n        }\n      };\n    }\n\n    /**\n     * Creates a function that invokes `func`, with up to `n` arguments,\n     * ignoring any additional arguments.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {Function} func The function to cap arguments for.\n     * @param {number} [n=func.length] The arity cap.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Function} Returns the new capped function.\n     * @example\n     *\n     * _.map(['6', '8', '10'], _.ary(parseInt, 1));\n     * // => [6, 8, 10]\n     */\n    function ary(func, n, guard) {\n      n = guard ? undefined : n;\n      n = (func && n == null) ? func.length : n;\n      return createWrap(func, ARY_FLAG, undefined, undefined, undefined, undefined, n);\n    }\n\n    /**\n     * Creates a function that invokes `func`, with the `this` binding and arguments\n     * of the created function, while it's called less than `n` times. Subsequent\n     * calls to the created function return the result of the last `func` invocation.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {number} n The number of calls at which `func` is no longer invoked.\n     * @param {Function} func The function to restrict.\n     * @returns {Function} Returns the new restricted function.\n     * @example\n     *\n     * jQuery(element).on('click', _.before(5, addContactToList));\n     * // => Allows adding up to 4 contacts to the list.\n     */\n    function before(n, func) {\n      var result;\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      n = toInteger(n);\n      return function() {\n        if (--n > 0) {\n          result = func.apply(this, arguments);\n        }\n        if (n <= 1) {\n          func = undefined;\n        }\n        return result;\n      };\n    }\n\n    /**\n     * Creates a function that invokes `func` with the `this` binding of `thisArg`\n     * and `partials` prepended to the arguments it receives.\n     *\n     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,\n     * may be used as a placeholder for partially applied arguments.\n     *\n     * **Note:** Unlike native `Function#bind`, this method doesn't set the \"length\"\n     * property of bound functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to bind.\n     * @param {*} thisArg The `this` binding of `func`.\n     * @param {...*} [partials] The arguments to be partially applied.\n     * @returns {Function} Returns the new bound function.\n     * @example\n     *\n     * function greet(greeting, punctuation) {\n     *   return greeting + ' ' + this.user + punctuation;\n     * }\n     *\n     * var object = { 'user': 'fred' };\n     *\n     * var bound = _.bind(greet, object, 'hi');\n     * bound('!');\n     * // => 'hi fred!'\n     *\n     * // Bound with placeholders.\n     * var bound = _.bind(greet, object, _, '!');\n     * bound('hi');\n     * // => 'hi fred!'\n     */\n    var bind = baseRest(function(func, thisArg, partials) {\n      var bitmask = BIND_FLAG;\n      if (partials.length) {\n        var holders = replaceHolders(partials, getHolder(bind));\n        bitmask |= PARTIAL_FLAG;\n      }\n      return createWrap(func, bitmask, thisArg, partials, holders);\n    });\n\n    /**\n     * Creates a function that invokes the method at `object[key]` with `partials`\n     * prepended to the arguments it receives.\n     *\n     * This method differs from `_.bind` by allowing bound functions to reference\n     * methods that may be redefined or don't yet exist. See\n     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)\n     * for more details.\n     *\n     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic\n     * builds, may be used as a placeholder for partially applied arguments.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.10.0\n     * @category Function\n     * @param {Object} object The object to invoke the method on.\n     * @param {string} key The key of the method.\n     * @param {...*} [partials] The arguments to be partially applied.\n     * @returns {Function} Returns the new bound function.\n     * @example\n     *\n     * var object = {\n     *   'user': 'fred',\n     *   'greet': function(greeting, punctuation) {\n     *     return greeting + ' ' + this.user + punctuation;\n     *   }\n     * };\n     *\n     * var bound = _.bindKey(object, 'greet', 'hi');\n     * bound('!');\n     * // => 'hi fred!'\n     *\n     * object.greet = function(greeting, punctuation) {\n     *   return greeting + 'ya ' + this.user + punctuation;\n     * };\n     *\n     * bound('!');\n     * // => 'hiya fred!'\n     *\n     * // Bound with placeholders.\n     * var bound = _.bindKey(object, 'greet', _, '!');\n     * bound('hi');\n     * // => 'hiya fred!'\n     */\n    var bindKey = baseRest(function(object, key, partials) {\n      var bitmask = BIND_FLAG | BIND_KEY_FLAG;\n      if (partials.length) {\n        var holders = replaceHolders(partials, getHolder(bindKey));\n        bitmask |= PARTIAL_FLAG;\n      }\n      return createWrap(key, bitmask, object, partials, holders);\n    });\n\n    /**\n     * Creates a function that accepts arguments of `func` and either invokes\n     * `func` returning its result, if at least `arity` number of arguments have\n     * been provided, or returns a function that accepts the remaining `func`\n     * arguments, and so on. The arity of `func` may be specified if `func.length`\n     * is not sufficient.\n     *\n     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,\n     * may be used as a placeholder for provided arguments.\n     *\n     * **Note:** This method doesn't set the \"length\" property of curried functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Function\n     * @param {Function} func The function to curry.\n     * @param {number} [arity=func.length] The arity of `func`.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Function} Returns the new curried function.\n     * @example\n     *\n     * var abc = function(a, b, c) {\n     *   return [a, b, c];\n     * };\n     *\n     * var curried = _.curry(abc);\n     *\n     * curried(1)(2)(3);\n     * // => [1, 2, 3]\n     *\n     * curried(1, 2)(3);\n     * // => [1, 2, 3]\n     *\n     * curried(1, 2, 3);\n     * // => [1, 2, 3]\n     *\n     * // Curried with placeholders.\n     * curried(1)(_, 3)(2);\n     * // => [1, 2, 3]\n     */\n    function curry(func, arity, guard) {\n      arity = guard ? undefined : arity;\n      var result = createWrap(func, CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);\n      result.placeholder = curry.placeholder;\n      return result;\n    }\n\n    /**\n     * This method is like `_.curry` except that arguments are applied to `func`\n     * in the manner of `_.partialRight` instead of `_.partial`.\n     *\n     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic\n     * builds, may be used as a placeholder for provided arguments.\n     *\n     * **Note:** This method doesn't set the \"length\" property of curried functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {Function} func The function to curry.\n     * @param {number} [arity=func.length] The arity of `func`.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Function} Returns the new curried function.\n     * @example\n     *\n     * var abc = function(a, b, c) {\n     *   return [a, b, c];\n     * };\n     *\n     * var curried = _.curryRight(abc);\n     *\n     * curried(3)(2)(1);\n     * // => [1, 2, 3]\n     *\n     * curried(2, 3)(1);\n     * // => [1, 2, 3]\n     *\n     * curried(1, 2, 3);\n     * // => [1, 2, 3]\n     *\n     * // Curried with placeholders.\n     * curried(3)(1, _)(2);\n     * // => [1, 2, 3]\n     */\n    function curryRight(func, arity, guard) {\n      arity = guard ? undefined : arity;\n      var result = createWrap(func, CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);\n      result.placeholder = curryRight.placeholder;\n      return result;\n    }\n\n    /**\n     * Creates a debounced function that delays invoking `func` until after `wait`\n     * milliseconds have elapsed since the last time the debounced function was\n     * invoked. The debounced function comes with a `cancel` method to cancel\n     * delayed `func` invocations and a `flush` method to immediately invoke them.\n     * Provide `options` to indicate whether `func` should be invoked on the\n     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n     * with the last arguments provided to the debounced function. Subsequent\n     * calls to the debounced function return the result of the last `func`\n     * invocation.\n     *\n     * **Note:** If `leading` and `trailing` options are `true`, `func` is\n     * invoked on the trailing edge of the timeout only if the debounced function\n     * is invoked more than once during the `wait` timeout.\n     *\n     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n     * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n     *\n     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n     * for details over the differences between `_.debounce` and `_.throttle`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to debounce.\n     * @param {number} [wait=0] The number of milliseconds to delay.\n     * @param {Object} [options={}] The options object.\n     * @param {boolean} [options.leading=false]\n     *  Specify invoking on the leading edge of the timeout.\n     * @param {number} [options.maxWait]\n     *  The maximum time `func` is allowed to be delayed before it's invoked.\n     * @param {boolean} [options.trailing=true]\n     *  Specify invoking on the trailing edge of the timeout.\n     * @returns {Function} Returns the new debounced function.\n     * @example\n     *\n     * // Avoid costly calculations while the window size is in flux.\n     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n     *\n     * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n     * jQuery(element).on('click', _.debounce(sendMail, 300, {\n     *   'leading': true,\n     *   'trailing': false\n     * }));\n     *\n     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n     * var source = new EventSource('/stream');\n     * jQuery(source).on('message', debounced);\n     *\n     * // Cancel the trailing debounced invocation.\n     * jQuery(window).on('popstate', debounced.cancel);\n     */\n    function debounce(func, wait, options) {\n      var lastArgs,\n          lastThis,\n          maxWait,\n          result,\n          timerId,\n          lastCallTime,\n          lastInvokeTime = 0,\n          leading = false,\n          maxing = false,\n          trailing = true;\n\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      wait = toNumber(wait) || 0;\n      if (isObject(options)) {\n        leading = !!options.leading;\n        maxing = 'maxWait' in options;\n        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n        trailing = 'trailing' in options ? !!options.trailing : trailing;\n      }\n\n      function invokeFunc(time) {\n        var args = lastArgs,\n            thisArg = lastThis;\n\n        lastArgs = lastThis = undefined;\n        lastInvokeTime = time;\n        result = func.apply(thisArg, args);\n        return result;\n      }\n\n      function leadingEdge(time) {\n        // Reset any `maxWait` timer.\n        lastInvokeTime = time;\n        // Start the timer for the trailing edge.\n        timerId = setTimeout(timerExpired, wait);\n        // Invoke the leading edge.\n        return leading ? invokeFunc(time) : result;\n      }\n\n      function remainingWait(time) {\n        var timeSinceLastCall = time - lastCallTime,\n            timeSinceLastInvoke = time - lastInvokeTime,\n            result = wait - timeSinceLastCall;\n\n        return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;\n      }\n\n      function shouldInvoke(time) {\n        var timeSinceLastCall = time - lastCallTime,\n            timeSinceLastInvoke = time - lastInvokeTime;\n\n        // Either this is the first call, activity has stopped and we're at the\n        // trailing edge, the system time has gone backwards and we're treating\n        // it as the trailing edge, or we've hit the `maxWait` limit.\n        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n      }\n\n      function timerExpired() {\n        var time = now();\n        if (shouldInvoke(time)) {\n          return trailingEdge(time);\n        }\n        // Restart the timer.\n        timerId = setTimeout(timerExpired, remainingWait(time));\n      }\n\n      function trailingEdge(time) {\n        timerId = undefined;\n\n        // Only invoke if we have `lastArgs` which means `func` has been\n        // debounced at least once.\n        if (trailing && lastArgs) {\n          return invokeFunc(time);\n        }\n        lastArgs = lastThis = undefined;\n        return result;\n      }\n\n      function cancel() {\n        if (timerId !== undefined) {\n          clearTimeout(timerId);\n        }\n        lastInvokeTime = 0;\n        lastArgs = lastCallTime = lastThis = timerId = undefined;\n      }\n\n      function flush() {\n        return timerId === undefined ? result : trailingEdge(now());\n      }\n\n      function debounced() {\n        var time = now(),\n            isInvoking = shouldInvoke(time);\n\n        lastArgs = arguments;\n        lastThis = this;\n        lastCallTime = time;\n\n        if (isInvoking) {\n          if (timerId === undefined) {\n            return leadingEdge(lastCallTime);\n          }\n          if (maxing) {\n            // Handle invocations in a tight loop.\n            timerId = setTimeout(timerExpired, wait);\n            return invokeFunc(lastCallTime);\n          }\n        }\n        if (timerId === undefined) {\n          timerId = setTimeout(timerExpired, wait);\n        }\n        return result;\n      }\n      debounced.cancel = cancel;\n      debounced.flush = flush;\n      return debounced;\n    }\n\n    /**\n     * Defers invoking the `func` until the current call stack has cleared. Any\n     * additional arguments are provided to `func` when it's invoked.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to defer.\n     * @param {...*} [args] The arguments to invoke `func` with.\n     * @returns {number} Returns the timer id.\n     * @example\n     *\n     * _.defer(function(text) {\n     *   console.log(text);\n     * }, 'deferred');\n     * // => Logs 'deferred' after one millisecond.\n     */\n    var defer = baseRest(function(func, args) {\n      return baseDelay(func, 1, args);\n    });\n\n    /**\n     * Invokes `func` after `wait` milliseconds. Any additional arguments are\n     * provided to `func` when it's invoked.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to delay.\n     * @param {number} wait The number of milliseconds to delay invocation.\n     * @param {...*} [args] The arguments to invoke `func` with.\n     * @returns {number} Returns the timer id.\n     * @example\n     *\n     * _.delay(function(text) {\n     *   console.log(text);\n     * }, 1000, 'later');\n     * // => Logs 'later' after one second.\n     */\n    var delay = baseRest(function(func, wait, args) {\n      return baseDelay(func, toNumber(wait) || 0, args);\n    });\n\n    /**\n     * Creates a function that invokes `func` with arguments reversed.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Function\n     * @param {Function} func The function to flip arguments for.\n     * @returns {Function} Returns the new flipped function.\n     * @example\n     *\n     * var flipped = _.flip(function() {\n     *   return _.toArray(arguments);\n     * });\n     *\n     * flipped('a', 'b', 'c', 'd');\n     * // => ['d', 'c', 'b', 'a']\n     */\n    function flip(func) {\n      return createWrap(func, FLIP_FLAG);\n    }\n\n    /**\n     * Creates a function that memoizes the result of `func`. If `resolver` is\n     * provided, it determines the cache key for storing the result based on the\n     * arguments provided to the memoized function. By default, the first argument\n     * provided to the memoized function is used as the map cache key. The `func`\n     * is invoked with the `this` binding of the memoized function.\n     *\n     * **Note:** The cache is exposed as the `cache` property on the memoized\n     * function. Its creation may be customized by replacing the `_.memoize.Cache`\n     * constructor with one whose instances implement the\n     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n     * method interface of `clear`, `delete`, `get`, `has`, and `set`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to have its output memoized.\n     * @param {Function} [resolver] The function to resolve the cache key.\n     * @returns {Function} Returns the new memoized function.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2 };\n     * var other = { 'c': 3, 'd': 4 };\n     *\n     * var values = _.memoize(_.values);\n     * values(object);\n     * // => [1, 2]\n     *\n     * values(other);\n     * // => [3, 4]\n     *\n     * object.a = 2;\n     * values(object);\n     * // => [1, 2]\n     *\n     * // Modify the result cache.\n     * values.cache.set(object, ['a', 'b']);\n     * values(object);\n     * // => ['a', 'b']\n     *\n     * // Replace `_.memoize.Cache`.\n     * _.memoize.Cache = WeakMap;\n     */\n    function memoize(func, resolver) {\n      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      var memoized = function() {\n        var args = arguments,\n            key = resolver ? resolver.apply(this, args) : args[0],\n            cache = memoized.cache;\n\n        if (cache.has(key)) {\n          return cache.get(key);\n        }\n        var result = func.apply(this, args);\n        memoized.cache = cache.set(key, result) || cache;\n        return result;\n      };\n      memoized.cache = new (memoize.Cache || MapCache);\n      return memoized;\n    }\n\n    // Expose `MapCache`.\n    memoize.Cache = MapCache;\n\n    /**\n     * Creates a function that negates the result of the predicate `func`. The\n     * `func` predicate is invoked with the `this` binding and arguments of the\n     * created function.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {Function} predicate The predicate to negate.\n     * @returns {Function} Returns the new negated function.\n     * @example\n     *\n     * function isEven(n) {\n     *   return n % 2 == 0;\n     * }\n     *\n     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));\n     * // => [1, 3, 5]\n     */\n    function negate(predicate) {\n      if (typeof predicate != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      return function() {\n        var args = arguments;\n        switch (args.length) {\n          case 0: return !predicate.call(this);\n          case 1: return !predicate.call(this, args[0]);\n          case 2: return !predicate.call(this, args[0], args[1]);\n          case 3: return !predicate.call(this, args[0], args[1], args[2]);\n        }\n        return !predicate.apply(this, args);\n      };\n    }\n\n    /**\n     * Creates a function that is restricted to invoking `func` once. Repeat calls\n     * to the function return the value of the first invocation. The `func` is\n     * invoked with the `this` binding and arguments of the created function.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to restrict.\n     * @returns {Function} Returns the new restricted function.\n     * @example\n     *\n     * var initialize = _.once(createApplication);\n     * initialize();\n     * initialize();\n     * // => `createApplication` is invoked once\n     */\n    function once(func) {\n      return before(2, func);\n    }\n\n    /**\n     * Creates a function that invokes `func` with its arguments transformed.\n     *\n     * @static\n     * @since 4.0.0\n     * @memberOf _\n     * @category Function\n     * @param {Function} func The function to wrap.\n     * @param {...(Function|Function[])} [transforms=[_.identity]]\n     *  The argument transforms.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * function doubled(n) {\n     *   return n * 2;\n     * }\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var func = _.overArgs(function(x, y) {\n     *   return [x, y];\n     * }, [square, doubled]);\n     *\n     * func(9, 3);\n     * // => [81, 6]\n     *\n     * func(10, 5);\n     * // => [100, 10]\n     */\n    var overArgs = castRest(function(func, transforms) {\n      transforms = (transforms.length == 1 && isArray(transforms[0]))\n        ? arrayMap(transforms[0], baseUnary(getIteratee()))\n        : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));\n\n      var funcsLength = transforms.length;\n      return baseRest(function(args) {\n        var index = -1,\n            length = nativeMin(args.length, funcsLength);\n\n        while (++index < length) {\n          args[index] = transforms[index].call(this, args[index]);\n        }\n        return apply(func, this, args);\n      });\n    });\n\n    /**\n     * Creates a function that invokes `func` with `partials` prepended to the\n     * arguments it receives. This method is like `_.bind` except it does **not**\n     * alter the `this` binding.\n     *\n     * The `_.partial.placeholder` value, which defaults to `_` in monolithic\n     * builds, may be used as a placeholder for partially applied arguments.\n     *\n     * **Note:** This method doesn't set the \"length\" property of partially\n     * applied functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.2.0\n     * @category Function\n     * @param {Function} func The function to partially apply arguments to.\n     * @param {...*} [partials] The arguments to be partially applied.\n     * @returns {Function} Returns the new partially applied function.\n     * @example\n     *\n     * function greet(greeting, name) {\n     *   return greeting + ' ' + name;\n     * }\n     *\n     * var sayHelloTo = _.partial(greet, 'hello');\n     * sayHelloTo('fred');\n     * // => 'hello fred'\n     *\n     * // Partially applied with placeholders.\n     * var greetFred = _.partial(greet, _, 'fred');\n     * greetFred('hi');\n     * // => 'hi fred'\n     */\n    var partial = baseRest(function(func, partials) {\n      var holders = replaceHolders(partials, getHolder(partial));\n      return createWrap(func, PARTIAL_FLAG, undefined, partials, holders);\n    });\n\n    /**\n     * This method is like `_.partial` except that partially applied arguments\n     * are appended to the arguments it receives.\n     *\n     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic\n     * builds, may be used as a placeholder for partially applied arguments.\n     *\n     * **Note:** This method doesn't set the \"length\" property of partially\n     * applied functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.0.0\n     * @category Function\n     * @param {Function} func The function to partially apply arguments to.\n     * @param {...*} [partials] The arguments to be partially applied.\n     * @returns {Function} Returns the new partially applied function.\n     * @example\n     *\n     * function greet(greeting, name) {\n     *   return greeting + ' ' + name;\n     * }\n     *\n     * var greetFred = _.partialRight(greet, 'fred');\n     * greetFred('hi');\n     * // => 'hi fred'\n     *\n     * // Partially applied with placeholders.\n     * var sayHelloTo = _.partialRight(greet, 'hello', _);\n     * sayHelloTo('fred');\n     * // => 'hello fred'\n     */\n    var partialRight = baseRest(function(func, partials) {\n      var holders = replaceHolders(partials, getHolder(partialRight));\n      return createWrap(func, PARTIAL_RIGHT_FLAG, undefined, partials, holders);\n    });\n\n    /**\n     * Creates a function that invokes `func` with arguments arranged according\n     * to the specified `indexes` where the argument value at the first index is\n     * provided as the first argument, the argument value at the second index is\n     * provided as the second argument, and so on.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {Function} func The function to rearrange arguments for.\n     * @param {...(number|number[])} indexes The arranged argument indexes.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var rearged = _.rearg(function(a, b, c) {\n     *   return [a, b, c];\n     * }, [2, 0, 1]);\n     *\n     * rearged('b', 'c', 'a')\n     * // => ['a', 'b', 'c']\n     */\n    var rearg = flatRest(function(func, indexes) {\n      return createWrap(func, REARG_FLAG, undefined, undefined, undefined, indexes);\n    });\n\n    /**\n     * Creates a function that invokes `func` with the `this` binding of the\n     * created function and arguments from `start` and beyond provided as\n     * an array.\n     *\n     * **Note:** This method is based on the\n     * [rest parameter](https://mdn.io/rest_parameters).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Function\n     * @param {Function} func The function to apply a rest parameter to.\n     * @param {number} [start=func.length-1] The start position of the rest parameter.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var say = _.rest(function(what, names) {\n     *   return what + ' ' + _.initial(names).join(', ') +\n     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);\n     * });\n     *\n     * say('hello', 'fred', 'barney', 'pebbles');\n     * // => 'hello fred, barney, & pebbles'\n     */\n    function rest(func, start) {\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      start = start === undefined ? start : toInteger(start);\n      return baseRest(func, start);\n    }\n\n    /**\n     * Creates a function that invokes `func` with the `this` binding of the\n     * create function and an array of arguments much like\n     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).\n     *\n     * **Note:** This method is based on the\n     * [spread operator](https://mdn.io/spread_operator).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.2.0\n     * @category Function\n     * @param {Function} func The function to spread arguments over.\n     * @param {number} [start=0] The start position of the spread.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var say = _.spread(function(who, what) {\n     *   return who + ' says ' + what;\n     * });\n     *\n     * say(['fred', 'hello']);\n     * // => 'fred says hello'\n     *\n     * var numbers = Promise.all([\n     *   Promise.resolve(40),\n     *   Promise.resolve(36)\n     * ]);\n     *\n     * numbers.then(_.spread(function(x, y) {\n     *   return x + y;\n     * }));\n     * // => a Promise of 76\n     */\n    function spread(func, start) {\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      start = start === undefined ? 0 : nativeMax(toInteger(start), 0);\n      return baseRest(function(args) {\n        var array = args[start],\n            otherArgs = castSlice(args, 0, start);\n\n        if (array) {\n          arrayPush(otherArgs, array);\n        }\n        return apply(func, this, otherArgs);\n      });\n    }\n\n    /**\n     * Creates a throttled function that only invokes `func` at most once per\n     * every `wait` milliseconds. The throttled function comes with a `cancel`\n     * method to cancel delayed `func` invocations and a `flush` method to\n     * immediately invoke them. Provide `options` to indicate whether `func`\n     * should be invoked on the leading and/or trailing edge of the `wait`\n     * timeout. The `func` is invoked with the last arguments provided to the\n     * throttled function. Subsequent calls to the throttled function return the\n     * result of the last `func` invocation.\n     *\n     * **Note:** If `leading` and `trailing` options are `true`, `func` is\n     * invoked on the trailing edge of the timeout only if the throttled function\n     * is invoked more than once during the `wait` timeout.\n     *\n     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n     * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n     *\n     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n     * for details over the differences between `_.throttle` and `_.debounce`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to throttle.\n     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.\n     * @param {Object} [options={}] The options object.\n     * @param {boolean} [options.leading=true]\n     *  Specify invoking on the leading edge of the timeout.\n     * @param {boolean} [options.trailing=true]\n     *  Specify invoking on the trailing edge of the timeout.\n     * @returns {Function} Returns the new throttled function.\n     * @example\n     *\n     * // Avoid excessively updating the position while scrolling.\n     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));\n     *\n     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.\n     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });\n     * jQuery(element).on('click', throttled);\n     *\n     * // Cancel the trailing throttled invocation.\n     * jQuery(window).on('popstate', throttled.cancel);\n     */\n    function throttle(func, wait, options) {\n      var leading = true,\n          trailing = true;\n\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      if (isObject(options)) {\n        leading = 'leading' in options ? !!options.leading : leading;\n        trailing = 'trailing' in options ? !!options.trailing : trailing;\n      }\n      return debounce(func, wait, {\n        'leading': leading,\n        'maxWait': wait,\n        'trailing': trailing\n      });\n    }\n\n    /**\n     * Creates a function that accepts up to one argument, ignoring any\n     * additional arguments.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Function\n     * @param {Function} func The function to cap arguments for.\n     * @returns {Function} Returns the new capped function.\n     * @example\n     *\n     * _.map(['6', '8', '10'], _.unary(parseInt));\n     * // => [6, 8, 10]\n     */\n    function unary(func) {\n      return ary(func, 1);\n    }\n\n    /**\n     * Creates a function that provides `value` to `wrapper` as its first\n     * argument. Any additional arguments provided to the function are appended\n     * to those provided to the `wrapper`. The wrapper is invoked with the `this`\n     * binding of the created function.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {*} value The value to wrap.\n     * @param {Function} [wrapper=identity] The wrapper function.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var p = _.wrap(_.escape, function(func, text) {\n     *   return '<p>' + func(text) + '</p>';\n     * });\n     *\n     * p('fred, barney, & pebbles');\n     * // => '<p>fred, barney, &amp; pebbles</p>'\n     */\n    function wrap(value, wrapper) {\n      return partial(castFunction(wrapper), value);\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Casts `value` as an array if it's not one.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.4.0\n     * @category Lang\n     * @param {*} value The value to inspect.\n     * @returns {Array} Returns the cast array.\n     * @example\n     *\n     * _.castArray(1);\n     * // => [1]\n     *\n     * _.castArray({ 'a': 1 });\n     * // => [{ 'a': 1 }]\n     *\n     * _.castArray('abc');\n     * // => ['abc']\n     *\n     * _.castArray(null);\n     * // => [null]\n     *\n     * _.castArray(undefined);\n     * // => [undefined]\n     *\n     * _.castArray();\n     * // => []\n     *\n     * var array = [1, 2, 3];\n     * console.log(_.castArray(array) === array);\n     * // => true\n     */\n    function castArray() {\n      if (!arguments.length) {\n        return [];\n      }\n      var value = arguments[0];\n      return isArray(value) ? value : [value];\n    }\n\n    /**\n     * Creates a shallow clone of `value`.\n     *\n     * **Note:** This method is loosely based on the\n     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)\n     * and supports cloning arrays, array buffers, booleans, date objects, maps,\n     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed\n     * arrays. The own enumerable properties of `arguments` objects are cloned\n     * as plain objects. An empty object is returned for uncloneable values such\n     * as error objects, functions, DOM nodes, and WeakMaps.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to clone.\n     * @returns {*} Returns the cloned value.\n     * @see _.cloneDeep\n     * @example\n     *\n     * var objects = [{ 'a': 1 }, { 'b': 2 }];\n     *\n     * var shallow = _.clone(objects);\n     * console.log(shallow[0] === objects[0]);\n     * // => true\n     */\n    function clone(value) {\n      return baseClone(value, false, true);\n    }\n\n    /**\n     * This method is like `_.clone` except that it accepts `customizer` which\n     * is invoked to produce the cloned value. If `customizer` returns `undefined`,\n     * cloning is handled by the method instead. The `customizer` is invoked with\n     * up to four arguments; (value [, index|key, object, stack]).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to clone.\n     * @param {Function} [customizer] The function to customize cloning.\n     * @returns {*} Returns the cloned value.\n     * @see _.cloneDeepWith\n     * @example\n     *\n     * function customizer(value) {\n     *   if (_.isElement(value)) {\n     *     return value.cloneNode(false);\n     *   }\n     * }\n     *\n     * var el = _.cloneWith(document.body, customizer);\n     *\n     * console.log(el === document.body);\n     * // => false\n     * console.log(el.nodeName);\n     * // => 'BODY'\n     * console.log(el.childNodes.length);\n     * // => 0\n     */\n    function cloneWith(value, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      return baseClone(value, false, true, customizer);\n    }\n\n    /**\n     * This method is like `_.clone` except that it recursively clones `value`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.0.0\n     * @category Lang\n     * @param {*} value The value to recursively clone.\n     * @returns {*} Returns the deep cloned value.\n     * @see _.clone\n     * @example\n     *\n     * var objects = [{ 'a': 1 }, { 'b': 2 }];\n     *\n     * var deep = _.cloneDeep(objects);\n     * console.log(deep[0] === objects[0]);\n     * // => false\n     */\n    function cloneDeep(value) {\n      return baseClone(value, true, true);\n    }\n\n    /**\n     * This method is like `_.cloneWith` except that it recursively clones `value`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to recursively clone.\n     * @param {Function} [customizer] The function to customize cloning.\n     * @returns {*} Returns the deep cloned value.\n     * @see _.cloneWith\n     * @example\n     *\n     * function customizer(value) {\n     *   if (_.isElement(value)) {\n     *     return value.cloneNode(true);\n     *   }\n     * }\n     *\n     * var el = _.cloneDeepWith(document.body, customizer);\n     *\n     * console.log(el === document.body);\n     * // => false\n     * console.log(el.nodeName);\n     * // => 'BODY'\n     * console.log(el.childNodes.length);\n     * // => 20\n     */\n    function cloneDeepWith(value, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      return baseClone(value, true, true, customizer);\n    }\n\n    /**\n     * Checks if `object` conforms to `source` by invoking the predicate\n     * properties of `source` with the corresponding property values of `object`.\n     *\n     * **Note:** This method is equivalent to `_.conforms` when `source` is\n     * partially applied.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.14.0\n     * @category Lang\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property predicates to conform to.\n     * @returns {boolean} Returns `true` if `object` conforms, else `false`.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2 };\n     *\n     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });\n     * // => true\n     *\n     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });\n     * // => false\n     */\n    function conformsTo(object, source) {\n      return source == null || baseConformsTo(object, source, keys(source));\n    }\n\n    /**\n     * Performs a\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * comparison between two values to determine if they are equivalent.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n     * @example\n     *\n     * var object = { 'a': 1 };\n     * var other = { 'a': 1 };\n     *\n     * _.eq(object, object);\n     * // => true\n     *\n     * _.eq(object, other);\n     * // => false\n     *\n     * _.eq('a', 'a');\n     * // => true\n     *\n     * _.eq('a', Object('a'));\n     * // => false\n     *\n     * _.eq(NaN, NaN);\n     * // => true\n     */\n    function eq(value, other) {\n      return value === other || (value !== value && other !== other);\n    }\n\n    /**\n     * Checks if `value` is greater than `other`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.9.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is greater than `other`,\n     *  else `false`.\n     * @see _.lt\n     * @example\n     *\n     * _.gt(3, 1);\n     * // => true\n     *\n     * _.gt(3, 3);\n     * // => false\n     *\n     * _.gt(1, 3);\n     * // => false\n     */\n    var gt = createRelationalOperation(baseGt);\n\n    /**\n     * Checks if `value` is greater than or equal to `other`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.9.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is greater than or equal to\n     *  `other`, else `false`.\n     * @see _.lte\n     * @example\n     *\n     * _.gte(3, 1);\n     * // => true\n     *\n     * _.gte(3, 3);\n     * // => true\n     *\n     * _.gte(1, 3);\n     * // => false\n     */\n    var gte = createRelationalOperation(function(value, other) {\n      return value >= other;\n    });\n\n    /**\n     * Checks if `value` is likely an `arguments` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n     *  else `false`.\n     * @example\n     *\n     * _.isArguments(function() { return arguments; }());\n     * // => true\n     *\n     * _.isArguments([1, 2, 3]);\n     * // => false\n     */\n    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n        !propertyIsEnumerable.call(value, 'callee');\n    };\n\n    /**\n     * Checks if `value` is classified as an `Array` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n     * @example\n     *\n     * _.isArray([1, 2, 3]);\n     * // => true\n     *\n     * _.isArray(document.body.children);\n     * // => false\n     *\n     * _.isArray('abc');\n     * // => false\n     *\n     * _.isArray(_.noop);\n     * // => false\n     */\n    var isArray = Array.isArray;\n\n    /**\n     * Checks if `value` is classified as an `ArrayBuffer` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.\n     * @example\n     *\n     * _.isArrayBuffer(new ArrayBuffer(2));\n     * // => true\n     *\n     * _.isArrayBuffer(new Array(2));\n     * // => false\n     */\n    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;\n\n    /**\n     * Checks if `value` is array-like. A value is considered array-like if it's\n     * not a function and has a `value.length` that's an integer greater than or\n     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n     * @example\n     *\n     * _.isArrayLike([1, 2, 3]);\n     * // => true\n     *\n     * _.isArrayLike(document.body.children);\n     * // => true\n     *\n     * _.isArrayLike('abc');\n     * // => true\n     *\n     * _.isArrayLike(_.noop);\n     * // => false\n     */\n    function isArrayLike(value) {\n      return value != null && isLength(value.length) && !isFunction(value);\n    }\n\n    /**\n     * This method is like `_.isArrayLike` except that it also checks if `value`\n     * is an object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an array-like object,\n     *  else `false`.\n     * @example\n     *\n     * _.isArrayLikeObject([1, 2, 3]);\n     * // => true\n     *\n     * _.isArrayLikeObject(document.body.children);\n     * // => true\n     *\n     * _.isArrayLikeObject('abc');\n     * // => false\n     *\n     * _.isArrayLikeObject(_.noop);\n     * // => false\n     */\n    function isArrayLikeObject(value) {\n      return isObjectLike(value) && isArrayLike(value);\n    }\n\n    /**\n     * Checks if `value` is classified as a boolean primitive or object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.\n     * @example\n     *\n     * _.isBoolean(false);\n     * // => true\n     *\n     * _.isBoolean(null);\n     * // => false\n     */\n    function isBoolean(value) {\n      return value === true || value === false ||\n        (isObjectLike(value) && baseGetTag(value) == boolTag);\n    }\n\n    /**\n     * Checks if `value` is a buffer.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n     * @example\n     *\n     * _.isBuffer(new Buffer(2));\n     * // => true\n     *\n     * _.isBuffer(new Uint8Array(2));\n     * // => false\n     */\n    var isBuffer = nativeIsBuffer || stubFalse;\n\n    /**\n     * Checks if `value` is classified as a `Date` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.\n     * @example\n     *\n     * _.isDate(new Date);\n     * // => true\n     *\n     * _.isDate('Mon April 23 2012');\n     * // => false\n     */\n    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;\n\n    /**\n     * Checks if `value` is likely a DOM element.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.\n     * @example\n     *\n     * _.isElement(document.body);\n     * // => true\n     *\n     * _.isElement('<body>');\n     * // => false\n     */\n    function isElement(value) {\n      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);\n    }\n\n    /**\n     * Checks if `value` is an empty object, collection, map, or set.\n     *\n     * Objects are considered empty if they have no own enumerable string keyed\n     * properties.\n     *\n     * Array-like values such as `arguments` objects, arrays, buffers, strings, or\n     * jQuery-like collections are considered empty if they have a `length` of `0`.\n     * Similarly, maps and sets are considered empty if they have a `size` of `0`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is empty, else `false`.\n     * @example\n     *\n     * _.isEmpty(null);\n     * // => true\n     *\n     * _.isEmpty(true);\n     * // => true\n     *\n     * _.isEmpty(1);\n     * // => true\n     *\n     * _.isEmpty([1, 2, 3]);\n     * // => false\n     *\n     * _.isEmpty({ 'a': 1 });\n     * // => false\n     */\n    function isEmpty(value) {\n      if (value == null) {\n        return true;\n      }\n      if (isArrayLike(value) &&\n          (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||\n            isBuffer(value) || isTypedArray(value) || isArguments(value))) {\n        return !value.length;\n      }\n      var tag = getTag(value);\n      if (tag == mapTag || tag == setTag) {\n        return !value.size;\n      }\n      if (isPrototype(value)) {\n        return !baseKeys(value).length;\n      }\n      for (var key in value) {\n        if (hasOwnProperty.call(value, key)) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n    /**\n     * Performs a deep comparison between two values to determine if they are\n     * equivalent.\n     *\n     * **Note:** This method supports comparing arrays, array buffers, booleans,\n     * date objects, error objects, maps, numbers, `Object` objects, regexes,\n     * sets, strings, symbols, and typed arrays. `Object` objects are compared\n     * by their own, not inherited, enumerable properties. Functions and DOM\n     * nodes are **not** supported.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n     * @example\n     *\n     * var object = { 'a': 1 };\n     * var other = { 'a': 1 };\n     *\n     * _.isEqual(object, other);\n     * // => true\n     *\n     * object === other;\n     * // => false\n     */\n    function isEqual(value, other) {\n      return baseIsEqual(value, other);\n    }\n\n    /**\n     * This method is like `_.isEqual` except that it accepts `customizer` which\n     * is invoked to compare values. If `customizer` returns `undefined`, comparisons\n     * are handled by the method instead. The `customizer` is invoked with up to\n     * six arguments: (objValue, othValue [, index|key, object, other, stack]).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @param {Function} [customizer] The function to customize comparisons.\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n     * @example\n     *\n     * function isGreeting(value) {\n     *   return /^h(?:i|ello)$/.test(value);\n     * }\n     *\n     * function customizer(objValue, othValue) {\n     *   if (isGreeting(objValue) && isGreeting(othValue)) {\n     *     return true;\n     *   }\n     * }\n     *\n     * var array = ['hello', 'goodbye'];\n     * var other = ['hi', 'goodbye'];\n     *\n     * _.isEqualWith(array, other, customizer);\n     * // => true\n     */\n    function isEqualWith(value, other, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      var result = customizer ? customizer(value, other) : undefined;\n      return result === undefined ? baseIsEqual(value, other, customizer) : !!result;\n    }\n\n    /**\n     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,\n     * `SyntaxError`, `TypeError`, or `URIError` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.\n     * @example\n     *\n     * _.isError(new Error);\n     * // => true\n     *\n     * _.isError(Error);\n     * // => false\n     */\n    function isError(value) {\n      if (!isObjectLike(value)) {\n        return false;\n      }\n      var tag = baseGetTag(value);\n      return tag == errorTag || tag == domExcTag ||\n        (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));\n    }\n\n    /**\n     * Checks if `value` is a finite primitive number.\n     *\n     * **Note:** This method is based on\n     * [`Number.isFinite`](https://mdn.io/Number/isFinite).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.\n     * @example\n     *\n     * _.isFinite(3);\n     * // => true\n     *\n     * _.isFinite(Number.MIN_VALUE);\n     * // => true\n     *\n     * _.isFinite(Infinity);\n     * // => false\n     *\n     * _.isFinite('3');\n     * // => false\n     */\n    function isFinite(value) {\n      return typeof value == 'number' && nativeIsFinite(value);\n    }\n\n    /**\n     * Checks if `value` is classified as a `Function` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n     * @example\n     *\n     * _.isFunction(_);\n     * // => true\n     *\n     * _.isFunction(/abc/);\n     * // => false\n     */\n    function isFunction(value) {\n      if (!isObject(value)) {\n        return false;\n      }\n      // The use of `Object#toString` avoids issues with the `typeof` operator\n      // in Safari 9 which returns 'object' for typed arrays and other constructors.\n      var tag = baseGetTag(value);\n      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n    }\n\n    /**\n     * Checks if `value` is an integer.\n     *\n     * **Note:** This method is based on\n     * [`Number.isInteger`](https://mdn.io/Number/isInteger).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.\n     * @example\n     *\n     * _.isInteger(3);\n     * // => true\n     *\n     * _.isInteger(Number.MIN_VALUE);\n     * // => false\n     *\n     * _.isInteger(Infinity);\n     * // => false\n     *\n     * _.isInteger('3');\n     * // => false\n     */\n    function isInteger(value) {\n      return typeof value == 'number' && value == toInteger(value);\n    }\n\n    /**\n     * Checks if `value` is a valid array-like length.\n     *\n     * **Note:** This method is loosely based on\n     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n     * @example\n     *\n     * _.isLength(3);\n     * // => true\n     *\n     * _.isLength(Number.MIN_VALUE);\n     * // => false\n     *\n     * _.isLength(Infinity);\n     * // => false\n     *\n     * _.isLength('3');\n     * // => false\n     */\n    function isLength(value) {\n      return typeof value == 'number' &&\n        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n    }\n\n    /**\n     * Checks if `value` is the\n     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n     * @example\n     *\n     * _.isObject({});\n     * // => true\n     *\n     * _.isObject([1, 2, 3]);\n     * // => true\n     *\n     * _.isObject(_.noop);\n     * // => true\n     *\n     * _.isObject(null);\n     * // => false\n     */\n    function isObject(value) {\n      var type = typeof value;\n      return value != null && (type == 'object' || type == 'function');\n    }\n\n    /**\n     * Checks if `value` is object-like. A value is object-like if it's not `null`\n     * and has a `typeof` result of \"object\".\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n     * @example\n     *\n     * _.isObjectLike({});\n     * // => true\n     *\n     * _.isObjectLike([1, 2, 3]);\n     * // => true\n     *\n     * _.isObjectLike(_.noop);\n     * // => false\n     *\n     * _.isObjectLike(null);\n     * // => false\n     */\n    function isObjectLike(value) {\n      return value != null && typeof value == 'object';\n    }\n\n    /**\n     * Checks if `value` is classified as a `Map` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a map, else `false`.\n     * @example\n     *\n     * _.isMap(new Map);\n     * // => true\n     *\n     * _.isMap(new WeakMap);\n     * // => false\n     */\n    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;\n\n    /**\n     * Performs a partial deep comparison between `object` and `source` to\n     * determine if `object` contains equivalent property values.\n     *\n     * **Note:** This method is equivalent to `_.matches` when `source` is\n     * partially applied.\n     *\n     * Partial comparisons will match empty array and empty object `source`\n     * values against any array or object value, respectively. See `_.isEqual`\n     * for a list of supported value comparisons.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property values to match.\n     * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2 };\n     *\n     * _.isMatch(object, { 'b': 2 });\n     * // => true\n     *\n     * _.isMatch(object, { 'b': 1 });\n     * // => false\n     */\n    function isMatch(object, source) {\n      return object === source || baseIsMatch(object, source, getMatchData(source));\n    }\n\n    /**\n     * This method is like `_.isMatch` except that it accepts `customizer` which\n     * is invoked to compare values. If `customizer` returns `undefined`, comparisons\n     * are handled by the method instead. The `customizer` is invoked with five\n     * arguments: (objValue, srcValue, index|key, object, source).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property values to match.\n     * @param {Function} [customizer] The function to customize comparisons.\n     * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n     * @example\n     *\n     * function isGreeting(value) {\n     *   return /^h(?:i|ello)$/.test(value);\n     * }\n     *\n     * function customizer(objValue, srcValue) {\n     *   if (isGreeting(objValue) && isGreeting(srcValue)) {\n     *     return true;\n     *   }\n     * }\n     *\n     * var object = { 'greeting': 'hello' };\n     * var source = { 'greeting': 'hi' };\n     *\n     * _.isMatchWith(object, source, customizer);\n     * // => true\n     */\n    function isMatchWith(object, source, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      return baseIsMatch(object, source, getMatchData(source), customizer);\n    }\n\n    /**\n     * Checks if `value` is `NaN`.\n     *\n     * **Note:** This method is based on\n     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as\n     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for\n     * `undefined` and other non-number values.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\n     * @example\n     *\n     * _.isNaN(NaN);\n     * // => true\n     *\n     * _.isNaN(new Number(NaN));\n     * // => true\n     *\n     * isNaN(undefined);\n     * // => true\n     *\n     * _.isNaN(undefined);\n     * // => false\n     */\n    function isNaN(value) {\n      // An `NaN` primitive is the only value that is not equal to itself.\n      // Perform the `toStringTag` check first to avoid errors with some\n      // ActiveX objects in IE.\n      return isNumber(value) && value != +value;\n    }\n\n    /**\n     * Checks if `value` is a pristine native function.\n     *\n     * **Note:** This method can't reliably detect native functions in the presence\n     * of the core-js package because core-js circumvents this kind of detection.\n     * Despite multiple requests, the core-js maintainer has made it clear: any\n     * attempt to fix the detection will be obstructed. As a result, we're left\n     * with little choice but to throw an error. Unfortunately, this also affects\n     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),\n     * which rely on core-js.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a native function,\n     *  else `false`.\n     * @example\n     *\n     * _.isNative(Array.prototype.push);\n     * // => true\n     *\n     * _.isNative(_);\n     * // => false\n     */\n    function isNative(value) {\n      if (isMaskable(value)) {\n        throw new Error(CORE_ERROR_TEXT);\n      }\n      return baseIsNative(value);\n    }\n\n    /**\n     * Checks if `value` is `null`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.\n     * @example\n     *\n     * _.isNull(null);\n     * // => true\n     *\n     * _.isNull(void 0);\n     * // => false\n     */\n    function isNull(value) {\n      return value === null;\n    }\n\n    /**\n     * Checks if `value` is `null` or `undefined`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.\n     * @example\n     *\n     * _.isNil(null);\n     * // => true\n     *\n     * _.isNil(void 0);\n     * // => true\n     *\n     * _.isNil(NaN);\n     * // => false\n     */\n    function isNil(value) {\n      return value == null;\n    }\n\n    /**\n     * Checks if `value` is classified as a `Number` primitive or object.\n     *\n     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are\n     * classified as numbers, use the `_.isFinite` method.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a number, else `false`.\n     * @example\n     *\n     * _.isNumber(3);\n     * // => true\n     *\n     * _.isNumber(Number.MIN_VALUE);\n     * // => true\n     *\n     * _.isNumber(Infinity);\n     * // => true\n     *\n     * _.isNumber('3');\n     * // => false\n     */\n    function isNumber(value) {\n      return typeof value == 'number' ||\n        (isObjectLike(value) && baseGetTag(value) == numberTag);\n    }\n\n    /**\n     * Checks if `value` is a plain object, that is, an object created by the\n     * `Object` constructor or one with a `[[Prototype]]` of `null`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.8.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     * }\n     *\n     * _.isPlainObject(new Foo);\n     * // => false\n     *\n     * _.isPlainObject([1, 2, 3]);\n     * // => false\n     *\n     * _.isPlainObject({ 'x': 0, 'y': 0 });\n     * // => true\n     *\n     * _.isPlainObject(Object.create(null));\n     * // => true\n     */\n    function isPlainObject(value) {\n      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {\n        return false;\n      }\n      var proto = getPrototype(value);\n      if (proto === null) {\n        return true;\n      }\n      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;\n      return typeof Ctor == 'function' && Ctor instanceof Ctor &&\n        funcToString.call(Ctor) == objectCtorString;\n    }\n\n    /**\n     * Checks if `value` is classified as a `RegExp` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.\n     * @example\n     *\n     * _.isRegExp(/abc/);\n     * // => true\n     *\n     * _.isRegExp('/abc/');\n     * // => false\n     */\n    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;\n\n    /**\n     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754\n     * double precision number which isn't the result of a rounded unsafe integer.\n     *\n     * **Note:** This method is based on\n     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.\n     * @example\n     *\n     * _.isSafeInteger(3);\n     * // => true\n     *\n     * _.isSafeInteger(Number.MIN_VALUE);\n     * // => false\n     *\n     * _.isSafeInteger(Infinity);\n     * // => false\n     *\n     * _.isSafeInteger('3');\n     * // => false\n     */\n    function isSafeInteger(value) {\n      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;\n    }\n\n    /**\n     * Checks if `value` is classified as a `Set` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n     * @example\n     *\n     * _.isSet(new Set);\n     * // => true\n     *\n     * _.isSet(new WeakSet);\n     * // => false\n     */\n    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;\n\n    /**\n     * Checks if `value` is classified as a `String` primitive or object.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a string, else `false`.\n     * @example\n     *\n     * _.isString('abc');\n     * // => true\n     *\n     * _.isString(1);\n     * // => false\n     */\n    function isString(value) {\n      return typeof value == 'string' ||\n        (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);\n    }\n\n    /**\n     * Checks if `value` is classified as a `Symbol` primitive or object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n     * @example\n     *\n     * _.isSymbol(Symbol.iterator);\n     * // => true\n     *\n     * _.isSymbol('abc');\n     * // => false\n     */\n    function isSymbol(value) {\n      return typeof value == 'symbol' ||\n        (isObjectLike(value) && baseGetTag(value) == symbolTag);\n    }\n\n    /**\n     * Checks if `value` is classified as a typed array.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n     * @example\n     *\n     * _.isTypedArray(new Uint8Array);\n     * // => true\n     *\n     * _.isTypedArray([]);\n     * // => false\n     */\n    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n    /**\n     * Checks if `value` is `undefined`.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.\n     * @example\n     *\n     * _.isUndefined(void 0);\n     * // => true\n     *\n     * _.isUndefined(null);\n     * // => false\n     */\n    function isUndefined(value) {\n      return value === undefined;\n    }\n\n    /**\n     * Checks if `value` is classified as a `WeakMap` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.\n     * @example\n     *\n     * _.isWeakMap(new WeakMap);\n     * // => true\n     *\n     * _.isWeakMap(new Map);\n     * // => false\n     */\n    function isWeakMap(value) {\n      return isObjectLike(value) && getTag(value) == weakMapTag;\n    }\n\n    /**\n     * Checks if `value` is classified as a `WeakSet` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.\n     * @example\n     *\n     * _.isWeakSet(new WeakSet);\n     * // => true\n     *\n     * _.isWeakSet(new Set);\n     * // => false\n     */\n    function isWeakSet(value) {\n      return isObjectLike(value) && baseGetTag(value) == weakSetTag;\n    }\n\n    /**\n     * Checks if `value` is less than `other`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.9.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is less than `other`,\n     *  else `false`.\n     * @see _.gt\n     * @example\n     *\n     * _.lt(1, 3);\n     * // => true\n     *\n     * _.lt(3, 3);\n     * // => false\n     *\n     * _.lt(3, 1);\n     * // => false\n     */\n    var lt = createRelationalOperation(baseLt);\n\n    /**\n     * Checks if `value` is less than or equal to `other`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.9.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is less than or equal to\n     *  `other`, else `false`.\n     * @see _.gte\n     * @example\n     *\n     * _.lte(1, 3);\n     * // => true\n     *\n     * _.lte(3, 3);\n     * // => true\n     *\n     * _.lte(3, 1);\n     * // => false\n     */\n    var lte = createRelationalOperation(function(value, other) {\n      return value <= other;\n    });\n\n    /**\n     * Converts `value` to an array.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {Array} Returns the converted array.\n     * @example\n     *\n     * _.toArray({ 'a': 1, 'b': 2 });\n     * // => [1, 2]\n     *\n     * _.toArray('abc');\n     * // => ['a', 'b', 'c']\n     *\n     * _.toArray(1);\n     * // => []\n     *\n     * _.toArray(null);\n     * // => []\n     */\n    function toArray(value) {\n      if (!value) {\n        return [];\n      }\n      if (isArrayLike(value)) {\n        return isString(value) ? stringToArray(value) : copyArray(value);\n      }\n      if (symIterator && value[symIterator]) {\n        return iteratorToArray(value[symIterator]());\n      }\n      var tag = getTag(value),\n          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);\n\n      return func(value);\n    }\n\n    /**\n     * Converts `value` to a finite number.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.12.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {number} Returns the converted number.\n     * @example\n     *\n     * _.toFinite(3.2);\n     * // => 3.2\n     *\n     * _.toFinite(Number.MIN_VALUE);\n     * // => 5e-324\n     *\n     * _.toFinite(Infinity);\n     * // => 1.7976931348623157e+308\n     *\n     * _.toFinite('3.2');\n     * // => 3.2\n     */\n    function toFinite(value) {\n      if (!value) {\n        return value === 0 ? value : 0;\n      }\n      value = toNumber(value);\n      if (value === INFINITY || value === -INFINITY) {\n        var sign = (value < 0 ? -1 : 1);\n        return sign * MAX_INTEGER;\n      }\n      return value === value ? value : 0;\n    }\n\n    /**\n     * Converts `value` to an integer.\n     *\n     * **Note:** This method is loosely based on\n     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {number} Returns the converted integer.\n     * @example\n     *\n     * _.toInteger(3.2);\n     * // => 3\n     *\n     * _.toInteger(Number.MIN_VALUE);\n     * // => 0\n     *\n     * _.toInteger(Infinity);\n     * // => 1.7976931348623157e+308\n     *\n     * _.toInteger('3.2');\n     * // => 3\n     */\n    function toInteger(value) {\n      var result = toFinite(value),\n          remainder = result % 1;\n\n      return result === result ? (remainder ? result - remainder : result) : 0;\n    }\n\n    /**\n     * Converts `value` to an integer suitable for use as the length of an\n     * array-like object.\n     *\n     * **Note:** This method is based on\n     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {number} Returns the converted integer.\n     * @example\n     *\n     * _.toLength(3.2);\n     * // => 3\n     *\n     * _.toLength(Number.MIN_VALUE);\n     * // => 0\n     *\n     * _.toLength(Infinity);\n     * // => 4294967295\n     *\n     * _.toLength('3.2');\n     * // => 3\n     */\n    function toLength(value) {\n      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;\n    }\n\n    /**\n     * Converts `value` to a number.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to process.\n     * @returns {number} Returns the number.\n     * @example\n     *\n     * _.toNumber(3.2);\n     * // => 3.2\n     *\n     * _.toNumber(Number.MIN_VALUE);\n     * // => 5e-324\n     *\n     * _.toNumber(Infinity);\n     * // => Infinity\n     *\n     * _.toNumber('3.2');\n     * // => 3.2\n     */\n    function toNumber(value) {\n      if (typeof value == 'number') {\n        return value;\n      }\n      if (isSymbol(value)) {\n        return NAN;\n      }\n      if (isObject(value)) {\n        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n        value = isObject(other) ? (other + '') : other;\n      }\n      if (typeof value != 'string') {\n        return value === 0 ? value : +value;\n      }\n      value = value.replace(reTrim, '');\n      var isBinary = reIsBinary.test(value);\n      return (isBinary || reIsOctal.test(value))\n        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n        : (reIsBadHex.test(value) ? NAN : +value);\n    }\n\n    /**\n     * Converts `value` to a plain object flattening inherited enumerable string\n     * keyed properties of `value` to own properties of the plain object.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {Object} Returns the converted plain object.\n     * @example\n     *\n     * function Foo() {\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.assign({ 'a': 1 }, new Foo);\n     * // => { 'a': 1, 'b': 2 }\n     *\n     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));\n     * // => { 'a': 1, 'b': 2, 'c': 3 }\n     */\n    function toPlainObject(value) {\n      return copyObject(value, keysIn(value));\n    }\n\n    /**\n     * Converts `value` to a safe integer. A safe integer can be compared and\n     * represented correctly.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {number} Returns the converted integer.\n     * @example\n     *\n     * _.toSafeInteger(3.2);\n     * // => 3\n     *\n     * _.toSafeInteger(Number.MIN_VALUE);\n     * // => 0\n     *\n     * _.toSafeInteger(Infinity);\n     * // => 9007199254740991\n     *\n     * _.toSafeInteger('3.2');\n     * // => 3\n     */\n    function toSafeInteger(value) {\n      return baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\n    }\n\n    /**\n     * Converts `value` to a string. An empty string is returned for `null`\n     * and `undefined` values. The sign of `-0` is preserved.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {string} Returns the converted string.\n     * @example\n     *\n     * _.toString(null);\n     * // => ''\n     *\n     * _.toString(-0);\n     * // => '-0'\n     *\n     * _.toString([1, 2, 3]);\n     * // => '1,2,3'\n     */\n    function toString(value) {\n      return value == null ? '' : baseToString(value);\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Assigns own enumerable string keyed properties of source objects to the\n     * destination object. Source objects are applied from left to right.\n     * Subsequent sources overwrite property assignments of previous sources.\n     *\n     * **Note:** This method mutates `object` and is loosely based on\n     * [`Object.assign`](https://mdn.io/Object/assign).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.10.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @see _.assignIn\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     * }\n     *\n     * function Bar() {\n     *   this.c = 3;\n     * }\n     *\n     * Foo.prototype.b = 2;\n     * Bar.prototype.d = 4;\n     *\n     * _.assign({ 'a': 0 }, new Foo, new Bar);\n     * // => { 'a': 1, 'c': 3 }\n     */\n    var assign = createAssigner(function(object, source) {\n      if (isPrototype(source) || isArrayLike(source)) {\n        copyObject(source, keys(source), object);\n        return;\n      }\n      for (var key in source) {\n        if (hasOwnProperty.call(source, key)) {\n          assignValue(object, key, source[key]);\n        }\n      }\n    });\n\n    /**\n     * This method is like `_.assign` except that it iterates over own and\n     * inherited source properties.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @alias extend\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @see _.assign\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     * }\n     *\n     * function Bar() {\n     *   this.c = 3;\n     * }\n     *\n     * Foo.prototype.b = 2;\n     * Bar.prototype.d = 4;\n     *\n     * _.assignIn({ 'a': 0 }, new Foo, new Bar);\n     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }\n     */\n    var assignIn = createAssigner(function(object, source) {\n      copyObject(source, keysIn(source), object);\n    });\n\n    /**\n     * This method is like `_.assignIn` except that it accepts `customizer`\n     * which is invoked to produce the assigned values. If `customizer` returns\n     * `undefined`, assignment is handled by the method instead. The `customizer`\n     * is invoked with five arguments: (objValue, srcValue, key, object, source).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @alias extendWith\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} sources The source objects.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @see _.assignWith\n     * @example\n     *\n     * function customizer(objValue, srcValue) {\n     *   return _.isUndefined(objValue) ? srcValue : objValue;\n     * }\n     *\n     * var defaults = _.partialRight(_.assignInWith, customizer);\n     *\n     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n     * // => { 'a': 1, 'b': 2 }\n     */\n    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {\n      copyObject(source, keysIn(source), object, customizer);\n    });\n\n    /**\n     * This method is like `_.assign` except that it accepts `customizer`\n     * which is invoked to produce the assigned values. If `customizer` returns\n     * `undefined`, assignment is handled by the method instead. The `customizer`\n     * is invoked with five arguments: (objValue, srcValue, key, object, source).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} sources The source objects.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @see _.assignInWith\n     * @example\n     *\n     * function customizer(objValue, srcValue) {\n     *   return _.isUndefined(objValue) ? srcValue : objValue;\n     * }\n     *\n     * var defaults = _.partialRight(_.assignWith, customizer);\n     *\n     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n     * // => { 'a': 1, 'b': 2 }\n     */\n    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {\n      copyObject(source, keys(source), object, customizer);\n    });\n\n    /**\n     * Creates an array of values corresponding to `paths` of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.0.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {...(string|string[])} [paths] The property paths of elements to pick.\n     * @returns {Array} Returns the picked values.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };\n     *\n     * _.at(object, ['a[0].b.c', 'a[1]']);\n     * // => [3, 4]\n     */\n    var at = flatRest(baseAt);\n\n    /**\n     * Creates an object that inherits from the `prototype` object. If a\n     * `properties` object is given, its own enumerable string keyed properties\n     * are assigned to the created object.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.3.0\n     * @category Object\n     * @param {Object} prototype The object to inherit from.\n     * @param {Object} [properties] The properties to assign to the object.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * function Shape() {\n     *   this.x = 0;\n     *   this.y = 0;\n     * }\n     *\n     * function Circle() {\n     *   Shape.call(this);\n     * }\n     *\n     * Circle.prototype = _.create(Shape.prototype, {\n     *   'constructor': Circle\n     * });\n     *\n     * var circle = new Circle;\n     * circle instanceof Circle;\n     * // => true\n     *\n     * circle instanceof Shape;\n     * // => true\n     */\n    function create(prototype, properties) {\n      var result = baseCreate(prototype);\n      return properties == null ? result : baseAssign(result, properties);\n    }\n\n    /**\n     * Assigns own and inherited enumerable string keyed properties of source\n     * objects to the destination object for all destination properties that\n     * resolve to `undefined`. Source objects are applied from left to right.\n     * Once a property is set, additional values of the same property are ignored.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @see _.defaultsDeep\n     * @example\n     *\n     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n     * // => { 'a': 1, 'b': 2 }\n     */\n    var defaults = baseRest(function(args) {\n      args.push(undefined, assignInDefaults);\n      return apply(assignInWith, undefined, args);\n    });\n\n    /**\n     * This method is like `_.defaults` except that it recursively assigns\n     * default properties.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.10.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @see _.defaults\n     * @example\n     *\n     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });\n     * // => { 'a': { 'b': 2, 'c': 3 } }\n     */\n    var defaultsDeep = baseRest(function(args) {\n      args.push(undefined, mergeDefaults);\n      return apply(mergeWith, undefined, args);\n    });\n\n    /**\n     * This method is like `_.find` except that it returns the key of the first\n     * element `predicate` returns truthy for instead of the element itself.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.1.0\n     * @category Object\n     * @param {Object} object The object to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {string|undefined} Returns the key of the matched element,\n     *  else `undefined`.\n     * @example\n     *\n     * var users = {\n     *   'barney':  { 'age': 36, 'active': true },\n     *   'fred':    { 'age': 40, 'active': false },\n     *   'pebbles': { 'age': 1,  'active': true }\n     * };\n     *\n     * _.findKey(users, function(o) { return o.age < 40; });\n     * // => 'barney' (iteration order is not guaranteed)\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.findKey(users, { 'age': 1, 'active': true });\n     * // => 'pebbles'\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.findKey(users, ['active', false]);\n     * // => 'fred'\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.findKey(users, 'active');\n     * // => 'barney'\n     */\n    function findKey(object, predicate) {\n      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);\n    }\n\n    /**\n     * This method is like `_.findKey` except that it iterates over elements of\n     * a collection in the opposite order.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Object\n     * @param {Object} object The object to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {string|undefined} Returns the key of the matched element,\n     *  else `undefined`.\n     * @example\n     *\n     * var users = {\n     *   'barney':  { 'age': 36, 'active': true },\n     *   'fred':    { 'age': 40, 'active': false },\n     *   'pebbles': { 'age': 1,  'active': true }\n     * };\n     *\n     * _.findLastKey(users, function(o) { return o.age < 40; });\n     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.findLastKey(users, { 'age': 36, 'active': true });\n     * // => 'barney'\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.findLastKey(users, ['active', false]);\n     * // => 'fred'\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.findLastKey(users, 'active');\n     * // => 'pebbles'\n     */\n    function findLastKey(object, predicate) {\n      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);\n    }\n\n    /**\n     * Iterates over own and inherited enumerable string keyed properties of an\n     * object and invokes `iteratee` for each property. The iteratee is invoked\n     * with three arguments: (value, key, object). Iteratee functions may exit\n     * iteration early by explicitly returning `false`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.3.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     * @see _.forInRight\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.forIn(new Foo, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).\n     */\n    function forIn(object, iteratee) {\n      return object == null\n        ? object\n        : baseFor(object, getIteratee(iteratee, 3), keysIn);\n    }\n\n    /**\n     * This method is like `_.forIn` except that it iterates over properties of\n     * `object` in the opposite order.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     * @see _.forIn\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.forInRight(new Foo, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.\n     */\n    function forInRight(object, iteratee) {\n      return object == null\n        ? object\n        : baseForRight(object, getIteratee(iteratee, 3), keysIn);\n    }\n\n    /**\n     * Iterates over own enumerable string keyed properties of an object and\n     * invokes `iteratee` for each property. The iteratee is invoked with three\n     * arguments: (value, key, object). Iteratee functions may exit iteration\n     * early by explicitly returning `false`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.3.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     * @see _.forOwnRight\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.forOwn(new Foo, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'a' then 'b' (iteration order is not guaranteed).\n     */\n    function forOwn(object, iteratee) {\n      return object && baseForOwn(object, getIteratee(iteratee, 3));\n    }\n\n    /**\n     * This method is like `_.forOwn` except that it iterates over properties of\n     * `object` in the opposite order.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     * @see _.forOwn\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.forOwnRight(new Foo, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.\n     */\n    function forOwnRight(object, iteratee) {\n      return object && baseForOwnRight(object, getIteratee(iteratee, 3));\n    }\n\n    /**\n     * Creates an array of function property names from own enumerable properties\n     * of `object`.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to inspect.\n     * @returns {Array} Returns the function names.\n     * @see _.functionsIn\n     * @example\n     *\n     * function Foo() {\n     *   this.a = _.constant('a');\n     *   this.b = _.constant('b');\n     * }\n     *\n     * Foo.prototype.c = _.constant('c');\n     *\n     * _.functions(new Foo);\n     * // => ['a', 'b']\n     */\n    function functions(object) {\n      return object == null ? [] : baseFunctions(object, keys(object));\n    }\n\n    /**\n     * Creates an array of function property names from own and inherited\n     * enumerable properties of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to inspect.\n     * @returns {Array} Returns the function names.\n     * @see _.functions\n     * @example\n     *\n     * function Foo() {\n     *   this.a = _.constant('a');\n     *   this.b = _.constant('b');\n     * }\n     *\n     * Foo.prototype.c = _.constant('c');\n     *\n     * _.functionsIn(new Foo);\n     * // => ['a', 'b', 'c']\n     */\n    function functionsIn(object) {\n      return object == null ? [] : baseFunctions(object, keysIn(object));\n    }\n\n    /**\n     * Gets the value at `path` of `object`. If the resolved value is\n     * `undefined`, the `defaultValue` is returned in its place.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.7.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the property to get.\n     * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n     * @returns {*} Returns the resolved value.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n     *\n     * _.get(object, 'a[0].b.c');\n     * // => 3\n     *\n     * _.get(object, ['a', '0', 'b', 'c']);\n     * // => 3\n     *\n     * _.get(object, 'a.b.c', 'default');\n     * // => 'default'\n     */\n    function get(object, path, defaultValue) {\n      var result = object == null ? undefined : baseGet(object, path);\n      return result === undefined ? defaultValue : result;\n    }\n\n    /**\n     * Checks if `path` is a direct property of `object`.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path to check.\n     * @returns {boolean} Returns `true` if `path` exists, else `false`.\n     * @example\n     *\n     * var object = { 'a': { 'b': 2 } };\n     * var other = _.create({ 'a': _.create({ 'b': 2 }) });\n     *\n     * _.has(object, 'a');\n     * // => true\n     *\n     * _.has(object, 'a.b');\n     * // => true\n     *\n     * _.has(object, ['a', 'b']);\n     * // => true\n     *\n     * _.has(other, 'a');\n     * // => false\n     */\n    function has(object, path) {\n      return object != null && hasPath(object, path, baseHas);\n    }\n\n    /**\n     * Checks if `path` is a direct or inherited property of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path to check.\n     * @returns {boolean} Returns `true` if `path` exists, else `false`.\n     * @example\n     *\n     * var object = _.create({ 'a': _.create({ 'b': 2 }) });\n     *\n     * _.hasIn(object, 'a');\n     * // => true\n     *\n     * _.hasIn(object, 'a.b');\n     * // => true\n     *\n     * _.hasIn(object, ['a', 'b']);\n     * // => true\n     *\n     * _.hasIn(object, 'b');\n     * // => false\n     */\n    function hasIn(object, path) {\n      return object != null && hasPath(object, path, baseHasIn);\n    }\n\n    /**\n     * Creates an object composed of the inverted keys and values of `object`.\n     * If `object` contains duplicate values, subsequent values overwrite\n     * property assignments of previous values.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.7.0\n     * @category Object\n     * @param {Object} object The object to invert.\n     * @returns {Object} Returns the new inverted object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2, 'c': 1 };\n     *\n     * _.invert(object);\n     * // => { '1': 'c', '2': 'b' }\n     */\n    var invert = createInverter(function(result, value, key) {\n      result[value] = key;\n    }, constant(identity));\n\n    /**\n     * This method is like `_.invert` except that the inverted object is generated\n     * from the results of running each element of `object` thru `iteratee`. The\n     * corresponding inverted value of each inverted key is an array of keys\n     * responsible for generating the inverted value. The iteratee is invoked\n     * with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.1.0\n     * @category Object\n     * @param {Object} object The object to invert.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Object} Returns the new inverted object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2, 'c': 1 };\n     *\n     * _.invertBy(object);\n     * // => { '1': ['a', 'c'], '2': ['b'] }\n     *\n     * _.invertBy(object, function(value) {\n     *   return 'group' + value;\n     * });\n     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }\n     */\n    var invertBy = createInverter(function(result, value, key) {\n      if (hasOwnProperty.call(result, value)) {\n        result[value].push(key);\n      } else {\n        result[value] = [key];\n      }\n    }, getIteratee);\n\n    /**\n     * Invokes the method at `path` of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the method to invoke.\n     * @param {...*} [args] The arguments to invoke the method with.\n     * @returns {*} Returns the result of the invoked method.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };\n     *\n     * _.invoke(object, 'a[0].b.c.slice', 1, 3);\n     * // => [2, 3]\n     */\n    var invoke = baseRest(baseInvoke);\n\n    /**\n     * Creates an array of the own enumerable property names of `object`.\n     *\n     * **Note:** Non-object values are coerced to objects. See the\n     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n     * for more details.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.keys(new Foo);\n     * // => ['a', 'b'] (iteration order is not guaranteed)\n     *\n     * _.keys('hi');\n     * // => ['0', '1']\n     */\n    function keys(object) {\n      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n    }\n\n    /**\n     * Creates an array of the own and inherited enumerable property names of `object`.\n     *\n     * **Note:** Non-object values are coerced to objects.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.keysIn(new Foo);\n     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)\n     */\n    function keysIn(object) {\n      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);\n    }\n\n    /**\n     * The opposite of `_.mapValues`; this method creates an object with the\n     * same values as `object` and keys generated by running each own enumerable\n     * string keyed property of `object` thru `iteratee`. The iteratee is invoked\n     * with three arguments: (value, key, object).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.8.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns the new mapped object.\n     * @see _.mapValues\n     * @example\n     *\n     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {\n     *   return key + value;\n     * });\n     * // => { 'a1': 1, 'b2': 2 }\n     */\n    function mapKeys(object, iteratee) {\n      var result = {};\n      iteratee = getIteratee(iteratee, 3);\n\n      baseForOwn(object, function(value, key, object) {\n        baseAssignValue(result, iteratee(value, key, object), value);\n      });\n      return result;\n    }\n\n    /**\n     * Creates an object with the same keys as `object` and values generated\n     * by running each own enumerable string keyed property of `object` thru\n     * `iteratee`. The iteratee is invoked with three arguments:\n     * (value, key, object).\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns the new mapped object.\n     * @see _.mapKeys\n     * @example\n     *\n     * var users = {\n     *   'fred':    { 'user': 'fred',    'age': 40 },\n     *   'pebbles': { 'user': 'pebbles', 'age': 1 }\n     * };\n     *\n     * _.mapValues(users, function(o) { return o.age; });\n     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.mapValues(users, 'age');\n     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n     */\n    function mapValues(object, iteratee) {\n      var result = {};\n      iteratee = getIteratee(iteratee, 3);\n\n      baseForOwn(object, function(value, key, object) {\n        baseAssignValue(result, key, iteratee(value, key, object));\n      });\n      return result;\n    }\n\n    /**\n     * This method is like `_.assign` except that it recursively merges own and\n     * inherited enumerable string keyed properties of source objects into the\n     * destination object. Source properties that resolve to `undefined` are\n     * skipped if a destination value exists. Array and plain object properties\n     * are merged recursively. Other objects and value types are overridden by\n     * assignment. Source objects are applied from left to right. Subsequent\n     * sources overwrite property assignments of previous sources.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.5.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = {\n     *   'a': [{ 'b': 2 }, { 'd': 4 }]\n     * };\n     *\n     * var other = {\n     *   'a': [{ 'c': 3 }, { 'e': 5 }]\n     * };\n     *\n     * _.merge(object, other);\n     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }\n     */\n    var merge = createAssigner(function(object, source, srcIndex) {\n      baseMerge(object, source, srcIndex);\n    });\n\n    /**\n     * This method is like `_.merge` except that it accepts `customizer` which\n     * is invoked to produce the merged values of the destination and source\n     * properties. If `customizer` returns `undefined`, merging is handled by the\n     * method instead. The `customizer` is invoked with six arguments:\n     * (objValue, srcValue, key, object, source, stack).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} sources The source objects.\n     * @param {Function} customizer The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * function customizer(objValue, srcValue) {\n     *   if (_.isArray(objValue)) {\n     *     return objValue.concat(srcValue);\n     *   }\n     * }\n     *\n     * var object = { 'a': [1], 'b': [2] };\n     * var other = { 'a': [3], 'b': [4] };\n     *\n     * _.mergeWith(object, other, customizer);\n     * // => { 'a': [1, 3], 'b': [2, 4] }\n     */\n    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {\n      baseMerge(object, source, srcIndex, customizer);\n    });\n\n    /**\n     * The opposite of `_.pick`; this method creates an object composed of the\n     * own and inherited enumerable string keyed properties of `object` that are\n     * not omitted.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The source object.\n     * @param {...(string|string[])} [props] The property identifiers to omit.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': '2', 'c': 3 };\n     *\n     * _.omit(object, ['a', 'c']);\n     * // => { 'b': '2' }\n     */\n    var omit = flatRest(function(object, props) {\n      if (object == null) {\n        return {};\n      }\n      props = arrayMap(props, toKey);\n      return basePick(object, baseDifference(getAllKeysIn(object), props));\n    });\n\n    /**\n     * The opposite of `_.pickBy`; this method creates an object composed of\n     * the own and inherited enumerable string keyed properties of `object` that\n     * `predicate` doesn't return truthy for. The predicate is invoked with two\n     * arguments: (value, key).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The source object.\n     * @param {Function} [predicate=_.identity] The function invoked per property.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': '2', 'c': 3 };\n     *\n     * _.omitBy(object, _.isNumber);\n     * // => { 'b': '2' }\n     */\n    function omitBy(object, predicate) {\n      return pickBy(object, negate(getIteratee(predicate)));\n    }\n\n    /**\n     * Creates an object composed of the picked `object` properties.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The source object.\n     * @param {...(string|string[])} [props] The property identifiers to pick.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': '2', 'c': 3 };\n     *\n     * _.pick(object, ['a', 'c']);\n     * // => { 'a': 1, 'c': 3 }\n     */\n    var pick = flatRest(function(object, props) {\n      return object == null ? {} : basePick(object, arrayMap(props, toKey));\n    });\n\n    /**\n     * Creates an object composed of the `object` properties `predicate` returns\n     * truthy for. The predicate is invoked with two arguments: (value, key).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The source object.\n     * @param {Function} [predicate=_.identity] The function invoked per property.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': '2', 'c': 3 };\n     *\n     * _.pickBy(object, _.isNumber);\n     * // => { 'a': 1, 'c': 3 }\n     */\n    function pickBy(object, predicate) {\n      return object == null ? {} : basePickBy(object, getAllKeysIn(object), getIteratee(predicate));\n    }\n\n    /**\n     * This method is like `_.get` except that if the resolved value is a\n     * function it's invoked with the `this` binding of its parent object and\n     * its result is returned.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the property to resolve.\n     * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n     * @returns {*} Returns the resolved value.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };\n     *\n     * _.result(object, 'a[0].b.c1');\n     * // => 3\n     *\n     * _.result(object, 'a[0].b.c2');\n     * // => 4\n     *\n     * _.result(object, 'a[0].b.c3', 'default');\n     * // => 'default'\n     *\n     * _.result(object, 'a[0].b.c3', _.constant('default'));\n     * // => 'default'\n     */\n    function result(object, path, defaultValue) {\n      path = isKey(path, object) ? [path] : castPath(path);\n\n      var index = -1,\n          length = path.length;\n\n      // Ensure the loop is entered when path is empty.\n      if (!length) {\n        object = undefined;\n        length = 1;\n      }\n      while (++index < length) {\n        var value = object == null ? undefined : object[toKey(path[index])];\n        if (value === undefined) {\n          index = length;\n          value = defaultValue;\n        }\n        object = isFunction(value) ? value.call(object) : value;\n      }\n      return object;\n    }\n\n    /**\n     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,\n     * it's created. Arrays are created for missing index properties while objects\n     * are created for all other missing properties. Use `_.setWith` to customize\n     * `path` creation.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.7.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n     *\n     * _.set(object, 'a[0].b.c', 4);\n     * console.log(object.a[0].b.c);\n     * // => 4\n     *\n     * _.set(object, ['x', '0', 'y', 'z'], 5);\n     * console.log(object.x[0].y.z);\n     * // => 5\n     */\n    function set(object, path, value) {\n      return object == null ? object : baseSet(object, path, value);\n    }\n\n    /**\n     * This method is like `_.set` except that it accepts `customizer` which is\n     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`\n     * path creation is handled by the method instead. The `customizer` is invoked\n     * with three arguments: (nsValue, key, nsObject).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {*} value The value to set.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = {};\n     *\n     * _.setWith(object, '[0][1]', 'a', Object);\n     * // => { '0': { '1': 'a' } }\n     */\n    function setWith(object, path, value, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      return object == null ? object : baseSet(object, path, value, customizer);\n    }\n\n    /**\n     * Creates an array of own enumerable string keyed-value pairs for `object`\n     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its\n     * entries are returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @alias entries\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the key-value pairs.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.toPairs(new Foo);\n     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)\n     */\n    var toPairs = createToPairs(keys);\n\n    /**\n     * Creates an array of own and inherited enumerable string keyed-value pairs\n     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map\n     * or set, its entries are returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @alias entriesIn\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the key-value pairs.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.toPairsIn(new Foo);\n     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)\n     */\n    var toPairsIn = createToPairs(keysIn);\n\n    /**\n     * An alternative to `_.reduce`; this method transforms `object` to a new\n     * `accumulator` object which is the result of running each of its own\n     * enumerable string keyed properties thru `iteratee`, with each invocation\n     * potentially mutating the `accumulator` object. If `accumulator` is not\n     * provided, a new object with the same `[[Prototype]]` will be used. The\n     * iteratee is invoked with four arguments: (accumulator, value, key, object).\n     * Iteratee functions may exit iteration early by explicitly returning `false`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.3.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @param {*} [accumulator] The custom accumulator value.\n     * @returns {*} Returns the accumulated value.\n     * @example\n     *\n     * _.transform([2, 3, 4], function(result, n) {\n     *   result.push(n *= n);\n     *   return n % 2 == 0;\n     * }, []);\n     * // => [4, 9]\n     *\n     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\n     *   (result[value] || (result[value] = [])).push(key);\n     * }, {});\n     * // => { '1': ['a', 'c'], '2': ['b'] }\n     */\n    function transform(object, iteratee, accumulator) {\n      var isArr = isArray(object),\n          isArrLike = isArr || isBuffer(object) || isTypedArray(object);\n\n      iteratee = getIteratee(iteratee, 4);\n      if (accumulator == null) {\n        var Ctor = object && object.constructor;\n        if (isArrLike) {\n          accumulator = isArr ? new Ctor : [];\n        }\n        else if (isObject(object)) {\n          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};\n        }\n        else {\n          accumulator = {};\n        }\n      }\n      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {\n        return iteratee(accumulator, value, index, object);\n      });\n      return accumulator;\n    }\n\n    /**\n     * Removes the property at `path` of `object`.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to unset.\n     * @returns {boolean} Returns `true` if the property is deleted, else `false`.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 7 } }] };\n     * _.unset(object, 'a[0].b.c');\n     * // => true\n     *\n     * console.log(object);\n     * // => { 'a': [{ 'b': {} }] };\n     *\n     * _.unset(object, ['a', '0', 'b', 'c']);\n     * // => true\n     *\n     * console.log(object);\n     * // => { 'a': [{ 'b': {} }] };\n     */\n    function unset(object, path) {\n      return object == null ? true : baseUnset(object, path);\n    }\n\n    /**\n     * This method is like `_.set` except that accepts `updater` to produce the\n     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`\n     * is invoked with one argument: (value).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.6.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {Function} updater The function to produce the updated value.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n     *\n     * _.update(object, 'a[0].b.c', function(n) { return n * n; });\n     * console.log(object.a[0].b.c);\n     * // => 9\n     *\n     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });\n     * console.log(object.x[0].y.z);\n     * // => 0\n     */\n    function update(object, path, updater) {\n      return object == null ? object : baseUpdate(object, path, castFunction(updater));\n    }\n\n    /**\n     * This method is like `_.update` except that it accepts `customizer` which is\n     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`\n     * path creation is handled by the method instead. The `customizer` is invoked\n     * with three arguments: (nsValue, key, nsObject).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.6.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {Function} updater The function to produce the updated value.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = {};\n     *\n     * _.updateWith(object, '[0][1]', _.constant('a'), Object);\n     * // => { '0': { '1': 'a' } }\n     */\n    function updateWith(object, path, updater, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);\n    }\n\n    /**\n     * Creates an array of the own enumerable string keyed property values of `object`.\n     *\n     * **Note:** Non-object values are coerced to objects.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property values.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.values(new Foo);\n     * // => [1, 2] (iteration order is not guaranteed)\n     *\n     * _.values('hi');\n     * // => ['h', 'i']\n     */\n    function values(object) {\n      return object == null ? [] : baseValues(object, keys(object));\n    }\n\n    /**\n     * Creates an array of the own and inherited enumerable string keyed property\n     * values of `object`.\n     *\n     * **Note:** Non-object values are coerced to objects.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property values.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.valuesIn(new Foo);\n     * // => [1, 2, 3] (iteration order is not guaranteed)\n     */\n    function valuesIn(object) {\n      return object == null ? [] : baseValues(object, keysIn(object));\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Clamps `number` within the inclusive `lower` and `upper` bounds.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Number\n     * @param {number} number The number to clamp.\n     * @param {number} [lower] The lower bound.\n     * @param {number} upper The upper bound.\n     * @returns {number} Returns the clamped number.\n     * @example\n     *\n     * _.clamp(-10, -5, 5);\n     * // => -5\n     *\n     * _.clamp(10, -5, 5);\n     * // => 5\n     */\n    function clamp(number, lower, upper) {\n      if (upper === undefined) {\n        upper = lower;\n        lower = undefined;\n      }\n      if (upper !== undefined) {\n        upper = toNumber(upper);\n        upper = upper === upper ? upper : 0;\n      }\n      if (lower !== undefined) {\n        lower = toNumber(lower);\n        lower = lower === lower ? lower : 0;\n      }\n      return baseClamp(toNumber(number), lower, upper);\n    }\n\n    /**\n     * Checks if `n` is between `start` and up to, but not including, `end`. If\n     * `end` is not specified, it's set to `start` with `start` then set to `0`.\n     * If `start` is greater than `end` the params are swapped to support\n     * negative ranges.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.3.0\n     * @category Number\n     * @param {number} number The number to check.\n     * @param {number} [start=0] The start of the range.\n     * @param {number} end The end of the range.\n     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.\n     * @see _.range, _.rangeRight\n     * @example\n     *\n     * _.inRange(3, 2, 4);\n     * // => true\n     *\n     * _.inRange(4, 8);\n     * // => true\n     *\n     * _.inRange(4, 2);\n     * // => false\n     *\n     * _.inRange(2, 2);\n     * // => false\n     *\n     * _.inRange(1.2, 2);\n     * // => true\n     *\n     * _.inRange(5.2, 4);\n     * // => false\n     *\n     * _.inRange(-3, -2, -6);\n     * // => true\n     */\n    function inRange(number, start, end) {\n      start = toFinite(start);\n      if (end === undefined) {\n        end = start;\n        start = 0;\n      } else {\n        end = toFinite(end);\n      }\n      number = toNumber(number);\n      return baseInRange(number, start, end);\n    }\n\n    /**\n     * Produces a random number between the inclusive `lower` and `upper` bounds.\n     * If only one argument is provided a number between `0` and the given number\n     * is returned. If `floating` is `true`, or either `lower` or `upper` are\n     * floats, a floating-point number is returned instead of an integer.\n     *\n     * **Note:** JavaScript follows the IEEE-754 standard for resolving\n     * floating-point values which can produce unexpected results.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.7.0\n     * @category Number\n     * @param {number} [lower=0] The lower bound.\n     * @param {number} [upper=1] The upper bound.\n     * @param {boolean} [floating] Specify returning a floating-point number.\n     * @returns {number} Returns the random number.\n     * @example\n     *\n     * _.random(0, 5);\n     * // => an integer between 0 and 5\n     *\n     * _.random(5);\n     * // => also an integer between 0 and 5\n     *\n     * _.random(5, true);\n     * // => a floating-point number between 0 and 5\n     *\n     * _.random(1.2, 5.2);\n     * // => a floating-point number between 1.2 and 5.2\n     */\n    function random(lower, upper, floating) {\n      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {\n        upper = floating = undefined;\n      }\n      if (floating === undefined) {\n        if (typeof upper == 'boolean') {\n          floating = upper;\n          upper = undefined;\n        }\n        else if (typeof lower == 'boolean') {\n          floating = lower;\n          lower = undefined;\n        }\n      }\n      if (lower === undefined && upper === undefined) {\n        lower = 0;\n        upper = 1;\n      }\n      else {\n        lower = toFinite(lower);\n        if (upper === undefined) {\n          upper = lower;\n          lower = 0;\n        } else {\n          upper = toFinite(upper);\n        }\n      }\n      if (lower > upper) {\n        var temp = lower;\n        lower = upper;\n        upper = temp;\n      }\n      if (floating || lower % 1 || upper % 1) {\n        var rand = nativeRandom();\n        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);\n      }\n      return baseRandom(lower, upper);\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the camel cased string.\n     * @example\n     *\n     * _.camelCase('Foo Bar');\n     * // => 'fooBar'\n     *\n     * _.camelCase('--foo-bar--');\n     * // => 'fooBar'\n     *\n     * _.camelCase('__FOO_BAR__');\n     * // => 'fooBar'\n     */\n    var camelCase = createCompounder(function(result, word, index) {\n      word = word.toLowerCase();\n      return result + (index ? capitalize(word) : word);\n    });\n\n    /**\n     * Converts the first character of `string` to upper case and the remaining\n     * to lower case.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to capitalize.\n     * @returns {string} Returns the capitalized string.\n     * @example\n     *\n     * _.capitalize('FRED');\n     * // => 'Fred'\n     */\n    function capitalize(string) {\n      return upperFirst(toString(string).toLowerCase());\n    }\n\n    /**\n     * Deburrs `string` by converting\n     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)\n     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)\n     * letters to basic Latin letters and removing\n     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to deburr.\n     * @returns {string} Returns the deburred string.\n     * @example\n     *\n     * _.deburr('déjà vu');\n     * // => 'deja vu'\n     */\n    function deburr(string) {\n      string = toString(string);\n      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');\n    }\n\n    /**\n     * Checks if `string` ends with the given target string.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to inspect.\n     * @param {string} [target] The string to search for.\n     * @param {number} [position=string.length] The position to search up to.\n     * @returns {boolean} Returns `true` if `string` ends with `target`,\n     *  else `false`.\n     * @example\n     *\n     * _.endsWith('abc', 'c');\n     * // => true\n     *\n     * _.endsWith('abc', 'b');\n     * // => false\n     *\n     * _.endsWith('abc', 'b', 2);\n     * // => true\n     */\n    function endsWith(string, target, position) {\n      string = toString(string);\n      target = baseToString(target);\n\n      var length = string.length;\n      position = position === undefined\n        ? length\n        : baseClamp(toInteger(position), 0, length);\n\n      var end = position;\n      position -= target.length;\n      return position >= 0 && string.slice(position, end) == target;\n    }\n\n    /**\n     * Converts the characters \"&\", \"<\", \">\", '\"', and \"'\" in `string` to their\n     * corresponding HTML entities.\n     *\n     * **Note:** No other characters are escaped. To escape additional\n     * characters use a third-party library like [_he_](https://mths.be/he).\n     *\n     * Though the \">\" character is escaped for symmetry, characters like\n     * \">\" and \"/\" don't need escaping in HTML and have no special meaning\n     * unless they're part of a tag or unquoted attribute value. See\n     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)\n     * (under \"semi-related fun fact\") for more details.\n     *\n     * When working with HTML you should always\n     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce\n     * XSS vectors.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category String\n     * @param {string} [string=''] The string to escape.\n     * @returns {string} Returns the escaped string.\n     * @example\n     *\n     * _.escape('fred, barney, & pebbles');\n     * // => 'fred, barney, &amp; pebbles'\n     */\n    function escape(string) {\n      string = toString(string);\n      return (string && reHasUnescapedHtml.test(string))\n        ? string.replace(reUnescapedHtml, escapeHtmlChar)\n        : string;\n    }\n\n    /**\n     * Escapes the `RegExp` special characters \"^\", \"$\", \"\\\", \".\", \"*\", \"+\",\n     * \"?\", \"(\", \")\", \"[\", \"]\", \"{\", \"}\", and \"|\" in `string`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to escape.\n     * @returns {string} Returns the escaped string.\n     * @example\n     *\n     * _.escapeRegExp('[lodash](https://lodash.com/)');\n     * // => '\\[lodash\\]\\(https://lodash\\.com/\\)'\n     */\n    function escapeRegExp(string) {\n      string = toString(string);\n      return (string && reHasRegExpChar.test(string))\n        ? string.replace(reRegExpChar, '\\\\$&')\n        : string;\n    }\n\n    /**\n     * Converts `string` to\n     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the kebab cased string.\n     * @example\n     *\n     * _.kebabCase('Foo Bar');\n     * // => 'foo-bar'\n     *\n     * _.kebabCase('fooBar');\n     * // => 'foo-bar'\n     *\n     * _.kebabCase('__FOO_BAR__');\n     * // => 'foo-bar'\n     */\n    var kebabCase = createCompounder(function(result, word, index) {\n      return result + (index ? '-' : '') + word.toLowerCase();\n    });\n\n    /**\n     * Converts `string`, as space separated words, to lower case.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the lower cased string.\n     * @example\n     *\n     * _.lowerCase('--Foo-Bar--');\n     * // => 'foo bar'\n     *\n     * _.lowerCase('fooBar');\n     * // => 'foo bar'\n     *\n     * _.lowerCase('__FOO_BAR__');\n     * // => 'foo bar'\n     */\n    var lowerCase = createCompounder(function(result, word, index) {\n      return result + (index ? ' ' : '') + word.toLowerCase();\n    });\n\n    /**\n     * Converts the first character of `string` to lower case.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the converted string.\n     * @example\n     *\n     * _.lowerFirst('Fred');\n     * // => 'fred'\n     *\n     * _.lowerFirst('FRED');\n     * // => 'fRED'\n     */\n    var lowerFirst = createCaseFirst('toLowerCase');\n\n    /**\n     * Pads `string` on the left and right sides if it's shorter than `length`.\n     * Padding characters are truncated if they can't be evenly divided by `length`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to pad.\n     * @param {number} [length=0] The padding length.\n     * @param {string} [chars=' '] The string used as padding.\n     * @returns {string} Returns the padded string.\n     * @example\n     *\n     * _.pad('abc', 8);\n     * // => '  abc   '\n     *\n     * _.pad('abc', 8, '_-');\n     * // => '_-abc_-_'\n     *\n     * _.pad('abc', 3);\n     * // => 'abc'\n     */\n    function pad(string, length, chars) {\n      string = toString(string);\n      length = toInteger(length);\n\n      var strLength = length ? stringSize(string) : 0;\n      if (!length || strLength >= length) {\n        return string;\n      }\n      var mid = (length - strLength) / 2;\n      return (\n        createPadding(nativeFloor(mid), chars) +\n        string +\n        createPadding(nativeCeil(mid), chars)\n      );\n    }\n\n    /**\n     * Pads `string` on the right side if it's shorter than `length`. Padding\n     * characters are truncated if they exceed `length`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to pad.\n     * @param {number} [length=0] The padding length.\n     * @param {string} [chars=' '] The string used as padding.\n     * @returns {string} Returns the padded string.\n     * @example\n     *\n     * _.padEnd('abc', 6);\n     * // => 'abc   '\n     *\n     * _.padEnd('abc', 6, '_-');\n     * // => 'abc_-_'\n     *\n     * _.padEnd('abc', 3);\n     * // => 'abc'\n     */\n    function padEnd(string, length, chars) {\n      string = toString(string);\n      length = toInteger(length);\n\n      var strLength = length ? stringSize(string) : 0;\n      return (length && strLength < length)\n        ? (string + createPadding(length - strLength, chars))\n        : string;\n    }\n\n    /**\n     * Pads `string` on the left side if it's shorter than `length`. Padding\n     * characters are truncated if they exceed `length`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to pad.\n     * @param {number} [length=0] The padding length.\n     * @param {string} [chars=' '] The string used as padding.\n     * @returns {string} Returns the padded string.\n     * @example\n     *\n     * _.padStart('abc', 6);\n     * // => '   abc'\n     *\n     * _.padStart('abc', 6, '_-');\n     * // => '_-_abc'\n     *\n     * _.padStart('abc', 3);\n     * // => 'abc'\n     */\n    function padStart(string, length, chars) {\n      string = toString(string);\n      length = toInteger(length);\n\n      var strLength = length ? stringSize(string) : 0;\n      return (length && strLength < length)\n        ? (createPadding(length - strLength, chars) + string)\n        : string;\n    }\n\n    /**\n     * Converts `string` to an integer of the specified radix. If `radix` is\n     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a\n     * hexadecimal, in which case a `radix` of `16` is used.\n     *\n     * **Note:** This method aligns with the\n     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.1.0\n     * @category String\n     * @param {string} string The string to convert.\n     * @param {number} [radix=10] The radix to interpret `value` by.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {number} Returns the converted integer.\n     * @example\n     *\n     * _.parseInt('08');\n     * // => 8\n     *\n     * _.map(['6', '08', '10'], _.parseInt);\n     * // => [6, 8, 10]\n     */\n    function parseInt(string, radix, guard) {\n      if (guard || radix == null) {\n        radix = 0;\n      } else if (radix) {\n        radix = +radix;\n      }\n      return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);\n    }\n\n    /**\n     * Repeats the given string `n` times.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to repeat.\n     * @param {number} [n=1] The number of times to repeat the string.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {string} Returns the repeated string.\n     * @example\n     *\n     * _.repeat('*', 3);\n     * // => '***'\n     *\n     * _.repeat('abc', 2);\n     * // => 'abcabc'\n     *\n     * _.repeat('abc', 0);\n     * // => ''\n     */\n    function repeat(string, n, guard) {\n      if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {\n        n = 1;\n      } else {\n        n = toInteger(n);\n      }\n      return baseRepeat(toString(string), n);\n    }\n\n    /**\n     * Replaces matches for `pattern` in `string` with `replacement`.\n     *\n     * **Note:** This method is based on\n     * [`String#replace`](https://mdn.io/String/replace).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to modify.\n     * @param {RegExp|string} pattern The pattern to replace.\n     * @param {Function|string} replacement The match replacement.\n     * @returns {string} Returns the modified string.\n     * @example\n     *\n     * _.replace('Hi Fred', 'Fred', 'Barney');\n     * // => 'Hi Barney'\n     */\n    function replace() {\n      var args = arguments,\n          string = toString(args[0]);\n\n      return args.length < 3 ? string : string.replace(args[1], args[2]);\n    }\n\n    /**\n     * Converts `string` to\n     * [snake case](https://en.wikipedia.org/wiki/Snake_case).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the snake cased string.\n     * @example\n     *\n     * _.snakeCase('Foo Bar');\n     * // => 'foo_bar'\n     *\n     * _.snakeCase('fooBar');\n     * // => 'foo_bar'\n     *\n     * _.snakeCase('--FOO-BAR--');\n     * // => 'foo_bar'\n     */\n    var snakeCase = createCompounder(function(result, word, index) {\n      return result + (index ? '_' : '') + word.toLowerCase();\n    });\n\n    /**\n     * Splits `string` by `separator`.\n     *\n     * **Note:** This method is based on\n     * [`String#split`](https://mdn.io/String/split).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to split.\n     * @param {RegExp|string} separator The separator pattern to split by.\n     * @param {number} [limit] The length to truncate results to.\n     * @returns {Array} Returns the string segments.\n     * @example\n     *\n     * _.split('a-b-c', '-', 2);\n     * // => ['a', 'b']\n     */\n    function split(string, separator, limit) {\n      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {\n        separator = limit = undefined;\n      }\n      limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;\n      if (!limit) {\n        return [];\n      }\n      string = toString(string);\n      if (string && (\n            typeof separator == 'string' ||\n            (separator != null && !isRegExp(separator))\n          )) {\n        separator = baseToString(separator);\n        if (!separator && hasUnicode(string)) {\n          return castSlice(stringToArray(string), 0, limit);\n        }\n      }\n      return string.split(separator, limit);\n    }\n\n    /**\n     * Converts `string` to\n     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.1.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the start cased string.\n     * @example\n     *\n     * _.startCase('--foo-bar--');\n     * // => 'Foo Bar'\n     *\n     * _.startCase('fooBar');\n     * // => 'Foo Bar'\n     *\n     * _.startCase('__FOO_BAR__');\n     * // => 'FOO BAR'\n     */\n    var startCase = createCompounder(function(result, word, index) {\n      return result + (index ? ' ' : '') + upperFirst(word);\n    });\n\n    /**\n     * Checks if `string` starts with the given target string.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to inspect.\n     * @param {string} [target] The string to search for.\n     * @param {number} [position=0] The position to search from.\n     * @returns {boolean} Returns `true` if `string` starts with `target`,\n     *  else `false`.\n     * @example\n     *\n     * _.startsWith('abc', 'a');\n     * // => true\n     *\n     * _.startsWith('abc', 'b');\n     * // => false\n     *\n     * _.startsWith('abc', 'b', 1);\n     * // => true\n     */\n    function startsWith(string, target, position) {\n      string = toString(string);\n      position = baseClamp(toInteger(position), 0, string.length);\n      target = baseToString(target);\n      return string.slice(position, position + target.length) == target;\n    }\n\n    /**\n     * Creates a compiled template function that can interpolate data properties\n     * in \"interpolate\" delimiters, HTML-escape interpolated data properties in\n     * \"escape\" delimiters, and execute JavaScript in \"evaluate\" delimiters. Data\n     * properties may be accessed as free variables in the template. If a setting\n     * object is given, it takes precedence over `_.templateSettings` values.\n     *\n     * **Note:** In the development build `_.template` utilizes\n     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)\n     * for easier debugging.\n     *\n     * For more information on precompiling templates see\n     * [lodash's custom builds documentation](https://lodash.com/custom-builds).\n     *\n     * For more information on Chrome extension sandboxes see\n     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category String\n     * @param {string} [string=''] The template string.\n     * @param {Object} [options={}] The options object.\n     * @param {RegExp} [options.escape=_.templateSettings.escape]\n     *  The HTML \"escape\" delimiter.\n     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]\n     *  The \"evaluate\" delimiter.\n     * @param {Object} [options.imports=_.templateSettings.imports]\n     *  An object to import into the template as free variables.\n     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]\n     *  The \"interpolate\" delimiter.\n     * @param {string} [options.sourceURL='lodash.templateSources[n]']\n     *  The sourceURL of the compiled template.\n     * @param {string} [options.variable='obj']\n     *  The data object variable name.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Function} Returns the compiled template function.\n     * @example\n     *\n     * // Use the \"interpolate\" delimiter to create a compiled template.\n     * var compiled = _.template('hello <%= user %>!');\n     * compiled({ 'user': 'fred' });\n     * // => 'hello fred!'\n     *\n     * // Use the HTML \"escape\" delimiter to escape data property values.\n     * var compiled = _.template('<b><%- value %></b>');\n     * compiled({ 'value': '<script>' });\n     * // => '<b>&lt;script&gt;</b>'\n     *\n     * // Use the \"evaluate\" delimiter to execute JavaScript and generate HTML.\n     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');\n     * compiled({ 'users': ['fred', 'barney'] });\n     * // => '<li>fred</li><li>barney</li>'\n     *\n     * // Use the internal `print` function in \"evaluate\" delimiters.\n     * var compiled = _.template('<% print(\"hello \" + user); %>!');\n     * compiled({ 'user': 'barney' });\n     * // => 'hello barney!'\n     *\n     * // Use the ES template literal delimiter as an \"interpolate\" delimiter.\n     * // Disable support by replacing the \"interpolate\" delimiter.\n     * var compiled = _.template('hello ${ user }!');\n     * compiled({ 'user': 'pebbles' });\n     * // => 'hello pebbles!'\n     *\n     * // Use backslashes to treat delimiters as plain text.\n     * var compiled = _.template('<%= \"\\\\<%- value %\\\\>\" %>');\n     * compiled({ 'value': 'ignored' });\n     * // => '<%- value %>'\n     *\n     * // Use the `imports` option to import `jQuery` as `jq`.\n     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';\n     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });\n     * compiled({ 'users': ['fred', 'barney'] });\n     * // => '<li>fred</li><li>barney</li>'\n     *\n     * // Use the `sourceURL` option to specify a custom sourceURL for the template.\n     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });\n     * compiled(data);\n     * // => Find the source of \"greeting.jst\" under the Sources tab or Resources panel of the web inspector.\n     *\n     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.\n     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });\n     * compiled.source;\n     * // => function(data) {\n     * //   var __t, __p = '';\n     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';\n     * //   return __p;\n     * // }\n     *\n     * // Use custom template delimiters.\n     * _.templateSettings.interpolate = /{{([\\s\\S]+?)}}/g;\n     * var compiled = _.template('hello {{ user }}!');\n     * compiled({ 'user': 'mustache' });\n     * // => 'hello mustache!'\n     *\n     * // Use the `source` property to inline compiled templates for meaningful\n     * // line numbers in error messages and stack traces.\n     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\\\n     *   var JST = {\\\n     *     \"main\": ' + _.template(mainText).source + '\\\n     *   };\\\n     * ');\n     */\n    function template(string, options, guard) {\n      // Based on John Resig's `tmpl` implementation\n      // (http://ejohn.org/blog/javascript-micro-templating/)\n      // and Laura Doktorova's doT.js (https://github.com/olado/doT).\n      var settings = lodash.templateSettings;\n\n      if (guard && isIterateeCall(string, options, guard)) {\n        options = undefined;\n      }\n      string = toString(string);\n      options = assignInWith({}, options, settings, assignInDefaults);\n\n      var imports = assignInWith({}, options.imports, settings.imports, assignInDefaults),\n          importsKeys = keys(imports),\n          importsValues = baseValues(imports, importsKeys);\n\n      var isEscaping,\n          isEvaluating,\n          index = 0,\n          interpolate = options.interpolate || reNoMatch,\n          source = \"__p += '\";\n\n      // Compile the regexp to match each delimiter.\n      var reDelimiters = RegExp(\n        (options.escape || reNoMatch).source + '|' +\n        interpolate.source + '|' +\n        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +\n        (options.evaluate || reNoMatch).source + '|$'\n      , 'g');\n\n      // Use a sourceURL for easier debugging.\n      var sourceURL = '//# sourceURL=' +\n        ('sourceURL' in options\n          ? options.sourceURL\n          : ('lodash.templateSources[' + (++templateCounter) + ']')\n        ) + '\\n';\n\n      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {\n        interpolateValue || (interpolateValue = esTemplateValue);\n\n        // Escape characters that can't be included in string literals.\n        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);\n\n        // Replace delimiters with snippets.\n        if (escapeValue) {\n          isEscaping = true;\n          source += \"' +\\n__e(\" + escapeValue + \") +\\n'\";\n        }\n        if (evaluateValue) {\n          isEvaluating = true;\n          source += \"';\\n\" + evaluateValue + \";\\n__p += '\";\n        }\n        if (interpolateValue) {\n          source += \"' +\\n((__t = (\" + interpolateValue + \")) == null ? '' : __t) +\\n'\";\n        }\n        index = offset + match.length;\n\n        // The JS engine embedded in Adobe products needs `match` returned in\n        // order to produce the correct `offset` value.\n        return match;\n      });\n\n      source += \"';\\n\";\n\n      // If `variable` is not specified wrap a with-statement around the generated\n      // code to add the data object to the top of the scope chain.\n      var variable = options.variable;\n      if (!variable) {\n        source = 'with (obj) {\\n' + source + '\\n}\\n';\n      }\n      // Cleanup code by stripping empty strings.\n      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)\n        .replace(reEmptyStringMiddle, '$1')\n        .replace(reEmptyStringTrailing, '$1;');\n\n      // Frame code as the function body.\n      source = 'function(' + (variable || 'obj') + ') {\\n' +\n        (variable\n          ? ''\n          : 'obj || (obj = {});\\n'\n        ) +\n        \"var __t, __p = ''\" +\n        (isEscaping\n           ? ', __e = _.escape'\n           : ''\n        ) +\n        (isEvaluating\n          ? ', __j = Array.prototype.join;\\n' +\n            \"function print() { __p += __j.call(arguments, '') }\\n\"\n          : ';\\n'\n        ) +\n        source +\n        'return __p\\n}';\n\n      var result = attempt(function() {\n        return Function(importsKeys, sourceURL + 'return ' + source)\n          .apply(undefined, importsValues);\n      });\n\n      // Provide the compiled function's source by its `toString` method or\n      // the `source` property as a convenience for inlining compiled templates.\n      result.source = source;\n      if (isError(result)) {\n        throw result;\n      }\n      return result;\n    }\n\n    /**\n     * Converts `string`, as a whole, to lower case just like\n     * [String#toLowerCase](https://mdn.io/toLowerCase).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the lower cased string.\n     * @example\n     *\n     * _.toLower('--Foo-Bar--');\n     * // => '--foo-bar--'\n     *\n     * _.toLower('fooBar');\n     * // => 'foobar'\n     *\n     * _.toLower('__FOO_BAR__');\n     * // => '__foo_bar__'\n     */\n    function toLower(value) {\n      return toString(value).toLowerCase();\n    }\n\n    /**\n     * Converts `string`, as a whole, to upper case just like\n     * [String#toUpperCase](https://mdn.io/toUpperCase).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the upper cased string.\n     * @example\n     *\n     * _.toUpper('--foo-bar--');\n     * // => '--FOO-BAR--'\n     *\n     * _.toUpper('fooBar');\n     * // => 'FOOBAR'\n     *\n     * _.toUpper('__foo_bar__');\n     * // => '__FOO_BAR__'\n     */\n    function toUpper(value) {\n      return toString(value).toUpperCase();\n    }\n\n    /**\n     * Removes leading and trailing whitespace or specified characters from `string`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to trim.\n     * @param {string} [chars=whitespace] The characters to trim.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {string} Returns the trimmed string.\n     * @example\n     *\n     * _.trim('  abc  ');\n     * // => 'abc'\n     *\n     * _.trim('-_-abc-_-', '_-');\n     * // => 'abc'\n     *\n     * _.map(['  foo  ', '  bar  '], _.trim);\n     * // => ['foo', 'bar']\n     */\n    function trim(string, chars, guard) {\n      string = toString(string);\n      if (string && (guard || chars === undefined)) {\n        return string.replace(reTrim, '');\n      }\n      if (!string || !(chars = baseToString(chars))) {\n        return string;\n      }\n      var strSymbols = stringToArray(string),\n          chrSymbols = stringToArray(chars),\n          start = charsStartIndex(strSymbols, chrSymbols),\n          end = charsEndIndex(strSymbols, chrSymbols) + 1;\n\n      return castSlice(strSymbols, start, end).join('');\n    }\n\n    /**\n     * Removes trailing whitespace or specified characters from `string`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to trim.\n     * @param {string} [chars=whitespace] The characters to trim.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {string} Returns the trimmed string.\n     * @example\n     *\n     * _.trimEnd('  abc  ');\n     * // => '  abc'\n     *\n     * _.trimEnd('-_-abc-_-', '_-');\n     * // => '-_-abc'\n     */\n    function trimEnd(string, chars, guard) {\n      string = toString(string);\n      if (string && (guard || chars === undefined)) {\n        return string.replace(reTrimEnd, '');\n      }\n      if (!string || !(chars = baseToString(chars))) {\n        return string;\n      }\n      var strSymbols = stringToArray(string),\n          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;\n\n      return castSlice(strSymbols, 0, end).join('');\n    }\n\n    /**\n     * Removes leading whitespace or specified characters from `string`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to trim.\n     * @param {string} [chars=whitespace] The characters to trim.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {string} Returns the trimmed string.\n     * @example\n     *\n     * _.trimStart('  abc  ');\n     * // => 'abc  '\n     *\n     * _.trimStart('-_-abc-_-', '_-');\n     * // => 'abc-_-'\n     */\n    function trimStart(string, chars, guard) {\n      string = toString(string);\n      if (string && (guard || chars === undefined)) {\n        return string.replace(reTrimStart, '');\n      }\n      if (!string || !(chars = baseToString(chars))) {\n        return string;\n      }\n      var strSymbols = stringToArray(string),\n          start = charsStartIndex(strSymbols, stringToArray(chars));\n\n      return castSlice(strSymbols, start).join('');\n    }\n\n    /**\n     * Truncates `string` if it's longer than the given maximum string length.\n     * The last characters of the truncated string are replaced with the omission\n     * string which defaults to \"...\".\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to truncate.\n     * @param {Object} [options={}] The options object.\n     * @param {number} [options.length=30] The maximum string length.\n     * @param {string} [options.omission='...'] The string to indicate text is omitted.\n     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.\n     * @returns {string} Returns the truncated string.\n     * @example\n     *\n     * _.truncate('hi-diddly-ho there, neighborino');\n     * // => 'hi-diddly-ho there, neighbo...'\n     *\n     * _.truncate('hi-diddly-ho there, neighborino', {\n     *   'length': 24,\n     *   'separator': ' '\n     * });\n     * // => 'hi-diddly-ho there,...'\n     *\n     * _.truncate('hi-diddly-ho there, neighborino', {\n     *   'length': 24,\n     *   'separator': /,? +/\n     * });\n     * // => 'hi-diddly-ho there...'\n     *\n     * _.truncate('hi-diddly-ho there, neighborino', {\n     *   'omission': ' [...]'\n     * });\n     * // => 'hi-diddly-ho there, neig [...]'\n     */\n    function truncate(string, options) {\n      var length = DEFAULT_TRUNC_LENGTH,\n          omission = DEFAULT_TRUNC_OMISSION;\n\n      if (isObject(options)) {\n        var separator = 'separator' in options ? options.separator : separator;\n        length = 'length' in options ? toInteger(options.length) : length;\n        omission = 'omission' in options ? baseToString(options.omission) : omission;\n      }\n      string = toString(string);\n\n      var strLength = string.length;\n      if (hasUnicode(string)) {\n        var strSymbols = stringToArray(string);\n        strLength = strSymbols.length;\n      }\n      if (length >= strLength) {\n        return string;\n      }\n      var end = length - stringSize(omission);\n      if (end < 1) {\n        return omission;\n      }\n      var result = strSymbols\n        ? castSlice(strSymbols, 0, end).join('')\n        : string.slice(0, end);\n\n      if (separator === undefined) {\n        return result + omission;\n      }\n      if (strSymbols) {\n        end += (result.length - end);\n      }\n      if (isRegExp(separator)) {\n        if (string.slice(end).search(separator)) {\n          var match,\n              substring = result;\n\n          if (!separator.global) {\n            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');\n          }\n          separator.lastIndex = 0;\n          while ((match = separator.exec(substring))) {\n            var newEnd = match.index;\n          }\n          result = result.slice(0, newEnd === undefined ? end : newEnd);\n        }\n      } else if (string.indexOf(baseToString(separator), end) != end) {\n        var index = result.lastIndexOf(separator);\n        if (index > -1) {\n          result = result.slice(0, index);\n        }\n      }\n      return result + omission;\n    }\n\n    /**\n     * The inverse of `_.escape`; this method converts the HTML entities\n     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to\n     * their corresponding characters.\n     *\n     * **Note:** No other HTML entities are unescaped. To unescape additional\n     * HTML entities use a third-party library like [_he_](https://mths.be/he).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.6.0\n     * @category String\n     * @param {string} [string=''] The string to unescape.\n     * @returns {string} Returns the unescaped string.\n     * @example\n     *\n     * _.unescape('fred, barney, &amp; pebbles');\n     * // => 'fred, barney, & pebbles'\n     */\n    function unescape(string) {\n      string = toString(string);\n      return (string && reHasEscapedHtml.test(string))\n        ? string.replace(reEscapedHtml, unescapeHtmlChar)\n        : string;\n    }\n\n    /**\n     * Converts `string`, as space separated words, to upper case.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the upper cased string.\n     * @example\n     *\n     * _.upperCase('--foo-bar');\n     * // => 'FOO BAR'\n     *\n     * _.upperCase('fooBar');\n     * // => 'FOO BAR'\n     *\n     * _.upperCase('__foo_bar__');\n     * // => 'FOO BAR'\n     */\n    var upperCase = createCompounder(function(result, word, index) {\n      return result + (index ? ' ' : '') + word.toUpperCase();\n    });\n\n    /**\n     * Converts the first character of `string` to upper case.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the converted string.\n     * @example\n     *\n     * _.upperFirst('fred');\n     * // => 'Fred'\n     *\n     * _.upperFirst('FRED');\n     * // => 'FRED'\n     */\n    var upperFirst = createCaseFirst('toUpperCase');\n\n    /**\n     * Splits `string` into an array of its words.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to inspect.\n     * @param {RegExp|string} [pattern] The pattern to match words.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the words of `string`.\n     * @example\n     *\n     * _.words('fred, barney, & pebbles');\n     * // => ['fred', 'barney', 'pebbles']\n     *\n     * _.words('fred, barney, & pebbles', /[^, ]+/g);\n     * // => ['fred', 'barney', '&', 'pebbles']\n     */\n    function words(string, pattern, guard) {\n      string = toString(string);\n      pattern = guard ? undefined : pattern;\n\n      if (pattern === undefined) {\n        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);\n      }\n      return string.match(pattern) || [];\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Attempts to invoke `func`, returning either the result or the caught error\n     * object. Any additional arguments are provided to `func` when it's invoked.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Util\n     * @param {Function} func The function to attempt.\n     * @param {...*} [args] The arguments to invoke `func` with.\n     * @returns {*} Returns the `func` result or error object.\n     * @example\n     *\n     * // Avoid throwing errors for invalid selectors.\n     * var elements = _.attempt(function(selector) {\n     *   return document.querySelectorAll(selector);\n     * }, '>_>');\n     *\n     * if (_.isError(elements)) {\n     *   elements = [];\n     * }\n     */\n    var attempt = baseRest(function(func, args) {\n      try {\n        return apply(func, undefined, args);\n      } catch (e) {\n        return isError(e) ? e : new Error(e);\n      }\n    });\n\n    /**\n     * Binds methods of an object to the object itself, overwriting the existing\n     * method.\n     *\n     * **Note:** This method doesn't set the \"length\" property of bound functions.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {Object} object The object to bind and assign the bound methods to.\n     * @param {...(string|string[])} methodNames The object method names to bind.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var view = {\n     *   'label': 'docs',\n     *   'click': function() {\n     *     console.log('clicked ' + this.label);\n     *   }\n     * };\n     *\n     * _.bindAll(view, ['click']);\n     * jQuery(element).on('click', view.click);\n     * // => Logs 'clicked docs' when clicked.\n     */\n    var bindAll = flatRest(function(object, methodNames) {\n      arrayEach(methodNames, function(key) {\n        key = toKey(key);\n        baseAssignValue(object, key, bind(object[key], object));\n      });\n      return object;\n    });\n\n    /**\n     * Creates a function that iterates over `pairs` and invokes the corresponding\n     * function of the first predicate to return truthy. The predicate-function\n     * pairs are invoked with the `this` binding and arguments of the created\n     * function.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {Array} pairs The predicate-function pairs.\n     * @returns {Function} Returns the new composite function.\n     * @example\n     *\n     * var func = _.cond([\n     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],\n     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],\n     *   [_.stubTrue,                      _.constant('no match')]\n     * ]);\n     *\n     * func({ 'a': 1, 'b': 2 });\n     * // => 'matches A'\n     *\n     * func({ 'a': 0, 'b': 1 });\n     * // => 'matches B'\n     *\n     * func({ 'a': '1', 'b': '2' });\n     * // => 'no match'\n     */\n    function cond(pairs) {\n      var length = pairs == null ? 0 : pairs.length,\n          toIteratee = getIteratee();\n\n      pairs = !length ? [] : arrayMap(pairs, function(pair) {\n        if (typeof pair[1] != 'function') {\n          throw new TypeError(FUNC_ERROR_TEXT);\n        }\n        return [toIteratee(pair[0]), pair[1]];\n      });\n\n      return baseRest(function(args) {\n        var index = -1;\n        while (++index < length) {\n          var pair = pairs[index];\n          if (apply(pair[0], this, args)) {\n            return apply(pair[1], this, args);\n          }\n        }\n      });\n    }\n\n    /**\n     * Creates a function that invokes the predicate properties of `source` with\n     * the corresponding property values of a given object, returning `true` if\n     * all predicates return truthy, else `false`.\n     *\n     * **Note:** The created function is equivalent to `_.conformsTo` with\n     * `source` partially applied.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {Object} source The object of property predicates to conform to.\n     * @returns {Function} Returns the new spec function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': 2, 'b': 1 },\n     *   { 'a': 1, 'b': 2 }\n     * ];\n     *\n     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));\n     * // => [{ 'a': 1, 'b': 2 }]\n     */\n    function conforms(source) {\n      return baseConforms(baseClone(source, true));\n    }\n\n    /**\n     * Creates a function that returns `value`.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Util\n     * @param {*} value The value to return from the new function.\n     * @returns {Function} Returns the new constant function.\n     * @example\n     *\n     * var objects = _.times(2, _.constant({ 'a': 1 }));\n     *\n     * console.log(objects);\n     * // => [{ 'a': 1 }, { 'a': 1 }]\n     *\n     * console.log(objects[0] === objects[1]);\n     * // => true\n     */\n    function constant(value) {\n      return function() {\n        return value;\n      };\n    }\n\n    /**\n     * Checks `value` to determine whether a default value should be returned in\n     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,\n     * or `undefined`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.14.0\n     * @category Util\n     * @param {*} value The value to check.\n     * @param {*} defaultValue The default value.\n     * @returns {*} Returns the resolved value.\n     * @example\n     *\n     * _.defaultTo(1, 10);\n     * // => 1\n     *\n     * _.defaultTo(undefined, 10);\n     * // => 10\n     */\n    function defaultTo(value, defaultValue) {\n      return (value == null || value !== value) ? defaultValue : value;\n    }\n\n    /**\n     * Creates a function that returns the result of invoking the given functions\n     * with the `this` binding of the created function, where each successive\n     * invocation is supplied the return value of the previous.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Util\n     * @param {...(Function|Function[])} [funcs] The functions to invoke.\n     * @returns {Function} Returns the new composite function.\n     * @see _.flowRight\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var addSquare = _.flow([_.add, square]);\n     * addSquare(1, 2);\n     * // => 9\n     */\n    var flow = createFlow();\n\n    /**\n     * This method is like `_.flow` except that it creates a function that\n     * invokes the given functions from right to left.\n     *\n     * @static\n     * @since 3.0.0\n     * @memberOf _\n     * @category Util\n     * @param {...(Function|Function[])} [funcs] The functions to invoke.\n     * @returns {Function} Returns the new composite function.\n     * @see _.flow\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var addSquare = _.flowRight([square, _.add]);\n     * addSquare(1, 2);\n     * // => 9\n     */\n    var flowRight = createFlow(true);\n\n    /**\n     * This method returns the first argument it receives.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {*} value Any value.\n     * @returns {*} Returns `value`.\n     * @example\n     *\n     * var object = { 'a': 1 };\n     *\n     * console.log(_.identity(object) === object);\n     * // => true\n     */\n    function identity(value) {\n      return value;\n    }\n\n    /**\n     * Creates a function that invokes `func` with the arguments of the created\n     * function. If `func` is a property name, the created function returns the\n     * property value for a given element. If `func` is an array or object, the\n     * created function returns `true` for elements that contain the equivalent\n     * source properties, otherwise it returns `false`.\n     *\n     * @static\n     * @since 4.0.0\n     * @memberOf _\n     * @category Util\n     * @param {*} [func=_.identity] The value to convert to a callback.\n     * @returns {Function} Returns the callback.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36, 'active': true },\n     *   { 'user': 'fred',   'age': 40, 'active': false }\n     * ];\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));\n     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.filter(users, _.iteratee(['user', 'fred']));\n     * // => [{ 'user': 'fred', 'age': 40 }]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.map(users, _.iteratee('user'));\n     * // => ['barney', 'fred']\n     *\n     * // Create custom iteratee shorthands.\n     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {\n     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {\n     *     return func.test(string);\n     *   };\n     * });\n     *\n     * _.filter(['abc', 'def'], /ef/);\n     * // => ['def']\n     */\n    function iteratee(func) {\n      return baseIteratee(typeof func == 'function' ? func : baseClone(func, true));\n    }\n\n    /**\n     * Creates a function that performs a partial deep comparison between a given\n     * object and `source`, returning `true` if the given object has equivalent\n     * property values, else `false`.\n     *\n     * **Note:** The created function is equivalent to `_.isMatch` with `source`\n     * partially applied.\n     *\n     * Partial comparisons will match empty array and empty object `source`\n     * values against any array or object value, respectively. See `_.isEqual`\n     * for a list of supported value comparisons.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Util\n     * @param {Object} source The object of property values to match.\n     * @returns {Function} Returns the new spec function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': 1, 'b': 2, 'c': 3 },\n     *   { 'a': 4, 'b': 5, 'c': 6 }\n     * ];\n     *\n     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));\n     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]\n     */\n    function matches(source) {\n      return baseMatches(baseClone(source, true));\n    }\n\n    /**\n     * Creates a function that performs a partial deep comparison between the\n     * value at `path` of a given object to `srcValue`, returning `true` if the\n     * object value is equivalent, else `false`.\n     *\n     * **Note:** Partial comparisons will match empty array and empty object\n     * `srcValue` values against any array or object value, respectively. See\n     * `_.isEqual` for a list of supported value comparisons.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.2.0\n     * @category Util\n     * @param {Array|string} path The path of the property to get.\n     * @param {*} srcValue The value to match.\n     * @returns {Function} Returns the new spec function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': 1, 'b': 2, 'c': 3 },\n     *   { 'a': 4, 'b': 5, 'c': 6 }\n     * ];\n     *\n     * _.find(objects, _.matchesProperty('a', 4));\n     * // => { 'a': 4, 'b': 5, 'c': 6 }\n     */\n    function matchesProperty(path, srcValue) {\n      return baseMatchesProperty(path, baseClone(srcValue, true));\n    }\n\n    /**\n     * Creates a function that invokes the method at `path` of a given object.\n     * Any additional arguments are provided to the invoked method.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.7.0\n     * @category Util\n     * @param {Array|string} path The path of the method to invoke.\n     * @param {...*} [args] The arguments to invoke the method with.\n     * @returns {Function} Returns the new invoker function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': { 'b': _.constant(2) } },\n     *   { 'a': { 'b': _.constant(1) } }\n     * ];\n     *\n     * _.map(objects, _.method('a.b'));\n     * // => [2, 1]\n     *\n     * _.map(objects, _.method(['a', 'b']));\n     * // => [2, 1]\n     */\n    var method = baseRest(function(path, args) {\n      return function(object) {\n        return baseInvoke(object, path, args);\n      };\n    });\n\n    /**\n     * The opposite of `_.method`; this method creates a function that invokes\n     * the method at a given path of `object`. Any additional arguments are\n     * provided to the invoked method.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.7.0\n     * @category Util\n     * @param {Object} object The object to query.\n     * @param {...*} [args] The arguments to invoke the method with.\n     * @returns {Function} Returns the new invoker function.\n     * @example\n     *\n     * var array = _.times(3, _.constant),\n     *     object = { 'a': array, 'b': array, 'c': array };\n     *\n     * _.map(['a[2]', 'c[0]'], _.methodOf(object));\n     * // => [2, 0]\n     *\n     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));\n     * // => [2, 0]\n     */\n    var methodOf = baseRest(function(object, args) {\n      return function(path) {\n        return baseInvoke(object, path, args);\n      };\n    });\n\n    /**\n     * Adds all own enumerable string keyed function properties of a source\n     * object to the destination object. If `object` is a function, then methods\n     * are added to its prototype as well.\n     *\n     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to\n     * avoid conflicts caused by modifying the original.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {Function|Object} [object=lodash] The destination object.\n     * @param {Object} source The object of functions to add.\n     * @param {Object} [options={}] The options object.\n     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.\n     * @returns {Function|Object} Returns `object`.\n     * @example\n     *\n     * function vowels(string) {\n     *   return _.filter(string, function(v) {\n     *     return /[aeiou]/i.test(v);\n     *   });\n     * }\n     *\n     * _.mixin({ 'vowels': vowels });\n     * _.vowels('fred');\n     * // => ['e']\n     *\n     * _('fred').vowels().value();\n     * // => ['e']\n     *\n     * _.mixin({ 'vowels': vowels }, { 'chain': false });\n     * _('fred').vowels();\n     * // => ['e']\n     */\n    function mixin(object, source, options) {\n      var props = keys(source),\n          methodNames = baseFunctions(source, props);\n\n      if (options == null &&\n          !(isObject(source) && (methodNames.length || !props.length))) {\n        options = source;\n        source = object;\n        object = this;\n        methodNames = baseFunctions(source, keys(source));\n      }\n      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,\n          isFunc = isFunction(object);\n\n      arrayEach(methodNames, function(methodName) {\n        var func = source[methodName];\n        object[methodName] = func;\n        if (isFunc) {\n          object.prototype[methodName] = function() {\n            var chainAll = this.__chain__;\n            if (chain || chainAll) {\n              var result = object(this.__wrapped__),\n                  actions = result.__actions__ = copyArray(this.__actions__);\n\n              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });\n              result.__chain__ = chainAll;\n              return result;\n            }\n            return func.apply(object, arrayPush([this.value()], arguments));\n          };\n        }\n      });\n\n      return object;\n    }\n\n    /**\n     * Reverts the `_` variable to its previous value and returns a reference to\n     * the `lodash` function.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @returns {Function} Returns the `lodash` function.\n     * @example\n     *\n     * var lodash = _.noConflict();\n     */\n    function noConflict() {\n      if (root._ === this) {\n        root._ = oldDash;\n      }\n      return this;\n    }\n\n    /**\n     * This method returns `undefined`.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.3.0\n     * @category Util\n     * @example\n     *\n     * _.times(2, _.noop);\n     * // => [undefined, undefined]\n     */\n    function noop() {\n      // No operation performed.\n    }\n\n    /**\n     * Creates a function that gets the argument at index `n`. If `n` is negative,\n     * the nth argument from the end is returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {number} [n=0] The index of the argument to return.\n     * @returns {Function} Returns the new pass-thru function.\n     * @example\n     *\n     * var func = _.nthArg(1);\n     * func('a', 'b', 'c', 'd');\n     * // => 'b'\n     *\n     * var func = _.nthArg(-2);\n     * func('a', 'b', 'c', 'd');\n     * // => 'c'\n     */\n    function nthArg(n) {\n      n = toInteger(n);\n      return baseRest(function(args) {\n        return baseNth(args, n);\n      });\n    }\n\n    /**\n     * Creates a function that invokes `iteratees` with the arguments it receives\n     * and returns their results.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {...(Function|Function[])} [iteratees=[_.identity]]\n     *  The iteratees to invoke.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var func = _.over([Math.max, Math.min]);\n     *\n     * func(1, 2, 3, 4);\n     * // => [4, 1]\n     */\n    var over = createOver(arrayMap);\n\n    /**\n     * Creates a function that checks if **all** of the `predicates` return\n     * truthy when invoked with the arguments it receives.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {...(Function|Function[])} [predicates=[_.identity]]\n     *  The predicates to check.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var func = _.overEvery([Boolean, isFinite]);\n     *\n     * func('1');\n     * // => true\n     *\n     * func(null);\n     * // => false\n     *\n     * func(NaN);\n     * // => false\n     */\n    var overEvery = createOver(arrayEvery);\n\n    /**\n     * Creates a function that checks if **any** of the `predicates` return\n     * truthy when invoked with the arguments it receives.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {...(Function|Function[])} [predicates=[_.identity]]\n     *  The predicates to check.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var func = _.overSome([Boolean, isFinite]);\n     *\n     * func('1');\n     * // => true\n     *\n     * func(null);\n     * // => true\n     *\n     * func(NaN);\n     * // => false\n     */\n    var overSome = createOver(arraySome);\n\n    /**\n     * Creates a function that returns the value at `path` of a given object.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Util\n     * @param {Array|string} path The path of the property to get.\n     * @returns {Function} Returns the new accessor function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': { 'b': 2 } },\n     *   { 'a': { 'b': 1 } }\n     * ];\n     *\n     * _.map(objects, _.property('a.b'));\n     * // => [2, 1]\n     *\n     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');\n     * // => [1, 2]\n     */\n    function property(path) {\n      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);\n    }\n\n    /**\n     * The opposite of `_.property`; this method creates a function that returns\n     * the value at a given path of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Util\n     * @param {Object} object The object to query.\n     * @returns {Function} Returns the new accessor function.\n     * @example\n     *\n     * var array = [0, 1, 2],\n     *     object = { 'a': array, 'b': array, 'c': array };\n     *\n     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));\n     * // => [2, 0]\n     *\n     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));\n     * // => [2, 0]\n     */\n    function propertyOf(object) {\n      return function(path) {\n        return object == null ? undefined : baseGet(object, path);\n      };\n    }\n\n    /**\n     * Creates an array of numbers (positive and/or negative) progressing from\n     * `start` up to, but not including, `end`. A step of `-1` is used if a negative\n     * `start` is specified without an `end` or `step`. If `end` is not specified,\n     * it's set to `start` with `start` then set to `0`.\n     *\n     * **Note:** JavaScript follows the IEEE-754 standard for resolving\n     * floating-point values which can produce unexpected results.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {number} [start=0] The start of the range.\n     * @param {number} end The end of the range.\n     * @param {number} [step=1] The value to increment or decrement by.\n     * @returns {Array} Returns the range of numbers.\n     * @see _.inRange, _.rangeRight\n     * @example\n     *\n     * _.range(4);\n     * // => [0, 1, 2, 3]\n     *\n     * _.range(-4);\n     * // => [0, -1, -2, -3]\n     *\n     * _.range(1, 5);\n     * // => [1, 2, 3, 4]\n     *\n     * _.range(0, 20, 5);\n     * // => [0, 5, 10, 15]\n     *\n     * _.range(0, -4, -1);\n     * // => [0, -1, -2, -3]\n     *\n     * _.range(1, 4, 0);\n     * // => [1, 1, 1]\n     *\n     * _.range(0);\n     * // => []\n     */\n    var range = createRange();\n\n    /**\n     * This method is like `_.range` except that it populates values in\n     * descending order.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {number} [start=0] The start of the range.\n     * @param {number} end The end of the range.\n     * @param {number} [step=1] The value to increment or decrement by.\n     * @returns {Array} Returns the range of numbers.\n     * @see _.inRange, _.range\n     * @example\n     *\n     * _.rangeRight(4);\n     * // => [3, 2, 1, 0]\n     *\n     * _.rangeRight(-4);\n     * // => [-3, -2, -1, 0]\n     *\n     * _.rangeRight(1, 5);\n     * // => [4, 3, 2, 1]\n     *\n     * _.rangeRight(0, 20, 5);\n     * // => [15, 10, 5, 0]\n     *\n     * _.rangeRight(0, -4, -1);\n     * // => [-3, -2, -1, 0]\n     *\n     * _.rangeRight(1, 4, 0);\n     * // => [1, 1, 1]\n     *\n     * _.rangeRight(0);\n     * // => []\n     */\n    var rangeRight = createRange(true);\n\n    /**\n     * This method returns a new empty array.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {Array} Returns the new empty array.\n     * @example\n     *\n     * var arrays = _.times(2, _.stubArray);\n     *\n     * console.log(arrays);\n     * // => [[], []]\n     *\n     * console.log(arrays[0] === arrays[1]);\n     * // => false\n     */\n    function stubArray() {\n      return [];\n    }\n\n    /**\n     * This method returns `false`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {boolean} Returns `false`.\n     * @example\n     *\n     * _.times(2, _.stubFalse);\n     * // => [false, false]\n     */\n    function stubFalse() {\n      return false;\n    }\n\n    /**\n     * This method returns a new empty object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {Object} Returns the new empty object.\n     * @example\n     *\n     * var objects = _.times(2, _.stubObject);\n     *\n     * console.log(objects);\n     * // => [{}, {}]\n     *\n     * console.log(objects[0] === objects[1]);\n     * // => false\n     */\n    function stubObject() {\n      return {};\n    }\n\n    /**\n     * This method returns an empty string.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {string} Returns the empty string.\n     * @example\n     *\n     * _.times(2, _.stubString);\n     * // => ['', '']\n     */\n    function stubString() {\n      return '';\n    }\n\n    /**\n     * This method returns `true`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {boolean} Returns `true`.\n     * @example\n     *\n     * _.times(2, _.stubTrue);\n     * // => [true, true]\n     */\n    function stubTrue() {\n      return true;\n    }\n\n    /**\n     * Invokes the iteratee `n` times, returning an array of the results of\n     * each invocation. The iteratee is invoked with one argument; (index).\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {number} n The number of times to invoke `iteratee`.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the array of results.\n     * @example\n     *\n     * _.times(3, String);\n     * // => ['0', '1', '2']\n     *\n     *  _.times(4, _.constant(0));\n     * // => [0, 0, 0, 0]\n     */\n    function times(n, iteratee) {\n      n = toInteger(n);\n      if (n < 1 || n > MAX_SAFE_INTEGER) {\n        return [];\n      }\n      var index = MAX_ARRAY_LENGTH,\n          length = nativeMin(n, MAX_ARRAY_LENGTH);\n\n      iteratee = getIteratee(iteratee);\n      n -= MAX_ARRAY_LENGTH;\n\n      var result = baseTimes(length, iteratee);\n      while (++index < n) {\n        iteratee(index);\n      }\n      return result;\n    }\n\n    /**\n     * Converts `value` to a property path array.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {*} value The value to convert.\n     * @returns {Array} Returns the new property path array.\n     * @example\n     *\n     * _.toPath('a.b.c');\n     * // => ['a', 'b', 'c']\n     *\n     * _.toPath('a[0].b.c');\n     * // => ['a', '0', 'b', 'c']\n     */\n    function toPath(value) {\n      if (isArray(value)) {\n        return arrayMap(value, toKey);\n      }\n      return isSymbol(value) ? [value] : copyArray(stringToPath(value));\n    }\n\n    /**\n     * Generates a unique ID. If `prefix` is given, the ID is appended to it.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {string} [prefix=''] The value to prefix the ID with.\n     * @returns {string} Returns the unique ID.\n     * @example\n     *\n     * _.uniqueId('contact_');\n     * // => 'contact_104'\n     *\n     * _.uniqueId();\n     * // => '105'\n     */\n    function uniqueId(prefix) {\n      var id = ++idCounter;\n      return toString(prefix) + id;\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Adds two numbers.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.4.0\n     * @category Math\n     * @param {number} augend The first number in an addition.\n     * @param {number} addend The second number in an addition.\n     * @returns {number} Returns the total.\n     * @example\n     *\n     * _.add(6, 4);\n     * // => 10\n     */\n    var add = createMathOperation(function(augend, addend) {\n      return augend + addend;\n    }, 0);\n\n    /**\n     * Computes `number` rounded up to `precision`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.10.0\n     * @category Math\n     * @param {number} number The number to round up.\n     * @param {number} [precision=0] The precision to round up to.\n     * @returns {number} Returns the rounded up number.\n     * @example\n     *\n     * _.ceil(4.006);\n     * // => 5\n     *\n     * _.ceil(6.004, 2);\n     * // => 6.01\n     *\n     * _.ceil(6040, -2);\n     * // => 6100\n     */\n    var ceil = createRound('ceil');\n\n    /**\n     * Divide two numbers.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Math\n     * @param {number} dividend The first number in a division.\n     * @param {number} divisor The second number in a division.\n     * @returns {number} Returns the quotient.\n     * @example\n     *\n     * _.divide(6, 4);\n     * // => 1.5\n     */\n    var divide = createMathOperation(function(dividend, divisor) {\n      return dividend / divisor;\n    }, 1);\n\n    /**\n     * Computes `number` rounded down to `precision`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.10.0\n     * @category Math\n     * @param {number} number The number to round down.\n     * @param {number} [precision=0] The precision to round down to.\n     * @returns {number} Returns the rounded down number.\n     * @example\n     *\n     * _.floor(4.006);\n     * // => 4\n     *\n     * _.floor(0.046, 2);\n     * // => 0.04\n     *\n     * _.floor(4060, -2);\n     * // => 4000\n     */\n    var floor = createRound('floor');\n\n    /**\n     * Computes the maximum value of `array`. If `array` is empty or falsey,\n     * `undefined` is returned.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @returns {*} Returns the maximum value.\n     * @example\n     *\n     * _.max([4, 2, 8, 6]);\n     * // => 8\n     *\n     * _.max([]);\n     * // => undefined\n     */\n    function max(array) {\n      return (array && array.length)\n        ? baseExtremum(array, identity, baseGt)\n        : undefined;\n    }\n\n    /**\n     * This method is like `_.max` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the criterion by which\n     * the value is ranked. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {*} Returns the maximum value.\n     * @example\n     *\n     * var objects = [{ 'n': 1 }, { 'n': 2 }];\n     *\n     * _.maxBy(objects, function(o) { return o.n; });\n     * // => { 'n': 2 }\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.maxBy(objects, 'n');\n     * // => { 'n': 2 }\n     */\n    function maxBy(array, iteratee) {\n      return (array && array.length)\n        ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)\n        : undefined;\n    }\n\n    /**\n     * Computes the mean of the values in `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @returns {number} Returns the mean.\n     * @example\n     *\n     * _.mean([4, 2, 8, 6]);\n     * // => 5\n     */\n    function mean(array) {\n      return baseMean(array, identity);\n    }\n\n    /**\n     * This method is like `_.mean` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the value to be averaged.\n     * The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {number} Returns the mean.\n     * @example\n     *\n     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];\n     *\n     * _.meanBy(objects, function(o) { return o.n; });\n     * // => 5\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.meanBy(objects, 'n');\n     * // => 5\n     */\n    function meanBy(array, iteratee) {\n      return baseMean(array, getIteratee(iteratee, 2));\n    }\n\n    /**\n     * Computes the minimum value of `array`. If `array` is empty or falsey,\n     * `undefined` is returned.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @returns {*} Returns the minimum value.\n     * @example\n     *\n     * _.min([4, 2, 8, 6]);\n     * // => 2\n     *\n     * _.min([]);\n     * // => undefined\n     */\n    function min(array) {\n      return (array && array.length)\n        ? baseExtremum(array, identity, baseLt)\n        : undefined;\n    }\n\n    /**\n     * This method is like `_.min` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the criterion by which\n     * the value is ranked. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {*} Returns the minimum value.\n     * @example\n     *\n     * var objects = [{ 'n': 1 }, { 'n': 2 }];\n     *\n     * _.minBy(objects, function(o) { return o.n; });\n     * // => { 'n': 1 }\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.minBy(objects, 'n');\n     * // => { 'n': 1 }\n     */\n    function minBy(array, iteratee) {\n      return (array && array.length)\n        ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)\n        : undefined;\n    }\n\n    /**\n     * Multiply two numbers.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Math\n     * @param {number} multiplier The first number in a multiplication.\n     * @param {number} multiplicand The second number in a multiplication.\n     * @returns {number} Returns the product.\n     * @example\n     *\n     * _.multiply(6, 4);\n     * // => 24\n     */\n    var multiply = createMathOperation(function(multiplier, multiplicand) {\n      return multiplier * multiplicand;\n    }, 1);\n\n    /**\n     * Computes `number` rounded to `precision`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.10.0\n     * @category Math\n     * @param {number} number The number to round.\n     * @param {number} [precision=0] The precision to round to.\n     * @returns {number} Returns the rounded number.\n     * @example\n     *\n     * _.round(4.006);\n     * // => 4\n     *\n     * _.round(4.006, 2);\n     * // => 4.01\n     *\n     * _.round(4060, -2);\n     * // => 4100\n     */\n    var round = createRound('round');\n\n    /**\n     * Subtract two numbers.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {number} minuend The first number in a subtraction.\n     * @param {number} subtrahend The second number in a subtraction.\n     * @returns {number} Returns the difference.\n     * @example\n     *\n     * _.subtract(6, 4);\n     * // => 2\n     */\n    var subtract = createMathOperation(function(minuend, subtrahend) {\n      return minuend - subtrahend;\n    }, 0);\n\n    /**\n     * Computes the sum of the values in `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.4.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @returns {number} Returns the sum.\n     * @example\n     *\n     * _.sum([4, 2, 8, 6]);\n     * // => 20\n     */\n    function sum(array) {\n      return (array && array.length)\n        ? baseSum(array, identity)\n        : 0;\n    }\n\n    /**\n     * This method is like `_.sum` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the value to be summed.\n     * The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {number} Returns the sum.\n     * @example\n     *\n     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];\n     *\n     * _.sumBy(objects, function(o) { return o.n; });\n     * // => 20\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.sumBy(objects, 'n');\n     * // => 20\n     */\n    function sumBy(array, iteratee) {\n      return (array && array.length)\n        ? baseSum(array, getIteratee(iteratee, 2))\n        : 0;\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    // Add methods that return wrapped values in chain sequences.\n    lodash.after = after;\n    lodash.ary = ary;\n    lodash.assign = assign;\n    lodash.assignIn = assignIn;\n    lodash.assignInWith = assignInWith;\n    lodash.assignWith = assignWith;\n    lodash.at = at;\n    lodash.before = before;\n    lodash.bind = bind;\n    lodash.bindAll = bindAll;\n    lodash.bindKey = bindKey;\n    lodash.castArray = castArray;\n    lodash.chain = chain;\n    lodash.chunk = chunk;\n    lodash.compact = compact;\n    lodash.concat = concat;\n    lodash.cond = cond;\n    lodash.conforms = conforms;\n    lodash.constant = constant;\n    lodash.countBy = countBy;\n    lodash.create = create;\n    lodash.curry = curry;\n    lodash.curryRight = curryRight;\n    lodash.debounce = debounce;\n    lodash.defaults = defaults;\n    lodash.defaultsDeep = defaultsDeep;\n    lodash.defer = defer;\n    lodash.delay = delay;\n    lodash.difference = difference;\n    lodash.differenceBy = differenceBy;\n    lodash.differenceWith = differenceWith;\n    lodash.drop = drop;\n    lodash.dropRight = dropRight;\n    lodash.dropRightWhile = dropRightWhile;\n    lodash.dropWhile = dropWhile;\n    lodash.fill = fill;\n    lodash.filter = filter;\n    lodash.flatMap = flatMap;\n    lodash.flatMapDeep = flatMapDeep;\n    lodash.flatMapDepth = flatMapDepth;\n    lodash.flatten = flatten;\n    lodash.flattenDeep = flattenDeep;\n    lodash.flattenDepth = flattenDepth;\n    lodash.flip = flip;\n    lodash.flow = flow;\n    lodash.flowRight = flowRight;\n    lodash.fromPairs = fromPairs;\n    lodash.functions = functions;\n    lodash.functionsIn = functionsIn;\n    lodash.groupBy = groupBy;\n    lodash.initial = initial;\n    lodash.intersection = intersection;\n    lodash.intersectionBy = intersectionBy;\n    lodash.intersectionWith = intersectionWith;\n    lodash.invert = invert;\n    lodash.invertBy = invertBy;\n    lodash.invokeMap = invokeMap;\n    lodash.iteratee = iteratee;\n    lodash.keyBy = keyBy;\n    lodash.keys = keys;\n    lodash.keysIn = keysIn;\n    lodash.map = map;\n    lodash.mapKeys = mapKeys;\n    lodash.mapValues = mapValues;\n    lodash.matches = matches;\n    lodash.matchesProperty = matchesProperty;\n    lodash.memoize = memoize;\n    lodash.merge = merge;\n    lodash.mergeWith = mergeWith;\n    lodash.method = method;\n    lodash.methodOf = methodOf;\n    lodash.mixin = mixin;\n    lodash.negate = negate;\n    lodash.nthArg = nthArg;\n    lodash.omit = omit;\n    lodash.omitBy = omitBy;\n    lodash.once = once;\n    lodash.orderBy = orderBy;\n    lodash.over = over;\n    lodash.overArgs = overArgs;\n    lodash.overEvery = overEvery;\n    lodash.overSome = overSome;\n    lodash.partial = partial;\n    lodash.partialRight = partialRight;\n    lodash.partition = partition;\n    lodash.pick = pick;\n    lodash.pickBy = pickBy;\n    lodash.property = property;\n    lodash.propertyOf = propertyOf;\n    lodash.pull = pull;\n    lodash.pullAll = pullAll;\n    lodash.pullAllBy = pullAllBy;\n    lodash.pullAllWith = pullAllWith;\n    lodash.pullAt = pullAt;\n    lodash.range = range;\n    lodash.rangeRight = rangeRight;\n    lodash.rearg = rearg;\n    lodash.reject = reject;\n    lodash.remove = remove;\n    lodash.rest = rest;\n    lodash.reverse = reverse;\n    lodash.sampleSize = sampleSize;\n    lodash.set = set;\n    lodash.setWith = setWith;\n    lodash.shuffle = shuffle;\n    lodash.slice = slice;\n    lodash.sortBy = sortBy;\n    lodash.sortedUniq = sortedUniq;\n    lodash.sortedUniqBy = sortedUniqBy;\n    lodash.split = split;\n    lodash.spread = spread;\n    lodash.tail = tail;\n    lodash.take = take;\n    lodash.takeRight = takeRight;\n    lodash.takeRightWhile = takeRightWhile;\n    lodash.takeWhile = takeWhile;\n    lodash.tap = tap;\n    lodash.throttle = throttle;\n    lodash.thru = thru;\n    lodash.toArray = toArray;\n    lodash.toPairs = toPairs;\n    lodash.toPairsIn = toPairsIn;\n    lodash.toPath = toPath;\n    lodash.toPlainObject = toPlainObject;\n    lodash.transform = transform;\n    lodash.unary = unary;\n    lodash.union = union;\n    lodash.unionBy = unionBy;\n    lodash.unionWith = unionWith;\n    lodash.uniq = uniq;\n    lodash.uniqBy = uniqBy;\n    lodash.uniqWith = uniqWith;\n    lodash.unset = unset;\n    lodash.unzip = unzip;\n    lodash.unzipWith = unzipWith;\n    lodash.update = update;\n    lodash.updateWith = updateWith;\n    lodash.values = values;\n    lodash.valuesIn = valuesIn;\n    lodash.without = without;\n    lodash.words = words;\n    lodash.wrap = wrap;\n    lodash.xor = xor;\n    lodash.xorBy = xorBy;\n    lodash.xorWith = xorWith;\n    lodash.zip = zip;\n    lodash.zipObject = zipObject;\n    lodash.zipObjectDeep = zipObjectDeep;\n    lodash.zipWith = zipWith;\n\n    // Add aliases.\n    lodash.entries = toPairs;\n    lodash.entriesIn = toPairsIn;\n    lodash.extend = assignIn;\n    lodash.extendWith = assignInWith;\n\n    // Add methods to `lodash.prototype`.\n    mixin(lodash, lodash);\n\n    /*------------------------------------------------------------------------*/\n\n    // Add methods that return unwrapped values in chain sequences.\n    lodash.add = add;\n    lodash.attempt = attempt;\n    lodash.camelCase = camelCase;\n    lodash.capitalize = capitalize;\n    lodash.ceil = ceil;\n    lodash.clamp = clamp;\n    lodash.clone = clone;\n    lodash.cloneDeep = cloneDeep;\n    lodash.cloneDeepWith = cloneDeepWith;\n    lodash.cloneWith = cloneWith;\n    lodash.conformsTo = conformsTo;\n    lodash.deburr = deburr;\n    lodash.defaultTo = defaultTo;\n    lodash.divide = divide;\n    lodash.endsWith = endsWith;\n    lodash.eq = eq;\n    lodash.escape = escape;\n    lodash.escapeRegExp = escapeRegExp;\n    lodash.every = every;\n    lodash.find = find;\n    lodash.findIndex = findIndex;\n    lodash.findKey = findKey;\n    lodash.findLast = findLast;\n    lodash.findLastIndex = findLastIndex;\n    lodash.findLastKey = findLastKey;\n    lodash.floor = floor;\n    lodash.forEach = forEach;\n    lodash.forEachRight = forEachRight;\n    lodash.forIn = forIn;\n    lodash.forInRight = forInRight;\n    lodash.forOwn = forOwn;\n    lodash.forOwnRight = forOwnRight;\n    lodash.get = get;\n    lodash.gt = gt;\n    lodash.gte = gte;\n    lodash.has = has;\n    lodash.hasIn = hasIn;\n    lodash.head = head;\n    lodash.identity = identity;\n    lodash.includes = includes;\n    lodash.indexOf = indexOf;\n    lodash.inRange = inRange;\n    lodash.invoke = invoke;\n    lodash.isArguments = isArguments;\n    lodash.isArray = isArray;\n    lodash.isArrayBuffer = isArrayBuffer;\n    lodash.isArrayLike = isArrayLike;\n    lodash.isArrayLikeObject = isArrayLikeObject;\n    lodash.isBoolean = isBoolean;\n    lodash.isBuffer = isBuffer;\n    lodash.isDate = isDate;\n    lodash.isElement = isElement;\n    lodash.isEmpty = isEmpty;\n    lodash.isEqual = isEqual;\n    lodash.isEqualWith = isEqualWith;\n    lodash.isError = isError;\n    lodash.isFinite = isFinite;\n    lodash.isFunction = isFunction;\n    lodash.isInteger = isInteger;\n    lodash.isLength = isLength;\n    lodash.isMap = isMap;\n    lodash.isMatch = isMatch;\n    lodash.isMatchWith = isMatchWith;\n    lodash.isNaN = isNaN;\n    lodash.isNative = isNative;\n    lodash.isNil = isNil;\n    lodash.isNull = isNull;\n    lodash.isNumber = isNumber;\n    lodash.isObject = isObject;\n    lodash.isObjectLike = isObjectLike;\n    lodash.isPlainObject = isPlainObject;\n    lodash.isRegExp = isRegExp;\n    lodash.isSafeInteger = isSafeInteger;\n    lodash.isSet = isSet;\n    lodash.isString = isString;\n    lodash.isSymbol = isSymbol;\n    lodash.isTypedArray = isTypedArray;\n    lodash.isUndefined = isUndefined;\n    lodash.isWeakMap = isWeakMap;\n    lodash.isWeakSet = isWeakSet;\n    lodash.join = join;\n    lodash.kebabCase = kebabCase;\n    lodash.last = last;\n    lodash.lastIndexOf = lastIndexOf;\n    lodash.lowerCase = lowerCase;\n    lodash.lowerFirst = lowerFirst;\n    lodash.lt = lt;\n    lodash.lte = lte;\n    lodash.max = max;\n    lodash.maxBy = maxBy;\n    lodash.mean = mean;\n    lodash.meanBy = meanBy;\n    lodash.min = min;\n    lodash.minBy = minBy;\n    lodash.stubArray = stubArray;\n    lodash.stubFalse = stubFalse;\n    lodash.stubObject = stubObject;\n    lodash.stubString = stubString;\n    lodash.stubTrue = stubTrue;\n    lodash.multiply = multiply;\n    lodash.nth = nth;\n    lodash.noConflict = noConflict;\n    lodash.noop = noop;\n    lodash.now = now;\n    lodash.pad = pad;\n    lodash.padEnd = padEnd;\n    lodash.padStart = padStart;\n    lodash.parseInt = parseInt;\n    lodash.random = random;\n    lodash.reduce = reduce;\n    lodash.reduceRight = reduceRight;\n    lodash.repeat = repeat;\n    lodash.replace = replace;\n    lodash.result = result;\n    lodash.round = round;\n    lodash.runInContext = runInContext;\n    lodash.sample = sample;\n    lodash.size = size;\n    lodash.snakeCase = snakeCase;\n    lodash.some = some;\n    lodash.sortedIndex = sortedIndex;\n    lodash.sortedIndexBy = sortedIndexBy;\n    lodash.sortedIndexOf = sortedIndexOf;\n    lodash.sortedLastIndex = sortedLastIndex;\n    lodash.sortedLastIndexBy = sortedLastIndexBy;\n    lodash.sortedLastIndexOf = sortedLastIndexOf;\n    lodash.startCase = startCase;\n    lodash.startsWith = startsWith;\n    lodash.subtract = subtract;\n    lodash.sum = sum;\n    lodash.sumBy = sumBy;\n    lodash.template = template;\n    lodash.times = times;\n    lodash.toFinite = toFinite;\n    lodash.toInteger = toInteger;\n    lodash.toLength = toLength;\n    lodash.toLower = toLower;\n    lodash.toNumber = toNumber;\n    lodash.toSafeInteger = toSafeInteger;\n    lodash.toString = toString;\n    lodash.toUpper = toUpper;\n    lodash.trim = trim;\n    lodash.trimEnd = trimEnd;\n    lodash.trimStart = trimStart;\n    lodash.truncate = truncate;\n    lodash.unescape = unescape;\n    lodash.uniqueId = uniqueId;\n    lodash.upperCase = upperCase;\n    lodash.upperFirst = upperFirst;\n\n    // Add aliases.\n    lodash.each = forEach;\n    lodash.eachRight = forEachRight;\n    lodash.first = head;\n\n    mixin(lodash, (function() {\n      var source = {};\n      baseForOwn(lodash, function(func, methodName) {\n        if (!hasOwnProperty.call(lodash.prototype, methodName)) {\n          source[methodName] = func;\n        }\n      });\n      return source;\n    }()), { 'chain': false });\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * The semantic version number.\n     *\n     * @static\n     * @memberOf _\n     * @type {string}\n     */\n    lodash.VERSION = VERSION;\n\n    // Assign default placeholders.\n    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {\n      lodash[methodName].placeholder = lodash;\n    });\n\n    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.\n    arrayEach(['drop', 'take'], function(methodName, index) {\n      LazyWrapper.prototype[methodName] = function(n) {\n        var filtered = this.__filtered__;\n        if (filtered && !index) {\n          return new LazyWrapper(this);\n        }\n        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);\n\n        var result = this.clone();\n        if (filtered) {\n          result.__takeCount__ = nativeMin(n, result.__takeCount__);\n        } else {\n          result.__views__.push({\n            'size': nativeMin(n, MAX_ARRAY_LENGTH),\n            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')\n          });\n        }\n        return result;\n      };\n\n      LazyWrapper.prototype[methodName + 'Right'] = function(n) {\n        return this.reverse()[methodName](n).reverse();\n      };\n    });\n\n    // Add `LazyWrapper` methods that accept an `iteratee` value.\n    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {\n      var type = index + 1,\n          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;\n\n      LazyWrapper.prototype[methodName] = function(iteratee) {\n        var result = this.clone();\n        result.__iteratees__.push({\n          'iteratee': getIteratee(iteratee, 3),\n          'type': type\n        });\n        result.__filtered__ = result.__filtered__ || isFilter;\n        return result;\n      };\n    });\n\n    // Add `LazyWrapper` methods for `_.head` and `_.last`.\n    arrayEach(['head', 'last'], function(methodName, index) {\n      var takeName = 'take' + (index ? 'Right' : '');\n\n      LazyWrapper.prototype[methodName] = function() {\n        return this[takeName](1).value()[0];\n      };\n    });\n\n    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.\n    arrayEach(['initial', 'tail'], function(methodName, index) {\n      var dropName = 'drop' + (index ? '' : 'Right');\n\n      LazyWrapper.prototype[methodName] = function() {\n        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);\n      };\n    });\n\n    LazyWrapper.prototype.compact = function() {\n      return this.filter(identity);\n    };\n\n    LazyWrapper.prototype.find = function(predicate) {\n      return this.filter(predicate).head();\n    };\n\n    LazyWrapper.prototype.findLast = function(predicate) {\n      return this.reverse().find(predicate);\n    };\n\n    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {\n      if (typeof path == 'function') {\n        return new LazyWrapper(this);\n      }\n      return this.map(function(value) {\n        return baseInvoke(value, path, args);\n      });\n    });\n\n    LazyWrapper.prototype.reject = function(predicate) {\n      return this.filter(negate(getIteratee(predicate)));\n    };\n\n    LazyWrapper.prototype.slice = function(start, end) {\n      start = toInteger(start);\n\n      var result = this;\n      if (result.__filtered__ && (start > 0 || end < 0)) {\n        return new LazyWrapper(result);\n      }\n      if (start < 0) {\n        result = result.takeRight(-start);\n      } else if (start) {\n        result = result.drop(start);\n      }\n      if (end !== undefined) {\n        end = toInteger(end);\n        result = end < 0 ? result.dropRight(-end) : result.take(end - start);\n      }\n      return result;\n    };\n\n    LazyWrapper.prototype.takeRightWhile = function(predicate) {\n      return this.reverse().takeWhile(predicate).reverse();\n    };\n\n    LazyWrapper.prototype.toArray = function() {\n      return this.take(MAX_ARRAY_LENGTH);\n    };\n\n    // Add `LazyWrapper` methods to `lodash.prototype`.\n    baseForOwn(LazyWrapper.prototype, function(func, methodName) {\n      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),\n          isTaker = /^(?:head|last)$/.test(methodName),\n          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],\n          retUnwrapped = isTaker || /^find/.test(methodName);\n\n      if (!lodashFunc) {\n        return;\n      }\n      lodash.prototype[methodName] = function() {\n        var value = this.__wrapped__,\n            args = isTaker ? [1] : arguments,\n            isLazy = value instanceof LazyWrapper,\n            iteratee = args[0],\n            useLazy = isLazy || isArray(value);\n\n        var interceptor = function(value) {\n          var result = lodashFunc.apply(lodash, arrayPush([value], args));\n          return (isTaker && chainAll) ? result[0] : result;\n        };\n\n        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {\n          // Avoid lazy use if the iteratee has a \"length\" value other than `1`.\n          isLazy = useLazy = false;\n        }\n        var chainAll = this.__chain__,\n            isHybrid = !!this.__actions__.length,\n            isUnwrapped = retUnwrapped && !chainAll,\n            onlyLazy = isLazy && !isHybrid;\n\n        if (!retUnwrapped && useLazy) {\n          value = onlyLazy ? value : new LazyWrapper(this);\n          var result = func.apply(value, args);\n          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });\n          return new LodashWrapper(result, chainAll);\n        }\n        if (isUnwrapped && onlyLazy) {\n          return func.apply(this, args);\n        }\n        result = this.thru(interceptor);\n        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;\n      };\n    });\n\n    // Add `Array` methods to `lodash.prototype`.\n    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {\n      var func = arrayProto[methodName],\n          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',\n          retUnwrapped = /^(?:pop|shift)$/.test(methodName);\n\n      lodash.prototype[methodName] = function() {\n        var args = arguments;\n        if (retUnwrapped && !this.__chain__) {\n          var value = this.value();\n          return func.apply(isArray(value) ? value : [], args);\n        }\n        return this[chainName](function(value) {\n          return func.apply(isArray(value) ? value : [], args);\n        });\n      };\n    });\n\n    // Map minified method names to their real names.\n    baseForOwn(LazyWrapper.prototype, function(func, methodName) {\n      var lodashFunc = lodash[methodName];\n      if (lodashFunc) {\n        var key = (lodashFunc.name + ''),\n            names = realNames[key] || (realNames[key] = []);\n\n        names.push({ 'name': methodName, 'func': lodashFunc });\n      }\n    });\n\n    realNames[createHybrid(undefined, BIND_KEY_FLAG).name] = [{\n      'name': 'wrapper',\n      'func': undefined\n    }];\n\n    // Add methods to `LazyWrapper`.\n    LazyWrapper.prototype.clone = lazyClone;\n    LazyWrapper.prototype.reverse = lazyReverse;\n    LazyWrapper.prototype.value = lazyValue;\n\n    // Add chain sequence methods to the `lodash` wrapper.\n    lodash.prototype.at = wrapperAt;\n    lodash.prototype.chain = wrapperChain;\n    lodash.prototype.commit = wrapperCommit;\n    lodash.prototype.next = wrapperNext;\n    lodash.prototype.plant = wrapperPlant;\n    lodash.prototype.reverse = wrapperReverse;\n    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;\n\n    // Add lazy aliases.\n    lodash.prototype.first = lodash.prototype.head;\n\n    if (symIterator) {\n      lodash.prototype[symIterator] = wrapperToIterator;\n    }\n    return lodash;\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  // Export lodash.\n  var _ = runInContext();\n\n  // Some AMD build optimizers, like r.js, check for condition patterns like:\n  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {\n    // Expose Lodash on the global object to prevent errors when Lodash is\n    // loaded by a script tag in the presence of an AMD loader.\n    // See http://requirejs.org/docs/errors.html#mismatch for more details.\n    // Use `_.noConflict` to remove Lodash from the global object.\n    root._ = _;\n\n    // Define as an anonymous module so, through path mapping, it can be\n    // referenced as the \"underscore\" module.\n    define(function() {\n      return _;\n    });\n  }\n  // Check for `exports` after `define` in case a build optimizer adds it.\n  else if (freeModule) {\n    // Export for Node.js.\n    (freeModule.exports = _)._ = _;\n    // Export for CommonJS support.\n    freeExports._ = _;\n  }\n  else {\n    // Export to the global object.\n    root._ = _;\n  }\n}.call(this));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/lodash.js\n// module id = 2\n// module chunks = 0","'use strict';\n\nvar has = Object.prototype.hasOwnProperty\n  , prefix = '~';\n\n/**\n * Constructor to create a storage for our `EE` objects.\n * An `Events` instance is a plain object whose properties are event names.\n *\n * @constructor\n * @api private\n */\nfunction Events() {}\n\n//\n// We try to not inherit from `Object.prototype`. In some engines creating an\n// instance in this way is faster than calling `Object.create(null)` directly.\n// If `Object.create(null)` is not supported we prefix the event names with a\n// character to make sure that the built-in object properties are not\n// overridden or used as an attack vector.\n//\nif (Object.create) {\n  Events.prototype = Object.create(null);\n\n  //\n  // This hack is needed because the `__proto__` property is still inherited in\n  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.\n  //\n  if (!new Events().__proto__) prefix = false;\n}\n\n/**\n * Representation of a single event listener.\n *\n * @param {Function} fn The listener function.\n * @param {Mixed} context The context to invoke the listener with.\n * @param {Boolean} [once=false] Specify if the listener is a one-time listener.\n * @constructor\n * @api private\n */\nfunction EE(fn, context, once) {\n  this.fn = fn;\n  this.context = context;\n  this.once = once || false;\n}\n\n/**\n * Minimal `EventEmitter` interface that is molded against the Node.js\n * `EventEmitter` interface.\n *\n * @constructor\n * @api public\n */\nfunction EventEmitter() {\n  this._events = new Events();\n  this._eventsCount = 0;\n}\n\n/**\n * Return an array listing the events for which the emitter has registered\n * listeners.\n *\n * @returns {Array}\n * @api public\n */\nEventEmitter.prototype.eventNames = function eventNames() {\n  var names = []\n    , events\n    , name;\n\n  if (this._eventsCount === 0) return names;\n\n  for (name in (events = this._events)) {\n    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);\n  }\n\n  if (Object.getOwnPropertySymbols) {\n    return names.concat(Object.getOwnPropertySymbols(events));\n  }\n\n  return names;\n};\n\n/**\n * Return the listeners registered for a given event.\n *\n * @param {String|Symbol} event The event name.\n * @param {Boolean} exists Only check if there are listeners.\n * @returns {Array|Boolean}\n * @api public\n */\nEventEmitter.prototype.listeners = function listeners(event, exists) {\n  var evt = prefix ? prefix + event : event\n    , available = this._events[evt];\n\n  if (exists) return !!available;\n  if (!available) return [];\n  if (available.fn) return [available.fn];\n\n  for (var i = 0, l = available.length, ee = new Array(l); i < l; i++) {\n    ee[i] = available[i].fn;\n  }\n\n  return ee;\n};\n\n/**\n * Calls each of the listeners registered for a given event.\n *\n * @param {String|Symbol} event The event name.\n * @returns {Boolean} `true` if the event had listeners, else `false`.\n * @api public\n */\nEventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return false;\n\n  var listeners = this._events[evt]\n    , len = arguments.length\n    , args\n    , i;\n\n  if (listeners.fn) {\n    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);\n\n    switch (len) {\n      case 1: return listeners.fn.call(listeners.context), true;\n      case 2: return listeners.fn.call(listeners.context, a1), true;\n      case 3: return listeners.fn.call(listeners.context, a1, a2), true;\n      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;\n      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n    }\n\n    for (i = 1, args = new Array(len -1); i < len; i++) {\n      args[i - 1] = arguments[i];\n    }\n\n    listeners.fn.apply(listeners.context, args);\n  } else {\n    var length = listeners.length\n      , j;\n\n    for (i = 0; i < length; i++) {\n      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);\n\n      switch (len) {\n        case 1: listeners[i].fn.call(listeners[i].context); break;\n        case 2: listeners[i].fn.call(listeners[i].context, a1); break;\n        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;\n        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;\n        default:\n          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {\n            args[j - 1] = arguments[j];\n          }\n\n          listeners[i].fn.apply(listeners[i].context, args);\n      }\n    }\n  }\n\n  return true;\n};\n\n/**\n * Add a listener for a given event.\n *\n * @param {String|Symbol} event The event name.\n * @param {Function} fn The listener function.\n * @param {Mixed} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @api public\n */\nEventEmitter.prototype.on = function on(event, fn, context) {\n  var listener = new EE(fn, context || this)\n    , evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) this._events[evt] = listener, this._eventsCount++;\n  else if (!this._events[evt].fn) this._events[evt].push(listener);\n  else this._events[evt] = [this._events[evt], listener];\n\n  return this;\n};\n\n/**\n * Add a one-time listener for a given event.\n *\n * @param {String|Symbol} event The event name.\n * @param {Function} fn The listener function.\n * @param {Mixed} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @api public\n */\nEventEmitter.prototype.once = function once(event, fn, context) {\n  var listener = new EE(fn, context || this, true)\n    , evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) this._events[evt] = listener, this._eventsCount++;\n  else if (!this._events[evt].fn) this._events[evt].push(listener);\n  else this._events[evt] = [this._events[evt], listener];\n\n  return this;\n};\n\n/**\n * Remove the listeners of a given event.\n *\n * @param {String|Symbol} event The event name.\n * @param {Function} fn Only remove the listeners that match this function.\n * @param {Mixed} context Only remove the listeners that have this context.\n * @param {Boolean} once Only remove one-time listeners.\n * @returns {EventEmitter} `this`.\n * @api public\n */\nEventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return this;\n  if (!fn) {\n    if (--this._eventsCount === 0) this._events = new Events();\n    else delete this._events[evt];\n    return this;\n  }\n\n  var listeners = this._events[evt];\n\n  if (listeners.fn) {\n    if (\n         listeners.fn === fn\n      && (!once || listeners.once)\n      && (!context || listeners.context === context)\n    ) {\n      if (--this._eventsCount === 0) this._events = new Events();\n      else delete this._events[evt];\n    }\n  } else {\n    for (var i = 0, events = [], length = listeners.length; i < length; i++) {\n      if (\n           listeners[i].fn !== fn\n        || (once && !listeners[i].once)\n        || (context && listeners[i].context !== context)\n      ) {\n        events.push(listeners[i]);\n      }\n    }\n\n    //\n    // Reset the array, or remove it completely if we have no more listeners.\n    //\n    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;\n    else if (--this._eventsCount === 0) this._events = new Events();\n    else delete this._events[evt];\n  }\n\n  return this;\n};\n\n/**\n * Remove all listeners, or those of the specified event.\n *\n * @param {String|Symbol} [event] The event name.\n * @returns {EventEmitter} `this`.\n * @api public\n */\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n  var evt;\n\n  if (event) {\n    evt = prefix ? prefix + event : event;\n    if (this._events[evt]) {\n      if (--this._eventsCount === 0) this._events = new Events();\n      else delete this._events[evt];\n    }\n  } else {\n    this._events = new Events();\n    this._eventsCount = 0;\n  }\n\n  return this;\n};\n\n//\n// Alias methods names because people roll like that.\n//\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n//\n// This function doesn't apply anymore.\n//\nEventEmitter.prototype.setMaxListeners = function setMaxListeners() {\n  return this;\n};\n\n//\n// Expose the prefix.\n//\nEventEmitter.prefixed = prefix;\n\n//\n// Allow `EventEmitter` to be imported as module namespace.\n//\nEventEmitter.EventEmitter = EventEmitter;\n\n//\n// Expose the module.\n//\nif ('undefined' !== typeof module) {\n  module.exports = EventEmitter;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/eventemitter3/index.js\n// module id = 3\n// module chunks = 0","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/process/browser.js\n// module id = 4\n// module chunks = 0","/*\n* Title: WebHamsters\n* Description: Javascript library to add multi-threading support to javascript by exploiting concurrent web workers\n* Author: Austin K. Smith\n* Contact: austin@asmithdev.com\n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com\n* License: Artistic License 2.0\n*/\n\nlet hamsters = {\n    version: '3.9',\n    debug: false,\n    cache: false,\n    persistence: true,\n    maxThreads: (navigator.hardwareConcurrency || 4),\n    tools: {},\n    wheel: {\n      env: {\n        legacy: false,\n        node: false,\n        shell: false,\n        worker: false,\n        browser: false,\n        ie10: false,\n        transferrable: true\n      },\n      queue: {\n        running: [],\n        pending: []\n      },\n      hamsters: [], \n      tasks: [],\n      errors: [],\n      uri: null\n    }\n  };\n\n/**\n * @description: Initializes and sets up library functionality\n * @return\n */\n(function() {\n  \"use strict\";\n\n  /**\n   * @description: Detect Internet Explorer by Version IE10 and below\n   * @method isIE\n   * @param {integer} version\n   * @return CallExpression\n   */\n  let isIE = function(version) {\n    return (new RegExp('msie' + (!isNaN(version) ? ('\\\\s'+version) : ''), 'i').test(navigator.userAgent));\n  };\n\n  /**\n   * Description\n   * @description: Detect support for web workers\n   * @method setupEnv\n   * @return\n   */\n  let setupEnv = function(callback) {\n    hamsters.wheel.env.browser = typeof window === \"object\";\n    hamsters.wheel.env.worker  = typeof importScripts === \"function\";\n    hamsters.wheel.env.node = typeof process === \"object\" && typeof require === \"function\" && !hamsters.wheel.env.browser && !hamsters.wheel.env.worker && !hamsters.wheel.env.reactNative;\n    hamsters.wheel.env.reactNative = !hamsters.wheel.env.node && typeof global === 'object';\n    hamsters.wheel.env.shell = !hamsters.wheel.env.browser && !hamsters.wheel.env.node && !hamsters.wheel.env.worker && !hamsters.wheel.env.reactNative;\n    if(hamsters.wheel.env.reactNative || hamsters.wheel.env.node) {\n      global.self = global;\n    }\n    if(hamsters.wheel.env.browser && !hamsters.wheel.env.worker) {\n      if(isIE(10)) {\n        try {\n          let hamster = new Worker('common/wheel.min.js');\n          hamster.terminate();\n          hamsters.wheel.env.ie10 = true;\n        } catch(e) {\n          hamsters.wheel.env.legacy = true;\n        }\n      }\n      if(!self.Worker || navigator.userAgent.indexOf('Kindle/3.0') !== -1 || navigator.userAgent.indexOf('Mobile/8F190') !== -1  || navigator.userAgent.indexOf('IEMobile') !== -1) {\n        hamsters.wheel.env.legacy = true;\n      } else if(navigator.userAgent.toLowerCase().indexOf('firefox') !== -1) {\n        if(hamsters.maxThreads > 20) {\n          hamsters.maxThreads = 20;\n        }\n      }\n    }\n    if(hamsters.wheel.env.worker) {\n       try {\n        hamsters.wheel.uri = self.URL.createObjectURL(createBlob('(' + String(giveHamsterWork(true)) + '());'));\n        let SharedHamster = new SharedWorker(hamsters.wheel.uri, 'SharedHamsterWheel');\n      } catch(e) {\n        hamsters.wheel.env.legacy = true;\n      }\n    }\n    if(hamsters.wheel.env.shell) {\n      hamsters.wheel.env.legacy = true;\n    }\n    //Check for transferrable object support\n    if(!Uint8Array) {\n      hamsters.wheel.env.transferrable = false;\n    }\n    callback(hamsters.wheel.env.legacy);\n  };\n\n  /**\n   * @description: Method for checking wheel error log\n   * @method checkErrors\n   * @return ObjectExpression\n   */\n  hamsters.tools.checkErrors = function() {\n    return {\n      msg: 'There are currently ' + hamsters.wheel.errors.length + ' errors captured in the wheel',\n      total: hamsters.wheel.errors.length,\n      errors: hamsters.wheel.errors\n    };\n  };\n  \n  /**\n   * @description: Splits an array into equal sized subarrays for individual workers\n   * @constructor\n   * @method splitArray\n   * @param {array} array - incoming array to be split\n   * @param {integer} n - total subarrays  \n   * @return ArrayExpression\n   */\n  hamsters.tools.splitArray = function(array, n) {\n    let i = 0;\n    let tasks = [];\n    let size = Math.ceil(array.length/n);\n    if(array.slice) {\n      while(i < array.length) {\n        tasks.push(array.slice(i, i += size));\n      }\n    } else {\n      while (i < array.length) {\n        tasks.push(array.subarray(i, i += size));\n      }\n    }\n    return tasks;\n  };\n\n  /**\n   * @description: Abstracts for loop usage\n   * @constructor\n   * @method for\n   * @param {object} input - input params\n   * @param {function} callback - callback when output ready\n   * @return \n   */\n  hamsters.tools.loop = function(input, callback) {\n    if(!input.array) {\n      console.error('Missing data array');\n      return;\n    }\n    let threads = input.threads || 1;\n    if(!hamsters.wheel.env.legacy) {\n      input.operator = String(input.operator);\n      if(!hamsters.wheel.env.worker) {\n        input.operator = input.operator.substring(input.operator.indexOf(\"{\")+1, input.operator.length-1);\n      }\n    }\n    let params = {\n      run: input.operator,\n      init: input.startIndex || 0,\n      array: input.array,\n      incrementBy: input.incrementBy || 1,\n      dataType: input.dataType || null,\n      worker: hamsters.wheel.env.worker\n    };\n    if(threads === 1) {\n      params.limit = input.limit || input.array.length;\n    } else {\n      params.limit = 'compute';\n    }\n    hamsters.run(params, function() {\n      if(typeof self.params.run === 'string') {\n        if(!self.params.worker) {\n          self.operator = new Function(self.params.run);\n        } else {\n          self.operator = eval(\"(\" + self.params.run + \")\");\n        }\n      } else {\n        self.operator = self.params.run;\n      }\n      if(self.params.limit === 'compute') {\n        self.params.limit = self.params.array.length;\n      }\n      let i = 0;\n      for (i = self.params.init; i < self.params.limit; i += self.params.incrementBy) {\n        rtn.data.push(self.operator(self.params.array[i]));\n      }\n    }, function(output) {\n      callback(output);\n    }, threads, true, input.dataType);\n  };\n\n  /**\n   * @description: Parses a json string in a background thread\n   * @constructor\n   * @method parseJson\n   * @param {string} string - json string object\n   * @param {function} callback - callback when output ready\n   * @return \n   */\n  hamsters.tools.parseJson = function(string, callback) {\n    hamsters.run({input: string}, function() {\n      rtn.data.push(JSON.parse(params.input));\n    }, function(output) {\n      callback(output[0]);\n    }, 1, true);\n  };\n\n  /**\n   * @description: Stringifies a json object in a background thread\n   * @constructor\n   * @method parseJson\n   * @param {object} json - json object\n   * @param {function} callback - callback when output ready\n   * @return \n   */\n  hamsters.tools.stringifyJson = function(json, callback) {\n    hamsters.run({input: json}, function() {\n      rtn.data.push(JSON.stringify(params.input));\n    }, function(output) {\n      callback(output[0]);\n    }, 1, true);\n  };\n\n  /**\n   * @description: Generates a worker which generates an array of random numbers for testing\n   * @constructor\n   * @function randomArray\n   * @method randomArray\n   * @param {integer} count - array size\n   * @param {function} callback - callback when array ready\n   * @return \n   */\n  hamsters.tools.randomArray = function(count, callback) {\n    if(!count || !callback) {\n      hamsters.wheel.errors.push({\n        msg: 'Unable to generate random array, missing required params'\n      });\n      return;\n    }\n    let params = {\n      count: count\n    };\n    hamsters.run(params, function() {\n      let total = params.count;\n      let i = 0;\n      while(i < total) {\n        rtn.data[rtn.data.length] = Math.round(Math.random() * (100 - 1) + 1);\n        i += 1;\n      }\n    }, function(output) {\n        callback(output);\n    }, 1, false, null, false);\n  };\n\n    /**\n * Description\n * @method compareArrays\n * @param {array} array1\n * @param {array} array2\n * @return CallExpression\n */\n  hamsters.wheel.compareArrays = function (array1, array2) {\n      if(!array1 && !array2) {\n        return true;\n      }\n      if (array1.length !== array2.length) {\n          return false;\n      }\n      return array1.every(function (el, i) {\n          return (el === array2[i]);\n      });\n  };\n\n  /**\n   * Description\n   * @method checkCache\n   * @param {string} fn\n   * @param {array} input\n   * @param {string} dataType\n   * @return \n  */\n  hamsters.wheel.checkCache = function(fn, input, dataType) {\n    let item;\n    for (let i = 0, len = sessionStorage.length; i < len; i++) {\n      item = eval('('+sessionStorage[i]+')');\n      let equals = hamsters.wheel.compareArrays(item.input, input);\n      if(item && item.func === fn && equals  && !item.dataType && !dataType) {\n        return item.output;\n      } else if(item && item.func === fn && equals && item.dataType === dataType) {\n        return hamsters.wheel.processDataType(item.dataType, item.output);\n      }\n    }\n  };\n\n  hamsters.wheel.memoize = function(fn, inputArray, output, dataType) {\n    if(hamsters.wheel.checkCache(fn, input, dataType)) {\n      return;\n    }\n    try {\n      sessionStorage.setItem(sessionStorage.length, JSON.stringify({'func': fn, 'input': inputArray, 'output': output, 'dataType': dataType}));\n    } catch(eve) {\n      if(eve.name === 'QuotaExceededError') {\n        sessionStorage.clear();\n        try {\n          sessionStorage.setItem(sessionStorage.length, JSON.stringify({'func': fn, 'input': inputArray, 'output': output, 'dataType': dataType}));\n        } catch(e) { //Do nothing, can't cache this result..too large\n          return;\n        }\n      }\n    }\n  };\n\n  /**\n    * @description: Setups library objects for web worker use with library boilerplate\n    * @constructor\n    * @function spawnHamsters\n    * @method spawnHamsters\n    * @return \n  */\n  let spawnHamsters = function() {\n    if(hamsters.wheel.env.browser) {\n      hamsters.wheel.uri = self.URL.createObjectURL(createBlob('(' + String(giveHamsterWork(false)) + '());'));\n    }\n    if(hamsters.persistence) {\n      let i = hamsters.maxThreads;\n      for (i; i > 0; i--) {\n        if(hamsters.wheel.env.node || hamsters.wheel.env.ie10) {\n          hamsters.wheel.hamsters.push(new Worker('common/wheel.min.js'));\n        } else if(hamsters.wheel.env.worker) {\n          hamsters.wheel.hamsters.push(new SharedWorker(hamsters.wheel.uri, 'SharedHamsterWheel'));\n        } else {\n          hamsters.wheel.hamsters.push(new Worker(hamsters.wheel.uri));\n        }\n      }\n    }\n  };\n  \n  /**\n    * @description: Creates boiler plate logic for worker thread\n    * @constructor\n    * @method giveHamsterWork\n    * @return work\n  */\n  let giveHamsterWork = function(worker) {\n    /**\n     * Description\n     * @method processDataType\n     * @param {string} dataType\n     * @param {array} buffer\n     * @return arr\n     */\n    /**\n     * Description\n     * @method onmessage\n     * @param {object} e\n     * @return \n     */\n    if(worker) {\n      return function() {\n        self.processDataType = function(dataType, buffer) {\n          let types = {\n            'uint32': Uint32Array,\n            'uint16': Uint16Array,\n            'uint8': Uint8Array,\n            'uint8clamped': Uint8ClampedArray,\n            'int32': Int32Array,\n            'int16': Int16Array,\n            'int8': Int8Array,\n            'float32': Float32Array,\n            'float64': Float64Array\n          };\n          if(!types[dataType]) {\n            return dataType;\n          }\n          return new types[dataType](buffer);\n        };\n        self.addEventListener(\"connect\", function(e) {\n            let port = e.ports[0];\n            port.start();\n            port.addEventListener(\"message\", function(e) {\n                self.rtn = {\n                    success: true,\n                    data: []\n                };\n                self.params = e.data;\n                self.fn = eval(\"(\" + params.fn + \")\");\n                if (fn) {\n                  self.fn();\n                }\n                if(self.params.dataType && self.params.dataType != \"na\") {\n                  self.rtn.data = self.processDataType(self.params.dataType, self.rtn.data);\n                  self.rtn.dataType = self.params.dataType;\n                }\n                port.postMessage({\n                  results: self.rtn\n                });\n            }, false);\n        }, false);\n      };\n    }\n    /**\n     * Description\n     * @method onmessage\n     * @param {object} e\n     * @return \n     */\n    return function() {\n      self.processDataType = function(dataType, buffer) {\n        let types = {\n          'uint32': Uint32Array,\n          'uint16': Uint16Array,\n          'uint8': Uint8Array,\n          'uint8clamped': Uint8ClampedArray,\n          'int32': Int32Array,\n          'int16': Int16Array,\n          'int8': Int8Array,\n          'float32': Float32Array,\n          'float64': Float64Array\n        };\n        if(!types[dataType]) {\n          return dataType;\n        }\n        return new types[dataType](buffer);\n      };\n      self.onmessage = function(e) {\n        self.rtn = {\n          success: true, \n          data: []\n        };\n        self.params = e.data;\n        self.fn = new Function(self.params.fn);\n        if(self.fn) {\n          self.fn();\n        }\n        if(self.params.dataType && self.params.dataType != \"na\") {\n          self.rtn.data = self.processDataType(self.params.dataType, self.rtn.data);\n          self.rtn.dataType = self.params.dataType;\n          self.postMessage({\n            results: self.rtn\n          }, [rtn.data.buffer]);\n        } else {\n          self.postMessage({\n            results: self.rtn\n          });\n        }\n      };\n    };\n  };\n\n  /**\n    * @description: Sorts an array of objects based on incoming property param\n    * @constructor\n    * @method sort\n    * @param {string} property - property to sort by\n    * @return FunctionExpression\n  */\n  hamsters.wheel.sort = function(arr, order) {\n    if(order === 'desc') {\n      return Array.prototype.sort.call(arr, function(a, b) {\n        return b - a; \n     });\n    } \n    if(order === 'asc') {\n      return Array.prototype.sort.call(arr, function(a, b) {\n        return a - b; \n     });\n    }\n    if(order === 'ascAlpha') {\n      return arr.sort();\n    }\n    if(order === 'descAlpha') {\n      return arr.reverse();\n    }\n  };\n\n  /**\n    * @description: Takes an incoming sequential function and automatically splits the work across as many defined threads for paralell execution\n    * @constructor\n    * @method run\n    * @param {object} params - Incoming params object for task\n    * @param {function} fn - Sequential function to execute\n    * @param {function} callback - Task callback when all threads complete\n    * @param {integer} workers - Total number of threads to use\n    * @param {boolean} aggregate - Aggregate individual thread outputs into final array (yes/no)\n    * @param {string} dataType - Optional typedArray data type for transferrable object support\n    * @param {boolean} memoize - Memoize final result (yes/no)\n    * @param {string} order - Optional sort direction param \n    * @return \n  */\n  hamsters.run = function(params, fn, callback, workers, aggregate, dataType, memoize, order) {\n    if(!params || !fn) {\n      return 'Error processing for loop, missing params or function';\n    }\n    workers = workers || 1;\n    let task = hamsters.wheel.newTask(hamsters.wheel.tasks.length, workers, order, dataType, fn, callback);\n    if(dataType) {\n      dataType = dataType.toLowerCase();\n    }\n    if(hamsters.cache && memoize) {\n      let result = hamsters.wheel.checkCache(fn, task.input, dataType);\n      if(result && callback) {\n        setTimeout(function() {\n          hamsters.wheel.tasks[taskid] = null; //Clean up our task, not needed any longer\n          callback(result);\n        }, 4);\n        return;\n      }\n    } else {\n      hamsters.wheel.work(task, params, fn, callback, aggregate, dataType, memoize, order);\n    }\n  };\n\n  hamsters.wheel.work = function(task, params, fn, callback, aggregate, dataType, memoize, order) {\n    let workArray = params.array || null;\n    if(params.array && task.threads !== 1) {\n      workArray = hamsters.tools.splitArray(params.array, task.threads); //Divide our array into equal array sizes\n    }\n    if(!hamsters.wheel.env.legacy) {\n      params.fn = String(fn);\n      if(!hamsters.wheel.env.worker) { //Truncate function string so we can use new Function call instead of eval\n        params.fn = params.fn.substring(params.fn.indexOf(\"{\")+1, params.fn.length-1);\n      }\n    } else {\n      params.fn = fn;\n    }\n    let food = {};\n    let key;\n    for(key in params) {\n      if(params.hasOwnProperty(key) && key !== 'array') {\n        food[key] = params[key];\n      }\n    }\n    food.dataType = dataType;\n    let i = 0;\n    while(i < task.threads) {\n      if(workArray && task.threads !== 1) {\n        hamsters.wheel.newWheel(workArray[i], food, aggregate, callback, task, task.count, null, memoize);\n      } else {\n        hamsters.wheel.newWheel(workArray, food, aggregate, callback, task, task.count, null, memoize);\n      }\n      i += 1;\n    }\n  };\n\n  /**\n    * @description: Registers new task for runtime\n    * @constructor\n    * @method newTask\n    * @param {integer} taskid - ID to use for task generation\n    * @param {integer} workers - Number of threads to spawn for this task\n    * @param {string}  order - Optional sorting order param\n    * @param {string}  dataType - Optional dataType param\n    * @param {function} fn - Function to run for this task\n    * @param {function} cb - Task callback for output result\n    * @return \n  */\n  hamsters.wheel.newTask = function(taskid, workers, order, dataType, fn, cb) {\n    hamsters.wheel.tasks.push({\n      id: taskid,\n      workers: [],\n      count: 0,\n      threads: workers, \n      input: [],\n      dataType: dataType || null,\n      fn: fn,\n      output: [], \n      order: order || null,\n      callback: cb\n    });\n    return hamsters.wheel.tasks[taskid];\n  };\n\n  /**\n    * @description: Tracks thread input for memoization\n    * @constructor\n    * @method trackInput\n    * @param {array} inputArray - Incoming array param\n    * @param {string} threadid - Current worker threadid\n    * @param {object} task - Current task to track\n    * @param {object} hamsterfood - Incoming task params\n    * @return \n  */\n  hamsters.wheel.trackInput = function(inputArray, threadid, task, hamsterfood) {\n    task.input.push({ \n      input: inputArray,\n      workerid: threadid, \n      taskid: task.id, \n      params: hamsterfood, \n      start: new Date().getTime()\n    });\n  };\n\n  hamsters.wheel.trackThread = function(task, running, id) {\n    task.workers.push(id); //Keep track of threads scoped to current task\n    running.push(id); //Keep track of all currently running threads\n  };\n\n  /**\n    * @description: Adds thread to thread pool for execution when a free thread is available\n    * @constructor\n    * @method poolThread\n    * @param {array} inputArray - Input array\n    * @param {object} hamsterfood - Input params object\n    * @param {string} threadid - task scoped worker thread id\n    * @param {function} callback - Callback function to return response\n    * @param {function} task - Work to be executed inside thread\n    * @param {boolean} agg - Aggregate final result (yes/no)\n    * @param {boolean} memoize - Memoize final result (yes/no)\n    * @return \n  */\n  hamsters.wheel.poolThread = function(inputArray, hamsterfood, threadid, cb, task, agg, memoize) {\n    hamsters.wheel.queue.pending.push({\n      memoize: memoize,\n      input: inputArray,\n      params: hamsterfood,\n      workerid: threadid, \n      callback: cb, \n      task: task,\n      aggregate: agg\n    });\n  };\n\n  /**\n    * @description: Simulates threading for execution on devices that don't support workers\n    * @constructor\n    * @method legacyProcessor\n    * @param {object} food - Input params object\n    * @param {array} inputArray - Input array\n    * @param {function} callback - Callback function to return response\n    * @return \n  */\n  hamsters.wheel.legacyProcessor = function(params, inputArray, callback) {\n    setTimeout(function() {\n      self.rtn = {\n        success: true, \n        data: []\n      };\n      self.params = params;\n      self.params.array = inputArray;\n      if(self.params.fn) {\n        self.params.fn();\n        if(self.params.dataType) {\n          self.rtn.data = hamsters.wheel.processDataType(self.params.dataType, self.rtn.data);\n          self.rtn.dataType = self.params.dataType;\n        }\n        callback(self.rtn);\n      } else {\n        self.rtn.success = false;\n        self.rtn.error = 'Missing function';\n        callback(self.rtn);\n      }\n    }, 4); //4ms delay (HTML5 spec minimum), simulate threading\n  };\n\n  /**\n    * @description: Creates dataBlob for worker generation\n    * @constructor\n    * @method createBlob\n    * @param {string} textContent - Web worker boiler plate\n    * @return blob\n  */\n  let createBlob = function(textContent) {\n    if(!self.Blob) {\n      self.BlobBuilder = self.BlobBuilder || self.WebKitBlobBuilder || self.MozBlobBuilder || self.MSBlobBuilder;\n      let blob = new BlobBuilder();\n      blob.append([textContent], {\n        type: 'application/javascript'\n      });\n      return blob.getBlob();\n    } \n    return new Blob([textContent], {\n      type: 'application/javascript'\n    });\n  };\n\n  /**\n    * @description: Aggregates individual hamster outputs into a single array\n    * @constructor\n    * @method aggregate\n    * @param {array} input - incoming array of subarrays\n    * @param {string} dataType\n    * @return output\n  */\n  hamsters.tools.aggregate = function(input, dataType) {\n    if(!dataType || !hamsters.wheel.env.transferrable) {\n      return input.reduce(function(a, b) {\n        return a.concat(b);\n      });\n    }\n    let i = 0;\n    let len = input.length;\n    let bufferLength = 0;\n    for (i; i < len; i += 1) {\n      bufferLength += input[i].length;\n    }\n    let output = hamsters.wheel.processDataType(dataType, bufferLength);\n    let offset = 0;\n    for (i = 0; i < len; i += 1) {\n      output.set(input[i], offset);\n      offset += input[i].length;\n    }\n    return output;\n  };\n\n  /**\n    * @description: Get our nested output values from each task, return array of subarrays\n    * @constructor\n    * @method getOutput\n    * @param {array} output - incoming task output\n    * @param {boolean} aggregate\n    * @param {string} dataType\n    * @return rtn\n  */\n  hamsters.wheel.getOutput = function(output, aggregate, dataType) {\n    if(aggregate && output.length <= 20) {\n      return hamsters.tools.aggregate(output, dataType);\n    }\n    return output;\n  };\n\n  /**\n    * @description: Process next item in queue\n    * @constructor\n    * @method processQueue\n    * @param {object} hamster - Most recently finished web worker, for reuse\n    * @param {blob} dataBlob\n    * @return \n  */\n  hamsters.wheel.processQueue = function(hamster, item) {\n    if(!item) {\n      return;\n    }\n    hamsters.wheel.newWheel(item.input, item.params, item.aggregate, item.callback, item.task, item.workerid, hamster, item.memoize); //Assign most recently finished thread to queue item\n  };\n\n  /**\n    * @description: Cleans up last running thread\n    * @constructor\n    * @method clean\n    * @param {object} task - Task associated with id\n    * @param {string} id - Most recently finished thread id\n    * @return \n  */\n  hamsters.wheel.clean = function(task, id) {\n    hamsters.wheel.queue.running.splice(hamsters.wheel.queue.running.indexOf(id), 1); //Remove thread from running pool\n    task.workers.splice(task.workers.indexOf(id), 1); //Remove thread from task running pool\n  };\n\n  /**\n    * @description: Handle response from worker thread, setup error handling\n    * @constructor\n    * @method trainHamster\n    * @param {integer} id - global wheel threadid\n    * @param {boolean} aggregate - boolean aggregate individual thread outputs into final array  \n    * @param {function} callback - task callback when all hamsters complete\n    * @param {integer} taskid - global wheel task id\n    * @param {integer} workerid - worker wheel threadid\n    * @param {object} hamster - web worker\n    * @param {blob} dataBlob\n    * @return \n  */\n  hamsters.wheel.trainHamster = function(id, aggregate, callback, task, hamster, memoize) {\n    /**\n      * @description: Runs when a hamster (thread) finishes it's work\n      * @constructor\n      * @method onmessage\n      * @param {object} e - Web Worker event object\n      * @return \n    */\n    let onmessage = function(e, results) {\n      hamsters.wheel.clean(task, id);\n      results = e.data.results;\n      task.output[id] = results.data;\n      if(hamsters.debug === 'verbose') {\n        console.info('Hamster #' + id + ' finished ' + '@ ' + e.timeStamp);\n      }\n      if(task.workers.length === 0 && task.count === task.threads) {\n        if(task.order) {\n          callback(hamsters.wheel.sort(hamsters.wheel.getOutput(task.output, aggregate, results.dataType), task.order));\n        } else {\n          callback(hamsters.wheel.getOutput(task.output, aggregate, results.dataType));\n        }\n        if(hamsters.debug) {\n          console.info('Execution Complete! Elapsed: ' + ((e.timeStamp - task.input[0].start)/1000) + 's');\n        }\n        hamsters.wheel.tasks[task.id] = null; //Clean up our task, not needed any longer\n        if(hamsters.cache && memoize) {\n          prepareToMemoize(task, aggregate, results);\n        }\n      }\n      if(hamsters.wheel.queue.pending.length !== 0) {\n        hamsters.wheel.processQueue(hamster, hamsters.wheel.queue.pending.shift());\n      } else if(!hamsters.persistence && !hamsters.wheel.env.worker) {\n        hamster.terminate(); //Kill the thread only if no items waiting to run (20-22% performance improvement observed during testing, repurposing threads vs recreating them)\n      }\n    };\n\n    let prepareToMemoize = function(task, aggregate, results) {\n      let output = hamsters.wheel.getOutput(task.output, aggregate, results.dataType);\n      if(output && !output.slice) {\n        hamsters.wheel.memoize(task.fn, task.input[0].input, hamsters.wheel.normalizeArray(output), results.dataType);\n      } else {\n        hamsters.wheel.memoize(task.fn, task.input[0].input, hamsters.wheel.getOutput(task.output, aggregate, results.dataType), results.dataType);\n      }\n    };\n\n    /**\n      * @description: Setup error handling\n      * @constructor\n      * @method errorHandler\n      * @param {object} e - Web Worker event object\n      * @return \n    */\n    let onerror = function(e) {\n      if(!hamsters.wheel.env.worker) {\n        hamster.terminate(); //Kill the thread\n      }\n      hamsters.wheel.errors.push({\n        msg: 'Error Hamster #' + id + ': Line ' + e.lineno + ' in ' + e.filename + ': ' + e.message\n      });\n      console.error('Error Hamster #' + id + ': Line ' + e.lineno + ' in ' + e.filename + ': ' + e.message);\n    };\n\n    if(hamsters.wheel.env.worker) {\n      hamster.port.onmessage = onmessage;\n      hamster.port.onerror = onerror;\n    } else {\n      hamster.onmessage = onmessage;\n      hamster.onerror = onerror;\n    }   \n  };\n\n  /**\n    * @description: Normalizes typed array into normal array\n    * @constructor\n    * @method normalizeArray\n    * @param {object} input - typedArray input\n    * @return arr\n  */\n  hamsters.wheel.normalizeArray = function(input) {\n    let arr = [];\n    let n = 0;\n    let len = input.length;\n    for (n; n < len; n += 1) {\n      arr.push(input[n]);\n    }\n    return arr;\n  };\n\n  hamsters.wheel.processData = function(dataType, buffer) {\n    let types = {\n      'uint32': Uint32Array,\n      'uint16': Uint16Array,\n      'uint8': Uint8Array,\n      'uint8clamped': Uint8ClampedArray,\n      'int32': Int32Array,\n      'int16': Int16Array,\n      'int8': Int8Array,\n      'float32': Float32Array,\n      'float64': Float64Array\n    };\n    if(!types[dataType]) {\n      return dataType;\n    }\n    return new types[dataType](buffer);\n  };\n\n  /**\n    * @description: Converts array buffer or normal array into a typed array\n    * @constructor\n    * @method processDataType\n    * @param {string} dataType - dataType config param\n    * @param {object} buffer - buffer object or normal array\n    * @return arr\n  */\n  hamsters.wheel.processDataType = function(dataType, buffer) {\n    if(hamsters.wheel.env.transferrable) {\n      return hamsters.wheel.processData(dataType, buffer);\n    }\n    return buffer; //Return normal array if transferrable objects not supported\n  };\n\n  /**\n    * @description: Sends message to worker thread to invoke execution\n    * @constructor\n    * @method feedHamster\n    * @param {object} hamster - web worker\n    * @param {object} food - params object for worker\n    * @param {array} inputArray\n    * @return \n  */\n  hamsters.wheel.feedHamster = function(hamster, food, inputArray) {\n    if(hamsters.wheel.env.worker || hamsters.wheel.env.ie10) {\n      food.array = inputArray;\n      if(hamsters.wheel.env.ie10) {\n        food.ie = true;\n        hamster.postMessage(food);\n      } else {\n        hamster.port.postMessage(food);\n      }\n    } else {\n      let key, buffers = [];\n      if(inputArray) {\n        if(food.dataType) { //Transferable object transfer if using typed array\n          food.array = hamsters.wheel.processDataType(food.dataType, inputArray);\n        } else {\n          food.array = inputArray;\n        }\n      }\n      for(key in food) {\n        if(food.hasOwnProperty(key) && food[key] && food[key].buffer) {\n          buffers.push(food[key].buffer);\n        }\n      }\n      hamster.postMessage(food,  buffers);\n    }\n  };\n\n  /**\n    * @description: Creates new worker thread with body of work to be completed\n    * @constructor\n    * @method newWheel\n    * @param {array} inputArray\n    * @param {object} hamsterfood - incoming params object for worker\n    * @param {boolean} aggregate - boolean aggregate individual thread outputs into final array  \n    * @param {function} callback - task callback when all hamsters complete\n    * @param {integer} taskid - global wheel task id\n    * @param {integer} threadid - global wheel threadid\n    * @param {object} hamster - web worker\n    * @param {blob} dataBlob\n    * @return \n   */\n  setupEnv(function(legacy) {\n    if(legacy) {\n      hamsters.wheel.newWheel = function(inputArray, hamsterfood, aggregate, callback, task, threadid, hamster, memoize) {\n        hamsters.wheel.trackThread(task, hamsters.wheel.queue.running, threadid);\n        if(memoize || hamsters.debug) {\n          hamsters.wheel.trackInput(inputArray, threadid, task, hamsterfood);\n        }\n        hamsters.wheel.legacyProcessor(hamsterfood, inputArray, function(output) {\n          hamsters.wheel.clean(task, threadid);\n          task.output[threadid] = output.data;\n          if(task.workers.length === 0 && task.count === task.threads) { //Task complete get output and return\n            if(hamsters.debug) {\n              console.info('Execution Complete! Elapsed: ' + ((new Date().getTime() - task.input[0].start)/1000) + 's');\n            }\n            callback(hamsters.wheel.getOutput(task.output, aggregate, output.dataType));\n            hamsters.wheel.tasks[task.id] = null; //Clean up our task, not needed any longer\n            if(hamsters.cache && memoize !== false) {\n              if(output.data.length > 0 && !output.dataType) {\n                hamsters.wheel.memoize(task.fn, task.input, output.data, 'na');\n              } else if(output.data.length > 0 && output.dataType) {\n                hamsters.wheel.memoize(task.fn, task.input, hamsters.wheel.normalizeArray(output.data), output.dataType);\n              }\n            }\n          }\n        });\n        task.count += 1; //Thread finished\n        return;\n      };\n    } else {\n      hamsters.wheel.newWheel = function(inputArray, hamsterfood, aggregate, callback, task, threadid, hamster, memoize) {\n        if(hamsters.maxThreads === hamsters.wheel.queue.running.length) {\n          hamsters.wheel.poolThread(inputArray, hamsterfood, threadid, callback, task, aggregate, memoize);\n          return;\n        }\n        if(memoize || hamsters.debug) {\n          hamsters.wheel.trackInput(inputArray, threadid, task, hamsterfood);\n        }\n        if(!hamster) {\n          if(hamsters.persistence) {\n            hamster = hamsters.wheel.hamsters[hamsters.wheel.queue.running.length];\n          } else if(hamsters.wheel.env.node || hamsters.wheel.env.ie10) {\n            hamster = new Worker('common/wheel.min.js');\n          } else if(hamsters.wheel.env.worker) {\n            hamster = new SharedWorker(hamsters.wheel.uri, 'SharedHamsterWheel');\n          } else {\n            hamster = new Worker(hamsters.wheel.uri);\n          }\n        }\n        hamsters.wheel.trainHamster(threadid, aggregate, callback, task, hamster, memoize);\n        hamsters.wheel.trackThread(task, hamsters.wheel.queue.running, threadid);\n        hamsters.wheel.feedHamster(hamster, hamsterfood, inputArray);\n        task.count += 1; //Increment count, thread is running\n        if(hamsters.debug === 'verbose') {\n          console.info('Spawning Hamster #' + threadid + ' @ ' + new Date().getTime());\n        }\n      };\n      spawnHamsters();\n    }\n  });\n})();\n\n\n\n// WEBPACK FOOTER //\n// ./~/Hamsters.js/src/es6/hamsters.js","﻿(function () {\n\tvar isCommonJS = typeof module !== 'undefined' && module.exports;\n\tvar isNode = !(typeof window !== 'undefined' && this === window);\n\tvar setImmediate = setImmediate || function (cb) {\n\t\tsetTimeout(cb, 0);\n\t};\n\tvar Worker = isNode ? require(__dirname + '/Worker.js') : self.Worker;\n\tvar URL = typeof self !== 'undefined' ? (self.URL ? self.URL : self.webkitURL) : null;\n\tvar _supports = (isNode || self.Worker) ? true : false; // node always supports parallel\n\n\tfunction extend(from, to) {\n\t\tif (!to) to = {};\n\t\tfor (var i in from) {\n\t\t\tif (to[i] === undefined) to[i] = from[i];\n\t\t}\n\t\treturn to;\n\t}\n\n\tfunction Operation() {\n\t\tthis._callbacks = [];\n\t\tthis._errCallbacks = [];\n\n\t\tthis._resolved = 0;\n\t\tthis._result = null;\n\t}\n\n\tOperation.prototype.resolve = function (err, res) {\n\t\tif (!err) {\n\t\t\tthis._resolved = 1;\n\t\t\tthis._result = res;\n\n\t\t\tfor (var i = 0; i < this._callbacks.length; ++i) {\n\t\t\t\tthis._callbacks[i](res);\n\t\t\t}\n\t\t} else {\n\t\t\tthis._resolved = 2;\n\t\t\tthis._result = err;\n\n\t\t\tfor (var iE = 0; iE < this._errCallbacks.length; ++iE) {\n\t\t\t\tthis._errCallbacks[iE](err);\n\t\t\t}\n\t\t}\n\n\t\tthis._callbacks = [];\n\t\tthis._errCallbacks = [];\n\t};\n\n\tOperation.prototype.then = function (cb, errCb) {\n\t\tif (this._resolved === 1) { // result\n\t\t\tif (cb) {\n\t\t\t\tcb(this._result);\n\t\t\t}\n\n\t\t\treturn;\n\t\t} else if (this._resolved === 2) { // error\n\t\t\tif (errCb) {\n\t\t\t\terrCb(this._result);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tif (cb) {\n\t\t\tthis._callbacks[this._callbacks.length] = cb;\n\t\t}\n\n\t\tif (errCb) {\n\t\t\tthis._errCallbacks[this._errCallbacks.length] = errCb;\n\t\t}\n\t\treturn this;\n\t};\n\n\tvar defaults = {\n\t\tevalPath: isNode ? __dirname + '/eval.js' : null,\n\t\tmaxWorkers: isNode ? require('os').cpus().length : (navigator.hardwareConcurrency || 4),\n\t\tsynchronous: true,\n\t\tenv: {},\n\t\tenvNamespace: 'env'\n\t};\n\n\tfunction Parallel(data, options) {\n\t\tthis.data = data;\n\t\tthis.options = extend(defaults, options);\n\t\tthis.operation = new Operation();\n\t\tthis.operation.resolve(null, this.data);\n\t\tthis.requiredScripts = [];\n\t\tthis.requiredFunctions = [];\n\t}\n\n\t// static method\n\tParallel.isSupported = function () { return _supports; }\n\n\tParallel.prototype.getWorkerSource = function (cb, env) {\n\t\tvar that = this;\n\t\tvar preStr = '';\n\t\tvar i = 0;\n\t\tif (!isNode && this.requiredScripts.length !== 0) {\n\t\t\tpreStr += 'importScripts(\"' + this.requiredScripts.join('\",\"') + '\");\\r\\n';\n\t\t}\n\n\t\tfor (i = 0; i < this.requiredFunctions.length; ++i) {\n\t\t\tif (this.requiredFunctions[i].name) {\n\t\t\t\tpreStr += 'var ' + this.requiredFunctions[i].name + ' = ' + this.requiredFunctions[i].fn.toString() + ';';\n\t\t\t} else {\n\t\t\t\tpreStr += this.requiredFunctions[i].fn.toString();\n\t\t\t}\n\t\t}\n\n\t\tenv = JSON.stringify(env || {});\n\n\t\tvar ns = this.options.envNamespace;\n\n\t\tif (isNode) {\n\t\t\treturn preStr + 'process.on(\"message\", function(e) {global.' + ns + ' = ' + env + ';process.send(JSON.stringify((' + cb.toString() + ')(JSON.parse(e).data)))})';\n\t\t} else {\n\t\t\treturn preStr + 'self.onmessage = function(e) {var global = {}; global.' + ns + ' = ' + env + ';self.postMessage((' + cb.toString() + ')(e.data))}';\n\t\t}\n\t};\n\n\tParallel.prototype.require = function () {\n\t\tvar args = Array.prototype.slice.call(arguments, 0),\n\t\t\tfunc;\n\n\t\tfor (var i = 0; i < args.length; i++) {\n\t\t\tfunc = args[i];\n\n\t\t\tif (typeof func === 'string') {\n\t\t\t\tthis.requiredScripts.push(func);\n\t\t\t} else if (typeof func === 'function') {\n\t\t\t\tthis.requiredFunctions.push({ fn: func });\n\t\t\t} else if (typeof func === 'object') {\n\t\t\t\tthis.requiredFunctions.push(func);\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t};\n\n\tParallel.prototype._spawnWorker = function (cb, env) {\n\t\tvar wrk;\n\t\tvar src = this.getWorkerSource(cb, env);\n\t\tif (isNode) {\n\t\t\twrk = new Worker(this.options.evalPath);\n\t\t\twrk.postMessage(src);\n\t\t} else {\n\t\t\tif (Worker === undefined) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (this.requiredScripts.length !== 0) {\n\t\t\t\t\tif (this.options.evalPath !== null) {\n\t\t\t\t\t\twrk = new Worker(this.options.evalPath);\n\t\t\t\t\t\twrk.postMessage(src);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new Error('Can\\'t use required scripts without eval.js!');\n\t\t\t\t\t}\n\t\t\t\t} else if (!URL) {\n\t\t\t\t\tthrow new Error('Can\\'t create a blob URL in this browser!');\n\t\t\t\t} else {\n\t\t\t\t\tvar blob = new Blob([src], { type: 'text/javascript' });\n\t\t\t\t\tvar url = URL.createObjectURL(blob);\n\n\t\t\t\t\twrk = new Worker(url);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tif (this.options.evalPath !== null) { // blob/url unsupported, cross-origin error\n\t\t\t\t\twrk = new Worker(this.options.evalPath);\n\t\t\t\t\twrk.postMessage(src);\n\t\t\t\t} else {\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn wrk;\n\t};\n\n\tParallel.prototype.spawn = function (cb, env) {\n\t\tvar that = this;\n\t\tvar newOp = new Operation();\n\n\t\tenv = extend(this.options.env, env || {});\n\n\t\tthis.operation.then(function () {\n\t\t\tvar wrk = that._spawnWorker(cb, env);\n\t\t\tif (wrk !== undefined) {\n\t\t\t\twrk.onmessage = function (msg) {\n\t\t\t\t\twrk.terminate();\n\t\t\t\t\tthat.data = msg.data;\n\t\t\t\t\tnewOp.resolve(null, that.data);\n\t\t\t\t};\n\t\t\t\twrk.onerror = function (e) {\n\t\t\t\t\twrk.terminate();\n\t\t\t\t\tnewOp.resolve(e, null);\n\t\t\t\t};\n\t\t\t\twrk.postMessage(that.data);\n\t\t\t} else if (that.options.synchronous) {\n\t\t\t\tsetImmediate(function () {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tthat.data = cb(that.data);\n\t\t\t\t\t\tnewOp.resolve(null, that.data);\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tnewOp.resolve(e, null);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tthrow new Error('Workers do not exist and synchronous operation not allowed!');\n\t\t\t}\n\t\t});\n\t\tthis.operation = newOp;\n\t\treturn this;\n\t};\n\n\tParallel.prototype._spawnMapWorker = function (i, cb, done, env, wrk) {\n\t\tvar that = this;\n\n\t\tif (!wrk) wrk = that._spawnWorker(cb, env);\n\n\t\tif (wrk !== undefined) {\n\t\t\twrk.onmessage = function (msg) {\n\t\t\t\tthat.data[i] = msg.data;\n\t\t\t\tdone(null, wrk);\n\t\t\t};\n\t\t\twrk.onerror = function (e) {\n\t\t\t\twrk.terminate();\n\t\t\t\tdone(e);\n\t\t\t};\n\t\t\twrk.postMessage(that.data[i]);\n\t\t} else if (that.options.synchronous) {\n\t\t\tsetImmediate(function () {\n\t\t\t\tthat.data[i] = cb(that.data[i]);\n\t\t\t\tdone();\n\t\t\t});\n\t\t} else {\n\t\t\tthrow new Error('Workers do not exist and synchronous operation not allowed!');\n\t\t}\n\t};\n\n\tParallel.prototype.map = function (cb, env) {\n\t\tenv = extend(this.options.env, env || {});\n\n\t\tif (!this.data.length) {\n\t\t\treturn this.spawn(cb, env);\n\t\t}\n\n\t\tvar that = this;\n\t\tvar startedOps = 0;\n\t\tvar doneOps = 0;\n\t\tfunction done(err, wrk) {\n\t\t\tif (err) {\n\t\t\t\tnewOp.resolve(err, null);\n\t\t\t} else if (++doneOps === that.data.length) {\n\t\t\t\tnewOp.resolve(null, that.data);\n\t\t\t\tif (wrk) wrk.terminate();\n\t\t\t} else if (startedOps < that.data.length) {\n\t\t\t\tthat._spawnMapWorker(startedOps++, cb, done, env, wrk);\n\t\t\t} else {\n\t\t\t\tif (wrk) wrk.terminate();\n\t\t\t}\n\t\t}\n\n\t\tvar newOp = new Operation();\n\t\tthis.operation.then(function () {\n\t\t\tfor (; startedOps - doneOps < that.options.maxWorkers && startedOps < that.data.length; ++startedOps) {\n\t\t\t\tthat._spawnMapWorker(startedOps, cb, done, env);\n\t\t\t}\n\t\t}, function (err) {\n\t\t\tnewOp.resolve(err, null);\n\t\t});\n\t\tthis.operation = newOp;\n\t\treturn this;\n\t};\n\n\tParallel.prototype._spawnReduceWorker = function (data, cb, done, env, wrk) {\n\t\tvar that = this;\n\t\tif (!wrk) wrk = that._spawnWorker(cb, env);\n\n\t\tif (wrk !== undefined) {\n\t\t\twrk.onmessage = function (msg) {\n\t\t\t\tthat.data[that.data.length] = msg.data;\n\t\t\t\tdone(null, wrk);\n\t\t\t};\n\t\t\twrk.onerror = function (e) {\n\t\t\t\twrk.terminate();\n\t\t\t\tdone(e, null);\n\t\t\t}\n\t\t\twrk.postMessage(data);\n\t\t} else if (that.options.synchronous) {\n\t\t\tsetImmediate(function () {\n\t\t\t\tthat.data[that.data.length] = cb(data);\n\t\t\t\tdone();\n\t\t\t});\n\t\t} else {\n\t\t\tthrow new Error('Workers do not exist and synchronous operation not allowed!');\n\t\t}\n\t};\n\n\tParallel.prototype.reduce = function (cb, env) {\n\t\tenv = extend(this.options.env, env || {});\n\n\t\tif (!this.data.length) {\n\t\t\tthrow new Error('Can\\'t reduce non-array data');\n\t\t}\n\n\t\tvar runningWorkers = 0;\n\t\tvar that = this;\n\t\tfunction done(err, wrk) {\n\t\t\t--runningWorkers;\n\t\t\tif (err) {\n\t\t\t\tnewOp.resolve(err, null);\n\t\t\t} else if (that.data.length === 1 && runningWorkers === 0) {\n\t\t\t\tthat.data = that.data[0];\n\t\t\t\tnewOp.resolve(null, that.data);\n\t\t\t\tif (wrk) wrk.terminate();\n\t\t\t} else if (that.data.length > 1) {\n\t\t\t\t++runningWorkers;\n\t\t\t\tthat._spawnReduceWorker([that.data[0], that.data[1]], cb, done, env, wrk);\n\t\t\t\tthat.data.splice(0, 2);\n\t\t\t} else {\n\t\t\t\tif (wrk) wrk.terminate();\n\t\t\t}\n\t\t}\n\n\t\tvar newOp = new Operation();\n\t\tthis.operation.then(function () {\n\t\t\tif (that.data.length === 1) {\n\t\t\t\tnewOp.resolve(null, that.data[0]);\n\t\t\t} else {\n\t\t\t\tfor (var i = 0; i < that.options.maxWorkers && i < Math.floor(that.data.length / 2) ; ++i) {\n\t\t\t\t\t++runningWorkers;\n\t\t\t\t\tthat._spawnReduceWorker([that.data[i * 2], that.data[i * 2 + 1]], cb, done, env);\n\t\t\t\t}\n\n\t\t\t\tthat.data.splice(0, i * 2);\n\t\t\t}\n\t\t});\n\t\tthis.operation = newOp;\n\t\treturn this;\n\t};\n\n\tParallel.prototype.then = function (cb, errCb) {\n\t\tvar that = this;\n\t\tvar newOp = new Operation();\n\t\terrCb = typeof errCb === 'function' ? errCb : function(){};\n\n\t\tthis.operation.then(function () {\n\t\t\tvar retData;\n\n\t\t\ttry {\n\t\t\t\tif (cb) {\n\t\t\t\t\tretData = cb(that.data);\n\t\t\t\t\tif (retData !== undefined) {\n\t\t\t\t\t\tthat.data = retData;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tnewOp.resolve(null, that.data);\n\t\t\t} catch (e) {\n\t\t\t\tif (errCb) {\n\t\t\t\t\tretData = errCb(e);\n\t\t\t\t\tif (retData !== undefined) {\n\t\t\t\t\t\tthat.data = retData;\n\t\t\t\t\t}\n\n\t\t\t\t\tnewOp.resolve(null, that.data);\n\t\t\t\t} else {\n\t\t\t\t\tnewOp.resolve(null, e);\n\t\t\t\t}\n\t\t\t}\n\t\t}, function (err) {\n\t\t\tif (errCb) {\n\t\t\t\tvar retData = errCb(err);\n\t\t\t\tif (retData !== undefined) {\n\t\t\t\t\tthat.data = retData;\n\t\t\t\t}\n\n\t\t\t\tnewOp.resolve(null, that.data);\n\t\t\t} else {\n\t\t\t\tnewOp.resolve(null, err);\n\t\t\t}\n\t\t});\n\t\tthis.operation = newOp;\n\t\treturn this;\n\t};\n\n\tif (isCommonJS) {\n\t\tmodule.exports = Parallel;\n\t} else {\n\t\tself.Parallel = Parallel;\n\t}\n})();\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/paralleljs/lib/parallel.js\n// module id = 12\n// module chunks = 0","'use strict';\n\nexports.__esModule = true;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nexports.getConfig = getConfig;\nexports.setConfig = setConfig;\nvar configuration = {\n  basepath: {\n    node: '',\n    web: ''\n  },\n  fallback: {\n    slaveScriptUrl: ''\n  }\n};\n\nfunction configDeepMerge(destObj, srcObj) {\n  var ancestorProps = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n\n  Object.keys(srcObj).forEach(function (propKey) {\n    var srcValue = srcObj[propKey];\n    var ancestorPropsAndThis = ancestorProps.concat([propKey]);\n\n    if ((typeof srcValue === 'undefined' ? 'undefined' : _typeof(srcValue)) === 'object') {\n      if (typeof destObj[propKey] !== 'undefined' && _typeof(destObj[propKey]) !== 'object') {\n        throw new Error('Expected config property not to be an object: ' + ancestorPropsAndThis.join('.'));\n      }\n      configDeepMerge(destObj[propKey], srcValue, ancestorPropsAndThis);\n    } else {\n      if (_typeof(destObj[propKey]) === 'object') {\n        throw new Error('Expected config property to be an object: ' + ancestorPropsAndThis.join('.'));\n      }\n      destObj[propKey] = srcValue;\n    }\n  });\n}\n\nvar config = {\n  get: function get() {\n    return configuration;\n  },\n\n  set: function set(newConfig) {\n    if ((typeof newConfig === 'undefined' ? 'undefined' : _typeof(newConfig)) !== 'object') {\n      throw new Error('Expected config object.');\n    }\n\n    configDeepMerge(configuration, newConfig);\n  }\n};\n\nexports.default = config;\nfunction getConfig() {\n  return config.get();\n}\n\nfunction setConfig() {\n  return config.set.apply(config, arguments);\n}\n//# sourceMappingURL=config.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/threads/lib/config.js\n// module id = 13\n// module chunks = 0","var nextTick = require('process/browser.js').nextTick;\nvar apply = Function.prototype.apply;\nvar slice = Array.prototype.slice;\nvar immediateIds = {};\nvar nextImmediateId = 0;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) { timeout.close(); };\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(window, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// That's not how node.js implements it but the exposed api is the same.\nexports.setImmediate = typeof setImmediate === \"function\" ? setImmediate : function(fn) {\n  var id = nextImmediateId++;\n  var args = arguments.length < 2 ? false : slice.call(arguments, 1);\n\n  immediateIds[id] = true;\n\n  nextTick(function onNextTick() {\n    if (immediateIds[id]) {\n      // fn.call() is faster so we optimize for the common use-case\n      // @see http://jsperf.com/call-apply-segu\n      if (args) {\n        fn.apply(null, args);\n      } else {\n        fn.call(null);\n      }\n      // Prevent ids from leaking\n      exports.clearImmediate(id);\n    }\n  });\n\n  return id;\n};\n\nexports.clearImmediate = typeof clearImmediate === \"function\" ? clearImmediate : function(id) {\n  delete immediateIds[id];\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/timers-browserify/main.js\n// module id = 14\n// module chunks = 0","'use strict';\n\nexports.__esModule = true;\nexports.Pool = exports.defaults = exports.config = undefined;\nexports.spawn = spawn;\n\nrequire('native-promise-only');\n\nvar _config = require('./config');\n\nvar _config2 = _interopRequireDefault(_config);\n\nvar _defaults = require('./defaults');\n\nvar _defaults2 = _interopRequireDefault(_defaults);\n\nvar _pool = require('./pool');\n\nvar _pool2 = _interopRequireDefault(_pool);\n\nvar _worker = require('./worker');\n\nvar _worker2 = _interopRequireDefault(_worker);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.config = _config2.default;\nexports.defaults = _defaults2.default;\nexports.Pool = _pool2.default;\nfunction spawn() {\n  var runnable = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  var importScripts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n  return new _worker2.default(runnable, importScripts);\n}\n\nexports.default = {\n  config: _config2.default,\n  defaults: _defaults2.default,\n  Pool: _pool2.default,\n  spawn: spawn,\n  Worker: _worker2.default\n};\n//# sourceMappingURL=index.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/threads/lib/index.js\n// module id = 15\n// module chunks = 0","export function toFullQualifiedURL(url: string): string {\n    const a = document.createElement('a');\n    a.href = url;\n    return a.href;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/util.ts","module.exports = __webpack_public_path__ + \"ba77cfbd141bce566beff7b32effe324.js\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/file-loader!./lib/simjs-random.js\n// module id = 17\n// module chunks = 0","'use strict';\n\n/*eslint-env node*/\n/*\n * This file is only a stub to make './defaults' resolve the './defaults.node' module.\n * Loading the browser defaults into the browser bundle is done in the gulpfile by\n * configuring a browserify override.\n */\n\nif (typeof process !== 'undefined' && 'pid' in process) {\n  module.exports = require('./defaults.node');\n} else {\n  module.exports = require('./defaults.browser');\n}\n//# sourceMappingURL=defaults.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/threads/lib/defaults.js\n// module id = 18\n// module chunks = 0","module.exports = function(module) {\r\n\tif(!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tif(!module.children) module.children = [];\r\n\t\tObject.defineProperty(module, \"loaded\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tconfigurable: false,\r\n\t\t\tget: function() { return module.l; }\r\n\t\t});\r\n\t\tObject.defineProperty(module, \"id\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tconfigurable: false,\r\n\t\t\tget: function() { return module.i; }\r\n\t\t});\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/module.js\n// module id = 19\n// module chunks = 0","import {hamsters, HamsterClosure} from \"Hamsters.js\";\nimport {Params} from \"Hamsters.js\";\n\nexport interface ICoordinate {\n    readonly x: number;\n    readonly y: number;\n}\n\nfunction knightTours(this: HamsterClosure<{ array: ICoordinate[][], boardSize: number}, number>): void {\n    const moves = [\n        { x: -2, y: -1 }, { x: -2, y: 1}, { x: -1, y: -2 }, { x: -1, y: 2 },\n        { x: 1, y: -2 }, { x: 1, y: 2}, { x: 2, y: -1 }, { x: 2, y: 1 }\n    ];\n    const boardSize = this.params.boardSize;\n    const numberOfFields = boardSize * boardSize;\n    const board: number[] = new Array(boardSize * boardSize);\n    board.fill(0);\n\n    let results: number = 0;\n\n    for (let i = 0; i < this.params.array.length; ++i) {\n        const startPath = this.params.array[i];\n\n        const stack: { coordinate: ICoordinate, n: number }[] = startPath.map((pos, index) => ({ coordinate: pos, n: index + 1 }));\n\n        for (let index = 0; index < startPath.length - 1; ++index) {\n            const fieldIndex = startPath[index].x * boardSize + startPath[index].y;\n            board[fieldIndex] = index + 1;\n        }\n\n        while (stack.length > 0) {\n            const { coordinate, n } = stack[stack.length - 1];\n            const fieldIndex = coordinate.x * boardSize + coordinate.y;\n\n            if (board[fieldIndex] !== 0) {\n                // back tracking\n                board[fieldIndex] = 0;\n                stack.pop(); // remove current value\n                continue;\n            }\n\n            // entry\n            if (n === numberOfFields) {\n                ++results;\n                stack.pop();\n                continue;\n            }\n\n            board[fieldIndex] = n!;\n\n            for (let i = 0; i < moves.length; ++i) {\n                const move = moves[i];\n                const successor = { x: coordinate.x + move.x, y: coordinate.y + move.y };\n                // not outside of board and not yet accessed\n                const accessible = successor.x >= 0 && successor.y >= 0 && successor.x < boardSize &&  successor.y < boardSize && board[successor.x * boardSize + successor.y] === 0;\n\n                if (accessible) {\n                    stack.push({ coordinate: successor, n: n + 1 });\n                }\n            }\n        }\n    }\n    this.rtn.data.push(results);\n}\n\nfunction computeTours(start: ICoordinate, boardSize: number): PromiseLike<number[]> {\n    function successors(coordinate: ICoordinate) {\n        const moves = [\n            {x: -2, y: -1}, {x: -2, y: 1}, {x: -1, y: -2}, {x: -1, y: 2},\n            {x: 1, y: -2}, {x: 1, y: 2}, {x: 2, y: -1}, {x: 2, y: 1}\n        ];\n        const result: ICoordinate[] = [];\n\n        for (let i = 0; i < moves.length; ++i) {\n            const move = moves[i];\n            const successor = {x: coordinate.x + move.x, y: coordinate.y + move.y};\n            const accessible = successor.x >= 0 && successor.y >= 0 && successor.x < boardSize && successor.y < boardSize &&\n                (successor.x !== start.x || successor.y !== start.y) && (successor.x !== coordinate.x && successor.y !== coordinate.y);\n            if (accessible) {\n                result.push(successor);\n            }\n        }\n\n        return result;\n    }\n\n    function computeStartFields() {\n        const result: ICoordinate[][] = [];\n        for (const directSuccessor of successors(start)) {\n            for (const indirectSuccessor of successors(directSuccessor)) {\n                result.push([start, directSuccessor, indirectSuccessor]);\n            }\n        }\n        return result;\n    }\n\n    let resolve: (result: number[]) => void;\n    let reject: (error: any) => void;\n\n    const promise = new Promise((res, rej) => {\n        resolve = res;\n        reject = rej;\n    });\n\n    const startFields = computeStartFields();\n    const params = {\n        array: startFields,\n        boardSize\n    };\n\n    hamsters.run(params, knightTours, (result: number[]) => resolve(result), hamsters.maxThreads, true);\n    return promise;\n}\n\nfunction aggregateTours(results: number[]): PromiseLike<number> {\n    let resolve: (result: number) => void;\n    let reject: (error: any) => void;\n\n    const promise = new Promise((res, rej) => {\n        resolve = res;\n        reject = rej;\n    });\n\n    hamsters.run({ array: results }, function (this: HamsterClosure<Params<number>, number>): void {\n        const result = this.params.array.reduce((memo, value) => memo + value, 0);\n        this.rtn.data.push(result);\n    }, function (results: number[]) {\n        resolve(results[0]);\n    }, 1, true);\n    return promise;\n}\n\nexport function parallelKnightTours(start: ICoordinate, boardSize: number): PromiseLike<number> {\n    return computeTours(start, boardSize).then(aggregateTours);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/hamstersjs/knights-tour.ts","import {hamsters, HamsterClosure} from \"Hamsters.js\";\nimport * as _ from \"lodash\";\n\nexport interface IComplexNumber {\n    i: number;\n    real: number;\n}\n\nexport interface IMandelbrotOptions {\n    imageHeight: number;\n    imageWidth: number;\n    iterations: number;\n    max: IComplexNumber;\n    min: IComplexNumber;\n    scalingFactor: IComplexNumber;\n}\nfunction computeMandelbrotLine (this: HamsterClosure<{ array: number[], options: IMandelbrotOptions }, Uint8ClampedArray>) {\n    const options = this.params.options;\n    // Function inline is up to 30% faster than if the function is not inline\n    // https://jsperf.com/mandelbrot-env3 https://jsperf.com/mandelbrot-env4\n    function calculateZ(c: IComplexNumber): number {\n        const z = { i: c.i, real: c.real };\n        let n = 0;\n\n        for (; n < options.iterations; ++n) {\n            if (z.real ** 2 + z.i ** 2 > 4) {\n                break;\n            }\n\n            // z ** 2 + c\n            const zI = z.i;\n            z.i = 2 * z.real * z.i + c.i;\n            z.real = z.real ** 2 - zI ** 2 + c.real;\n        }\n\n        return n;\n    }\n\n    const array = this.params.array;\n\n    for (let i = 0; i < array.length; ++i) {\n        const y = array[i];\n        const line = new Uint8ClampedArray(options.imageWidth * 4);\n        const cI = options.max.i - y * options.scalingFactor.i;\n\n        for (let x = 0; x < options.imageWidth; ++x) {\n            const c = {\n                i: cI,\n                real: options.min.real + x * options.scalingFactor.real\n            };\n\n            const n = calculateZ(c);\n            const base = x * 4;\n            /* tslint:disable:no-bitwise */\n            line[base] = n & 0xFF;\n            line[base + 1] = n & 0xFF00;\n            line[base + 2] = n & 0xFF0000;\n            line[base + 3] = 255;\n        }\n        this.rtn.data.push(line);\n    }\n}\n\nexport function mandelbrot(options: IMandelbrotOptions): Promise<any> {\n    let resolve: (result: Uint8ClampedArray[]) => void;\n    let reject: (error: any) => void;\n\n    const promise = new Promise((res, rej) => {\n        resolve = res;\n        reject = rej;\n    });\n\n    const range = _.range(options.imageHeight);\n    const params = {\n        array: range,\n        options\n    };\n\n    hamsters.run(params, computeMandelbrotLine, result => resolve(result), hamsters.maxThreads, true);\n    return promise;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/hamstersjs/mandelbrot.ts","import {hamsters, HamsterClosure} from \"Hamsters.js\";\nimport {Dictionary} from \"lodash\";\n\n/* tslint:disable:no-var-requires */\n// declare function require(name: string): any;\n// const Random = require(\"simjs-random\");\n// const random = new Random(10);\n\nexport interface IProject {\n    startYear: number;\n    totalAmount: number;\n}\n\ntype SubBuckets = { [name: string]: { group: string; min: number, max: number } };\n\ninterface IBucket {\n    min: number;\n    max: number;\n\n    subBuckets: SubBuckets;\n}\n\n\ninterface IGroup {\n    /**\n     * The unique name of this group\n     */\n    name: string;\n\n    /**\n     * The description of the group\n     */\n    description: string;\n\n    /**\n     * Should a separator line been drawn for this group?\n     */\n    separator: boolean;\n\n    /**\n     * Whats the percentage of values in this group to the total number of simulated values\n     */\n    percentage: number;\n\n    /**\n     * Whats the minimum value that is still part of this group\n     */\n        from?: number;\n    /**\n     * Whats the maximum value (exclusive) that defines the upper end of this group\n     */\n    to?: number;\n}\n\nexport interface IProjectResult {\n    /**\n     * The minimal simulated value for this project\n     */\n    min: number;\n    /**\n     * The maximal simulated value\n     */\n    max: number;\n\n    /** The median of the values found for this project\n     */\n    median: number;\n\n    /**\n     * Defines where the 2/3 of the simulated values start / end.\n     */\n    twoThird: {\n        min: number;\n        max: number;\n    };\n\n    buckets: IBucket[];\n\n    groups: IGroup[];\n\n    /**\n     * The project\n     */\n    project: IProject;\n}\n\ninterface IMonteCarloEnvironment {\n    investmentAmount: number;\n    liquidity: number;\n    noInterestReferenceLine: number[];\n    numRuns: number;\n    numYears: number;\n    projectsByStartYear: Dictionary<IProject[]>;\n    simulatedValues: number[][];\n}\n\nexport interface IMonteCarloSimulationOptions {\n    numYears?: number;\n    numRuns?: number;\n    projects?: IProject[];\n    investmentAmount?: number;\n    performance?: number;\n    seed?: number;\n    volatility: number;\n    liquidity?: number;\n}\n\ninterface IInitializedMonteCarloSimulationOptions {\n    numYears: number;\n    numRuns: number;\n    projects: IProject[];\n    investmentAmount: number;\n    performance: number;\n    seed?: number;\n    taskIndex?: number;\n    valuesPerWorker?: number;\n    liquidity: number;\n    volatility: number;\n}\n\nfunction initializeOptions(options?: IMonteCarloSimulationOptions): IInitializedMonteCarloSimulationOptions {\n    return Object.assign({}, {\n        investmentAmount: 1000000,\n        liquidity: 10000,\n        numRuns: 10000,\n        numYears: 10,\n        performance: 0,\n        projects: [],\n        seed: undefined,\n        volatility: 0.01\n    }, options);\n}\n\nfunction runSimulation(this: HamsterClosure<{ array: IProject[], options: IInitializedMonteCarloSimulationOptions }, IProjectResult>): void {\n    const projectsToSimulate = this.params.array;\n    function createMonteCarloEnvironment(options: IInitializedMonteCarloSimulationOptions): IMonteCarloEnvironment {\n        /**\n         * Performs the monte carlo simulation for all years and num runs.\n         * @param cashFlows the cash flows\n         * @returns {number[][]} the simulated outcomes grouped by year\n         */\n        function simulateOutcomes(cashFlows: number[], numYears: number): number[][]  {\n            function toAbsoluteIndices(indices: number[]) {\n                let currentPortfolioValue = options.investmentAmount;\n                let previousYearIndex = 100;\n\n                for (let relativeYear = 0; relativeYear < indices.length; ++relativeYear) {\n                    const currentYearIndex = indices[relativeYear];\n                    const cashFlowStartOfYear = relativeYear === 0 ? 0 : cashFlows[relativeYear - 1];\n\n                    // scale current value with performance gain according to index\n                    const performance = currentYearIndex / previousYearIndex;\n                    currentPortfolioValue = (currentPortfolioValue + cashFlowStartOfYear) * performance;\n\n                    indices[relativeYear] = Math.round(currentPortfolioValue);\n                    previousYearIndex = currentYearIndex;\n                }\n\n                return indices;\n            }\n\n            const result: number[][] = new Array(numYears);\n            for (let year = 0; year <= numYears; ++year) {\n                result[year] = new Array(options.numRuns);\n            }\n\n            for (let run = 0; run < options.numRuns; run++) {\n                const indices = [100];\n\n                for (let i = 1; i <= numYears; i++) {\n                    // const randomPerformance = 1 + random.normal(options.performance, options.volatility);\n                    const randomPerformance = 1 + Math.random();\n                    indices.push(indices[i - 1] * randomPerformance);\n                }\n\n                // convert the relative values from above to absolute values.\n                toAbsoluteIndices(indices);\n\n                for (let year = 0; year < indices.length; ++year) {\n                    result[year][run] = indices[year];\n                }\n            }\n\n            return result;\n        }\n\n        function projectsToCashFlows(numYears: number) {\n            const cashFlows: number[] = [];\n            for (let year = 0; year < numYears; ++year) {\n                const projectsByThisYear = projectsByStartYear[year] || [];\n                const cashFlow = -projectsByThisYear.reduce((memo, project) => memo + project.totalAmount, 0);\n                cashFlows.push(cashFlow);\n            }\n            return cashFlows;\n        }\n\n        function calculateNoInterestReferenceLine(cashFlows: number[], numYears: number) {\n            const noInterestReferenceLine: number[] = [];\n\n            let investmentAmountLeft = options.investmentAmount;\n            for (let year = 0; year < numYears; ++year) {\n                investmentAmountLeft = investmentAmountLeft + cashFlows[year];\n                noInterestReferenceLine.push(investmentAmountLeft);\n            }\n            return noInterestReferenceLine;\n        }\n\n        const projects = options.projects.sort((a, b) => a.startYear - b.startYear);\n\n        // Group projects by startYear, use lodash groupBy instead\n        const projectsByStartYear: Dictionary<IProject[]> = {};\n        for (const project of projects) {\n            const arr = projectsByStartYear[project.startYear] = projectsByStartYear[project.startYear] || [];\n            arr.push(project);\n        }\n\n        const numYears = projectsToSimulate.reduce((memo, project) => Math.max(memo, project.startYear), 0);\n        const cashFlows = projectsToCashFlows(numYears);\n        const noInterestReferenceLine = calculateNoInterestReferenceLine(cashFlows, numYears);\n\n\n        return {\n            investmentAmount: options.investmentAmount,\n            liquidity: options.liquidity,\n            noInterestReferenceLine,\n            numRuns: options.numRuns,\n            numYears,\n            projectsByStartYear,\n            simulatedValues: simulateOutcomes(cashFlows, numYears)\n        };\n    }\n\n    function calculateProject(project: IProject, environment: IMonteCarloEnvironment): IProjectResult {\n        const NUMBER_OF_BUCKETS = 10;\n        function groupForValue(value: number, groups: IGroup[]): IGroup {\n            return groups.find(group => (typeof group.from === \"undefined\" || group.from <= value) && (typeof group.to === \"undefined\" || group.to > value))!;\n        }\n\n        function createGroups(requiredAmount: number, noInterestReference: number): IGroup[] {\n            return [\n                { description: \"Ziel erreichbar\", from: requiredAmount, name: \"green\", percentage: 0, separator: true},\n                { description: \"mit Zusatzliquidität erreichbar\", from: requiredAmount - environment.liquidity, name: \"yellow\", percentage: 0, separator: true, to: requiredAmount },\n                { description: \"nicht erreichbar\", from: noInterestReference, name: \"gray\", percentage: 0, separator: false, to: requiredAmount - environment.liquidity },\n                { description: \"nicht erreichbar, mit Verlust\", name: \"red\", percentage: 0, separator: false, to: noInterestReference }\n            ];\n        }\n\n        function calculateRequiredAmount() {\n            let amount = project.totalAmount;\n            const projectsSameYear = environment.projectsByStartYear[project.startYear];\n\n            for (const otherProject of projectsSameYear) {\n                if (otherProject === project) {\n                    break;\n                }\n                amount += otherProject.totalAmount;\n            }\n            return amount;\n        }\n\n        function median(values: number[]) {\n            const half = Math.floor(values.length / 2);\n\n            if (values.length % 2) {\n                return values[half];\n            }\n\n            return (values[half - 1] + values[half]) / 2.0;\n        }\n\n        const requiredAmount = calculateRequiredAmount();\n        const simulatedValuesThisYear = environment.simulatedValues[project.startYear];\n        simulatedValuesThisYear.sort((a, b) => a - b);\n\n        const groups = createGroups(requiredAmount, environment.noInterestReferenceLine[project.startYear]);\n        const valuesByGroup: { [groupName: string]: number } = {};\n        const bucketSize = Math.round(simulatedValuesThisYear.length / NUMBER_OF_BUCKETS);\n        const buckets: IBucket[] = [];\n\n        for (let i = 0; i < simulatedValuesThisYear.length; i += bucketSize) {\n            const bucket: IBucket = {\n                max: Number.MIN_SAFE_INTEGER,\n                min: Number.MAX_SAFE_INTEGER,\n                subBuckets: {}\n            };\n\n            const subBuckets: SubBuckets = {};\n\n            // Needed to avoid deoptimization because of changed attribute orders in subBuckets. Initialize with const order\n            for (const group of groups) {\n                subBuckets[group.name] = {\n                    group: group.name,\n                    max: Number.MIN_SAFE_INTEGER,\n                    min: Number.MAX_SAFE_INTEGER\n                };\n            }\n\n            for (let j = i; j < i + bucketSize; ++j) {\n                const value = simulatedValuesThisYear[j];\n                bucket.min = Math.min(bucket.min, value);\n                bucket.max = Math.max(bucket.max, value);\n\n                const group = groupForValue(simulatedValuesThisYear[j], groups);\n                valuesByGroup[group.name] = (valuesByGroup[group.name] || 0) + 1;\n                const subBucket = subBuckets[group.name] = subBuckets[group.name] || { group: group.name, max: Number.MIN_VALUE, min: Number.MAX_VALUE };\n                subBucket.min = Math.min(subBucket.min, value);\n                subBucket.max = Math.max(subBucket.max, value);\n            }\n\n            // copy only non empty groups to bucket\n            for (const groupName of Object.keys(subBuckets)) {\n                const subBucket = subBuckets[groupName];\n                if (subBucket.min !== Number.MIN_SAFE_INTEGER) {\n                    bucket.subBuckets[groupName] = subBucket;\n                }\n            }\n\n            buckets.push(bucket);\n        }\n\n        const nonEmptyGroups = groups.filter(group => !!valuesByGroup[group.name]);\n        nonEmptyGroups.forEach(group => group.percentage = valuesByGroup[group.name] / simulatedValuesThisYear.length);\n\n        const oneSixth = Math.round(simulatedValuesThisYear.length / 6);\n        return {\n            buckets,\n            groups: nonEmptyGroups,\n            max: simulatedValuesThisYear[simulatedValuesThisYear.length - 1],\n            median: median(simulatedValuesThisYear),\n            min: simulatedValuesThisYear[0],\n            project,\n            twoThird: {\n                max: simulatedValuesThisYear[simulatedValuesThisYear.length - oneSixth],\n                min: simulatedValuesThisYear[oneSixth]\n            }\n        };\n    }\n\n    const environment = createMonteCarloEnvironment(this.params.options);\n\n    for (let i = 0; i < projectsToSimulate.length; ++i) {\n        const project = projectsToSimulate[i];\n        this.rtn.data.push(calculateProject(project, environment));\n    }\n}\n\n\nexport function parallelMonteCarlo(userOptions?: IMonteCarloSimulationOptions) {\n    const options = initializeOptions(userOptions);\n\n    let resolve: (result: Uint8ClampedArray[]) => void;\n    let reject: (error: any) => void;\n\n    const promise = new Promise((res, rej) => {\n        resolve = res;\n        reject = rej;\n    });\n\n    hamsters.run({ array: options.projects, options }, runSimulation, result => resolve(result), hamsters.maxThreads, true);\n\n    return promise;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/hamstersjs/monte-carlo.ts","const Parallel = require(\"paralleljs\");\n\nexport interface ICoordinate {\n    readonly x: number;\n    readonly y: number;\n}\n\nexport interface IKnightTourEnvironment {\n    boardSize: number;\n    board: number[];\n}\n\nexport function knightTours(startPath: ICoordinate[], boardSize: number): number {\n    const moves = [\n        { x: -2, y: -1 }, { x: -2, y: 1}, { x: -1, y: -2 }, { x: -1, y: 2 },\n        { x: 1, y: -2 }, { x: 1, y: 2}, { x: 2, y: -1 }, { x: 2, y: 1 }\n    ];\n\n    const board: number[] = new Array(boardSize * boardSize);\n    board.fill(0);\n\n    const numberOfFields = boardSize * boardSize;\n    let results: number = 0;\n    const stack: { coordinate: ICoordinate, n: number }[] = startPath.map((pos, index) => ({ coordinate: pos, n: index + 1 }));\n\n    for (let index = 0; index < startPath.length - 1; ++index) {\n        const fieldIndex = startPath[index].x * boardSize + startPath[index].y;\n        board[fieldIndex] = index + 1;\n    }\n\n    while (stack.length > 0) {\n        const { coordinate, n } = stack[stack.length - 1];\n        const fieldIndex = coordinate.x * boardSize + coordinate.y;\n\n        if (board[fieldIndex] !== 0) {\n            // back tracking\n            board[fieldIndex] = 0;\n            stack.pop(); // remove current value\n            continue;\n        }\n\n        // entry\n        if (n === numberOfFields) {\n            ++results;\n            stack.pop();\n            continue;\n        }\n\n        board[fieldIndex] = n!;\n\n        for (let i = 0; i < moves.length; ++i) {\n            const move = moves[i];\n            const successor = { x: coordinate.x + move.x, y: coordinate.y + move.y };\n            // not outside of board and not yet accessed\n            const accessible = successor.x >= 0 && successor.y >= 0 && successor.x < boardSize &&  successor.y < boardSize && board[successor.x * boardSize + successor.y] === 0;\n\n            if (accessible) {\n                stack.push({ coordinate: successor, n: n + 1 });\n            }\n        }\n    }\n\n    return results;\n}\n\ndeclare const global: { env: { boardSize: number }};\n\nexport function parallelJSKnightTours(start: ICoordinate, boardSize: number): PromiseLike<number> {\n\n    function successors(coordinate: ICoordinate) {\n        const moves = [\n            {x: -2, y: -1}, {x: -2, y: 1}, {x: -1, y: -2}, {x: -1, y: 2},\n            {x: 1, y: -2}, {x: 1, y: 2}, {x: 2, y: -1}, {x: 2, y: 1}\n        ];\n        const result: ICoordinate[] = [];\n\n        for (let i = 0; i < moves.length; ++i) {\n            const move = moves[i];\n            const successor = {x: coordinate.x + move.x, y: coordinate.y + move.y};\n            const accessible = successor.x >= 0 && successor.y >= 0 && successor.x < boardSize && successor.y < boardSize &&\n                (successor.x !== start.x || successor.y !== start.y) && (successor.x !== coordinate.x && successor.y !== coordinate.y);\n            if (accessible) {\n                result.push(successor);\n            }\n        }\n\n        return result;\n    }\n\n    function computeStartFields() {\n        const result: ICoordinate[][] = [];\n        for (const directSuccessor of successors(start)) {\n            for (const indirectSuccessor of successors(directSuccessor)) {\n                result.push([start, directSuccessor, indirectSuccessor]);\n            }\n        }\n        return result;\n    }\n\n    return new Parallel(computeStartFields(), { env: { boardSize }})\n        .require(knightTours)\n        .map(function (startField: ICoordinate[]) {\n            return knightTours(startField, global.env.boardSize);\n        })\n        .reduce(function (toursPerRun: number[]) {\n            return toursPerRun.reduce((memo, current) => memo + current, 0);\n        });\n\n    // The reduce operation needs to wait until the map operation is complete, switches back to the main thread and then\n    // a new worker is spawned for each reduce step, e.g. for [1, 2, 3, 4, 5, 6] the three workers with [1, 2], [3, 4], [5, 6]\n    // then the sub sequent workers [3, 7] and finally, [10, 11] are spawned...\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/paralleljs/knights-tour.ts","const Parallel = require(\"paralleljs\");\nimport * as _ from \"lodash\";\n\nexport interface IComplexNumber {\n    i: number;\n    real: number;\n}\n\nexport interface IMandelbrotOptions {\n    imageHeight: number;\n    imageWidth: number;\n    iterations: number;\n    max: IComplexNumber;\n    min: IComplexNumber;\n    scalingFactor: IComplexNumber;\n}\n\nexport function computeMandelbrotLine(y: number, options: IMandelbrotOptions): Uint8ClampedArray {\n    function calculateZ(c: IComplexNumber): number {\n        const z = { i: c.i, real: c.real };\n        let n = 0;\n\n        for (; n < options.iterations; ++n) {\n            if (z.real ** 2 + z.i ** 2 > 4) {\n                break;\n            }\n\n            // z ** 2 + c\n            const zI = z.i;\n            z.i = 2 * z.real * z.i + c.i;\n            z.real = z.real ** 2 - zI ** 2 + c.real;\n        }\n\n        return n;\n    }\n\n    const line = new Uint8ClampedArray(options.imageWidth * 4);\n    const cI = options.max.i - y * options.scalingFactor.i;\n\n    for (let x = 0; x < options.imageWidth; ++x) {\n        const c = {\n            i: cI,\n            real: options.min.real + x * options.scalingFactor.real\n        };\n\n        const n = calculateZ(c);\n        const base = x * 4;\n        /* tslint:disable:no-bitwise */\n        line[base] = n & 0xFF;\n        line[base + 1] = n & 0xFF00;\n        line[base + 2] = n & 0xFF0000;\n        line[base + 3] = 255;\n    }\n    return line;\n}\n\ndeclare const global: { env: IMandelbrotOptions};\n\nexport function parallelJSMandelbrot(mandelbrotOptions: IMandelbrotOptions) {\n    const lines = _.range(mandelbrotOptions.imageHeight);\n    return new Parallel(lines, { env: mandelbrotOptions })\n        .require(computeMandelbrotLine)\n        .map(function (line: number): Uint8ClampedArray {\n            return computeMandelbrotLine(line, global.env);\n        });\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/paralleljs/mandelbrot.ts","import {toFullQualifiedURL} from \"../util\";\nconst Parallel = require(\"paralleljs\");\nimport {Dictionary} from \"lodash\";\n\n\n/* tslint:disable:no-var-requires */\n// declare function require(name: string): any;\n// const Random = require(\"simjs-random\");\n// const random = new Random(10);\n\nexport interface IProject {\n    startYear: number;\n    totalAmount: number;\n}\n\ntype SubBuckets = { [name: string]: { group: string; min: number, max: number } };\n\ninterface IBucket {\n    min: number;\n    max: number;\n\n    subBuckets: SubBuckets;\n}\n\n\ninterface IGroup {\n    /**\n     * The unique name of this group\n     */\n    name: string;\n\n    /**\n     * The description of the group\n     */\n    description: string;\n\n    /**\n     * Should a separator line been drawn for this group?\n     */\n    separator: boolean;\n\n    /**\n     * Whats the percentage of values in this group to the total number of simulated values\n     */\n    percentage: number;\n\n    /**\n     * Whats the minimum value that is still part of this group\n     */\n    from?: number;\n    /**\n     * Whats the maximum value (exclusive) that defines the upper end of this group\n     */\n    to?: number;\n}\n\nexport interface IProjectResult {\n    /**\n     * The minimal simulated value for this project\n     */\n    min: number;\n    /**\n     * The maximal simulated value\n     */\n    max: number;\n\n    /** The median of the values found for this project\n     */\n    median: number;\n\n    /**\n     * Defines where the 2/3 of the simulated values start / end.\n     */\n    twoThird: {\n        min: number;\n        max: number;\n    };\n\n    buckets: IBucket[];\n\n    groups: IGroup[];\n\n    /**\n     * The project\n     */\n    project: IProject;\n}\n\ninterface IMonteCarloEnvironment {\n    investmentAmount: number;\n    liquidity: number;\n    noInterestReferenceLine: number[];\n    numRuns: number;\n    numYears: number;\n    projectsByStartYear: Dictionary<IProject[]>;\n    simulatedValues: number[][];\n}\n\nexport interface IMonteCarloSimulationOptions {\n    numYears?: number;\n    numRuns?: number;\n    projects?: IProject[];\n    investmentAmount?: number;\n    performance?: number;\n    seed?: number;\n    volatility: number;\n    liquidity?: number;\n}\n\ninterface IInitializedMonteCarloSimulationOptions {\n    numYears: number;\n    numRuns: number;\n    projects: IProject[];\n    investmentAmount: number;\n    performance: number;\n    seed?: number;\n    taskIndex?: number;\n    valuesPerWorker?: number;\n    liquidity: number;\n    volatility: number;\n}\n\nfunction initializeOptions(options?: IMonteCarloSimulationOptions): IInitializedMonteCarloSimulationOptions {\n    return Object.assign({}, {\n        investmentAmount: 1000000,\n        liquidity: 10000,\n        numRuns: 10000,\n        numYears: 10,\n        performance: 0,\n        projects: [],\n        seed: undefined,\n        volatility: 0.01\n    }, options);\n}\n\nfunction createMonteCarloEnvironment(options: IInitializedMonteCarloSimulationOptions): IMonteCarloEnvironment {\n    const random = new (self as any).Random(10);\n\n    /**\n     * Performs the monte carlo simulation for all years and num runs.\n     * @param cashFlows the cash flows\n     * @returns {number[][]} the simulated outcomes grouped by year\n     */\n    function simulateOutcomes(cashFlows: number[], numYears: number): number[][]  {\n        function toAbsoluteIndices(indices: number[]) {\n            let currentPortfolioValue = options.investmentAmount;\n            let previousYearIndex = 100;\n\n            for (let relativeYear = 0; relativeYear < indices.length; ++relativeYear) {\n                const currentYearIndex = indices[relativeYear];\n                const cashFlowStartOfYear = relativeYear === 0 ? 0 : cashFlows[relativeYear - 1];\n\n                // scale current value with performance gain according to index\n                const performance = currentYearIndex / previousYearIndex;\n                currentPortfolioValue = (currentPortfolioValue + cashFlowStartOfYear) * performance;\n\n                indices[relativeYear] =  1 + random.normal(performance, options.volatility);\n\n                previousYearIndex = currentYearIndex;\n            }\n\n            return indices;\n        }\n\n        const result: number[][] = new Array(options.numYears);\n        for (let year = 0; year <= numYears; ++year) {\n            result[year] = new Array(options.numRuns);\n        }\n\n        for (let run = 0; run < options.numRuns; run++) {\n            const indices = [100];\n\n            for (let i = 1; i <= numYears; i++) {\n                // const randomPerformance = 1 + random.normal(options.performance, options.volatility);\n                const randomPerformance = 1 + Math.random();\n                indices.push(indices[i - 1] * randomPerformance);\n            }\n\n            // convert the relative values from above to absolute values.\n            toAbsoluteIndices(indices);\n\n            for (let year = 0; year < indices.length; ++year) {\n                result[year][run] = indices[year];\n            }\n        }\n\n        return result;\n    }\n\n    function projectsToCashFlows(numYears: number) {\n        const cashFlows: number[] = [];\n        for (let year = 0; year < numYears; ++year) {\n            const projectsByThisYear = projectsByStartYear[year] || [];\n            const cashFlow = -projectsByThisYear.reduce((memo, project) => memo + project.totalAmount, 0);\n            cashFlows.push(cashFlow);\n        }\n        return cashFlows;\n    }\n\n    function calculateNoInterestReferenceLine(cashFlows: number[], numYears: number) {\n        const noInterestReferenceLine: number[] = [];\n\n        let investmentAmountLeft = options.investmentAmount;\n        for (let year = 0; year < numYears; ++year) {\n            investmentAmountLeft = investmentAmountLeft + cashFlows[year];\n            noInterestReferenceLine.push(investmentAmountLeft);\n        }\n        return noInterestReferenceLine;\n    }\n\n    const projects = options.projects.sort((a, b) => a.startYear - b.startYear);\n\n    // Group projects by startYear, use lodash groupBy instead\n    const projectsByStartYear: Dictionary<IProject[]> = {};\n    for (const project of projects) {\n        const arr = projectsByStartYear[project.startYear] = projectsByStartYear[project.startYear] || [];\n        arr.push(project);\n    }\n\n    const numYears = options.projects.reduce((memo, project) => Math.max(memo, project.startYear), 0);\n    const cashFlows = projectsToCashFlows(numYears);\n    const noInterestReferenceLine = calculateNoInterestReferenceLine(cashFlows, numYears);\n\n    return {\n        investmentAmount: options.investmentAmount,\n        liquidity: options.liquidity,\n        noInterestReferenceLine,\n        numRuns: options.numRuns,\n        numYears: options.numYears,\n        projectsByStartYear,\n        simulatedValues: simulateOutcomes(cashFlows, numYears)\n    };\n}\n\nfunction calculateProject(project: IProject, environment: IMonteCarloEnvironment): IProjectResult {\n    const NUMBER_OF_BUCKETS = 10;\n    function groupForValue(value: number, groups: IGroup[]): IGroup {\n        return groups.find(group => (typeof group.from === \"undefined\" || group.from <= value) && (typeof group.to === \"undefined\" || group.to > value))!;\n    }\n\n    function createGroups(requiredAmount: number, noInterestReference: number): IGroup[] {\n        return [\n            { description: \"Ziel erreichbar\", from: requiredAmount, name: \"green\", percentage: 0, separator: true},\n            { description: \"mit Zusatzliquidität erreichbar\", from: requiredAmount - environment.liquidity, name: \"yellow\", percentage: 0, separator: true, to: requiredAmount },\n            { description: \"nicht erreichbar\", from: noInterestReference, name: \"gray\", percentage: 0, separator: false, to: requiredAmount - environment.liquidity },\n            { description: \"nicht erreichbar, mit Verlust\", name: \"red\", percentage: 0, separator: false, to: noInterestReference }\n        ];\n    }\n\n    function calculateRequiredAmount() {\n        let amount = project.totalAmount;\n        const projectsSameYear = environment.projectsByStartYear[project.startYear];\n\n        for (const otherProject of projectsSameYear) {\n            if (otherProject === project) {\n                break;\n            }\n            amount += otherProject.totalAmount;\n        }\n        return amount;\n    }\n\n    function median(values: number[]) {\n        const half = Math.floor(values.length / 2);\n\n        if (values.length % 2) {\n            return values[half];\n        }\n\n        return (values[half - 1] + values[half]) / 2.0;\n    }\n\n    const requiredAmount = calculateRequiredAmount();\n    const simulatedValuesThisYear = environment.simulatedValues[project.startYear];\n    simulatedValuesThisYear.sort((a, b) => a - b);\n\n    const groups = createGroups(requiredAmount, environment.noInterestReferenceLine[project.startYear]);\n    const valuesByGroup: { [groupName: string]: number } = {};\n    const bucketSize = Math.round(simulatedValuesThisYear.length / NUMBER_OF_BUCKETS);\n    const buckets: IBucket[] = [];\n\n    for (let i = 0; i < simulatedValuesThisYear.length; i += bucketSize) {\n        const bucket: IBucket = {\n            max: Number.MIN_SAFE_INTEGER,\n            min: Number.MAX_SAFE_INTEGER,\n            subBuckets: {}\n        };\n\n        const subBuckets: SubBuckets = {};\n\n        // Needed to avoid deoptimization because of changed attribute orders in subBuckets. Initialize with const order\n        for (const group of groups) {\n            subBuckets[group.name] = {\n                group: group.name,\n                max: Number.MIN_SAFE_INTEGER,\n                min: Number.MAX_SAFE_INTEGER\n            };\n        }\n\n        for (let j = i; j < i + bucketSize; ++j) {\n            const value = simulatedValuesThisYear[j];\n            bucket.min = Math.min(bucket.min, value);\n            bucket.max = Math.max(bucket.max, value);\n\n            const group = groupForValue(simulatedValuesThisYear[j], groups);\n            valuesByGroup[group.name] = (valuesByGroup[group.name] || 0) + 1;\n            const subBucket = subBuckets[group.name] = subBuckets[group.name] || { group: group.name, max: Number.MIN_VALUE, min: Number.MAX_VALUE };\n            subBucket.min = Math.min(subBucket.min, value);\n            subBucket.max = Math.max(subBucket.max, value);\n        }\n\n        // copy only non empty groups to bucket\n        for (const groupName of Object.keys(subBuckets)) {\n            const subBucket = subBuckets[groupName];\n            if (subBucket.min !== Number.MIN_SAFE_INTEGER) {\n                bucket.subBuckets[groupName] = subBucket;\n            }\n        }\n\n        buckets.push(bucket);\n    }\n\n    const nonEmptyGroups = groups.filter(group => !!valuesByGroup[group.name]);\n    nonEmptyGroups.forEach(group => group.percentage = valuesByGroup[group.name] / simulatedValuesThisYear.length);\n\n    const oneSixth = Math.round(simulatedValuesThisYear.length / 6);\n    return {\n        buckets,\n        groups: nonEmptyGroups,\n        max: simulatedValuesThisYear[simulatedValuesThisYear.length - 1],\n        median: median(simulatedValuesThisYear),\n        min: simulatedValuesThisYear[0],\n        project,\n        twoThird: {\n            max: simulatedValuesThisYear[simulatedValuesThisYear.length - oneSixth],\n            min: simulatedValuesThisYear[oneSixth]\n        }\n    };\n}\n\ndeclare const global: { simulation: { options: IInitializedMonteCarloSimulationOptions} };\ndeclare const self: { env?: IMonteCarloEnvironment };\n\nexport function parallelJSMonteCarlo(userOptions?: IMonteCarloSimulationOptions) {\n    const options = initializeOptions(userOptions);\n\n    // Array needs to be cloned, otherwise the original array is manipulated!\n    return new Parallel(options.projects.slice(), {\n            evalPath: \"./\" + require(\"file-loader!paralleljs/lib/eval.js\"),\n            env: { options },\n            envNamespace: \"simulation\"\n        })\n        .require(toFullQualifiedURL(require(\"file-loader!../../lib/simjs-random.js\"))) // the one from node uses module syntax\n        .require(createMonteCarloEnvironment)\n        .require(calculateProject)\n        .map(function (project: IProject): IProjectResult {\n            let env: IMonteCarloEnvironment;\n            if (self.env) {\n                env = self.env;\n            } else {\n                env = self.env = createMonteCarloEnvironment(global.simulation.options);\n            }\n            return calculateProject(project, env);\n        });\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/paralleljs/monte-carlo.ts","import {Pool, Done} from \"threads\";\nimport {Job} from \"threads\";\n\nexport interface ICoordinate {\n    readonly x: number;\n    readonly y: number;\n}\n\nexport interface IKnightTourEnvironment {\n    boardSize: number;\n    board: number[];\n}\n\nexport function knightTours({ startPath, boardSize }: {startPath: ICoordinate[], boardSize: number}, done: Done): void{\n    const moves = [\n        { x: -2, y: -1 }, { x: -2, y: 1}, { x: -1, y: -2 }, { x: -1, y: 2 },\n        { x: 1, y: -2 }, { x: 1, y: 2}, { x: 2, y: -1 }, { x: 2, y: 1 }\n    ];\n\n    const board: number[] = new Array(boardSize * boardSize);\n    board.fill(0);\n\n    const numberOfFields = boardSize * boardSize;\n    let results: number = 0;\n    const stack: { coordinate: ICoordinate, n: number }[] = startPath.map((pos, index) => ({ coordinate: pos, n: index + 1 }));\n\n    for (let index = 0; index < startPath.length - 1; ++index) {\n        const fieldIndex = startPath[index].x * boardSize + startPath[index].y;\n        board[fieldIndex] = index + 1;\n    }\n\n    while (stack.length > 0) {\n        const { coordinate, n } = stack[stack.length - 1];\n        const fieldIndex = coordinate.x * boardSize + coordinate.y;\n\n        if (board[fieldIndex] !== 0) {\n            // back tracking\n            board[fieldIndex] = 0;\n            stack.pop(); // remove current value\n            continue;\n        }\n\n        // entry\n        if (n === numberOfFields) {\n            ++results;\n            stack.pop();\n            continue;\n        }\n\n        board[fieldIndex] = n!;\n\n        for (let i = 0; i < moves.length; ++i) {\n            const move = moves[i];\n            const successor = { x: coordinate.x + move.x, y: coordinate.y + move.y };\n            // not outside of board and not yet accessed\n            const accessible = successor.x >= 0 && successor.y >= 0 && successor.x < boardSize &&  successor.y < boardSize && board[successor.x * boardSize + successor.y] === 0;\n\n            if (accessible) {\n                stack.push({ coordinate: successor, n: n + 1 });\n            }\n        }\n    }\n\n    done(results);\n}\n\nexport function threadsKnightTours(start: ICoordinate, boardSize: number, pool: Pool): PromiseLike<number> {\n\n    function successors(coordinate: ICoordinate) {\n        const moves = [\n            {x: -2, y: -1}, {x: -2, y: 1}, {x: -1, y: -2}, {x: -1, y: 2},\n            {x: 1, y: -2}, {x: 1, y: 2}, {x: 2, y: -1}, {x: 2, y: 1}\n        ];\n        const result: ICoordinate[] = [];\n\n        for (let i = 0; i < moves.length; ++i) {\n            const move = moves[i];\n            const successor = {x: coordinate.x + move.x, y: coordinate.y + move.y};\n            const accessible = successor.x >= 0 && successor.y >= 0 && successor.x < boardSize && successor.y < boardSize &&\n                (successor.x !== start.x || successor.y !== start.y) && (successor.x !== coordinate.x && successor.y !== coordinate.y);\n            if (accessible) {\n                result.push(successor);\n            }\n        }\n\n        return result;\n    }\n\n    function computeStartFields() {\n        const result: ICoordinate[][] = [];\n        for (const directSuccessor of successors(start)) {\n            for (const indirectSuccessor of successors(directSuccessor)) {\n                result.push([start, directSuccessor, indirectSuccessor]);\n            }\n        }\n        return result;\n    }\n\n    let resolve: (value: number) => void;\n    let reject: (error: any) => void;\n    const promise = new Promise((_resolve, _reject) => {\n        resolve = _resolve;\n        reject = _reject;\n    });\n\n    let totalTours = 0;\n    pool.run(knightTours)\n        .on(\"done\", (job: Job, tours: number) => totalTours += tours)\n        .on(\"finished\", () => {\n            resolve(totalTours)\n        });\n\n    for (const startPath of computeStartFields()) {\n        pool.send({ startPath, boardSize });\n    }\n\n    return promise;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/threads/knights-tour.ts","import {Pool, Done} from \"threads\";\nimport * as _ from \"lodash\";\n\nexport interface IComplexNumber {\n    i: number;\n    real: number;\n}\n\nexport interface IMandelbrotOptions {\n    imageHeight: number;\n    imageWidth: number;\n    iterations: number;\n    max: IComplexNumber;\n    min: IComplexNumber;\n    scalingFactor: IComplexNumber;\n}\n\nexport function computeMandelbrotLine({ y, options}: { y: number, options: IMandelbrotOptions}, done: Done): void{\n    function calculateZ(c: IComplexNumber): number {\n        const z = { i: c.i, real: c.real };\n        let n = 0;\n\n        for (; n < options.iterations; ++n) {\n            if (z.real ** 2 + z.i ** 2 > 4) {\n                break;\n            }\n\n            // z ** 2 + c\n            const zI = z.i;\n            z.i = 2 * z.real * z.i + c.i;\n            z.real = z.real ** 2 - zI ** 2 + c.real;\n        }\n\n        return n;\n    }\n\n    const line = new Uint8ClampedArray(options.imageWidth * 4);\n    const cI = options.max.i - y * options.scalingFactor.i;\n\n    for (let x = 0; x < options.imageWidth; ++x) {\n        const c = {\n            i: cI,\n            real: options.min.real + x * options.scalingFactor.real\n        };\n\n        const n = calculateZ(c);\n        const base = x * 4;\n        /* tslint:disable:no-bitwise */\n        line[base] = n & 0xFF;\n        line[base + 1] = n & 0xFF00;\n        line[base + 2] = n & 0xFF0000;\n        line[base + 3] = 255;\n    }\n    done.transfer(line, [line.buffer]);\n}\n\nexport function threadsMandelbrot(mandelbrotOptions: IMandelbrotOptions, pool: Pool) {\n    const promises: PromiseLike<Uint8ClampedArray>[] = [];\n    pool.run(computeMandelbrotLine);\n\n    const lines = _.range(mandelbrotOptions.imageHeight);\n    for (const line of lines) {\n        promises.push(pool.send({y: line, options: mandelbrotOptions}).promise());\n    }\n\n    return Promise.all(promises);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/threads/mandelbrot.ts","import {Pool, Done} from \"threads\";\nimport {Dictionary} from \"lodash\";\nimport {toFullQualifiedURL} from \"../util\";\n\nexport interface IProject {\n    startYear: number;\n    totalAmount: number;\n}\n\ntype SubBuckets = { [name: string]: { group: string; min: number, max: number } };\n\ninterface IBucket {\n    min: number;\n    max: number;\n\n    subBuckets: SubBuckets;\n}\n\n\ninterface IGroup {\n    /**\n     * The unique name of this group\n     */\n    name: string;\n\n    /**\n     * The description of the group\n     */\n    description: string;\n\n    /**\n     * Should a separator line been drawn for this group?\n     */\n    separator: boolean;\n\n    /**\n     * Whats the percentage of values in this group to the total number of simulated values\n     */\n    percentage: number;\n\n    /**\n     * Whats the minimum value that is still part of this group\n     */\n    from?: number;\n    /**\n     * Whats the maximum value (exclusive) that defines the upper end of this group\n     */\n    to?: number;\n}\n\nexport interface IProjectResult {\n    /**\n     * The minimal simulated value for this project\n     */\n    min: number;\n    /**\n     * The maximal simulated value\n     */\n    max: number;\n\n    /** The median of the values found for this project\n     */\n    median: number;\n\n    /**\n     * Defines where the 2/3 of the simulated values start / end.\n     */\n    twoThird: {\n        min: number;\n        max: number;\n    };\n\n    buckets: IBucket[];\n\n    groups: IGroup[];\n\n    /**\n     * The project\n     */\n    project: IProject;\n}\n\ninterface IMonteCarloEnvironment {\n    investmentAmount: number;\n    liquidity: number;\n    noInterestReferenceLine: number[];\n    numRuns: number;\n    numYears: number;\n    projectsByStartYear: Dictionary<IProject[]>;\n    simulatedValues: number[][];\n}\n\nexport interface IMonteCarloSimulationOptions {\n    numYears?: number;\n    numRuns?: number;\n    projects?: IProject[];\n    investmentAmount?: number;\n    performance?: number;\n    seed?: number;\n    volatility: number;\n    liquidity?: number;\n}\n\ninterface IInitializedMonteCarloSimulationOptions {\n    numYears: number;\n    numRuns: number;\n    projects: IProject[];\n    investmentAmount: number;\n    performance: number;\n    seed?: number;\n    liquidity: number;\n    volatility: number;\n}\n\nfunction initializeOptions(options?: IMonteCarloSimulationOptions): IInitializedMonteCarloSimulationOptions {\n    return Object.assign({}, {\n        investmentAmount: 1000000,\n        liquidity: 10000,\n        numRuns: 10000,\n        numYears: 10,\n        performance: 0,\n        projects: [],\n        seed: undefined,\n        volatility: 0.01\n    }, options);\n}\n\ninterface IMonteCarloSimulation {\n    environment?: IMonteCarloEnvironment;\n}\n\nfunction calculateProject(this: IMonteCarloSimulation, { project, options}: { project: IProject, options: IInitializedMonteCarloSimulationOptions}, done: Done): void {\n    const NUMBER_OF_BUCKETS = 10;\n    const environment = this.environment = this.environment || createMonteCarloEnvironment(options);\n\n    function createMonteCarloEnvironment(options: IInitializedMonteCarloSimulationOptions): IMonteCarloEnvironment {\n        const random = new (self as any).Random(10);\n\n        /**\n         * Performs the monte carlo simulation for all years and num runs.\n         * @param cashFlows the cash flows\n         * @returns {number[][]} the simulated outcomes grouped by year\n         */\n        function simulateOutcomes(cashFlows: number[], numYears: number): number[][]  {\n            function toAbsoluteIndices(indices: number[]) {\n                let currentPortfolioValue = options.investmentAmount;\n                let previousYearIndex = 100;\n\n                for (let relativeYear = 0; relativeYear < indices.length; ++relativeYear) {\n                    const currentYearIndex = indices[relativeYear];\n                    const cashFlowStartOfYear = relativeYear === 0 ? 0 : cashFlows[relativeYear - 1];\n\n                    // scale current value with performance gain according to index\n                    const performance = currentYearIndex / previousYearIndex;\n                    currentPortfolioValue = (currentPortfolioValue + cashFlowStartOfYear) * performance;\n\n                    indices[relativeYear] =  Math.round(currentPortfolioValue);\n\n                    previousYearIndex = currentYearIndex;\n                }\n\n                return indices;\n            }\n\n            const result: number[][] = new Array(numYears);\n            for (let year = 0; year <= numYears; ++year) {\n                result[year] = new Array(options.numRuns);\n            }\n\n            for (let run = 0; run < options.numRuns; run++) {\n                const indices = [100];\n\n                for (let i = 1; i <= numYears; i++) {\n                    const randomPerformance = 1 + random.normal(options.performance, options.volatility);\n                    indices.push(indices[i - 1] * randomPerformance);\n                }\n\n                // convert the relative values from above to absolute values.\n                toAbsoluteIndices(indices);\n\n                for (let year = 0; year < indices.length; ++year) {\n                    result[year][run] = indices[year];\n                }\n            }\n\n            return result;\n        }\n\n        function projectsToCashFlows(numYears: number) {\n            const cashFlows: number[] = [];\n            for (let year = 0; year < numYears; ++year) {\n                const projectsByThisYear = projectsByStartYear[year] || [];\n                const cashFlow = -projectsByThisYear.reduce((memo, project) => memo + project.totalAmount, 0);\n                cashFlows.push(cashFlow);\n            }\n            return cashFlows;\n        }\n\n        function calculateNoInterestReferenceLine(cashFlows: number[], numYears: number) {\n            const noInterestReferenceLine: number[] = [];\n\n            let investmentAmountLeft = options.investmentAmount;\n            for (let year = 0; year < numYears; ++year) {\n                investmentAmountLeft = investmentAmountLeft + cashFlows[year];\n                noInterestReferenceLine.push(investmentAmountLeft);\n            }\n            return noInterestReferenceLine;\n        }\n\n        const projects = options.projects.sort((a, b) => a.startYear - b.startYear);\n\n        // Group projects by startYear, use lodash groupBy instead\n        const projectsByStartYear: Dictionary<IProject[]> = {};\n        for (const project of projects) {\n            const arr = projectsByStartYear[project.startYear] = projectsByStartYear[project.startYear] || [];\n            arr.push(project);\n        }\n\n        const numYears = options.projects.reduce((memo, project) => Math.max(memo, project.startYear), 0);\n        const cashFlows = projectsToCashFlows(numYears);\n        const noInterestReferenceLine = calculateNoInterestReferenceLine(cashFlows, numYears);\n\n        return {\n            investmentAmount: options.investmentAmount,\n            liquidity: options.liquidity,\n            noInterestReferenceLine,\n            numRuns: options.numRuns,\n            numYears: numYears,\n            projectsByStartYear,\n            simulatedValues: simulateOutcomes(cashFlows, numYears)\n        };\n    }\n\n    function groupForValue(value: number, groups: IGroup[]): IGroup {\n        return groups.find(group => (typeof group.from === \"undefined\" || group.from <= value) && (typeof group.to === \"undefined\" || group.to > value))!;\n    }\n\n    function createGroups(requiredAmount: number, noInterestReference: number): IGroup[] {\n        return [\n            { description: \"Ziel erreichbar\", from: requiredAmount, name: \"green\", percentage: 0, separator: true},\n            { description: \"mit Zusatzliquidität erreichbar\", from: requiredAmount - environment.liquidity, name: \"yellow\", percentage: 0, separator: true, to: requiredAmount },\n            { description: \"nicht erreichbar\", from: noInterestReference, name: \"gray\", percentage: 0, separator: false, to: requiredAmount - environment.liquidity },\n            { description: \"nicht erreichbar, mit Verlust\", name: \"red\", percentage: 0, separator: false, to: noInterestReference }\n        ];\n    }\n\n    function calculateRequiredAmount() {\n        let amount = project.totalAmount;\n        const projectsSameYear = environment.projectsByStartYear[project.startYear];\n\n        for (const otherProject of projectsSameYear) {\n            if (otherProject === project) {\n                break;\n            }\n            amount += otherProject.totalAmount;\n        }\n        return amount;\n    }\n\n    function median(values: number[]) {\n        const half = Math.floor(values.length / 2);\n\n        if (values.length % 2) {\n            return values[half];\n        }\n\n        return (values[half - 1] + values[half]) / 2.0;\n    }\n\n\n    const requiredAmount = calculateRequiredAmount();\n    const simulatedValuesThisYear = environment.simulatedValues[project.startYear];\n    simulatedValuesThisYear.sort((a, b) => a - b);\n\n    const groups = createGroups(requiredAmount, environment.noInterestReferenceLine[project.startYear]);\n    const valuesByGroup: { [groupName: string]: number } = {};\n    const bucketSize = Math.round(simulatedValuesThisYear.length / NUMBER_OF_BUCKETS);\n    const buckets: IBucket[] = [];\n\n    for (let i = 0; i < simulatedValuesThisYear.length; i += bucketSize) {\n        const bucket: IBucket = {\n            max: Number.MIN_SAFE_INTEGER,\n            min: Number.MAX_SAFE_INTEGER,\n            subBuckets: {}\n        };\n\n        const subBuckets: SubBuckets = {};\n\n        // Needed to avoid deoptimization because of changed attribute orders in subBuckets. Initialize with const order\n        for (const group of groups) {\n            subBuckets[group.name] = {\n                group: group.name,\n                max: Number.MIN_SAFE_INTEGER,\n                min: Number.MAX_SAFE_INTEGER\n            };\n        }\n\n        for (let j = i; j < i + bucketSize; ++j) {\n            const value = simulatedValuesThisYear[j];\n            bucket.min = Math.min(bucket.min, value);\n            bucket.max = Math.max(bucket.max, value);\n\n            const group = groupForValue(simulatedValuesThisYear[j], groups);\n            valuesByGroup[group.name] = (valuesByGroup[group.name] || 0) + 1;\n            const subBucket = subBuckets[group.name] = subBuckets[group.name] || { group: group.name, max: Number.MIN_VALUE, min: Number.MAX_VALUE };\n            subBucket.min = Math.min(subBucket.min, value);\n            subBucket.max = Math.max(subBucket.max, value);\n        }\n\n        // copy only non empty groups to bucket\n        for (const groupName of Object.keys(subBuckets)) {\n            const subBucket = subBuckets[groupName];\n            if (subBucket.min !== Number.MIN_SAFE_INTEGER) {\n                bucket.subBuckets[groupName] = subBucket;\n            }\n        }\n\n        buckets.push(bucket);\n    }\n\n    const nonEmptyGroups = groups.filter(group => !!valuesByGroup[group.name]);\n    nonEmptyGroups.forEach(group => group.percentage = valuesByGroup[group.name] / simulatedValuesThisYear.length);\n\n    const oneSixth = Math.round(simulatedValuesThisYear.length / 6);\n    done({\n        buckets,\n        groups: nonEmptyGroups,\n        max: simulatedValuesThisYear[simulatedValuesThisYear.length - 1],\n        median: median(simulatedValuesThisYear),\n        min: simulatedValuesThisYear[0],\n        project,\n        twoThird: {\n            max: simulatedValuesThisYear[simulatedValuesThisYear.length - oneSixth],\n            min: simulatedValuesThisYear[oneSixth]\n        }\n    });\n}\n\nexport function threadsMonteCarlo(userOptions: IMonteCarloSimulationOptions, pool: Pool) {\n    const options = initializeOptions(userOptions);\n\n    const jobs: PromiseLike<IProjectResult>[] = [];\n    pool.run(calculateProject, [ toFullQualifiedURL(require(\"file-loader!../../lib/simjs-random.js\")) ]);\n\n    for (const project of options.projects) {\n        jobs.push(pool.send({ options, project }).promise());\n    }\n\n    return Promise.all(jobs);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/threads/monte-carlo.ts","/*!\n * Benchmark.js <https://benchmarkjs.com/>\n * Copyright 2010-2016 Mathias Bynens <https://mths.be/>\n * Based on JSLitmus.js, copyright Robert Kieffer <http://broofa.com/>\n * Modified by John-David Dalton <http://allyoucanleet.com/>\n * Available under MIT license <https://mths.be/mit>\n */\n;(function() {\n  'use strict';\n\n  /** Used as a safe reference for `undefined` in pre ES5 environments. */\n  var undefined;\n\n  /** Used to determine if values are of the language type Object. */\n  var objectTypes = {\n    'function': true,\n    'object': true\n  };\n\n  /** Used as a reference to the global object. */\n  var root = (objectTypes[typeof window] && window) || this;\n\n  /** Detect free variable `define`. */\n  var freeDefine = typeof define == 'function' && typeof define.amd == 'object' && define.amd && define;\n\n  /** Detect free variable `exports`. */\n  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;\n\n  /** Detect free variable `module`. */\n  var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;\n\n  /** Detect free variable `global` from Node.js or Browserified code and use it as `root`. */\n  var freeGlobal = freeExports && freeModule && typeof global == 'object' && global;\n  if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal)) {\n    root = freeGlobal;\n  }\n\n  /** Detect free variable `require`. */\n  var freeRequire = typeof require == 'function' && require;\n\n  /** Used to assign each benchmark an incremented id. */\n  var counter = 0;\n\n  /** Detect the popular CommonJS extension `module.exports`. */\n  var moduleExports = freeModule && freeModule.exports === freeExports && freeExports;\n\n  /** Used to detect primitive types. */\n  var rePrimitive = /^(?:boolean|number|string|undefined)$/;\n\n  /** Used to make every compiled test unique. */\n  var uidCounter = 0;\n\n  /** Used to assign default `context` object properties. */\n  var contextProps = [\n    'Array', 'Date', 'Function', 'Math', 'Object', 'RegExp', 'String', '_',\n    'clearTimeout', 'chrome', 'chromium', 'document', 'navigator', 'phantom',\n    'platform', 'process', 'runtime', 'setTimeout'\n  ];\n\n  /** Used to avoid hz of Infinity. */\n  var divisors = {\n    '1': 4096,\n    '2': 512,\n    '3': 64,\n    '4': 8,\n    '5': 0\n  };\n\n  /**\n   * T-Distribution two-tailed critical values for 95% confidence.\n   * For more info see http://www.itl.nist.gov/div898/handbook/eda/section3/eda3672.htm.\n   */\n  var tTable = {\n    '1':  12.706, '2':  4.303, '3':  3.182, '4':  2.776, '5':  2.571, '6':  2.447,\n    '7':  2.365,  '8':  2.306, '9':  2.262, '10': 2.228, '11': 2.201, '12': 2.179,\n    '13': 2.16,   '14': 2.145, '15': 2.131, '16': 2.12,  '17': 2.11,  '18': 2.101,\n    '19': 2.093,  '20': 2.086, '21': 2.08,  '22': 2.074, '23': 2.069, '24': 2.064,\n    '25': 2.06,   '26': 2.056, '27': 2.052, '28': 2.048, '29': 2.045, '30': 2.042,\n    'infinity': 1.96\n  };\n\n  /**\n   * Critical Mann-Whitney U-values for 95% confidence.\n   * For more info see http://www.saburchill.com/IBbiology/stats/003.html.\n   */\n  var uTable = {\n    '5':  [0, 1, 2],\n    '6':  [1, 2, 3, 5],\n    '7':  [1, 3, 5, 6, 8],\n    '8':  [2, 4, 6, 8, 10, 13],\n    '9':  [2, 4, 7, 10, 12, 15, 17],\n    '10': [3, 5, 8, 11, 14, 17, 20, 23],\n    '11': [3, 6, 9, 13, 16, 19, 23, 26, 30],\n    '12': [4, 7, 11, 14, 18, 22, 26, 29, 33, 37],\n    '13': [4, 8, 12, 16, 20, 24, 28, 33, 37, 41, 45],\n    '14': [5, 9, 13, 17, 22, 26, 31, 36, 40, 45, 50, 55],\n    '15': [5, 10, 14, 19, 24, 29, 34, 39, 44, 49, 54, 59, 64],\n    '16': [6, 11, 15, 21, 26, 31, 37, 42, 47, 53, 59, 64, 70, 75],\n    '17': [6, 11, 17, 22, 28, 34, 39, 45, 51, 57, 63, 67, 75, 81, 87],\n    '18': [7, 12, 18, 24, 30, 36, 42, 48, 55, 61, 67, 74, 80, 86, 93, 99],\n    '19': [7, 13, 19, 25, 32, 38, 45, 52, 58, 65, 72, 78, 85, 92, 99, 106, 113],\n    '20': [8, 14, 20, 27, 34, 41, 48, 55, 62, 69, 76, 83, 90, 98, 105, 112, 119, 127],\n    '21': [8, 15, 22, 29, 36, 43, 50, 58, 65, 73, 80, 88, 96, 103, 111, 119, 126, 134, 142],\n    '22': [9, 16, 23, 30, 38, 45, 53, 61, 69, 77, 85, 93, 101, 109, 117, 125, 133, 141, 150, 158],\n    '23': [9, 17, 24, 32, 40, 48, 56, 64, 73, 81, 89, 98, 106, 115, 123, 132, 140, 149, 157, 166, 175],\n    '24': [10, 17, 25, 33, 42, 50, 59, 67, 76, 85, 94, 102, 111, 120, 129, 138, 147, 156, 165, 174, 183, 192],\n    '25': [10, 18, 27, 35, 44, 53, 62, 71, 80, 89, 98, 107, 117, 126, 135, 145, 154, 163, 173, 182, 192, 201, 211],\n    '26': [11, 19, 28, 37, 46, 55, 64, 74, 83, 93, 102, 112, 122, 132, 141, 151, 161, 171, 181, 191, 200, 210, 220, 230],\n    '27': [11, 20, 29, 38, 48, 57, 67, 77, 87, 97, 107, 118, 125, 138, 147, 158, 168, 178, 188, 199, 209, 219, 230, 240, 250],\n    '28': [12, 21, 30, 40, 50, 60, 70, 80, 90, 101, 111, 122, 132, 143, 154, 164, 175, 186, 196, 207, 218, 228, 239, 250, 261, 272],\n    '29': [13, 22, 32, 42, 52, 62, 73, 83, 94, 105, 116, 127, 138, 149, 160, 171, 182, 193, 204, 215, 226, 238, 249, 260, 271, 282, 294],\n    '30': [13, 23, 33, 43, 54, 65, 76, 87, 98, 109, 120, 131, 143, 154, 166, 177, 189, 200, 212, 223, 235, 247, 258, 270, 282, 293, 305, 317]\n  };\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Create a new `Benchmark` function using the given `context` object.\n   *\n   * @static\n   * @memberOf Benchmark\n   * @param {Object} [context=root] The context object.\n   * @returns {Function} Returns a new `Benchmark` function.\n   */\n  function runInContext(context) {\n    // Exit early if unable to acquire lodash.\n    var _ = context && context._ || require('lodash') || root._;\n    if (!_) {\n      Benchmark.runInContext = runInContext;\n      return Benchmark;\n    }\n    // Avoid issues with some ES3 environments that attempt to use values, named\n    // after built-in constructors like `Object`, for the creation of literals.\n    // ES5 clears this up by stating that literals must use built-in constructors.\n    // See http://es5.github.io/#x11.1.5.\n    context = context ? _.defaults(root.Object(), context, _.pick(root, contextProps)) : root;\n\n    /** Native constructor references. */\n    var Array = context.Array,\n        Date = context.Date,\n        Function = context.Function,\n        Math = context.Math,\n        Object = context.Object,\n        RegExp = context.RegExp,\n        String = context.String;\n\n    /** Used for `Array` and `Object` method references. */\n    var arrayRef = [],\n        objectProto = Object.prototype;\n\n    /** Native method shortcuts. */\n    var abs = Math.abs,\n        clearTimeout = context.clearTimeout,\n        floor = Math.floor,\n        log = Math.log,\n        max = Math.max,\n        min = Math.min,\n        pow = Math.pow,\n        push = arrayRef.push,\n        setTimeout = context.setTimeout,\n        shift = arrayRef.shift,\n        slice = arrayRef.slice,\n        sqrt = Math.sqrt,\n        toString = objectProto.toString,\n        unshift = arrayRef.unshift;\n\n    /** Used to avoid inclusion in Browserified bundles. */\n    var req = require;\n\n    /** Detect DOM document object. */\n    var doc = isHostType(context, 'document') && context.document;\n\n    /** Used to access Wade Simmons' Node.js `microtime` module. */\n    var microtimeObject = req('microtime');\n\n    /** Used to access Node.js's high resolution timer. */\n    var processObject = isHostType(context, 'process') && context.process;\n\n    /** Used to prevent a `removeChild` memory leak in IE < 9. */\n    var trash = doc && doc.createElement('div');\n\n    /** Used to integrity check compiled tests. */\n    var uid = 'uid' + _.now();\n\n    /** Used to avoid infinite recursion when methods call each other. */\n    var calledBy = {};\n\n    /**\n     * An object used to flag environments/features.\n     *\n     * @static\n     * @memberOf Benchmark\n     * @type Object\n     */\n    var support = {};\n\n    (function() {\n\n      /**\n       * Detect if running in a browser environment.\n       *\n       * @memberOf Benchmark.support\n       * @type boolean\n       */\n      support.browser = doc && isHostType(context, 'navigator') && !isHostType(context, 'phantom');\n\n      /**\n       * Detect if the Timers API exists.\n       *\n       * @memberOf Benchmark.support\n       * @type boolean\n       */\n      support.timeout = isHostType(context, 'setTimeout') && isHostType(context, 'clearTimeout');\n\n      /**\n       * Detect if function decompilation is support.\n       *\n       * @name decompilation\n       * @memberOf Benchmark.support\n       * @type boolean\n       */\n      try {\n        // Safari 2.x removes commas in object literals from `Function#toString` results.\n        // See http://webk.it/11609 for more details.\n        // Firefox 3.6 and Opera 9.25 strip grouping parentheses from `Function#toString` results.\n        // See http://bugzil.la/559438 for more details.\n        support.decompilation = Function(\n          ('return (' + (function(x) { return { 'x': '' + (1 + x) + '', 'y': 0 }; }) + ')')\n          // Avoid issues with code added by Istanbul.\n          .replace(/__cov__[^;]+;/g, '')\n        )()(0).x === '1';\n      } catch(e) {\n        support.decompilation = false;\n      }\n    }());\n\n    /**\n     * Timer object used by `clock()` and `Deferred#resolve`.\n     *\n     * @private\n     * @type Object\n     */\n    var timer = {\n\n      /**\n       * The timer namespace object or constructor.\n       *\n       * @private\n       * @memberOf timer\n       * @type {Function|Object}\n       */\n      'ns': Date,\n\n      /**\n       * Starts the deferred timer.\n       *\n       * @private\n       * @memberOf timer\n       * @param {Object} deferred The deferred instance.\n       */\n      'start': null, // Lazy defined in `clock()`.\n\n      /**\n       * Stops the deferred timer.\n       *\n       * @private\n       * @memberOf timer\n       * @param {Object} deferred The deferred instance.\n       */\n      'stop': null // Lazy defined in `clock()`.\n    };\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * The Benchmark constructor.\n     *\n     * Note: The Benchmark constructor exposes a handful of lodash methods to\n     * make working with arrays, collections, and objects easier. The lodash\n     * methods are:\n     * [`each/forEach`](https://lodash.com/docs#forEach), [`forOwn`](https://lodash.com/docs#forOwn),\n     * [`has`](https://lodash.com/docs#has), [`indexOf`](https://lodash.com/docs#indexOf),\n     * [`map`](https://lodash.com/docs#map), and [`reduce`](https://lodash.com/docs#reduce)\n     *\n     * @constructor\n     * @param {string} name A name to identify the benchmark.\n     * @param {Function|string} fn The test to benchmark.\n     * @param {Object} [options={}] Options object.\n     * @example\n     *\n     * // basic usage (the `new` operator is optional)\n     * var bench = new Benchmark(fn);\n     *\n     * // or using a name first\n     * var bench = new Benchmark('foo', fn);\n     *\n     * // or with options\n     * var bench = new Benchmark('foo', fn, {\n     *\n     *   // displayed by `Benchmark#toString` if `name` is not available\n     *   'id': 'xyz',\n     *\n     *   // called when the benchmark starts running\n     *   'onStart': onStart,\n     *\n     *   // called after each run cycle\n     *   'onCycle': onCycle,\n     *\n     *   // called when aborted\n     *   'onAbort': onAbort,\n     *\n     *   // called when a test errors\n     *   'onError': onError,\n     *\n     *   // called when reset\n     *   'onReset': onReset,\n     *\n     *   // called when the benchmark completes running\n     *   'onComplete': onComplete,\n     *\n     *   // compiled/called before the test loop\n     *   'setup': setup,\n     *\n     *   // compiled/called after the test loop\n     *   'teardown': teardown\n     * });\n     *\n     * // or name and options\n     * var bench = new Benchmark('foo', {\n     *\n     *   // a flag to indicate the benchmark is deferred\n     *   'defer': true,\n     *\n     *   // benchmark test function\n     *   'fn': function(deferred) {\n     *     // call `Deferred#resolve` when the deferred test is finished\n     *     deferred.resolve();\n     *   }\n     * });\n     *\n     * // or options only\n     * var bench = new Benchmark({\n     *\n     *   // benchmark name\n     *   'name': 'foo',\n     *\n     *   // benchmark test as a string\n     *   'fn': '[1,2,3,4].sort()'\n     * });\n     *\n     * // a test's `this` binding is set to the benchmark instance\n     * var bench = new Benchmark('foo', function() {\n     *   'My name is '.concat(this.name); // \"My name is foo\"\n     * });\n     */\n    function Benchmark(name, fn, options) {\n      var bench = this;\n\n      // Allow instance creation without the `new` operator.\n      if (!(bench instanceof Benchmark)) {\n        return new Benchmark(name, fn, options);\n      }\n      // Juggle arguments.\n      if (_.isPlainObject(name)) {\n        // 1 argument (options).\n        options = name;\n      }\n      else if (_.isFunction(name)) {\n        // 2 arguments (fn, options).\n        options = fn;\n        fn = name;\n      }\n      else if (_.isPlainObject(fn)) {\n        // 2 arguments (name, options).\n        options = fn;\n        fn = null;\n        bench.name = name;\n      }\n      else {\n        // 3 arguments (name, fn [, options]).\n        bench.name = name;\n      }\n      setOptions(bench, options);\n\n      bench.id || (bench.id = ++counter);\n      bench.fn == null && (bench.fn = fn);\n\n      bench.stats = cloneDeep(bench.stats);\n      bench.times = cloneDeep(bench.times);\n    }\n\n    /**\n     * The Deferred constructor.\n     *\n     * @constructor\n     * @memberOf Benchmark\n     * @param {Object} clone The cloned benchmark instance.\n     */\n    function Deferred(clone) {\n      var deferred = this;\n      if (!(deferred instanceof Deferred)) {\n        return new Deferred(clone);\n      }\n      deferred.benchmark = clone;\n      clock(deferred);\n    }\n\n    /**\n     * The Event constructor.\n     *\n     * @constructor\n     * @memberOf Benchmark\n     * @param {Object|string} type The event type.\n     */\n    function Event(type) {\n      var event = this;\n      if (type instanceof Event) {\n        return type;\n      }\n      return (event instanceof Event)\n        ? _.assign(event, { 'timeStamp': _.now() }, typeof type == 'string' ? { 'type': type } : type)\n        : new Event(type);\n    }\n\n    /**\n     * The Suite constructor.\n     *\n     * Note: Each Suite instance has a handful of wrapped lodash methods to\n     * make working with Suites easier. The wrapped lodash methods are:\n     * [`each/forEach`](https://lodash.com/docs#forEach), [`indexOf`](https://lodash.com/docs#indexOf),\n     * [`map`](https://lodash.com/docs#map), and [`reduce`](https://lodash.com/docs#reduce)\n     *\n     * @constructor\n     * @memberOf Benchmark\n     * @param {string} name A name to identify the suite.\n     * @param {Object} [options={}] Options object.\n     * @example\n     *\n     * // basic usage (the `new` operator is optional)\n     * var suite = new Benchmark.Suite;\n     *\n     * // or using a name first\n     * var suite = new Benchmark.Suite('foo');\n     *\n     * // or with options\n     * var suite = new Benchmark.Suite('foo', {\n     *\n     *   // called when the suite starts running\n     *   'onStart': onStart,\n     *\n     *   // called between running benchmarks\n     *   'onCycle': onCycle,\n     *\n     *   // called when aborted\n     *   'onAbort': onAbort,\n     *\n     *   // called when a test errors\n     *   'onError': onError,\n     *\n     *   // called when reset\n     *   'onReset': onReset,\n     *\n     *   // called when the suite completes running\n     *   'onComplete': onComplete\n     * });\n     */\n    function Suite(name, options) {\n      var suite = this;\n\n      // Allow instance creation without the `new` operator.\n      if (!(suite instanceof Suite)) {\n        return new Suite(name, options);\n      }\n      // Juggle arguments.\n      if (_.isPlainObject(name)) {\n        // 1 argument (options).\n        options = name;\n      } else {\n        // 2 arguments (name [, options]).\n        suite.name = name;\n      }\n      setOptions(suite, options);\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * A specialized version of `_.cloneDeep` which only clones arrays and plain\n     * objects assigning all other values by reference.\n     *\n     * @private\n     * @param {*} value The value to clone.\n     * @returns {*} The cloned value.\n     */\n    var cloneDeep = _.partial(_.cloneDeepWith, _, function(value) {\n      // Only clone primitives, arrays, and plain objects.\n      return (_.isObject(value) && !_.isArray(value) && !_.isPlainObject(value))\n        ? value\n        : undefined;\n    });\n\n    /**\n     * Creates a function from the given arguments string and body.\n     *\n     * @private\n     * @param {string} args The comma separated function arguments.\n     * @param {string} body The function body.\n     * @returns {Function} The new function.\n     */\n    function createFunction() {\n      // Lazy define.\n      createFunction = function(args, body) {\n        var result,\n            anchor = freeDefine ? freeDefine.amd : Benchmark,\n            prop = uid + 'createFunction';\n\n        runScript((freeDefine ? 'define.amd.' : 'Benchmark.') + prop + '=function(' + args + '){' + body + '}');\n        result = anchor[prop];\n        delete anchor[prop];\n        return result;\n      };\n      // Fix JaegerMonkey bug.\n      // For more information see http://bugzil.la/639720.\n      createFunction = support.browser && (createFunction('', 'return\"' + uid + '\"') || _.noop)() == uid ? createFunction : Function;\n      return createFunction.apply(null, arguments);\n    }\n\n    /**\n     * Delay the execution of a function based on the benchmark's `delay` property.\n     *\n     * @private\n     * @param {Object} bench The benchmark instance.\n     * @param {Object} fn The function to execute.\n     */\n    function delay(bench, fn) {\n      bench._timerId = _.delay(fn, bench.delay * 1e3);\n    }\n\n    /**\n     * Destroys the given element.\n     *\n     * @private\n     * @param {Element} element The element to destroy.\n     */\n    function destroyElement(element) {\n      trash.appendChild(element);\n      trash.innerHTML = '';\n    }\n\n    /**\n     * Gets the name of the first argument from a function's source.\n     *\n     * @private\n     * @param {Function} fn The function.\n     * @returns {string} The argument name.\n     */\n    function getFirstArgument(fn) {\n      return (!_.has(fn, 'toString') &&\n        (/^[\\s(]*function[^(]*\\(([^\\s,)]+)/.exec(fn) || 0)[1]) || '';\n    }\n\n    /**\n     * Computes the arithmetic mean of a sample.\n     *\n     * @private\n     * @param {Array} sample The sample.\n     * @returns {number} The mean.\n     */\n    function getMean(sample) {\n      return (_.reduce(sample, function(sum, x) {\n        return sum + x;\n      }) / sample.length) || 0;\n    }\n\n    /**\n     * Gets the source code of a function.\n     *\n     * @private\n     * @param {Function} fn The function.\n     * @returns {string} The function's source code.\n     */\n    function getSource(fn) {\n      var result = '';\n      if (isStringable(fn)) {\n        result = String(fn);\n      } else if (support.decompilation) {\n        // Escape the `{` for Firefox 1.\n        result = _.result(/^[^{]+\\{([\\s\\S]*)\\}\\s*$/.exec(fn), 1);\n      }\n      // Trim string.\n      result = (result || '').replace(/^\\s+|\\s+$/g, '');\n\n      // Detect strings containing only the \"use strict\" directive.\n      return /^(?:\\/\\*+[\\w\\W]*?\\*\\/|\\/\\/.*?[\\n\\r\\u2028\\u2029]|\\s)*([\"'])use strict\\1;?$/.test(result)\n        ? ''\n        : result;\n    }\n\n    /**\n     * Checks if an object is of the specified class.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @param {string} name The name of the class.\n     * @returns {boolean} Returns `true` if the value is of the specified class, else `false`.\n     */\n    function isClassOf(value, name) {\n      return value != null && toString.call(value) == '[object ' + name + ']';\n    }\n\n    /**\n     * Host objects can return type values that are different from their actual\n     * data type. The objects we are concerned with usually return non-primitive\n     * types of \"object\", \"function\", or \"unknown\".\n     *\n     * @private\n     * @param {*} object The owner of the property.\n     * @param {string} property The property to check.\n     * @returns {boolean} Returns `true` if the property value is a non-primitive, else `false`.\n     */\n    function isHostType(object, property) {\n      if (object == null) {\n        return false;\n      }\n      var type = typeof object[property];\n      return !rePrimitive.test(type) && (type != 'object' || !!object[property]);\n    }\n\n    /**\n     * Checks if a value can be safely coerced to a string.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if the value can be coerced, else `false`.\n     */\n    function isStringable(value) {\n      return _.isString(value) || (_.has(value, 'toString') && _.isFunction(value.toString));\n    }\n\n    /**\n     * A wrapper around `require` to suppress `module missing` errors.\n     *\n     * @private\n     * @param {string} id The module id.\n     * @returns {*} The exported module or `null`.\n     */\n    function require(id) {\n      try {\n        var result = freeExports && freeRequire(id);\n      } catch(e) {}\n      return result || null;\n    }\n\n    /**\n     * Runs a snippet of JavaScript via script injection.\n     *\n     * @private\n     * @param {string} code The code to run.\n     */\n    function runScript(code) {\n      var anchor = freeDefine ? define.amd : Benchmark,\n          script = doc.createElement('script'),\n          sibling = doc.getElementsByTagName('script')[0],\n          parent = sibling.parentNode,\n          prop = uid + 'runScript',\n          prefix = '(' + (freeDefine ? 'define.amd.' : 'Benchmark.') + prop + '||function(){})();';\n\n      // Firefox 2.0.0.2 cannot use script injection as intended because it executes\n      // asynchronously, but that's OK because script injection is only used to avoid\n      // the previously commented JaegerMonkey bug.\n      try {\n        // Remove the inserted script *before* running the code to avoid differences\n        // in the expected script element count/order of the document.\n        script.appendChild(doc.createTextNode(prefix + code));\n        anchor[prop] = function() { destroyElement(script); };\n      } catch(e) {\n        parent = parent.cloneNode(false);\n        sibling = null;\n        script.text = code;\n      }\n      parent.insertBefore(script, sibling);\n      delete anchor[prop];\n    }\n\n    /**\n     * A helper function for setting options/event handlers.\n     *\n     * @private\n     * @param {Object} object The benchmark or suite instance.\n     * @param {Object} [options={}] Options object.\n     */\n    function setOptions(object, options) {\n      options = object.options = _.assign({}, cloneDeep(object.constructor.options), cloneDeep(options));\n\n      _.forOwn(options, function(value, key) {\n        if (value != null) {\n          // Add event listeners.\n          if (/^on[A-Z]/.test(key)) {\n            _.each(key.split(' '), function(key) {\n              object.on(key.slice(2).toLowerCase(), value);\n            });\n          } else if (!_.has(object, key)) {\n            object[key] = cloneDeep(value);\n          }\n        }\n      });\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Handles cycling/completing the deferred benchmark.\n     *\n     * @memberOf Benchmark.Deferred\n     */\n    function resolve() {\n      var deferred = this,\n          clone = deferred.benchmark,\n          bench = clone._original;\n\n      if (bench.aborted) {\n        // cycle() -> clone cycle/complete event -> compute()'s invoked bench.run() cycle/complete.\n        deferred.teardown();\n        clone.running = false;\n        cycle(deferred);\n      }\n      else if (++deferred.cycles < clone.count) {\n        clone.compiled.call(deferred, context, timer);\n      }\n      else {\n        timer.stop(deferred);\n        deferred.teardown();\n        delay(clone, function() { cycle(deferred); });\n      }\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * A generic `Array#filter` like method.\n     *\n     * @static\n     * @memberOf Benchmark\n     * @param {Array} array The array to iterate over.\n     * @param {Function|string} callback The function/alias called per iteration.\n     * @returns {Array} A new array of values that passed callback filter.\n     * @example\n     *\n     * // get odd numbers\n     * Benchmark.filter([1, 2, 3, 4, 5], function(n) {\n     *   return n % 2;\n     * }); // -> [1, 3, 5];\n     *\n     * // get fastest benchmarks\n     * Benchmark.filter(benches, 'fastest');\n     *\n     * // get slowest benchmarks\n     * Benchmark.filter(benches, 'slowest');\n     *\n     * // get benchmarks that completed without erroring\n     * Benchmark.filter(benches, 'successful');\n     */\n    function filter(array, callback) {\n      if (callback === 'successful') {\n        // Callback to exclude those that are errored, unrun, or have hz of Infinity.\n        callback = function(bench) {\n          return bench.cycles && _.isFinite(bench.hz) && !bench.error;\n        };\n      }\n      else if (callback === 'fastest' || callback === 'slowest') {\n        // Get successful, sort by period + margin of error, and filter fastest/slowest.\n        var result = filter(array, 'successful').sort(function(a, b) {\n          a = a.stats; b = b.stats;\n          return (a.mean + a.moe > b.mean + b.moe ? 1 : -1) * (callback === 'fastest' ? 1 : -1);\n        });\n\n        return _.filter(result, function(bench) {\n          return result[0].compare(bench) == 0;\n        });\n      }\n      return _.filter(array, callback);\n    }\n\n    /**\n     * Converts a number to a more readable comma-separated string representation.\n     *\n     * @static\n     * @memberOf Benchmark\n     * @param {number} number The number to convert.\n     * @returns {string} The more readable string representation.\n     */\n    function formatNumber(number) {\n      number = String(number).split('.');\n      return number[0].replace(/(?=(?:\\d{3})+$)(?!\\b)/g, ',') +\n        (number[1] ? '.' + number[1] : '');\n    }\n\n    /**\n     * Invokes a method on all items in an array.\n     *\n     * @static\n     * @memberOf Benchmark\n     * @param {Array} benches Array of benchmarks to iterate over.\n     * @param {Object|string} name The name of the method to invoke OR options object.\n     * @param {...*} [args] Arguments to invoke the method with.\n     * @returns {Array} A new array of values returned from each method invoked.\n     * @example\n     *\n     * // invoke `reset` on all benchmarks\n     * Benchmark.invoke(benches, 'reset');\n     *\n     * // invoke `emit` with arguments\n     * Benchmark.invoke(benches, 'emit', 'complete', listener);\n     *\n     * // invoke `run(true)`, treat benchmarks as a queue, and register invoke callbacks\n     * Benchmark.invoke(benches, {\n     *\n     *   // invoke the `run` method\n     *   'name': 'run',\n     *\n     *   // pass a single argument\n     *   'args': true,\n     *\n     *   // treat as queue, removing benchmarks from front of `benches` until empty\n     *   'queued': true,\n     *\n     *   // called before any benchmarks have been invoked.\n     *   'onStart': onStart,\n     *\n     *   // called between invoking benchmarks\n     *   'onCycle': onCycle,\n     *\n     *   // called after all benchmarks have been invoked.\n     *   'onComplete': onComplete\n     * });\n     */\n    function invoke(benches, name) {\n      var args,\n          bench,\n          queued,\n          index = -1,\n          eventProps = { 'currentTarget': benches },\n          options = { 'onStart': _.noop, 'onCycle': _.noop, 'onComplete': _.noop },\n          result = _.toArray(benches);\n\n      /**\n       * Invokes the method of the current object and if synchronous, fetches the next.\n       */\n      function execute() {\n        var listeners,\n            async = isAsync(bench);\n\n        if (async) {\n          // Use `getNext` as the first listener.\n          bench.on('complete', getNext);\n          listeners = bench.events.complete;\n          listeners.splice(0, 0, listeners.pop());\n        }\n        // Execute method.\n        result[index] = _.isFunction(bench && bench[name]) ? bench[name].apply(bench, args) : undefined;\n        // If synchronous return `true` until finished.\n        return !async && getNext();\n      }\n\n      /**\n       * Fetches the next bench or executes `onComplete` callback.\n       */\n      function getNext(event) {\n        var cycleEvent,\n            last = bench,\n            async = isAsync(last);\n\n        if (async) {\n          last.off('complete', getNext);\n          last.emit('complete');\n        }\n        // Emit \"cycle\" event.\n        eventProps.type = 'cycle';\n        eventProps.target = last;\n        cycleEvent = Event(eventProps);\n        options.onCycle.call(benches, cycleEvent);\n\n        // Choose next benchmark if not exiting early.\n        if (!cycleEvent.aborted && raiseIndex() !== false) {\n          bench = queued ? benches[0] : result[index];\n          if (isAsync(bench)) {\n            delay(bench, execute);\n          }\n          else if (async) {\n            // Resume execution if previously asynchronous but now synchronous.\n            while (execute()) {}\n          }\n          else {\n            // Continue synchronous execution.\n            return true;\n          }\n        } else {\n          // Emit \"complete\" event.\n          eventProps.type = 'complete';\n          options.onComplete.call(benches, Event(eventProps));\n        }\n        // When used as a listener `event.aborted = true` will cancel the rest of\n        // the \"complete\" listeners because they were already called above and when\n        // used as part of `getNext` the `return false` will exit the execution while-loop.\n        if (event) {\n          event.aborted = true;\n        } else {\n          return false;\n        }\n      }\n\n      /**\n       * Checks if invoking `Benchmark#run` with asynchronous cycles.\n       */\n      function isAsync(object) {\n        // Avoid using `instanceof` here because of IE memory leak issues with host objects.\n        var async = args[0] && args[0].async;\n        return name == 'run' && (object instanceof Benchmark) &&\n          ((async == null ? object.options.async : async) && support.timeout || object.defer);\n      }\n\n      /**\n       * Raises `index` to the next defined index or returns `false`.\n       */\n      function raiseIndex() {\n        index++;\n\n        // If queued remove the previous bench.\n        if (queued && index > 0) {\n          shift.call(benches);\n        }\n        // If we reached the last index then return `false`.\n        return (queued ? benches.length : index < result.length)\n          ? index\n          : (index = false);\n      }\n      // Juggle arguments.\n      if (_.isString(name)) {\n        // 2 arguments (array, name).\n        args = slice.call(arguments, 2);\n      } else {\n        // 2 arguments (array, options).\n        options = _.assign(options, name);\n        name = options.name;\n        args = _.isArray(args = 'args' in options ? options.args : []) ? args : [args];\n        queued = options.queued;\n      }\n      // Start iterating over the array.\n      if (raiseIndex() !== false) {\n        // Emit \"start\" event.\n        bench = result[index];\n        eventProps.type = 'start';\n        eventProps.target = bench;\n        options.onStart.call(benches, Event(eventProps));\n\n        // End early if the suite was aborted in an \"onStart\" listener.\n        if (name == 'run' && (benches instanceof Suite) && benches.aborted) {\n          // Emit \"cycle\" event.\n          eventProps.type = 'cycle';\n          options.onCycle.call(benches, Event(eventProps));\n          // Emit \"complete\" event.\n          eventProps.type = 'complete';\n          options.onComplete.call(benches, Event(eventProps));\n        }\n        // Start method execution.\n        else {\n          if (isAsync(bench)) {\n            delay(bench, execute);\n          } else {\n            while (execute()) {}\n          }\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Creates a string of joined array values or object key-value pairs.\n     *\n     * @static\n     * @memberOf Benchmark\n     * @param {Array|Object} object The object to operate on.\n     * @param {string} [separator1=','] The separator used between key-value pairs.\n     * @param {string} [separator2=': '] The separator used between keys and values.\n     * @returns {string} The joined result.\n     */\n    function join(object, separator1, separator2) {\n      var result = [],\n          length = (object = Object(object)).length,\n          arrayLike = length === length >>> 0;\n\n      separator2 || (separator2 = ': ');\n      _.each(object, function(value, key) {\n        result.push(arrayLike ? value : key + separator2 + value);\n      });\n      return result.join(separator1 || ',');\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Aborts all benchmarks in the suite.\n     *\n     * @name abort\n     * @memberOf Benchmark.Suite\n     * @returns {Object} The suite instance.\n     */\n    function abortSuite() {\n      var event,\n          suite = this,\n          resetting = calledBy.resetSuite;\n\n      if (suite.running) {\n        event = Event('abort');\n        suite.emit(event);\n        if (!event.cancelled || resetting) {\n          // Avoid infinite recursion.\n          calledBy.abortSuite = true;\n          suite.reset();\n          delete calledBy.abortSuite;\n\n          if (!resetting) {\n            suite.aborted = true;\n            invoke(suite, 'abort');\n          }\n        }\n      }\n      return suite;\n    }\n\n    /**\n     * Adds a test to the benchmark suite.\n     *\n     * @memberOf Benchmark.Suite\n     * @param {string} name A name to identify the benchmark.\n     * @param {Function|string} fn The test to benchmark.\n     * @param {Object} [options={}] Options object.\n     * @returns {Object} The suite instance.\n     * @example\n     *\n     * // basic usage\n     * suite.add(fn);\n     *\n     * // or using a name first\n     * suite.add('foo', fn);\n     *\n     * // or with options\n     * suite.add('foo', fn, {\n     *   'onCycle': onCycle,\n     *   'onComplete': onComplete\n     * });\n     *\n     * // or name and options\n     * suite.add('foo', {\n     *   'fn': fn,\n     *   'onCycle': onCycle,\n     *   'onComplete': onComplete\n     * });\n     *\n     * // or options only\n     * suite.add({\n     *   'name': 'foo',\n     *   'fn': fn,\n     *   'onCycle': onCycle,\n     *   'onComplete': onComplete\n     * });\n     */\n    function add(name, fn, options) {\n      var suite = this,\n          bench = new Benchmark(name, fn, options),\n          event = Event({ 'type': 'add', 'target': bench });\n\n      if (suite.emit(event), !event.cancelled) {\n        suite.push(bench);\n      }\n      return suite;\n    }\n\n    /**\n     * Creates a new suite with cloned benchmarks.\n     *\n     * @name clone\n     * @memberOf Benchmark.Suite\n     * @param {Object} options Options object to overwrite cloned options.\n     * @returns {Object} The new suite instance.\n     */\n    function cloneSuite(options) {\n      var suite = this,\n          result = new suite.constructor(_.assign({}, suite.options, options));\n\n      // Copy own properties.\n      _.forOwn(suite, function(value, key) {\n        if (!_.has(result, key)) {\n          result[key] = value && _.isFunction(value.clone)\n            ? value.clone()\n            : cloneDeep(value);\n        }\n      });\n      return result;\n    }\n\n    /**\n     * An `Array#filter` like method.\n     *\n     * @name filter\n     * @memberOf Benchmark.Suite\n     * @param {Function|string} callback The function/alias called per iteration.\n     * @returns {Object} A new suite of benchmarks that passed callback filter.\n     */\n    function filterSuite(callback) {\n      var suite = this,\n          result = new suite.constructor(suite.options);\n\n      result.push.apply(result, filter(suite, callback));\n      return result;\n    }\n\n    /**\n     * Resets all benchmarks in the suite.\n     *\n     * @name reset\n     * @memberOf Benchmark.Suite\n     * @returns {Object} The suite instance.\n     */\n    function resetSuite() {\n      var event,\n          suite = this,\n          aborting = calledBy.abortSuite;\n\n      if (suite.running && !aborting) {\n        // No worries, `resetSuite()` is called within `abortSuite()`.\n        calledBy.resetSuite = true;\n        suite.abort();\n        delete calledBy.resetSuite;\n      }\n      // Reset if the state has changed.\n      else if ((suite.aborted || suite.running) &&\n          (suite.emit(event = Event('reset')), !event.cancelled)) {\n        suite.aborted = suite.running = false;\n        if (!aborting) {\n          invoke(suite, 'reset');\n        }\n      }\n      return suite;\n    }\n\n    /**\n     * Runs the suite.\n     *\n     * @name run\n     * @memberOf Benchmark.Suite\n     * @param {Object} [options={}] Options object.\n     * @returns {Object} The suite instance.\n     * @example\n     *\n     * // basic usage\n     * suite.run();\n     *\n     * // or with options\n     * suite.run({ 'async': true, 'queued': true });\n     */\n    function runSuite(options) {\n      var suite = this;\n\n      suite.reset();\n      suite.running = true;\n      options || (options = {});\n\n      invoke(suite, {\n        'name': 'run',\n        'args': options,\n        'queued': options.queued,\n        'onStart': function(event) {\n          suite.emit(event);\n        },\n        'onCycle': function(event) {\n          var bench = event.target;\n          if (bench.error) {\n            suite.emit({ 'type': 'error', 'target': bench });\n          }\n          suite.emit(event);\n          event.aborted = suite.aborted;\n        },\n        'onComplete': function(event) {\n          suite.running = false;\n          suite.emit(event);\n        }\n      });\n      return suite;\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Executes all registered listeners of the specified event type.\n     *\n     * @memberOf Benchmark, Benchmark.Suite\n     * @param {Object|string} type The event type or object.\n     * @param {...*} [args] Arguments to invoke the listener with.\n     * @returns {*} Returns the return value of the last listener executed.\n     */\n    function emit(type) {\n      var listeners,\n          object = this,\n          event = Event(type),\n          events = object.events,\n          args = (arguments[0] = event, arguments);\n\n      event.currentTarget || (event.currentTarget = object);\n      event.target || (event.target = object);\n      delete event.result;\n\n      if (events && (listeners = _.has(events, event.type) && events[event.type])) {\n        _.each(listeners.slice(), function(listener) {\n          if ((event.result = listener.apply(object, args)) === false) {\n            event.cancelled = true;\n          }\n          return !event.aborted;\n        });\n      }\n      return event.result;\n    }\n\n    /**\n     * Returns an array of event listeners for a given type that can be manipulated\n     * to add or remove listeners.\n     *\n     * @memberOf Benchmark, Benchmark.Suite\n     * @param {string} type The event type.\n     * @returns {Array} The listeners array.\n     */\n    function listeners(type) {\n      var object = this,\n          events = object.events || (object.events = {});\n\n      return _.has(events, type) ? events[type] : (events[type] = []);\n    }\n\n    /**\n     * Unregisters a listener for the specified event type(s),\n     * or unregisters all listeners for the specified event type(s),\n     * or unregisters all listeners for all event types.\n     *\n     * @memberOf Benchmark, Benchmark.Suite\n     * @param {string} [type] The event type.\n     * @param {Function} [listener] The function to unregister.\n     * @returns {Object} The current instance.\n     * @example\n     *\n     * // unregister a listener for an event type\n     * bench.off('cycle', listener);\n     *\n     * // unregister a listener for multiple event types\n     * bench.off('start cycle', listener);\n     *\n     * // unregister all listeners for an event type\n     * bench.off('cycle');\n     *\n     * // unregister all listeners for multiple event types\n     * bench.off('start cycle complete');\n     *\n     * // unregister all listeners for all event types\n     * bench.off();\n     */\n    function off(type, listener) {\n      var object = this,\n          events = object.events;\n\n      if (!events) {\n        return object;\n      }\n      _.each(type ? type.split(' ') : events, function(listeners, type) {\n        var index;\n        if (typeof listeners == 'string') {\n          type = listeners;\n          listeners = _.has(events, type) && events[type];\n        }\n        if (listeners) {\n          if (listener) {\n            index = _.indexOf(listeners, listener);\n            if (index > -1) {\n              listeners.splice(index, 1);\n            }\n          } else {\n            listeners.length = 0;\n          }\n        }\n      });\n      return object;\n    }\n\n    /**\n     * Registers a listener for the specified event type(s).\n     *\n     * @memberOf Benchmark, Benchmark.Suite\n     * @param {string} type The event type.\n     * @param {Function} listener The function to register.\n     * @returns {Object} The current instance.\n     * @example\n     *\n     * // register a listener for an event type\n     * bench.on('cycle', listener);\n     *\n     * // register a listener for multiple event types\n     * bench.on('start cycle', listener);\n     */\n    function on(type, listener) {\n      var object = this,\n          events = object.events || (object.events = {});\n\n      _.each(type.split(' '), function(type) {\n        (_.has(events, type)\n          ? events[type]\n          : (events[type] = [])\n        ).push(listener);\n      });\n      return object;\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Aborts the benchmark without recording times.\n     *\n     * @memberOf Benchmark\n     * @returns {Object} The benchmark instance.\n     */\n    function abort() {\n      var event,\n          bench = this,\n          resetting = calledBy.reset;\n\n      if (bench.running) {\n        event = Event('abort');\n        bench.emit(event);\n        if (!event.cancelled || resetting) {\n          // Avoid infinite recursion.\n          calledBy.abort = true;\n          bench.reset();\n          delete calledBy.abort;\n\n          if (support.timeout) {\n            clearTimeout(bench._timerId);\n            delete bench._timerId;\n          }\n          if (!resetting) {\n            bench.aborted = true;\n            bench.running = false;\n          }\n        }\n      }\n      return bench;\n    }\n\n    /**\n     * Creates a new benchmark using the same test and options.\n     *\n     * @memberOf Benchmark\n     * @param {Object} options Options object to overwrite cloned options.\n     * @returns {Object} The new benchmark instance.\n     * @example\n     *\n     * var bizarro = bench.clone({\n     *   'name': 'doppelganger'\n     * });\n     */\n    function clone(options) {\n      var bench = this,\n          result = new bench.constructor(_.assign({}, bench, options));\n\n      // Correct the `options` object.\n      result.options = _.assign({}, cloneDeep(bench.options), cloneDeep(options));\n\n      // Copy own custom properties.\n      _.forOwn(bench, function(value, key) {\n        if (!_.has(result, key)) {\n          result[key] = cloneDeep(value);\n        }\n      });\n\n      return result;\n    }\n\n    /**\n     * Determines if a benchmark is faster than another.\n     *\n     * @memberOf Benchmark\n     * @param {Object} other The benchmark to compare.\n     * @returns {number} Returns `-1` if slower, `1` if faster, and `0` if indeterminate.\n     */\n    function compare(other) {\n      var bench = this;\n\n      // Exit early if comparing the same benchmark.\n      if (bench == other) {\n        return 0;\n      }\n      var critical,\n          zStat,\n          sample1 = bench.stats.sample,\n          sample2 = other.stats.sample,\n          size1 = sample1.length,\n          size2 = sample2.length,\n          maxSize = max(size1, size2),\n          minSize = min(size1, size2),\n          u1 = getU(sample1, sample2),\n          u2 = getU(sample2, sample1),\n          u = min(u1, u2);\n\n      function getScore(xA, sampleB) {\n        return _.reduce(sampleB, function(total, xB) {\n          return total + (xB > xA ? 0 : xB < xA ? 1 : 0.5);\n        }, 0);\n      }\n\n      function getU(sampleA, sampleB) {\n        return _.reduce(sampleA, function(total, xA) {\n          return total + getScore(xA, sampleB);\n        }, 0);\n      }\n\n      function getZ(u) {\n        return (u - ((size1 * size2) / 2)) / sqrt((size1 * size2 * (size1 + size2 + 1)) / 12);\n      }\n      // Reject the null hypothesis the two samples come from the\n      // same population (i.e. have the same median) if...\n      if (size1 + size2 > 30) {\n        // ...the z-stat is greater than 1.96 or less than -1.96\n        // http://www.statisticslectures.com/topics/mannwhitneyu/\n        zStat = getZ(u);\n        return abs(zStat) > 1.96 ? (u == u1 ? 1 : -1) : 0;\n      }\n      // ...the U value is less than or equal the critical U value.\n      critical = maxSize < 5 || minSize < 3 ? 0 : uTable[maxSize][minSize - 3];\n      return u <= critical ? (u == u1 ? 1 : -1) : 0;\n    }\n\n    /**\n     * Reset properties and abort if running.\n     *\n     * @memberOf Benchmark\n     * @returns {Object} The benchmark instance.\n     */\n    function reset() {\n      var bench = this;\n      if (bench.running && !calledBy.abort) {\n        // No worries, `reset()` is called within `abort()`.\n        calledBy.reset = true;\n        bench.abort();\n        delete calledBy.reset;\n        return bench;\n      }\n      var event,\n          index = 0,\n          changes = [],\n          queue = [];\n\n      // A non-recursive solution to check if properties have changed.\n      // For more information see http://www.jslab.dk/articles/non.recursive.preorder.traversal.part4.\n      var data = {\n        'destination': bench,\n        'source': _.assign({}, cloneDeep(bench.constructor.prototype), cloneDeep(bench.options))\n      };\n\n      do {\n        _.forOwn(data.source, function(value, key) {\n          var changed,\n              destination = data.destination,\n              currValue = destination[key];\n\n          // Skip pseudo private properties like `_timerId` which could be a\n          // Java object in environments like RingoJS.\n          if (key.charAt(0) == '_') {\n            return;\n          }\n          if (value && typeof value == 'object') {\n            if (_.isArray(value)) {\n              // Check if an array value has changed to a non-array value.\n              if (!_.isArray(currValue)) {\n                changed = currValue = [];\n              }\n              // Check if an array has changed its length.\n              if (currValue.length != value.length) {\n                changed = currValue = currValue.slice(0, value.length);\n                currValue.length = value.length;\n              }\n            }\n            // Check if an object has changed to a non-object value.\n            else if (!currValue || typeof currValue != 'object') {\n              changed = currValue = {};\n            }\n            // Register a changed object.\n            if (changed) {\n              changes.push({ 'destination': destination, 'key': key, 'value': currValue });\n            }\n            queue.push({ 'destination': currValue, 'source': value });\n          }\n          // Register a changed primitive.\n          else if (value !== currValue && !(value == null || _.isFunction(value))) {\n            changes.push({ 'destination': destination, 'key': key, 'value': value });\n          }\n        });\n      }\n      while ((data = queue[index++]));\n\n      // If changed emit the `reset` event and if it isn't cancelled reset the benchmark.\n      if (changes.length && (bench.emit(event = Event('reset')), !event.cancelled)) {\n        _.each(changes, function(data) {\n          data.destination[data.key] = data.value;\n        });\n      }\n      return bench;\n    }\n\n    /**\n     * Displays relevant benchmark information when coerced to a string.\n     *\n     * @name toString\n     * @memberOf Benchmark\n     * @returns {string} A string representation of the benchmark instance.\n     */\n    function toStringBench() {\n      var bench = this,\n          error = bench.error,\n          hz = bench.hz,\n          id = bench.id,\n          stats = bench.stats,\n          size = stats.sample.length,\n          pm = '\\xb1',\n          result = bench.name || (_.isNaN(id) ? id : '<Test #' + id + '>');\n\n      if (error) {\n        var errorStr;\n        if (!_.isObject(error)) {\n          errorStr = String(error);\n        } else if (!_.isError(Error)) {\n          errorStr = join(error);\n        } else {\n          // Error#name and Error#message properties are non-enumerable.\n          errorStr = join(_.assign({ 'name': error.name, 'message': error.message }, error));\n        }\n        result += ': ' + errorStr;\n      }\n      else {\n        result += ' x ' + formatNumber(hz.toFixed(hz < 100 ? 2 : 0)) + ' ops/sec ' + pm +\n          stats.rme.toFixed(2) + '% (' + size + ' run' + (size == 1 ? '' : 's') + ' sampled)';\n      }\n      return result;\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Clocks the time taken to execute a test per cycle (secs).\n     *\n     * @private\n     * @param {Object} bench The benchmark instance.\n     * @returns {number} The time taken.\n     */\n    function clock() {\n      var options = Benchmark.options,\n          templateData = {},\n          timers = [{ 'ns': timer.ns, 'res': max(0.0015, getRes('ms')), 'unit': 'ms' }];\n\n      // Lazy define for hi-res timers.\n      clock = function(clone) {\n        var deferred;\n\n        if (clone instanceof Deferred) {\n          deferred = clone;\n          clone = deferred.benchmark;\n        }\n        var bench = clone._original,\n            stringable = isStringable(bench.fn),\n            count = bench.count = clone.count,\n            decompilable = stringable || (support.decompilation && (clone.setup !== _.noop || clone.teardown !== _.noop)),\n            id = bench.id,\n            name = bench.name || (typeof id == 'number' ? '<Test #' + id + '>' : id),\n            result = 0;\n\n        // Init `minTime` if needed.\n        clone.minTime = bench.minTime || (bench.minTime = bench.options.minTime = options.minTime);\n\n        // Compile in setup/teardown functions and the test loop.\n        // Create a new compiled test, instead of using the cached `bench.compiled`,\n        // to avoid potential engine optimizations enabled over the life of the test.\n        var funcBody = deferred\n          ? 'var d#=this,${fnArg}=d#,m#=d#.benchmark._original,f#=m#.fn,su#=m#.setup,td#=m#.teardown;' +\n            // When `deferred.cycles` is `0` then...\n            'if(!d#.cycles){' +\n            // set `deferred.fn`,\n            'd#.fn=function(){var ${fnArg}=d#;if(typeof f#==\"function\"){try{${fn}\\n}catch(e#){f#(d#)}}else{${fn}\\n}};' +\n            // set `deferred.teardown`,\n            'd#.teardown=function(){d#.cycles=0;if(typeof td#==\"function\"){try{${teardown}\\n}catch(e#){td#()}}else{${teardown}\\n}};' +\n            // execute the benchmark's `setup`,\n            'if(typeof su#==\"function\"){try{${setup}\\n}catch(e#){su#()}}else{${setup}\\n};' +\n            // start timer,\n            't#.start(d#);' +\n            // and then execute `deferred.fn` and return a dummy object.\n            '}d#.fn();return{uid:\"${uid}\"}'\n\n          : 'var r#,s#,m#=this,f#=m#.fn,i#=m#.count,n#=t#.ns;${setup}\\n${begin};' +\n            'while(i#--){${fn}\\n}${end};${teardown}\\nreturn{elapsed:r#,uid:\"${uid}\"}';\n\n        var compiled = bench.compiled = clone.compiled = createCompiled(bench, decompilable, deferred, funcBody),\n            isEmpty = !(templateData.fn || stringable);\n\n        try {\n          if (isEmpty) {\n            // Firefox may remove dead code from `Function#toString` results.\n            // For more information see http://bugzil.la/536085.\n            throw new Error('The test \"' + name + '\" is empty. This may be the result of dead code removal.');\n          }\n          else if (!deferred) {\n            // Pretest to determine if compiled code exits early, usually by a\n            // rogue `return` statement, by checking for a return object with the uid.\n            bench.count = 1;\n            compiled = decompilable && (compiled.call(bench, context, timer) || {}).uid == templateData.uid && compiled;\n            bench.count = count;\n          }\n        } catch(e) {\n          compiled = null;\n          clone.error = e || new Error(String(e));\n          bench.count = count;\n        }\n        // Fallback when a test exits early or errors during pretest.\n        if (!compiled && !deferred && !isEmpty) {\n          funcBody = (\n            stringable || (decompilable && !clone.error)\n              ? 'function f#(){${fn}\\n}var r#,s#,m#=this,i#=m#.count'\n              : 'var r#,s#,m#=this,f#=m#.fn,i#=m#.count'\n            ) +\n            ',n#=t#.ns;${setup}\\n${begin};m#.f#=f#;while(i#--){m#.f#()}${end};' +\n            'delete m#.f#;${teardown}\\nreturn{elapsed:r#}';\n\n          compiled = createCompiled(bench, decompilable, deferred, funcBody);\n\n          try {\n            // Pretest one more time to check for errors.\n            bench.count = 1;\n            compiled.call(bench, context, timer);\n            bench.count = count;\n            delete clone.error;\n          }\n          catch(e) {\n            bench.count = count;\n            if (!clone.error) {\n              clone.error = e || new Error(String(e));\n            }\n          }\n        }\n        // If no errors run the full test loop.\n        if (!clone.error) {\n          compiled = bench.compiled = clone.compiled = createCompiled(bench, decompilable, deferred, funcBody);\n          result = compiled.call(deferred || bench, context, timer).elapsed;\n        }\n        return result;\n      };\n\n      /*----------------------------------------------------------------------*/\n\n      /**\n       * Creates a compiled function from the given function `body`.\n       */\n      function createCompiled(bench, decompilable, deferred, body) {\n        var fn = bench.fn,\n            fnArg = deferred ? getFirstArgument(fn) || 'deferred' : '';\n\n        templateData.uid = uid + uidCounter++;\n\n        _.assign(templateData, {\n          'setup': decompilable ? getSource(bench.setup) : interpolate('m#.setup()'),\n          'fn': decompilable ? getSource(fn) : interpolate('m#.fn(' + fnArg + ')'),\n          'fnArg': fnArg,\n          'teardown': decompilable ? getSource(bench.teardown) : interpolate('m#.teardown()')\n        });\n\n        // Use API of chosen timer.\n        if (timer.unit == 'ns') {\n          _.assign(templateData, {\n            'begin': interpolate('s#=n#()'),\n            'end': interpolate('r#=n#(s#);r#=r#[0]+(r#[1]/1e9)')\n          });\n        }\n        else if (timer.unit == 'us') {\n          if (timer.ns.stop) {\n            _.assign(templateData, {\n              'begin': interpolate('s#=n#.start()'),\n              'end': interpolate('r#=n#.microseconds()/1e6')\n            });\n          } else {\n            _.assign(templateData, {\n              'begin': interpolate('s#=n#()'),\n              'end': interpolate('r#=(n#()-s#)/1e6')\n            });\n          }\n        }\n        else if (timer.ns.now) {\n          _.assign(templateData, {\n            'begin': interpolate('s#=n#.now()'),\n            'end': interpolate('r#=(n#.now()-s#)/1e3')\n          });\n        }\n        else {\n          _.assign(templateData, {\n            'begin': interpolate('s#=new n#().getTime()'),\n            'end': interpolate('r#=(new n#().getTime()-s#)/1e3')\n          });\n        }\n        // Define `timer` methods.\n        timer.start = createFunction(\n          interpolate('o#'),\n          interpolate('var n#=this.ns,${begin};o#.elapsed=0;o#.timeStamp=s#')\n        );\n\n        timer.stop = createFunction(\n          interpolate('o#'),\n          interpolate('var n#=this.ns,s#=o#.timeStamp,${end};o#.elapsed=r#')\n        );\n\n        // Create compiled test.\n        return createFunction(\n          interpolate('window,t#'),\n          'var global = window, clearTimeout = global.clearTimeout, setTimeout = global.setTimeout;\\n' +\n          interpolate(body)\n        );\n      }\n\n      /**\n       * Gets the current timer's minimum resolution (secs).\n       */\n      function getRes(unit) {\n        var measured,\n            begin,\n            count = 30,\n            divisor = 1e3,\n            ns = timer.ns,\n            sample = [];\n\n        // Get average smallest measurable time.\n        while (count--) {\n          if (unit == 'us') {\n            divisor = 1e6;\n            if (ns.stop) {\n              ns.start();\n              while (!(measured = ns.microseconds())) {}\n            } else {\n              begin = ns();\n              while (!(measured = ns() - begin)) {}\n            }\n          }\n          else if (unit == 'ns') {\n            divisor = 1e9;\n            begin = (begin = ns())[0] + (begin[1] / divisor);\n            while (!(measured = ((measured = ns())[0] + (measured[1] / divisor)) - begin)) {}\n            divisor = 1;\n          }\n          else if (ns.now) {\n            begin = ns.now();\n            while (!(measured = ns.now() - begin)) {}\n          }\n          else {\n            begin = new ns().getTime();\n            while (!(measured = new ns().getTime() - begin)) {}\n          }\n          // Check for broken timers.\n          if (measured > 0) {\n            sample.push(measured);\n          } else {\n            sample.push(Infinity);\n            break;\n          }\n        }\n        // Convert to seconds.\n        return getMean(sample) / divisor;\n      }\n\n      /**\n       * Interpolates a given template string.\n       */\n      function interpolate(string) {\n        // Replaces all occurrences of `#` with a unique number and template tokens with content.\n        return _.template(string.replace(/\\#/g, /\\d+/.exec(templateData.uid)))(templateData);\n      }\n\n      /*----------------------------------------------------------------------*/\n\n      // Detect Chrome's microsecond timer:\n      // enable benchmarking via the --enable-benchmarking command\n      // line switch in at least Chrome 7 to use chrome.Interval\n      try {\n        if ((timer.ns = new (context.chrome || context.chromium).Interval)) {\n          timers.push({ 'ns': timer.ns, 'res': getRes('us'), 'unit': 'us' });\n        }\n      } catch(e) {}\n\n      // Detect Node.js's nanosecond resolution timer available in Node.js >= 0.8.\n      if (processObject && typeof (timer.ns = processObject.hrtime) == 'function') {\n        timers.push({ 'ns': timer.ns, 'res': getRes('ns'), 'unit': 'ns' });\n      }\n      // Detect Wade Simmons' Node.js `microtime` module.\n      if (microtimeObject && typeof (timer.ns = microtimeObject.now) == 'function') {\n        timers.push({ 'ns': timer.ns,  'res': getRes('us'), 'unit': 'us' });\n      }\n      // Pick timer with highest resolution.\n      timer = _.minBy(timers, 'res');\n\n      // Error if there are no working timers.\n      if (timer.res == Infinity) {\n        throw new Error('Benchmark.js was unable to find a working timer.');\n      }\n      // Resolve time span required to achieve a percent uncertainty of at most 1%.\n      // For more information see http://spiff.rit.edu/classes/phys273/uncert/uncert.html.\n      options.minTime || (options.minTime = max(timer.res / 2 / 0.01, 0.05));\n      return clock.apply(null, arguments);\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Computes stats on benchmark results.\n     *\n     * @private\n     * @param {Object} bench The benchmark instance.\n     * @param {Object} options The options object.\n     */\n    function compute(bench, options) {\n      options || (options = {});\n\n      var async = options.async,\n          elapsed = 0,\n          initCount = bench.initCount,\n          minSamples = bench.minSamples,\n          queue = [],\n          sample = bench.stats.sample;\n\n      /**\n       * Adds a clone to the queue.\n       */\n      function enqueue() {\n        queue.push(bench.clone({\n          '_original': bench,\n          'events': {\n            'abort': [update],\n            'cycle': [update],\n            'error': [update],\n            'start': [update]\n          }\n        }));\n      }\n\n      /**\n       * Updates the clone/original benchmarks to keep their data in sync.\n       */\n      function update(event) {\n        var clone = this,\n            type = event.type;\n\n        if (bench.running) {\n          if (type == 'start') {\n            // Note: `clone.minTime` prop is inited in `clock()`.\n            clone.count = bench.initCount;\n          }\n          else {\n            if (type == 'error') {\n              bench.error = clone.error;\n            }\n            if (type == 'abort') {\n              bench.abort();\n              bench.emit('cycle');\n            } else {\n              event.currentTarget = event.target = bench;\n              bench.emit(event);\n            }\n          }\n        } else if (bench.aborted) {\n          // Clear abort listeners to avoid triggering bench's abort/cycle again.\n          clone.events.abort.length = 0;\n          clone.abort();\n        }\n      }\n\n      /**\n       * Determines if more clones should be queued or if cycling should stop.\n       */\n      function evaluate(event) {\n        var critical,\n            df,\n            mean,\n            moe,\n            rme,\n            sd,\n            sem,\n            variance,\n            clone = event.target,\n            done = bench.aborted,\n            now = _.now(),\n            size = sample.push(clone.times.period),\n            maxedOut = size >= minSamples && (elapsed += now - clone.times.timeStamp) / 1e3 > bench.maxTime,\n            times = bench.times,\n            varOf = function(sum, x) { return sum + pow(x - mean, 2); };\n\n        // Exit early for aborted or unclockable tests.\n        if (done || clone.hz == Infinity) {\n          maxedOut = !(size = sample.length = queue.length = 0);\n        }\n\n        if (!done) {\n          // Compute the sample mean (estimate of the population mean).\n          mean = getMean(sample);\n          // Compute the sample variance (estimate of the population variance).\n          variance = _.reduce(sample, varOf, 0) / (size - 1) || 0;\n          // Compute the sample standard deviation (estimate of the population standard deviation).\n          sd = sqrt(variance);\n          // Compute the standard error of the mean (a.k.a. the standard deviation of the sampling distribution of the sample mean).\n          sem = sd / sqrt(size);\n          // Compute the degrees of freedom.\n          df = size - 1;\n          // Compute the critical value.\n          critical = tTable[Math.round(df) || 1] || tTable.infinity;\n          // Compute the margin of error.\n          moe = sem * critical;\n          // Compute the relative margin of error.\n          rme = (moe / mean) * 100 || 0;\n\n          _.assign(bench.stats, {\n            'deviation': sd,\n            'mean': mean,\n            'moe': moe,\n            'rme': rme,\n            'sem': sem,\n            'variance': variance\n          });\n\n          // Abort the cycle loop when the minimum sample size has been collected\n          // and the elapsed time exceeds the maximum time allowed per benchmark.\n          // We don't count cycle delays toward the max time because delays may be\n          // increased by browsers that clamp timeouts for inactive tabs. For more\n          // information see https://developer.mozilla.org/en/window.setTimeout#Inactive_tabs.\n          if (maxedOut) {\n            // Reset the `initCount` in case the benchmark is rerun.\n            bench.initCount = initCount;\n            bench.running = false;\n            done = true;\n            times.elapsed = (now - times.timeStamp) / 1e3;\n          }\n          if (bench.hz != Infinity) {\n            bench.hz = 1 / mean;\n            times.cycle = mean * bench.count;\n            times.period = mean;\n          }\n        }\n        // If time permits, increase sample size to reduce the margin of error.\n        if (queue.length < 2 && !maxedOut) {\n          enqueue();\n        }\n        // Abort the `invoke` cycle when done.\n        event.aborted = done;\n      }\n\n      // Init queue and begin.\n      enqueue();\n      invoke(queue, {\n        'name': 'run',\n        'args': { 'async': async },\n        'queued': true,\n        'onCycle': evaluate,\n        'onComplete': function() { bench.emit('complete'); }\n      });\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Cycles a benchmark until a run `count` can be established.\n     *\n     * @private\n     * @param {Object} clone The cloned benchmark instance.\n     * @param {Object} options The options object.\n     */\n    function cycle(clone, options) {\n      options || (options = {});\n\n      var deferred;\n      if (clone instanceof Deferred) {\n        deferred = clone;\n        clone = clone.benchmark;\n      }\n      var clocked,\n          cycles,\n          divisor,\n          event,\n          minTime,\n          period,\n          async = options.async,\n          bench = clone._original,\n          count = clone.count,\n          times = clone.times;\n\n      // Continue, if not aborted between cycles.\n      if (clone.running) {\n        // `minTime` is set to `Benchmark.options.minTime` in `clock()`.\n        cycles = ++clone.cycles;\n        clocked = deferred ? deferred.elapsed : clock(clone);\n        minTime = clone.minTime;\n\n        if (cycles > bench.cycles) {\n          bench.cycles = cycles;\n        }\n        if (clone.error) {\n          event = Event('error');\n          event.message = clone.error;\n          clone.emit(event);\n          if (!event.cancelled) {\n            clone.abort();\n          }\n        }\n      }\n      // Continue, if not errored.\n      if (clone.running) {\n        // Compute the time taken to complete last test cycle.\n        bench.times.cycle = times.cycle = clocked;\n        // Compute the seconds per operation.\n        period = bench.times.period = times.period = clocked / count;\n        // Compute the ops per second.\n        bench.hz = clone.hz = 1 / period;\n        // Avoid working our way up to this next time.\n        bench.initCount = clone.initCount = count;\n        // Do we need to do another cycle?\n        clone.running = clocked < minTime;\n\n        if (clone.running) {\n          // Tests may clock at `0` when `initCount` is a small number,\n          // to avoid that we set its count to something a bit higher.\n          if (!clocked && (divisor = divisors[clone.cycles]) != null) {\n            count = floor(4e6 / divisor);\n          }\n          // Calculate how many more iterations it will take to achieve the `minTime`.\n          if (count <= clone.count) {\n            count += Math.ceil((minTime - clocked) / period);\n          }\n          clone.running = count != Infinity;\n        }\n      }\n      // Should we exit early?\n      event = Event('cycle');\n      clone.emit(event);\n      if (event.aborted) {\n        clone.abort();\n      }\n      // Figure out what to do next.\n      if (clone.running) {\n        // Start a new cycle.\n        clone.count = count;\n        if (deferred) {\n          clone.compiled.call(deferred, context, timer);\n        } else if (async) {\n          delay(clone, function() { cycle(clone, options); });\n        } else {\n          cycle(clone);\n        }\n      }\n      else {\n        // Fix TraceMonkey bug associated with clock fallbacks.\n        // For more information see http://bugzil.la/509069.\n        if (support.browser) {\n          runScript(uid + '=1;delete ' + uid);\n        }\n        // We're done.\n        clone.emit('complete');\n      }\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Runs the benchmark.\n     *\n     * @memberOf Benchmark\n     * @param {Object} [options={}] Options object.\n     * @returns {Object} The benchmark instance.\n     * @example\n     *\n     * // basic usage\n     * bench.run();\n     *\n     * // or with options\n     * bench.run({ 'async': true });\n     */\n    function run(options) {\n      var bench = this,\n          event = Event('start');\n\n      // Set `running` to `false` so `reset()` won't call `abort()`.\n      bench.running = false;\n      bench.reset();\n      bench.running = true;\n\n      bench.count = bench.initCount;\n      bench.times.timeStamp = _.now();\n      bench.emit(event);\n\n      if (!event.cancelled) {\n        options = { 'async': ((options = options && options.async) == null ? bench.async : options) && support.timeout };\n\n        // For clones created within `compute()`.\n        if (bench._original) {\n          if (bench.defer) {\n            Deferred(bench);\n          } else {\n            cycle(bench, options);\n          }\n        }\n        // For original benchmarks.\n        else {\n          compute(bench, options);\n        }\n      }\n      return bench;\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    // Firefox 1 erroneously defines variable and argument names of functions on\n    // the function itself as non-configurable properties with `undefined` values.\n    // The bugginess continues as the `Benchmark` constructor has an argument\n    // named `options` and Firefox 1 will not assign a value to `Benchmark.options`,\n    // making it non-writable in the process, unless it is the first property\n    // assigned by for-in loop of `_.assign()`.\n    _.assign(Benchmark, {\n\n      /**\n       * The default options copied by benchmark instances.\n       *\n       * @static\n       * @memberOf Benchmark\n       * @type Object\n       */\n      'options': {\n\n        /**\n         * A flag to indicate that benchmark cycles will execute asynchronously\n         * by default.\n         *\n         * @memberOf Benchmark.options\n         * @type boolean\n         */\n        'async': false,\n\n        /**\n         * A flag to indicate that the benchmark clock is deferred.\n         *\n         * @memberOf Benchmark.options\n         * @type boolean\n         */\n        'defer': false,\n\n        /**\n         * The delay between test cycles (secs).\n         * @memberOf Benchmark.options\n         * @type number\n         */\n        'delay': 0.005,\n\n        /**\n         * Displayed by `Benchmark#toString` when a `name` is not available\n         * (auto-generated if absent).\n         *\n         * @memberOf Benchmark.options\n         * @type string\n         */\n        'id': undefined,\n\n        /**\n         * The default number of times to execute a test on a benchmark's first cycle.\n         *\n         * @memberOf Benchmark.options\n         * @type number\n         */\n        'initCount': 1,\n\n        /**\n         * The maximum time a benchmark is allowed to run before finishing (secs).\n         *\n         * Note: Cycle delays aren't counted toward the maximum time.\n         *\n         * @memberOf Benchmark.options\n         * @type number\n         */\n        'maxTime': 5,\n\n        /**\n         * The minimum sample size required to perform statistical analysis.\n         *\n         * @memberOf Benchmark.options\n         * @type number\n         */\n        'minSamples': 5,\n\n        /**\n         * The time needed to reduce the percent uncertainty of measurement to 1% (secs).\n         *\n         * @memberOf Benchmark.options\n         * @type number\n         */\n        'minTime': 0,\n\n        /**\n         * The name of the benchmark.\n         *\n         * @memberOf Benchmark.options\n         * @type string\n         */\n        'name': undefined,\n\n        /**\n         * An event listener called when the benchmark is aborted.\n         *\n         * @memberOf Benchmark.options\n         * @type Function\n         */\n        'onAbort': undefined,\n\n        /**\n         * An event listener called when the benchmark completes running.\n         *\n         * @memberOf Benchmark.options\n         * @type Function\n         */\n        'onComplete': undefined,\n\n        /**\n         * An event listener called after each run cycle.\n         *\n         * @memberOf Benchmark.options\n         * @type Function\n         */\n        'onCycle': undefined,\n\n        /**\n         * An event listener called when a test errors.\n         *\n         * @memberOf Benchmark.options\n         * @type Function\n         */\n        'onError': undefined,\n\n        /**\n         * An event listener called when the benchmark is reset.\n         *\n         * @memberOf Benchmark.options\n         * @type Function\n         */\n        'onReset': undefined,\n\n        /**\n         * An event listener called when the benchmark starts running.\n         *\n         * @memberOf Benchmark.options\n         * @type Function\n         */\n        'onStart': undefined\n      },\n\n      /**\n       * Platform object with properties describing things like browser name,\n       * version, and operating system. See [`platform.js`](https://mths.be/platform).\n       *\n       * @static\n       * @memberOf Benchmark\n       * @type Object\n       */\n      'platform': context.platform || require('platform') || ({\n        'description': context.navigator && context.navigator.userAgent || null,\n        'layout': null,\n        'product': null,\n        'name': null,\n        'manufacturer': null,\n        'os': null,\n        'prerelease': null,\n        'version': null,\n        'toString': function() {\n          return this.description || '';\n        }\n      }),\n\n      /**\n       * The semantic version number.\n       *\n       * @static\n       * @memberOf Benchmark\n       * @type string\n       */\n      'version': '2.1.2'\n    });\n\n    _.assign(Benchmark, {\n      'filter': filter,\n      'formatNumber': formatNumber,\n      'invoke': invoke,\n      'join': join,\n      'runInContext': runInContext,\n      'support': support\n    });\n\n    // Add lodash methods to Benchmark.\n    _.each(['each', 'forEach', 'forOwn', 'has', 'indexOf', 'map', 'reduce'], function(methodName) {\n      Benchmark[methodName] = _[methodName];\n    });\n\n    /*------------------------------------------------------------------------*/\n\n    _.assign(Benchmark.prototype, {\n\n      /**\n       * The number of times a test was executed.\n       *\n       * @memberOf Benchmark\n       * @type number\n       */\n      'count': 0,\n\n      /**\n       * The number of cycles performed while benchmarking.\n       *\n       * @memberOf Benchmark\n       * @type number\n       */\n      'cycles': 0,\n\n      /**\n       * The number of executions per second.\n       *\n       * @memberOf Benchmark\n       * @type number\n       */\n      'hz': 0,\n\n      /**\n       * The compiled test function.\n       *\n       * @memberOf Benchmark\n       * @type {Function|string}\n       */\n      'compiled': undefined,\n\n      /**\n       * The error object if the test failed.\n       *\n       * @memberOf Benchmark\n       * @type Object\n       */\n      'error': undefined,\n\n      /**\n       * The test to benchmark.\n       *\n       * @memberOf Benchmark\n       * @type {Function|string}\n       */\n      'fn': undefined,\n\n      /**\n       * A flag to indicate if the benchmark is aborted.\n       *\n       * @memberOf Benchmark\n       * @type boolean\n       */\n      'aborted': false,\n\n      /**\n       * A flag to indicate if the benchmark is running.\n       *\n       * @memberOf Benchmark\n       * @type boolean\n       */\n      'running': false,\n\n      /**\n       * Compiled into the test and executed immediately **before** the test loop.\n       *\n       * @memberOf Benchmark\n       * @type {Function|string}\n       * @example\n       *\n       * // basic usage\n       * var bench = Benchmark({\n       *   'setup': function() {\n       *     var c = this.count,\n       *         element = document.getElementById('container');\n       *     while (c--) {\n       *       element.appendChild(document.createElement('div'));\n       *     }\n       *   },\n       *   'fn': function() {\n       *     element.removeChild(element.lastChild);\n       *   }\n       * });\n       *\n       * // compiles to something like:\n       * var c = this.count,\n       *     element = document.getElementById('container');\n       * while (c--) {\n       *   element.appendChild(document.createElement('div'));\n       * }\n       * var start = new Date;\n       * while (count--) {\n       *   element.removeChild(element.lastChild);\n       * }\n       * var end = new Date - start;\n       *\n       * // or using strings\n       * var bench = Benchmark({\n       *   'setup': '\\\n       *     var a = 0;\\n\\\n       *     (function() {\\n\\\n       *       (function() {\\n\\\n       *         (function() {',\n       *   'fn': 'a += 1;',\n       *   'teardown': '\\\n       *          }())\\n\\\n       *        }())\\n\\\n       *      }())'\n       * });\n       *\n       * // compiles to something like:\n       * var a = 0;\n       * (function() {\n       *   (function() {\n       *     (function() {\n       *       var start = new Date;\n       *       while (count--) {\n       *         a += 1;\n       *       }\n       *       var end = new Date - start;\n       *     }())\n       *   }())\n       * }())\n       */\n      'setup': _.noop,\n\n      /**\n       * Compiled into the test and executed immediately **after** the test loop.\n       *\n       * @memberOf Benchmark\n       * @type {Function|string}\n       */\n      'teardown': _.noop,\n\n      /**\n       * An object of stats including mean, margin or error, and standard deviation.\n       *\n       * @memberOf Benchmark\n       * @type Object\n       */\n      'stats': {\n\n        /**\n         * The margin of error.\n         *\n         * @memberOf Benchmark#stats\n         * @type number\n         */\n        'moe': 0,\n\n        /**\n         * The relative margin of error (expressed as a percentage of the mean).\n         *\n         * @memberOf Benchmark#stats\n         * @type number\n         */\n        'rme': 0,\n\n        /**\n         * The standard error of the mean.\n         *\n         * @memberOf Benchmark#stats\n         * @type number\n         */\n        'sem': 0,\n\n        /**\n         * The sample standard deviation.\n         *\n         * @memberOf Benchmark#stats\n         * @type number\n         */\n        'deviation': 0,\n\n        /**\n         * The sample arithmetic mean (secs).\n         *\n         * @memberOf Benchmark#stats\n         * @type number\n         */\n        'mean': 0,\n\n        /**\n         * The array of sampled periods.\n         *\n         * @memberOf Benchmark#stats\n         * @type Array\n         */\n        'sample': [],\n\n        /**\n         * The sample variance.\n         *\n         * @memberOf Benchmark#stats\n         * @type number\n         */\n        'variance': 0\n      },\n\n      /**\n       * An object of timing data including cycle, elapsed, period, start, and stop.\n       *\n       * @memberOf Benchmark\n       * @type Object\n       */\n      'times': {\n\n        /**\n         * The time taken to complete the last cycle (secs).\n         *\n         * @memberOf Benchmark#times\n         * @type number\n         */\n        'cycle': 0,\n\n        /**\n         * The time taken to complete the benchmark (secs).\n         *\n         * @memberOf Benchmark#times\n         * @type number\n         */\n        'elapsed': 0,\n\n        /**\n         * The time taken to execute the test once (secs).\n         *\n         * @memberOf Benchmark#times\n         * @type number\n         */\n        'period': 0,\n\n        /**\n         * A timestamp of when the benchmark started (ms).\n         *\n         * @memberOf Benchmark#times\n         * @type number\n         */\n        'timeStamp': 0\n      }\n    });\n\n    _.assign(Benchmark.prototype, {\n      'abort': abort,\n      'clone': clone,\n      'compare': compare,\n      'emit': emit,\n      'listeners': listeners,\n      'off': off,\n      'on': on,\n      'reset': reset,\n      'run': run,\n      'toString': toStringBench\n    });\n\n    /*------------------------------------------------------------------------*/\n\n    _.assign(Deferred.prototype, {\n\n      /**\n       * The deferred benchmark instance.\n       *\n       * @memberOf Benchmark.Deferred\n       * @type Object\n       */\n      'benchmark': null,\n\n      /**\n       * The number of deferred cycles performed while benchmarking.\n       *\n       * @memberOf Benchmark.Deferred\n       * @type number\n       */\n      'cycles': 0,\n\n      /**\n       * The time taken to complete the deferred benchmark (secs).\n       *\n       * @memberOf Benchmark.Deferred\n       * @type number\n       */\n      'elapsed': 0,\n\n      /**\n       * A timestamp of when the deferred benchmark started (ms).\n       *\n       * @memberOf Benchmark.Deferred\n       * @type number\n       */\n      'timeStamp': 0\n    });\n\n    _.assign(Deferred.prototype, {\n      'resolve': resolve\n    });\n\n    /*------------------------------------------------------------------------*/\n\n    _.assign(Event.prototype, {\n\n      /**\n       * A flag to indicate if the emitters listener iteration is aborted.\n       *\n       * @memberOf Benchmark.Event\n       * @type boolean\n       */\n      'aborted': false,\n\n      /**\n       * A flag to indicate if the default action is cancelled.\n       *\n       * @memberOf Benchmark.Event\n       * @type boolean\n       */\n      'cancelled': false,\n\n      /**\n       * The object whose listeners are currently being processed.\n       *\n       * @memberOf Benchmark.Event\n       * @type Object\n       */\n      'currentTarget': undefined,\n\n      /**\n       * The return value of the last executed listener.\n       *\n       * @memberOf Benchmark.Event\n       * @type Mixed\n       */\n      'result': undefined,\n\n      /**\n       * The object to which the event was originally emitted.\n       *\n       * @memberOf Benchmark.Event\n       * @type Object\n       */\n      'target': undefined,\n\n      /**\n       * A timestamp of when the event was created (ms).\n       *\n       * @memberOf Benchmark.Event\n       * @type number\n       */\n      'timeStamp': 0,\n\n      /**\n       * The event type.\n       *\n       * @memberOf Benchmark.Event\n       * @type string\n       */\n      'type': ''\n    });\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * The default options copied by suite instances.\n     *\n     * @static\n     * @memberOf Benchmark.Suite\n     * @type Object\n     */\n    Suite.options = {\n\n      /**\n       * The name of the suite.\n       *\n       * @memberOf Benchmark.Suite.options\n       * @type string\n       */\n      'name': undefined\n    };\n\n    /*------------------------------------------------------------------------*/\n\n    _.assign(Suite.prototype, {\n\n      /**\n       * The number of benchmarks in the suite.\n       *\n       * @memberOf Benchmark.Suite\n       * @type number\n       */\n      'length': 0,\n\n      /**\n       * A flag to indicate if the suite is aborted.\n       *\n       * @memberOf Benchmark.Suite\n       * @type boolean\n       */\n      'aborted': false,\n\n      /**\n       * A flag to indicate if the suite is running.\n       *\n       * @memberOf Benchmark.Suite\n       * @type boolean\n       */\n      'running': false\n    });\n\n    _.assign(Suite.prototype, {\n      'abort': abortSuite,\n      'add': add,\n      'clone': cloneSuite,\n      'emit': emit,\n      'filter': filterSuite,\n      'join': arrayRef.join,\n      'listeners': listeners,\n      'off': off,\n      'on': on,\n      'pop': arrayRef.pop,\n      'push': push,\n      'reset': resetSuite,\n      'run': runSuite,\n      'reverse': arrayRef.reverse,\n      'shift': shift,\n      'slice': slice,\n      'sort': arrayRef.sort,\n      'splice': arrayRef.splice,\n      'unshift': unshift\n    });\n\n    /*------------------------------------------------------------------------*/\n\n    // Expose Deferred, Event, and Suite.\n    _.assign(Benchmark, {\n      'Deferred': Deferred,\n      'Event': Event,\n      'Suite': Suite\n    });\n\n    /*------------------------------------------------------------------------*/\n\n    // Add lodash methods as Suite methods.\n    _.each(['each', 'forEach', 'indexOf', 'map', 'reduce'], function(methodName) {\n      var func = _[methodName];\n      Suite.prototype[methodName] = function() {\n        var args = [this];\n        push.apply(args, arguments);\n        return func.apply(_, args);\n      };\n    });\n\n    // Avoid array-like object bugs with `Array#shift` and `Array#splice`\n    // in Firefox < 10 and IE < 9.\n    _.each(['pop', 'shift', 'splice'], function(methodName) {\n      var func = arrayRef[methodName];\n\n      Suite.prototype[methodName] = function() {\n        var value = this,\n            result = func.apply(value, arguments);\n\n        if (value.length === 0) {\n          delete value[0];\n        }\n        return result;\n      };\n    });\n\n    // Avoid buggy `Array#unshift` in IE < 8 which doesn't return the new\n    // length of the array.\n    Suite.prototype.unshift = function() {\n      var value = this;\n      unshift.apply(value, arguments);\n      return value.length;\n    };\n\n    return Benchmark;\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  // Export Benchmark.\n  // Some AMD build optimizers, like r.js, check for condition patterns like the following:\n  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {\n    // Define as an anonymous module so, through path mapping, it can be aliased.\n    define(['lodash', 'platform'], function(_, platform) {\n      return runInContext({\n        '_': _,\n        'platform': platform\n      });\n    });\n  }\n  else {\n    var Benchmark = runInContext();\n\n    // Check for `exports` after `define` in case a build optimizer adds an `exports` object.\n    if (freeExports && freeModule) {\n      // Export for Node.js.\n      if (moduleExports) {\n        (freeModule.exports = Benchmark).Benchmark = Benchmark;\n      }\n      // Export for CommonJS support.\n      freeExports.Benchmark = Benchmark;\n    }\n    else {\n      // Export to the global object.\n      root.Benchmark = Benchmark;\n    }\n  }\n}.call(this));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/benchmark/benchmark.js\n// module id = 29\n// module chunks = 0","/*!\r\n * Platform.js <https://mths.be/platform>\r\n * Copyright 2014-2016 Benjamin Tan <https://demoneaux.github.io/>\r\n * Copyright 2011-2013 John-David Dalton <http://allyoucanleet.com/>\r\n * Available under MIT license <https://mths.be/mit>\r\n */\r\n;(function() {\r\n  'use strict';\r\n\r\n  /** Used to determine if values are of the language type `Object`. */\r\n  var objectTypes = {\r\n    'function': true,\r\n    'object': true\r\n  };\r\n\r\n  /** Used as a reference to the global object. */\r\n  var root = (objectTypes[typeof window] && window) || this;\r\n\r\n  /** Backup possible global object. */\r\n  var oldRoot = root;\r\n\r\n  /** Detect free variable `exports`. */\r\n  var freeExports = objectTypes[typeof exports] && exports;\r\n\r\n  /** Detect free variable `module`. */\r\n  var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;\r\n\r\n  /** Detect free variable `global` from Node.js or Browserified code and use it as `root`. */\r\n  var freeGlobal = freeExports && freeModule && typeof global == 'object' && global;\r\n  if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal)) {\r\n    root = freeGlobal;\r\n  }\r\n\r\n  /**\r\n   * Used as the maximum length of an array-like object.\r\n   * See the [ES6 spec](http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength)\r\n   * for more details.\r\n   */\r\n  var maxSafeInteger = Math.pow(2, 53) - 1;\r\n\r\n  /** Regular expression to detect Opera. */\r\n  var reOpera = /\\bOpera/;\r\n\r\n  /** Possible global object. */\r\n  var thisBinding = this;\r\n\r\n  /** Used for native method references. */\r\n  var objectProto = Object.prototype;\r\n\r\n  /** Used to check for own properties of an object. */\r\n  var hasOwnProperty = objectProto.hasOwnProperty;\r\n\r\n  /** Used to resolve the internal `[[Class]]` of values. */\r\n  var toString = objectProto.toString;\r\n\r\n  /*--------------------------------------------------------------------------*/\r\n\r\n  /**\r\n   * Capitalizes a string value.\r\n   *\r\n   * @private\r\n   * @param {string} string The string to capitalize.\r\n   * @returns {string} The capitalized string.\r\n   */\r\n  function capitalize(string) {\r\n    string = String(string);\r\n    return string.charAt(0).toUpperCase() + string.slice(1);\r\n  }\r\n\r\n  /**\r\n   * A utility function to clean up the OS name.\r\n   *\r\n   * @private\r\n   * @param {string} os The OS name to clean up.\r\n   * @param {string} [pattern] A `RegExp` pattern matching the OS name.\r\n   * @param {string} [label] A label for the OS.\r\n   */\r\n  function cleanupOS(os, pattern, label) {\r\n    // Platform tokens are defined at:\r\n    // http://msdn.microsoft.com/en-us/library/ms537503(VS.85).aspx\r\n    // http://web.archive.org/web/20081122053950/http://msdn.microsoft.com/en-us/library/ms537503(VS.85).aspx\r\n    var data = {\r\n      '10.0': '10',\r\n      '6.4':  '10 Technical Preview',\r\n      '6.3':  '8.1',\r\n      '6.2':  '8',\r\n      '6.1':  'Server 2008 R2 / 7',\r\n      '6.0':  'Server 2008 / Vista',\r\n      '5.2':  'Server 2003 / XP 64-bit',\r\n      '5.1':  'XP',\r\n      '5.01': '2000 SP1',\r\n      '5.0':  '2000',\r\n      '4.0':  'NT',\r\n      '4.90': 'ME'\r\n    };\r\n    // Detect Windows version from platform tokens.\r\n    if (pattern && label && /^Win/i.test(os) && !/^Windows Phone /i.test(os) &&\r\n        (data = data[/[\\d.]+$/.exec(os)])) {\r\n      os = 'Windows ' + data;\r\n    }\r\n    // Correct character case and cleanup string.\r\n    os = String(os);\r\n\r\n    if (pattern && label) {\r\n      os = os.replace(RegExp(pattern, 'i'), label);\r\n    }\r\n\r\n    os = format(\r\n      os.replace(/ ce$/i, ' CE')\r\n        .replace(/\\bhpw/i, 'web')\r\n        .replace(/\\bMacintosh\\b/, 'Mac OS')\r\n        .replace(/_PowerPC\\b/i, ' OS')\r\n        .replace(/\\b(OS X) [^ \\d]+/i, '$1')\r\n        .replace(/\\bMac (OS X)\\b/, '$1')\r\n        .replace(/\\/(\\d)/, ' $1')\r\n        .replace(/_/g, '.')\r\n        .replace(/(?: BePC|[ .]*fc[ \\d.]+)$/i, '')\r\n        .replace(/\\bx86\\.64\\b/gi, 'x86_64')\r\n        .replace(/\\b(Windows Phone) OS\\b/, '$1')\r\n        .replace(/\\b(Chrome OS \\w+) [\\d.]+\\b/, '$1')\r\n        .split(' on ')[0]\r\n    );\r\n\r\n    return os;\r\n  }\r\n\r\n  /**\r\n   * An iteration utility for arrays and objects.\r\n   *\r\n   * @private\r\n   * @param {Array|Object} object The object to iterate over.\r\n   * @param {Function} callback The function called per iteration.\r\n   */\r\n  function each(object, callback) {\r\n    var index = -1,\r\n        length = object ? object.length : 0;\r\n\r\n    if (typeof length == 'number' && length > -1 && length <= maxSafeInteger) {\r\n      while (++index < length) {\r\n        callback(object[index], index, object);\r\n      }\r\n    } else {\r\n      forOwn(object, callback);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Trim and conditionally capitalize string values.\r\n   *\r\n   * @private\r\n   * @param {string} string The string to format.\r\n   * @returns {string} The formatted string.\r\n   */\r\n  function format(string) {\r\n    string = trim(string);\r\n    return /^(?:webOS|i(?:OS|P))/.test(string)\r\n      ? string\r\n      : capitalize(string);\r\n  }\r\n\r\n  /**\r\n   * Iterates over an object's own properties, executing the `callback` for each.\r\n   *\r\n   * @private\r\n   * @param {Object} object The object to iterate over.\r\n   * @param {Function} callback The function executed per own property.\r\n   */\r\n  function forOwn(object, callback) {\r\n    for (var key in object) {\r\n      if (hasOwnProperty.call(object, key)) {\r\n        callback(object[key], key, object);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets the internal `[[Class]]` of a value.\r\n   *\r\n   * @private\r\n   * @param {*} value The value.\r\n   * @returns {string} The `[[Class]]`.\r\n   */\r\n  function getClassOf(value) {\r\n    return value == null\r\n      ? capitalize(value)\r\n      : toString.call(value).slice(8, -1);\r\n  }\r\n\r\n  /**\r\n   * Host objects can return type values that are different from their actual\r\n   * data type. The objects we are concerned with usually return non-primitive\r\n   * types of \"object\", \"function\", or \"unknown\".\r\n   *\r\n   * @private\r\n   * @param {*} object The owner of the property.\r\n   * @param {string} property The property to check.\r\n   * @returns {boolean} Returns `true` if the property value is a non-primitive, else `false`.\r\n   */\r\n  function isHostType(object, property) {\r\n    var type = object != null ? typeof object[property] : 'number';\r\n    return !/^(?:boolean|number|string|undefined)$/.test(type) &&\r\n      (type == 'object' ? !!object[property] : true);\r\n  }\r\n\r\n  /**\r\n   * Prepares a string for use in a `RegExp` by making hyphens and spaces optional.\r\n   *\r\n   * @private\r\n   * @param {string} string The string to qualify.\r\n   * @returns {string} The qualified string.\r\n   */\r\n  function qualify(string) {\r\n    return String(string).replace(/([ -])(?!$)/g, '$1?');\r\n  }\r\n\r\n  /**\r\n   * A bare-bones `Array#reduce` like utility function.\r\n   *\r\n   * @private\r\n   * @param {Array} array The array to iterate over.\r\n   * @param {Function} callback The function called per iteration.\r\n   * @returns {*} The accumulated result.\r\n   */\r\n  function reduce(array, callback) {\r\n    var accumulator = null;\r\n    each(array, function(value, index) {\r\n      accumulator = callback(accumulator, value, index, array);\r\n    });\r\n    return accumulator;\r\n  }\r\n\r\n  /**\r\n   * Removes leading and trailing whitespace from a string.\r\n   *\r\n   * @private\r\n   * @param {string} string The string to trim.\r\n   * @returns {string} The trimmed string.\r\n   */\r\n  function trim(string) {\r\n    return String(string).replace(/^ +| +$/g, '');\r\n  }\r\n\r\n  /*--------------------------------------------------------------------------*/\r\n\r\n  /**\r\n   * Creates a new platform object.\r\n   *\r\n   * @memberOf platform\r\n   * @param {Object|string} [ua=navigator.userAgent] The user agent string or\r\n   *  context object.\r\n   * @returns {Object} A platform object.\r\n   */\r\n  function parse(ua) {\r\n\r\n    /** The environment context object. */\r\n    var context = root;\r\n\r\n    /** Used to flag when a custom context is provided. */\r\n    var isCustomContext = ua && typeof ua == 'object' && getClassOf(ua) != 'String';\r\n\r\n    // Juggle arguments.\r\n    if (isCustomContext) {\r\n      context = ua;\r\n      ua = null;\r\n    }\r\n\r\n    /** Browser navigator object. */\r\n    var nav = context.navigator || {};\r\n\r\n    /** Browser user agent string. */\r\n    var userAgent = nav.userAgent || '';\r\n\r\n    ua || (ua = userAgent);\r\n\r\n    /** Used to flag when `thisBinding` is the [ModuleScope]. */\r\n    var isModuleScope = isCustomContext || thisBinding == oldRoot;\r\n\r\n    /** Used to detect if browser is like Chrome. */\r\n    var likeChrome = isCustomContext\r\n      ? !!nav.likeChrome\r\n      : /\\bChrome\\b/.test(ua) && !/internal|\\n/i.test(toString.toString());\r\n\r\n    /** Internal `[[Class]]` value shortcuts. */\r\n    var objectClass = 'Object',\r\n        airRuntimeClass = isCustomContext ? objectClass : 'ScriptBridgingProxyObject',\r\n        enviroClass = isCustomContext ? objectClass : 'Environment',\r\n        javaClass = (isCustomContext && context.java) ? 'JavaPackage' : getClassOf(context.java),\r\n        phantomClass = isCustomContext ? objectClass : 'RuntimeObject';\r\n\r\n    /** Detect Java environments. */\r\n    var java = /\\bJava/.test(javaClass) && context.java;\r\n\r\n    /** Detect Rhino. */\r\n    var rhino = java && getClassOf(context.environment) == enviroClass;\r\n\r\n    /** A character to represent alpha. */\r\n    var alpha = java ? 'a' : '\\u03b1';\r\n\r\n    /** A character to represent beta. */\r\n    var beta = java ? 'b' : '\\u03b2';\r\n\r\n    /** Browser document object. */\r\n    var doc = context.document || {};\r\n\r\n    /**\r\n     * Detect Opera browser (Presto-based).\r\n     * http://www.howtocreate.co.uk/operaStuff/operaObject.html\r\n     * http://dev.opera.com/articles/view/opera-mini-web-content-authoring-guidelines/#operamini\r\n     */\r\n    var opera = context.operamini || context.opera;\r\n\r\n    /** Opera `[[Class]]`. */\r\n    var operaClass = reOpera.test(operaClass = (isCustomContext && opera) ? opera['[[Class]]'] : getClassOf(opera))\r\n      ? operaClass\r\n      : (opera = null);\r\n\r\n    /*------------------------------------------------------------------------*/\r\n\r\n    /** Temporary variable used over the script's lifetime. */\r\n    var data;\r\n\r\n    /** The CPU architecture. */\r\n    var arch = ua;\r\n\r\n    /** Platform description array. */\r\n    var description = [];\r\n\r\n    /** Platform alpha/beta indicator. */\r\n    var prerelease = null;\r\n\r\n    /** A flag to indicate that environment features should be used to resolve the platform. */\r\n    var useFeatures = ua == userAgent;\r\n\r\n    /** The browser/environment version. */\r\n    var version = useFeatures && opera && typeof opera.version == 'function' && opera.version();\r\n\r\n    /** A flag to indicate if the OS ends with \"/ Version\" */\r\n    var isSpecialCasedOS;\r\n\r\n    /* Detectable layout engines (order is important). */\r\n    var layout = getLayout([\r\n      { 'label': 'EdgeHTML', 'pattern': 'Edge' },\r\n      'Trident',\r\n      { 'label': 'WebKit', 'pattern': 'AppleWebKit' },\r\n      'iCab',\r\n      'Presto',\r\n      'NetFront',\r\n      'Tasman',\r\n      'KHTML',\r\n      'Gecko'\r\n    ]);\r\n\r\n    /* Detectable browser names (order is important). */\r\n    var name = getName([\r\n      'Adobe AIR',\r\n      'Arora',\r\n      'Avant Browser',\r\n      'Breach',\r\n      'Camino',\r\n      'Epiphany',\r\n      'Fennec',\r\n      'Flock',\r\n      'Galeon',\r\n      'GreenBrowser',\r\n      'iCab',\r\n      'Iceweasel',\r\n      'K-Meleon',\r\n      'Konqueror',\r\n      'Lunascape',\r\n      'Maxthon',\r\n      { 'label': 'Microsoft Edge', 'pattern': 'Edge' },\r\n      'Midori',\r\n      'Nook Browser',\r\n      'PaleMoon',\r\n      'PhantomJS',\r\n      'Raven',\r\n      'Rekonq',\r\n      'RockMelt',\r\n      'SeaMonkey',\r\n      { 'label': 'Silk', 'pattern': '(?:Cloud9|Silk-Accelerated)' },\r\n      'Sleipnir',\r\n      'SlimBrowser',\r\n      { 'label': 'SRWare Iron', 'pattern': 'Iron' },\r\n      'Sunrise',\r\n      'Swiftfox',\r\n      'WebPositive',\r\n      'Opera Mini',\r\n      { 'label': 'Opera Mini', 'pattern': 'OPiOS' },\r\n      'Opera',\r\n      { 'label': 'Opera', 'pattern': 'OPR' },\r\n      'Chrome',\r\n      { 'label': 'Chrome Mobile', 'pattern': '(?:CriOS|CrMo)' },\r\n      { 'label': 'Firefox', 'pattern': '(?:Firefox|Minefield)' },\r\n      { 'label': 'Firefox for iOS', 'pattern': 'FxiOS' },\r\n      { 'label': 'IE', 'pattern': 'IEMobile' },\r\n      { 'label': 'IE', 'pattern': 'MSIE' },\r\n      'Safari'\r\n    ]);\r\n\r\n    /* Detectable products (order is important). */\r\n    var product = getProduct([\r\n      { 'label': 'BlackBerry', 'pattern': 'BB10' },\r\n      'BlackBerry',\r\n      { 'label': 'Galaxy S', 'pattern': 'GT-I9000' },\r\n      { 'label': 'Galaxy S2', 'pattern': 'GT-I9100' },\r\n      { 'label': 'Galaxy S3', 'pattern': 'GT-I9300' },\r\n      { 'label': 'Galaxy S4', 'pattern': 'GT-I9500' },\r\n      'Google TV',\r\n      'Lumia',\r\n      'iPad',\r\n      'iPod',\r\n      'iPhone',\r\n      'Kindle',\r\n      { 'label': 'Kindle Fire', 'pattern': '(?:Cloud9|Silk-Accelerated)' },\r\n      'Nexus',\r\n      'Nook',\r\n      'PlayBook',\r\n      'PlayStation 3',\r\n      'PlayStation 4',\r\n      'PlayStation Vita',\r\n      'TouchPad',\r\n      'Transformer',\r\n      { 'label': 'Wii U', 'pattern': 'WiiU' },\r\n      'Wii',\r\n      'Xbox One',\r\n      { 'label': 'Xbox 360', 'pattern': 'Xbox' },\r\n      'Xoom'\r\n    ]);\r\n\r\n    /* Detectable manufacturers. */\r\n    var manufacturer = getManufacturer({\r\n      'Apple': { 'iPad': 1, 'iPhone': 1, 'iPod': 1 },\r\n      'Archos': {},\r\n      'Amazon': { 'Kindle': 1, 'Kindle Fire': 1 },\r\n      'Asus': { 'Transformer': 1 },\r\n      'Barnes & Noble': { 'Nook': 1 },\r\n      'BlackBerry': { 'PlayBook': 1 },\r\n      'Google': { 'Google TV': 1, 'Nexus': 1 },\r\n      'HP': { 'TouchPad': 1 },\r\n      'HTC': {},\r\n      'LG': {},\r\n      'Microsoft': { 'Xbox': 1, 'Xbox One': 1 },\r\n      'Motorola': { 'Xoom': 1 },\r\n      'Nintendo': { 'Wii U': 1,  'Wii': 1 },\r\n      'Nokia': { 'Lumia': 1 },\r\n      'Samsung': { 'Galaxy S': 1, 'Galaxy S2': 1, 'Galaxy S3': 1, 'Galaxy S4': 1 },\r\n      'Sony': { 'PlayStation 4': 1, 'PlayStation 3': 1, 'PlayStation Vita': 1 }\r\n    });\r\n\r\n    /* Detectable operating systems (order is important). */\r\n    var os = getOS([\r\n      'Windows Phone',\r\n      'Android',\r\n      'CentOS',\r\n      { 'label': 'Chrome OS', 'pattern': 'CrOS' },\r\n      'Debian',\r\n      'Fedora',\r\n      'FreeBSD',\r\n      'Gentoo',\r\n      'Haiku',\r\n      'Kubuntu',\r\n      'Linux Mint',\r\n      'OpenBSD',\r\n      'Red Hat',\r\n      'SuSE',\r\n      'Ubuntu',\r\n      'Xubuntu',\r\n      'Cygwin',\r\n      'Symbian OS',\r\n      'hpwOS',\r\n      'webOS ',\r\n      'webOS',\r\n      'Tablet OS',\r\n      'Linux',\r\n      'Mac OS X',\r\n      'Macintosh',\r\n      'Mac',\r\n      'Windows 98;',\r\n      'Windows '\r\n    ]);\r\n\r\n    /*------------------------------------------------------------------------*/\r\n\r\n    /**\r\n     * Picks the layout engine from an array of guesses.\r\n     *\r\n     * @private\r\n     * @param {Array} guesses An array of guesses.\r\n     * @returns {null|string} The detected layout engine.\r\n     */\r\n    function getLayout(guesses) {\r\n      return reduce(guesses, function(result, guess) {\r\n        return result || RegExp('\\\\b' + (\r\n          guess.pattern || qualify(guess)\r\n        ) + '\\\\b', 'i').exec(ua) && (guess.label || guess);\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Picks the manufacturer from an array of guesses.\r\n     *\r\n     * @private\r\n     * @param {Array} guesses An object of guesses.\r\n     * @returns {null|string} The detected manufacturer.\r\n     */\r\n    function getManufacturer(guesses) {\r\n      return reduce(guesses, function(result, value, key) {\r\n        // Lookup the manufacturer by product or scan the UA for the manufacturer.\r\n        return result || (\r\n          value[product] ||\r\n          value[/^[a-z]+(?: +[a-z]+\\b)*/i.exec(product)] ||\r\n          RegExp('\\\\b' + qualify(key) + '(?:\\\\b|\\\\w*\\\\d)', 'i').exec(ua)\r\n        ) && key;\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Picks the browser name from an array of guesses.\r\n     *\r\n     * @private\r\n     * @param {Array} guesses An array of guesses.\r\n     * @returns {null|string} The detected browser name.\r\n     */\r\n    function getName(guesses) {\r\n      return reduce(guesses, function(result, guess) {\r\n        return result || RegExp('\\\\b' + (\r\n          guess.pattern || qualify(guess)\r\n        ) + '\\\\b', 'i').exec(ua) && (guess.label || guess);\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Picks the OS name from an array of guesses.\r\n     *\r\n     * @private\r\n     * @param {Array} guesses An array of guesses.\r\n     * @returns {null|string} The detected OS name.\r\n     */\r\n    function getOS(guesses) {\r\n      return reduce(guesses, function(result, guess) {\r\n        var pattern = guess.pattern || qualify(guess);\r\n        if (!result && (result =\r\n              RegExp('\\\\b' + pattern + '(?:/[\\\\d.]+|[ \\\\w.]*)', 'i').exec(ua)\r\n            )) {\r\n          result = cleanupOS(result, pattern, guess.label || guess);\r\n        }\r\n        return result;\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Picks the product name from an array of guesses.\r\n     *\r\n     * @private\r\n     * @param {Array} guesses An array of guesses.\r\n     * @returns {null|string} The detected product name.\r\n     */\r\n    function getProduct(guesses) {\r\n      return reduce(guesses, function(result, guess) {\r\n        var pattern = guess.pattern || qualify(guess);\r\n        if (!result && (result =\r\n              RegExp('\\\\b' + pattern + ' *\\\\d+[.\\\\w_]*', 'i').exec(ua) ||\r\n              RegExp('\\\\b' + pattern + '(?:; *(?:[a-z]+[_-])?[a-z]+\\\\d+|[^ ();-]*)', 'i').exec(ua)\r\n            )) {\r\n          // Split by forward slash and append product version if needed.\r\n          if ((result = String((guess.label && !RegExp(pattern, 'i').test(guess.label)) ? guess.label : result).split('/'))[1] && !/[\\d.]+/.test(result[0])) {\r\n            result[0] += ' ' + result[1];\r\n          }\r\n          // Correct character case and cleanup string.\r\n          guess = guess.label || guess;\r\n          result = format(result[0]\r\n            .replace(RegExp(pattern, 'i'), guess)\r\n            .replace(RegExp('; *(?:' + guess + '[_-])?', 'i'), ' ')\r\n            .replace(RegExp('(' + guess + ')[-_.]?(\\\\w)', 'i'), '$1 $2'));\r\n        }\r\n        return result;\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Resolves the version using an array of UA patterns.\r\n     *\r\n     * @private\r\n     * @param {Array} patterns An array of UA patterns.\r\n     * @returns {null|string} The detected version.\r\n     */\r\n    function getVersion(patterns) {\r\n      return reduce(patterns, function(result, pattern) {\r\n        return result || (RegExp(pattern +\r\n          '(?:-[\\\\d.]+/|(?: for [\\\\w-]+)?[ /-])([\\\\d.]+[^ ();/_-]*)', 'i').exec(ua) || 0)[1] || null;\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Returns `platform.description` when the platform object is coerced to a string.\r\n     *\r\n     * @name toString\r\n     * @memberOf platform\r\n     * @returns {string} Returns `platform.description` if available, else an empty string.\r\n     */\r\n    function toStringPlatform() {\r\n      return this.description || '';\r\n    }\r\n\r\n    /*------------------------------------------------------------------------*/\r\n\r\n    // Convert layout to an array so we can add extra details.\r\n    layout && (layout = [layout]);\r\n\r\n    // Detect product names that contain their manufacturer's name.\r\n    if (manufacturer && !product) {\r\n      product = getProduct([manufacturer]);\r\n    }\r\n    // Clean up Google TV.\r\n    if ((data = /\\bGoogle TV\\b/.exec(product))) {\r\n      product = data[0];\r\n    }\r\n    // Detect simulators.\r\n    if (/\\bSimulator\\b/i.test(ua)) {\r\n      product = (product ? product + ' ' : '') + 'Simulator';\r\n    }\r\n    // Detect Opera Mini 8+ running in Turbo/Uncompressed mode on iOS.\r\n    if (name == 'Opera Mini' && /\\bOPiOS\\b/.test(ua)) {\r\n      description.push('running in Turbo/Uncompressed mode');\r\n    }\r\n    // Detect IE Mobile 11.\r\n    if (name == 'IE' && /\\blike iPhone OS\\b/.test(ua)) {\r\n      data = parse(ua.replace(/like iPhone OS/, ''));\r\n      manufacturer = data.manufacturer;\r\n      product = data.product;\r\n    }\r\n    // Detect iOS.\r\n    else if (/^iP/.test(product)) {\r\n      name || (name = 'Safari');\r\n      os = 'iOS' + ((data = / OS ([\\d_]+)/i.exec(ua))\r\n        ? ' ' + data[1].replace(/_/g, '.')\r\n        : '');\r\n    }\r\n    // Detect Kubuntu.\r\n    else if (name == 'Konqueror' && !/buntu/i.test(os)) {\r\n      os = 'Kubuntu';\r\n    }\r\n    // Detect Android browsers.\r\n    else if ((manufacturer && manufacturer != 'Google' &&\r\n        ((/Chrome/.test(name) && !/\\bMobile Safari\\b/i.test(ua)) || /\\bVita\\b/.test(product))) ||\r\n        (/\\bAndroid\\b/.test(os) && /^Chrome/.test(name) && /\\bVersion\\//i.test(ua))) {\r\n      name = 'Android Browser';\r\n      os = /\\bAndroid\\b/.test(os) ? os : 'Android';\r\n    }\r\n    // Detect Silk desktop/accelerated modes.\r\n    else if (name == 'Silk') {\r\n      if (!/\\bMobi/i.test(ua)) {\r\n        os = 'Android';\r\n        description.unshift('desktop mode');\r\n      }\r\n      if (/Accelerated *= *true/i.test(ua)) {\r\n        description.unshift('accelerated');\r\n      }\r\n    }\r\n    // Detect PaleMoon identifying as Firefox.\r\n    else if (name == 'PaleMoon' && (data = /\\bFirefox\\/([\\d.]+)\\b/.exec(ua))) {\r\n      description.push('identifying as Firefox ' + data[1]);\r\n    }\r\n    // Detect Firefox OS and products running Firefox.\r\n    else if (name == 'Firefox' && (data = /\\b(Mobile|Tablet|TV)\\b/i.exec(ua))) {\r\n      os || (os = 'Firefox OS');\r\n      product || (product = data[1]);\r\n    }\r\n    // Detect false positives for Firefox/Safari.\r\n    else if (!name || (data = !/\\bMinefield\\b/i.test(ua) && /\\b(?:Firefox|Safari)\\b/.exec(name))) {\r\n      // Escape the `/` for Firefox 1.\r\n      if (name && !product && /[\\/,]|^[^(]+?\\)/.test(ua.slice(ua.indexOf(data + '/') + 8))) {\r\n        // Clear name of false positives.\r\n        name = null;\r\n      }\r\n      // Reassign a generic name.\r\n      if ((data = product || manufacturer || os) &&\r\n          (product || manufacturer || /\\b(?:Android|Symbian OS|Tablet OS|webOS)\\b/.test(os))) {\r\n        name = /[a-z]+(?: Hat)?/i.exec(/\\bAndroid\\b/.test(os) ? os : data) + ' Browser';\r\n      }\r\n    }\r\n    // Detect non-Opera (Presto-based) versions (order is important).\r\n    if (!version) {\r\n      version = getVersion([\r\n        '(?:Cloud9|CriOS|CrMo|Edge|FxiOS|IEMobile|Iron|Opera ?Mini|OPiOS|OPR|Raven|Silk(?!/[\\\\d.]+$))',\r\n        'Version',\r\n        qualify(name),\r\n        '(?:Firefox|Minefield|NetFront)'\r\n      ]);\r\n    }\r\n    // Detect stubborn layout engines.\r\n    if ((data =\r\n          layout == 'iCab' && parseFloat(version) > 3 && 'WebKit' ||\r\n          /\\bOpera\\b/.test(name) && (/\\bOPR\\b/.test(ua) ? 'Blink' : 'Presto') ||\r\n          /\\b(?:Midori|Nook|Safari)\\b/i.test(ua) && !/^(?:Trident|EdgeHTML)$/.test(layout) && 'WebKit' ||\r\n          !layout && /\\bMSIE\\b/i.test(ua) && (os == 'Mac OS' ? 'Tasman' : 'Trident') ||\r\n          layout == 'WebKit' && /\\bPlayStation\\b(?! Vita\\b)/i.test(name) && 'NetFront'\r\n        )) {\r\n      layout = [data];\r\n    }\r\n    // Detect Windows Phone 7 desktop mode.\r\n    if (name == 'IE' && (data = (/; *(?:XBLWP|ZuneWP)(\\d+)/i.exec(ua) || 0)[1])) {\r\n      name += ' Mobile';\r\n      os = 'Windows Phone ' + (/\\+$/.test(data) ? data : data + '.x');\r\n      description.unshift('desktop mode');\r\n    }\r\n    // Detect Windows Phone 8.x desktop mode.\r\n    else if (/\\bWPDesktop\\b/i.test(ua)) {\r\n      name = 'IE Mobile';\r\n      os = 'Windows Phone 8.x';\r\n      description.unshift('desktop mode');\r\n      version || (version = (/\\brv:([\\d.]+)/.exec(ua) || 0)[1]);\r\n    }\r\n    // Detect IE 11.\r\n    else if (name != 'IE' && layout == 'Trident' && (data = /\\brv:([\\d.]+)/.exec(ua))) {\r\n      if (name) {\r\n        description.push('identifying as ' + name + (version ? ' ' + version : ''));\r\n      }\r\n      name = 'IE';\r\n      version = data[1];\r\n    }\r\n    // Leverage environment features.\r\n    if (useFeatures) {\r\n      // Detect server-side environments.\r\n      // Rhino has a global function while others have a global object.\r\n      if (isHostType(context, 'global')) {\r\n        if (java) {\r\n          data = java.lang.System;\r\n          arch = data.getProperty('os.arch');\r\n          os = os || data.getProperty('os.name') + ' ' + data.getProperty('os.version');\r\n        }\r\n        if (isModuleScope && isHostType(context, 'system') && (data = [context.system])[0]) {\r\n          os || (os = data[0].os || null);\r\n          try {\r\n            data[1] = context.require('ringo/engine').version;\r\n            version = data[1].join('.');\r\n            name = 'RingoJS';\r\n          } catch(e) {\r\n            if (data[0].global.system == context.system) {\r\n              name = 'Narwhal';\r\n            }\r\n          }\r\n        }\r\n        else if (\r\n          typeof context.process == 'object' && !context.process.browser &&\r\n          (data = context.process)\r\n        ) {\r\n          name = 'Node.js';\r\n          arch = data.arch;\r\n          os = data.platform;\r\n          version = /[\\d.]+/.exec(data.version)[0];\r\n        }\r\n        else if (rhino) {\r\n          name = 'Rhino';\r\n        }\r\n      }\r\n      // Detect Adobe AIR.\r\n      else if (getClassOf((data = context.runtime)) == airRuntimeClass) {\r\n        name = 'Adobe AIR';\r\n        os = data.flash.system.Capabilities.os;\r\n      }\r\n      // Detect PhantomJS.\r\n      else if (getClassOf((data = context.phantom)) == phantomClass) {\r\n        name = 'PhantomJS';\r\n        version = (data = data.version || null) && (data.major + '.' + data.minor + '.' + data.patch);\r\n      }\r\n      // Detect IE compatibility modes.\r\n      else if (typeof doc.documentMode == 'number' && (data = /\\bTrident\\/(\\d+)/i.exec(ua))) {\r\n        // We're in compatibility mode when the Trident version + 4 doesn't\r\n        // equal the document mode.\r\n        version = [version, doc.documentMode];\r\n        if ((data = +data[1] + 4) != version[1]) {\r\n          description.push('IE ' + version[1] + ' mode');\r\n          layout && (layout[1] = '');\r\n          version[1] = data;\r\n        }\r\n        version = name == 'IE' ? String(version[1].toFixed(1)) : version[0];\r\n      }\r\n      os = os && format(os);\r\n    }\r\n    // Detect prerelease phases.\r\n    if (version && (data =\r\n          /(?:[ab]|dp|pre|[ab]\\d+pre)(?:\\d+\\+?)?$/i.exec(version) ||\r\n          /(?:alpha|beta)(?: ?\\d)?/i.exec(ua + ';' + (useFeatures && nav.appMinorVersion)) ||\r\n          /\\bMinefield\\b/i.test(ua) && 'a'\r\n        )) {\r\n      prerelease = /b/i.test(data) ? 'beta' : 'alpha';\r\n      version = version.replace(RegExp(data + '\\\\+?$'), '') +\r\n        (prerelease == 'beta' ? beta : alpha) + (/\\d+\\+?/.exec(data) || '');\r\n    }\r\n    // Detect Firefox Mobile.\r\n    if (name == 'Fennec' || name == 'Firefox' && /\\b(?:Android|Firefox OS)\\b/.test(os)) {\r\n      name = 'Firefox Mobile';\r\n    }\r\n    // Obscure Maxthon's unreliable version.\r\n    else if (name == 'Maxthon' && version) {\r\n      version = version.replace(/\\.[\\d.]+/, '.x');\r\n    }\r\n    // Detect Xbox 360 and Xbox One.\r\n    else if (/\\bXbox\\b/i.test(product)) {\r\n      os = null;\r\n      if (product == 'Xbox 360' && /\\bIEMobile\\b/.test(ua)) {\r\n        description.unshift('mobile mode');\r\n      }\r\n    }\r\n    // Add mobile postfix.\r\n    else if ((/^(?:Chrome|IE|Opera)$/.test(name) || name && !product && !/Browser|Mobi/.test(name)) &&\r\n        (os == 'Windows CE' || /Mobi/i.test(ua))) {\r\n      name += ' Mobile';\r\n    }\r\n    // Detect IE platform preview.\r\n    else if (name == 'IE' && useFeatures && context.external === null) {\r\n      description.unshift('platform preview');\r\n    }\r\n    // Detect BlackBerry OS version.\r\n    // http://docs.blackberry.com/en/developers/deliverables/18169/HTTP_headers_sent_by_BB_Browser_1234911_11.jsp\r\n    else if ((/\\bBlackBerry\\b/.test(product) || /\\bBB10\\b/.test(ua)) && (data =\r\n          (RegExp(product.replace(/ +/g, ' *') + '/([.\\\\d]+)', 'i').exec(ua) || 0)[1] ||\r\n          version\r\n        )) {\r\n      data = [data, /BB10/.test(ua)];\r\n      os = (data[1] ? (product = null, manufacturer = 'BlackBerry') : 'Device Software') + ' ' + data[0];\r\n      version = null;\r\n    }\r\n    // Detect Opera identifying/masking itself as another browser.\r\n    // http://www.opera.com/support/kb/view/843/\r\n    else if (this != forOwn && product != 'Wii' && (\r\n          (useFeatures && opera) ||\r\n          (/Opera/.test(name) && /\\b(?:MSIE|Firefox)\\b/i.test(ua)) ||\r\n          (name == 'Firefox' && /\\bOS X (?:\\d+\\.){2,}/.test(os)) ||\r\n          (name == 'IE' && (\r\n            (os && !/^Win/.test(os) && version > 5.5) ||\r\n            /\\bWindows XP\\b/.test(os) && version > 8 ||\r\n            version == 8 && !/\\bTrident\\b/.test(ua)\r\n          ))\r\n        ) && !reOpera.test((data = parse.call(forOwn, ua.replace(reOpera, '') + ';'))) && data.name) {\r\n      // When \"identifying\", the UA contains both Opera and the other browser's name.\r\n      data = 'ing as ' + data.name + ((data = data.version) ? ' ' + data : '');\r\n      if (reOpera.test(name)) {\r\n        if (/\\bIE\\b/.test(data) && os == 'Mac OS') {\r\n          os = null;\r\n        }\r\n        data = 'identify' + data;\r\n      }\r\n      // When \"masking\", the UA contains only the other browser's name.\r\n      else {\r\n        data = 'mask' + data;\r\n        if (operaClass) {\r\n          name = format(operaClass.replace(/([a-z])([A-Z])/g, '$1 $2'));\r\n        } else {\r\n          name = 'Opera';\r\n        }\r\n        if (/\\bIE\\b/.test(data)) {\r\n          os = null;\r\n        }\r\n        if (!useFeatures) {\r\n          version = null;\r\n        }\r\n      }\r\n      layout = ['Presto'];\r\n      description.push(data);\r\n    }\r\n    // Detect WebKit Nightly and approximate Chrome/Safari versions.\r\n    if ((data = (/\\bAppleWebKit\\/([\\d.]+\\+?)/i.exec(ua) || 0)[1])) {\r\n      // Correct build number for numeric comparison.\r\n      // (e.g. \"532.5\" becomes \"532.05\")\r\n      data = [parseFloat(data.replace(/\\.(\\d)$/, '.0$1')), data];\r\n      // Nightly builds are postfixed with a \"+\".\r\n      if (name == 'Safari' && data[1].slice(-1) == '+') {\r\n        name = 'WebKit Nightly';\r\n        prerelease = 'alpha';\r\n        version = data[1].slice(0, -1);\r\n      }\r\n      // Clear incorrect browser versions.\r\n      else if (version == data[1] ||\r\n          version == (data[2] = (/\\bSafari\\/([\\d.]+\\+?)/i.exec(ua) || 0)[1])) {\r\n        version = null;\r\n      }\r\n      // Use the full Chrome version when available.\r\n      data[1] = (/\\bChrome\\/([\\d.]+)/i.exec(ua) || 0)[1];\r\n      // Detect Blink layout engine.\r\n      if (data[0] == 537.36 && data[2] == 537.36 && parseFloat(data[1]) >= 28 && layout == 'WebKit') {\r\n        layout = ['Blink'];\r\n      }\r\n      // Detect JavaScriptCore.\r\n      // http://stackoverflow.com/questions/6768474/how-can-i-detect-which-javascript-engine-v8-or-jsc-is-used-at-runtime-in-androi\r\n      if (!useFeatures || (!likeChrome && !data[1])) {\r\n        layout && (layout[1] = 'like Safari');\r\n        data = (data = data[0], data < 400 ? 1 : data < 500 ? 2 : data < 526 ? 3 : data < 533 ? 4 : data < 534 ? '4+' : data < 535 ? 5 : data < 537 ? 6 : data < 538 ? 7 : data < 601 ? 8 : '8');\r\n      } else {\r\n        layout && (layout[1] = 'like Chrome');\r\n        data = data[1] || (data = data[0], data < 530 ? 1 : data < 532 ? 2 : data < 532.05 ? 3 : data < 533 ? 4 : data < 534.03 ? 5 : data < 534.07 ? 6 : data < 534.10 ? 7 : data < 534.13 ? 8 : data < 534.16 ? 9 : data < 534.24 ? 10 : data < 534.30 ? 11 : data < 535.01 ? 12 : data < 535.02 ? '13+' : data < 535.07 ? 15 : data < 535.11 ? 16 : data < 535.19 ? 17 : data < 536.05 ? 18 : data < 536.10 ? 19 : data < 537.01 ? 20 : data < 537.11 ? '21+' : data < 537.13 ? 23 : data < 537.18 ? 24 : data < 537.24 ? 25 : data < 537.36 ? 26 : layout != 'Blink' ? '27' : '28');\r\n      }\r\n      // Add the postfix of \".x\" or \"+\" for approximate versions.\r\n      layout && (layout[1] += ' ' + (data += typeof data == 'number' ? '.x' : /[.+]/.test(data) ? '' : '+'));\r\n      // Obscure version for some Safari 1-2 releases.\r\n      if (name == 'Safari' && (!version || parseInt(version) > 45)) {\r\n        version = data;\r\n      }\r\n    }\r\n    // Detect Opera desktop modes.\r\n    if (name == 'Opera' &&  (data = /\\bzbov|zvav$/.exec(os))) {\r\n      name += ' ';\r\n      description.unshift('desktop mode');\r\n      if (data == 'zvav') {\r\n        name += 'Mini';\r\n        version = null;\r\n      } else {\r\n        name += 'Mobile';\r\n      }\r\n      os = os.replace(RegExp(' *' + data + '$'), '');\r\n    }\r\n    // Detect Chrome desktop mode.\r\n    else if (name == 'Safari' && /\\bChrome\\b/.exec(layout && layout[1])) {\r\n      description.unshift('desktop mode');\r\n      name = 'Chrome Mobile';\r\n      version = null;\r\n\r\n      if (/\\bOS X\\b/.test(os)) {\r\n        manufacturer = 'Apple';\r\n        os = 'iOS 4.3+';\r\n      } else {\r\n        os = null;\r\n      }\r\n    }\r\n    // Strip incorrect OS versions.\r\n    if (version && version.indexOf((data = /[\\d.]+$/.exec(os))) == 0 &&\r\n        ua.indexOf('/' + data + '-') > -1) {\r\n      os = trim(os.replace(data, ''));\r\n    }\r\n    // Add layout engine.\r\n    if (layout && !/\\b(?:Avant|Nook)\\b/.test(name) && (\r\n        /Browser|Lunascape|Maxthon/.test(name) ||\r\n        name != 'Safari' && /^iOS/.test(os) && /\\bSafari\\b/.test(layout[1]) ||\r\n        /^(?:Adobe|Arora|Breach|Midori|Opera|Phantom|Rekonq|Rock|Sleipnir|Web)/.test(name) && layout[1])) {\r\n      // Don't add layout details to description if they are falsey.\r\n      (data = layout[layout.length - 1]) && description.push(data);\r\n    }\r\n    // Combine contextual information.\r\n    if (description.length) {\r\n      description = ['(' + description.join('; ') + ')'];\r\n    }\r\n    // Append manufacturer to description.\r\n    if (manufacturer && product && product.indexOf(manufacturer) < 0) {\r\n      description.push('on ' + manufacturer);\r\n    }\r\n    // Append product to description.\r\n    if (product) {\r\n      description.push((/^on /.test(description[description.length - 1]) ? '' : 'on ') + product);\r\n    }\r\n    // Parse the OS into an object.\r\n    if (os) {\r\n      data = / ([\\d.+]+)$/.exec(os);\r\n      isSpecialCasedOS = data && os.charAt(os.length - data[0].length - 1) == '/';\r\n      os = {\r\n        'architecture': 32,\r\n        'family': (data && !isSpecialCasedOS) ? os.replace(data[0], '') : os,\r\n        'version': data ? data[1] : null,\r\n        'toString': function() {\r\n          var version = this.version;\r\n          return this.family + ((version && !isSpecialCasedOS) ? ' ' + version : '') + (this.architecture == 64 ? ' 64-bit' : '');\r\n        }\r\n      };\r\n    }\r\n    // Add browser/OS architecture.\r\n    if ((data = /\\b(?:AMD|IA|Win|WOW|x86_|x)64\\b/i.exec(arch)) && !/\\bi686\\b/i.test(arch)) {\r\n      if (os) {\r\n        os.architecture = 64;\r\n        os.family = os.family.replace(RegExp(' *' + data), '');\r\n      }\r\n      if (\r\n          name && (/\\bWOW64\\b/i.test(ua) ||\r\n          (useFeatures && /\\w(?:86|32)$/.test(nav.cpuClass || nav.platform) && !/\\bWin64; x64\\b/i.test(ua)))\r\n      ) {\r\n        description.unshift('32-bit');\r\n      }\r\n    }\r\n    // Chrome 39 and above on OS X is always 64-bit.\r\n    else if (\r\n        os && /^OS X/.test(os.family) &&\r\n        name == 'Chrome' && parseFloat(version) >= 39\r\n    ) {\r\n      os.architecture = 64;\r\n    }\r\n\r\n    ua || (ua = null);\r\n\r\n    /*------------------------------------------------------------------------*/\r\n\r\n    /**\r\n     * The platform object.\r\n     *\r\n     * @name platform\r\n     * @type Object\r\n     */\r\n    var platform = {};\r\n\r\n    /**\r\n     * The platform description.\r\n     *\r\n     * @memberOf platform\r\n     * @type string|null\r\n     */\r\n    platform.description = ua;\r\n\r\n    /**\r\n     * The name of the browser's layout engine.\r\n     *\r\n     * @memberOf platform\r\n     * @type string|null\r\n     */\r\n    platform.layout = layout && layout[0];\r\n\r\n    /**\r\n     * The name of the product's manufacturer.\r\n     *\r\n     * @memberOf platform\r\n     * @type string|null\r\n     */\r\n    platform.manufacturer = manufacturer;\r\n\r\n    /**\r\n     * The name of the browser/environment.\r\n     *\r\n     * @memberOf platform\r\n     * @type string|null\r\n     */\r\n    platform.name = name;\r\n\r\n    /**\r\n     * The alpha/beta release indicator.\r\n     *\r\n     * @memberOf platform\r\n     * @type string|null\r\n     */\r\n    platform.prerelease = prerelease;\r\n\r\n    /**\r\n     * The name of the product hosting the browser.\r\n     *\r\n     * @memberOf platform\r\n     * @type string|null\r\n     */\r\n    platform.product = product;\r\n\r\n    /**\r\n     * The browser's user agent string.\r\n     *\r\n     * @memberOf platform\r\n     * @type string|null\r\n     */\r\n    platform.ua = ua;\r\n\r\n    /**\r\n     * The browser/environment version.\r\n     *\r\n     * @memberOf platform\r\n     * @type string|null\r\n     */\r\n    platform.version = name && version;\r\n\r\n    /**\r\n     * The name of the operating system.\r\n     *\r\n     * @memberOf platform\r\n     * @type Object\r\n     */\r\n    platform.os = os || {\r\n\r\n      /**\r\n       * The CPU architecture the OS is built for.\r\n       *\r\n       * @memberOf platform.os\r\n       * @type number|null\r\n       */\r\n      'architecture': null,\r\n\r\n      /**\r\n       * The family of the OS.\r\n       *\r\n       * Common values include:\r\n       * \"Windows\", \"Windows Server 2008 R2 / 7\", \"Windows Server 2008 / Vista\",\r\n       * \"Windows XP\", \"OS X\", \"Ubuntu\", \"Debian\", \"Fedora\", \"Red Hat\", \"SuSE\",\r\n       * \"Android\", \"iOS\" and \"Windows Phone\"\r\n       *\r\n       * @memberOf platform.os\r\n       * @type string|null\r\n       */\r\n      'family': null,\r\n\r\n      /**\r\n       * The version of the OS.\r\n       *\r\n       * @memberOf platform.os\r\n       * @type string|null\r\n       */\r\n      'version': null,\r\n\r\n      /**\r\n       * Returns the OS string.\r\n       *\r\n       * @memberOf platform.os\r\n       * @returns {string} The OS string.\r\n       */\r\n      'toString': function() { return 'null'; }\r\n    };\r\n\r\n    platform.parse = parse;\r\n    platform.toString = toStringPlatform;\r\n\r\n    if (platform.version) {\r\n      description.unshift(version);\r\n    }\r\n    if (platform.name) {\r\n      description.unshift(name);\r\n    }\r\n    if (os && name && !(os == String(os).split(' ')[0] && (os == name.split(' ')[0] || product))) {\r\n      description.push(product ? '(' + os + ')' : 'on ' + os);\r\n    }\r\n    if (description.length) {\r\n      platform.description = description.join(' ');\r\n    }\r\n    return platform;\r\n  }\r\n\r\n  /*--------------------------------------------------------------------------*/\r\n\r\n  // Export platform.\r\n  var platform = parse();\r\n\r\n  // Some AMD build optimizers, like r.js, check for condition patterns like the following:\r\n  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {\r\n    // Expose platform on the global object to prevent errors when platform is\r\n    // loaded by a script tag in the presence of an AMD loader.\r\n    // See http://requirejs.org/docs/errors.html#mismatch for more details.\r\n    root.platform = platform;\r\n\r\n    // Define as an anonymous module so platform can be aliased through path mapping.\r\n    define(function() {\r\n      return platform;\r\n    });\r\n  }\r\n  // Check for `exports` after `define` in case a build optimizer adds an `exports` object.\r\n  else if (freeExports && freeModule) {\r\n    // Export for CommonJS support.\r\n    forOwn(platform, function(value, key) {\r\n      freeExports[key] = value;\r\n    });\r\n  }\r\n  else {\r\n    // Export to the global object.\r\n    root.platform = platform;\r\n  }\r\n}.call(this));\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/platform/platform.js\n// module id = 30\n// module chunks = 0","module.exports = __webpack_public_path__ + \"aa8cb5fbc710c7dded973a341ced2e66.js\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/file-loader!./~/paralleljs/lib/eval.js\n// module id = 31\n// module chunks = 0","/*! Native Promise Only\n    v0.8.1 (c) Kyle Simpson\n    MIT License: http://getify.mit-license.org\n*/\n\n(function UMD(name,context,definition){\n\t// special form of UMD for polyfilling across evironments\n\tcontext[name] = context[name] || definition();\n\tif (typeof module != \"undefined\" && module.exports) { module.exports = context[name]; }\n\telse if (typeof define == \"function\" && define.amd) { define(function $AMD$(){ return context[name]; }); }\n})(\"Promise\",typeof global != \"undefined\" ? global : this,function DEF(){\n\t/*jshint validthis:true */\n\t\"use strict\";\n\n\tvar builtInProp, cycle, scheduling_queue,\n\t\tToString = Object.prototype.toString,\n\t\ttimer = (typeof setImmediate != \"undefined\") ?\n\t\t\tfunction timer(fn) { return setImmediate(fn); } :\n\t\t\tsetTimeout\n\t;\n\n\t// dammit, IE8.\n\ttry {\n\t\tObject.defineProperty({},\"x\",{});\n\t\tbuiltInProp = function builtInProp(obj,name,val,config) {\n\t\t\treturn Object.defineProperty(obj,name,{\n\t\t\t\tvalue: val,\n\t\t\t\twritable: true,\n\t\t\t\tconfigurable: config !== false\n\t\t\t});\n\t\t};\n\t}\n\tcatch (err) {\n\t\tbuiltInProp = function builtInProp(obj,name,val) {\n\t\t\tobj[name] = val;\n\t\t\treturn obj;\n\t\t};\n\t}\n\n\t// Note: using a queue instead of array for efficiency\n\tscheduling_queue = (function Queue() {\n\t\tvar first, last, item;\n\n\t\tfunction Item(fn,self) {\n\t\t\tthis.fn = fn;\n\t\t\tthis.self = self;\n\t\t\tthis.next = void 0;\n\t\t}\n\n\t\treturn {\n\t\t\tadd: function add(fn,self) {\n\t\t\t\titem = new Item(fn,self);\n\t\t\t\tif (last) {\n\t\t\t\t\tlast.next = item;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tfirst = item;\n\t\t\t\t}\n\t\t\t\tlast = item;\n\t\t\t\titem = void 0;\n\t\t\t},\n\t\t\tdrain: function drain() {\n\t\t\t\tvar f = first;\n\t\t\t\tfirst = last = cycle = void 0;\n\n\t\t\t\twhile (f) {\n\t\t\t\t\tf.fn.call(f.self);\n\t\t\t\t\tf = f.next;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t})();\n\n\tfunction schedule(fn,self) {\n\t\tscheduling_queue.add(fn,self);\n\t\tif (!cycle) {\n\t\t\tcycle = timer(scheduling_queue.drain);\n\t\t}\n\t}\n\n\t// promise duck typing\n\tfunction isThenable(o) {\n\t\tvar _then, o_type = typeof o;\n\n\t\tif (o != null &&\n\t\t\t(\n\t\t\t\to_type == \"object\" || o_type == \"function\"\n\t\t\t)\n\t\t) {\n\t\t\t_then = o.then;\n\t\t}\n\t\treturn typeof _then == \"function\" ? _then : false;\n\t}\n\n\tfunction notify() {\n\t\tfor (var i=0; i<this.chain.length; i++) {\n\t\t\tnotifyIsolated(\n\t\t\t\tthis,\n\t\t\t\t(this.state === 1) ? this.chain[i].success : this.chain[i].failure,\n\t\t\t\tthis.chain[i]\n\t\t\t);\n\t\t}\n\t\tthis.chain.length = 0;\n\t}\n\n\t// NOTE: This is a separate function to isolate\n\t// the `try..catch` so that other code can be\n\t// optimized better\n\tfunction notifyIsolated(self,cb,chain) {\n\t\tvar ret, _then;\n\t\ttry {\n\t\t\tif (cb === false) {\n\t\t\t\tchain.reject(self.msg);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (cb === true) {\n\t\t\t\t\tret = self.msg;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tret = cb.call(void 0,self.msg);\n\t\t\t\t}\n\n\t\t\t\tif (ret === chain.promise) {\n\t\t\t\t\tchain.reject(TypeError(\"Promise-chain cycle\"));\n\t\t\t\t}\n\t\t\t\telse if (_then = isThenable(ret)) {\n\t\t\t\t\t_then.call(ret,chain.resolve,chain.reject);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tchain.resolve(ret);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcatch (err) {\n\t\t\tchain.reject(err);\n\t\t}\n\t}\n\n\tfunction resolve(msg) {\n\t\tvar _then, self = this;\n\n\t\t// already triggered?\n\t\tif (self.triggered) { return; }\n\n\t\tself.triggered = true;\n\n\t\t// unwrap\n\t\tif (self.def) {\n\t\t\tself = self.def;\n\t\t}\n\n\t\ttry {\n\t\t\tif (_then = isThenable(msg)) {\n\t\t\t\tschedule(function(){\n\t\t\t\t\tvar def_wrapper = new MakeDefWrapper(self);\n\t\t\t\t\ttry {\n\t\t\t\t\t\t_then.call(msg,\n\t\t\t\t\t\t\tfunction $resolve$(){ resolve.apply(def_wrapper,arguments); },\n\t\t\t\t\t\t\tfunction $reject$(){ reject.apply(def_wrapper,arguments); }\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tcatch (err) {\n\t\t\t\t\t\treject.call(def_wrapper,err);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t}\n\t\t\telse {\n\t\t\t\tself.msg = msg;\n\t\t\t\tself.state = 1;\n\t\t\t\tif (self.chain.length > 0) {\n\t\t\t\t\tschedule(notify,self);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcatch (err) {\n\t\t\treject.call(new MakeDefWrapper(self),err);\n\t\t}\n\t}\n\n\tfunction reject(msg) {\n\t\tvar self = this;\n\n\t\t// already triggered?\n\t\tif (self.triggered) { return; }\n\n\t\tself.triggered = true;\n\n\t\t// unwrap\n\t\tif (self.def) {\n\t\t\tself = self.def;\n\t\t}\n\n\t\tself.msg = msg;\n\t\tself.state = 2;\n\t\tif (self.chain.length > 0) {\n\t\t\tschedule(notify,self);\n\t\t}\n\t}\n\n\tfunction iteratePromises(Constructor,arr,resolver,rejecter) {\n\t\tfor (var idx=0; idx<arr.length; idx++) {\n\t\t\t(function IIFE(idx){\n\t\t\t\tConstructor.resolve(arr[idx])\n\t\t\t\t.then(\n\t\t\t\t\tfunction $resolver$(msg){\n\t\t\t\t\t\tresolver(idx,msg);\n\t\t\t\t\t},\n\t\t\t\t\trejecter\n\t\t\t\t);\n\t\t\t})(idx);\n\t\t}\n\t}\n\n\tfunction MakeDefWrapper(self) {\n\t\tthis.def = self;\n\t\tthis.triggered = false;\n\t}\n\n\tfunction MakeDef(self) {\n\t\tthis.promise = self;\n\t\tthis.state = 0;\n\t\tthis.triggered = false;\n\t\tthis.chain = [];\n\t\tthis.msg = void 0;\n\t}\n\n\tfunction Promise(executor) {\n\t\tif (typeof executor != \"function\") {\n\t\t\tthrow TypeError(\"Not a function\");\n\t\t}\n\n\t\tif (this.__NPO__ !== 0) {\n\t\t\tthrow TypeError(\"Not a promise\");\n\t\t}\n\n\t\t// instance shadowing the inherited \"brand\"\n\t\t// to signal an already \"initialized\" promise\n\t\tthis.__NPO__ = 1;\n\n\t\tvar def = new MakeDef(this);\n\n\t\tthis[\"then\"] = function then(success,failure) {\n\t\t\tvar o = {\n\t\t\t\tsuccess: typeof success == \"function\" ? success : true,\n\t\t\t\tfailure: typeof failure == \"function\" ? failure : false\n\t\t\t};\n\t\t\t// Note: `then(..)` itself can be borrowed to be used against\n\t\t\t// a different promise constructor for making the chained promise,\n\t\t\t// by substituting a different `this` binding.\n\t\t\to.promise = new this.constructor(function extractChain(resolve,reject) {\n\t\t\t\tif (typeof resolve != \"function\" || typeof reject != \"function\") {\n\t\t\t\t\tthrow TypeError(\"Not a function\");\n\t\t\t\t}\n\n\t\t\t\to.resolve = resolve;\n\t\t\t\to.reject = reject;\n\t\t\t});\n\t\t\tdef.chain.push(o);\n\n\t\t\tif (def.state !== 0) {\n\t\t\t\tschedule(notify,def);\n\t\t\t}\n\n\t\t\treturn o.promise;\n\t\t};\n\t\tthis[\"catch\"] = function $catch$(failure) {\n\t\t\treturn this.then(void 0,failure);\n\t\t};\n\n\t\ttry {\n\t\t\texecutor.call(\n\t\t\t\tvoid 0,\n\t\t\t\tfunction publicResolve(msg){\n\t\t\t\t\tresolve.call(def,msg);\n\t\t\t\t},\n\t\t\t\tfunction publicReject(msg) {\n\t\t\t\t\treject.call(def,msg);\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\t\tcatch (err) {\n\t\t\treject.call(def,err);\n\t\t}\n\t}\n\n\tvar PromisePrototype = builtInProp({},\"constructor\",Promise,\n\t\t/*configurable=*/false\n\t);\n\n\t// Note: Android 4 cannot use `Object.defineProperty(..)` here\n\tPromise.prototype = PromisePrototype;\n\n\t// built-in \"brand\" to signal an \"uninitialized\" promise\n\tbuiltInProp(PromisePrototype,\"__NPO__\",0,\n\t\t/*configurable=*/false\n\t);\n\n\tbuiltInProp(Promise,\"resolve\",function Promise$resolve(msg) {\n\t\tvar Constructor = this;\n\n\t\t// spec mandated checks\n\t\t// note: best \"isPromise\" check that's practical for now\n\t\tif (msg && typeof msg == \"object\" && msg.__NPO__ === 1) {\n\t\t\treturn msg;\n\t\t}\n\n\t\treturn new Constructor(function executor(resolve,reject){\n\t\t\tif (typeof resolve != \"function\" || typeof reject != \"function\") {\n\t\t\t\tthrow TypeError(\"Not a function\");\n\t\t\t}\n\n\t\t\tresolve(msg);\n\t\t});\n\t});\n\n\tbuiltInProp(Promise,\"reject\",function Promise$reject(msg) {\n\t\treturn new this(function executor(resolve,reject){\n\t\t\tif (typeof resolve != \"function\" || typeof reject != \"function\") {\n\t\t\t\tthrow TypeError(\"Not a function\");\n\t\t\t}\n\n\t\t\treject(msg);\n\t\t});\n\t});\n\n\tbuiltInProp(Promise,\"all\",function Promise$all(arr) {\n\t\tvar Constructor = this;\n\n\t\t// spec mandated checks\n\t\tif (ToString.call(arr) != \"[object Array]\") {\n\t\t\treturn Constructor.reject(TypeError(\"Not an array\"));\n\t\t}\n\t\tif (arr.length === 0) {\n\t\t\treturn Constructor.resolve([]);\n\t\t}\n\n\t\treturn new Constructor(function executor(resolve,reject){\n\t\t\tif (typeof resolve != \"function\" || typeof reject != \"function\") {\n\t\t\t\tthrow TypeError(\"Not a function\");\n\t\t\t}\n\n\t\t\tvar len = arr.length, msgs = Array(len), count = 0;\n\n\t\t\titeratePromises(Constructor,arr,function resolver(idx,msg) {\n\t\t\t\tmsgs[idx] = msg;\n\t\t\t\tif (++count === len) {\n\t\t\t\t\tresolve(msgs);\n\t\t\t\t}\n\t\t\t},reject);\n\t\t});\n\t});\n\n\tbuiltInProp(Promise,\"race\",function Promise$race(arr) {\n\t\tvar Constructor = this;\n\n\t\t// spec mandated checks\n\t\tif (ToString.call(arr) != \"[object Array]\") {\n\t\t\treturn Constructor.reject(TypeError(\"Not an array\"));\n\t\t}\n\n\t\treturn new Constructor(function executor(resolve,reject){\n\t\t\tif (typeof resolve != \"function\" || typeof reject != \"function\") {\n\t\t\t\tthrow TypeError(\"Not a function\");\n\t\t\t}\n\n\t\t\titeratePromises(Constructor,arr,function resolver(idx,msg){\n\t\t\t\tresolve(msg);\n\t\t\t},reject);\n\t\t});\n\t});\n\n\treturn Promise;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/native-promise-only/lib/npo.src.js\n// module id = 32\n// module chunks = 0","\"use strict\";\n\nexports.__esModule = true;\n/*eslint-env browser*/\n\nexports.default = {\n  pool: {\n    size: navigator.hardwareConcurrency || 8\n  }\n};\n//# sourceMappingURL=defaults.browser.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/threads/lib/defaults.browser.js\n// module id = 34\n// module chunks = 0","'use strict';\n\nexports.__esModule = true;\n\nvar _os = require('os');\n\nexports.default = {\n  pool: {\n    size: (0, _os.cpus)().length\n  }\n};\n//# sourceMappingURL=defaults.node.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/threads/lib/defaults.node.js\n// module id = 35\n// module chunks = 0","'use strict';\n\nexports.__esModule = true;\n\nvar _eventemitter = require('eventemitter3');\n\nvar _eventemitter2 = _interopRequireDefault(_eventemitter);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Job = function (_EventEmitter) {\n  _inherits(Job, _EventEmitter);\n\n  function Job(pool) {\n    _classCallCheck(this, Job);\n\n    var _this = _possibleConstructorReturn(this, _EventEmitter.call(this));\n\n    _this.pool = pool;\n    _this.thread = null;\n\n    _this.runArgs = [];\n    _this.sendArgs = [];\n\n    pool.emit('newJob', _this);\n    return _this;\n  }\n\n  Job.prototype.run = function run() {\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    if (args.length === 0) {\n      throw new Error('Cannot call .run() without arguments.');\n    }\n\n    this.runArgs = args;\n    return this;\n  };\n\n  Job.prototype.send = function send() {\n    if (this.runArgs.length === 0) {\n      throw new Error('Cannot .send() before .run().');\n    }\n\n    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    this.sendArgs = args;\n\n    this.emit('readyToRun');\n    return this;\n  };\n\n  Job.prototype.executeOn = function executeOn(thread) {\n    var _thread$once$once$run, _thread$once$once;\n\n    (_thread$once$once$run = (_thread$once$once = thread.once('message', this.emit.bind(this, 'done')).once('error', this.emit.bind(this, 'error'))).run.apply(_thread$once$once, this.runArgs)).send.apply(_thread$once$once$run, this.sendArgs);\n\n    this.thread = thread;\n\n    this.emit('threadChanged');\n    return this;\n  };\n\n  Job.prototype.promise = function promise() {\n    var _this2 = this;\n\n    // Always return a promise\n    return new Promise(function (resolve) {\n      // If the thread isn't set, listen for the threadChanged event\n      if (!_this2.thread) {\n        _this2.once('threadChanged', function () {\n          resolve(_this2.thread.promise());\n        });\n      } else {\n        resolve(_this2.thread.promise());\n      }\n    });\n  };\n\n  return Job;\n}(_eventemitter2.default);\n\nexports.default = Job;\n//# sourceMappingURL=job.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/threads/lib/job.js\n// module id = 36\n// module chunks = 0","'use strict';\n\nexports.__esModule = true;\n\nvar _eventemitter = require('eventemitter3');\n\nvar _eventemitter2 = _interopRequireDefault(_eventemitter);\n\nvar _job = require('./job');\n\nvar _job2 = _interopRequireDefault(_job);\n\nvar _defaults = require('./defaults');\n\nvar _defaults2 = _interopRequireDefault(_defaults);\n\nvar _ = require('./');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Pool = function (_EventEmitter) {\n  _inherits(Pool, _EventEmitter);\n\n  function Pool(threads) {\n    _classCallCheck(this, Pool);\n\n    var _this = _possibleConstructorReturn(this, _EventEmitter.call(this));\n\n    _this.threads = Pool.spawn(threads || _defaults2.default.pool.size);\n    _this.idleThreads = _this.threads.slice();\n    _this.jobQueue = [];\n    _this.runArgs = [];\n\n    _this.on('newJob', function (job) {\n      return _this.handleNewJob(job);\n    });\n    _this.on('threadAvailable', function () {\n      return _this.dequeue();\n    });\n    return _this;\n  }\n\n  Pool.prototype.run = function run() {\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    this.runArgs = args;\n    return this;\n  };\n\n  Pool.prototype.send = function send() {\n    if (!this.runArgs) {\n      throw new Error('Pool.send() called without prior Pool.run(). You need to define what to run first.');\n    }\n\n    var job = new _job2.default(this);\n    job.run.apply(job, this.runArgs);\n    return job.send.apply(job, arguments);\n  };\n\n  Pool.prototype.killAll = function killAll() {\n    this.threads.forEach(function (thread) {\n      thread.kill();\n    });\n  };\n\n  Pool.prototype.queueJob = function queueJob(job) {\n    this.jobQueue.push(job);\n    this.dequeue();\n  };\n\n  Pool.prototype.dequeue = function dequeue() {\n    var _this2 = this;\n\n    if (this.jobQueue.length === 0 || this.idleThreads.length === 0) {\n      return;\n    }\n\n    var job = this.jobQueue.shift();\n    var thread = this.idleThreads.shift();\n\n    job.once('done', function () {\n      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      return _this2.handleJobSuccess.apply(_this2, [thread, job].concat(args));\n    }).once('error', function () {\n      for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n\n      return _this2.handleJobError.apply(_this2, [thread, job].concat(args));\n    });\n\n    job.executeOn(thread);\n  };\n\n  Pool.prototype.handleNewJob = function handleNewJob(job) {\n    var _this3 = this;\n\n    this.lastCreatedJob = job;\n    job.once('readyToRun', function () {\n      return _this3.queueJob(job);\n    }); // triggered by job.send()\n  };\n\n  Pool.prototype.handleJobSuccess = function handleJobSuccess(thread, job) {\n    for (var _len4 = arguments.length, responseArgs = Array(_len4 > 2 ? _len4 - 2 : 0), _key4 = 2; _key4 < _len4; _key4++) {\n      responseArgs[_key4 - 2] = arguments[_key4];\n    }\n\n    this.emit.apply(this, ['done', job].concat(responseArgs));\n    this.handleJobDone(thread);\n  };\n\n  Pool.prototype.handleJobError = function handleJobError(thread, job, error) {\n    this.emit('error', job, error);\n    this.handleJobDone(thread);\n  };\n\n  Pool.prototype.handleJobDone = function handleJobDone(thread) {\n    var _this4 = this;\n\n    this.idleThreads.push(thread);\n    this.emit('threadAvailable');\n\n    if (this.idleThreads.length === this.threads.length) {\n      // run deferred to give other job.on('done') handlers time to run first\n      setTimeout(function () {\n        _this4.emit('finished');\n      }, 0);\n    }\n  };\n\n  return Pool;\n}(_eventemitter2.default);\n\nexports.default = Pool;\n\n\nPool.spawn = function (threadCount) {\n  var threads = [];\n\n  for (var threadIndex = 0; threadIndex < threadCount; threadIndex++) {\n    threads.push((0, _.spawn)());\n  }\n\n  return threads;\n};\n//# sourceMappingURL=pool.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/threads/lib/pool.js\n// module id = 37\n// module chunks = 0","'use strict';\n\nexports.__esModule = true;\n\nvar _slaveCode = require('./slave-code');\n\nvar _slaveCode2 = _interopRequireDefault(_slaveCode);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar slaveCodeDataUri = 'data:text/javascript;charset=utf-8,' + encodeURI(_slaveCode2.default);\nvar createBlobURL = window.createBlobURL || window.createObjectURL;\n\nif (!createBlobURL) {\n  var URL = window.URL || window.webkitURL;\n\n  if (URL) {\n    createBlobURL = URL.createObjectURL;\n  } else {\n    throw new Error('No Blob creation implementation found.');\n  }\n}\n\nif (typeof window.BlobBuilder === 'function' && typeof createBlobURL === 'function') {\n  var blobBuilder = new window.BlobBuilder();\n  blobBuilder.append(_slaveCode2.default);\n  slaveCodeDataUri = createBlobURL(blobBuilder.getBlob());\n} else if (typeof window.Blob === 'function' && typeof createBlobURL === 'function') {\n  var blob = new window.Blob([_slaveCode2.default], { type: 'text/javascript' });\n  slaveCodeDataUri = createBlobURL(blob);\n}\n\nexports.default = slaveCodeDataUri;\n//# sourceMappingURL=slave-code-uri.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/threads/lib/worker.browser/slave-code-uri.js\n// module id = 38\n// module chunks = 0","module.exports = \"/*eslint-env worker*/\\n/*global importScripts*/\\n/*eslint-disable no-console*/\\nself.module = {\\n  exports : function() {\\n    if (console) { console.error('No thread logic initialized.'); }\\n  }\\n};\\n\\nfunction handlerDone() {\\n  var args = Array.prototype.slice.call(arguments, 0);\\n  this.postMessage({ response : args });\\n}\\n\\nfunction handlerProgress(progress) {\\n  this.postMessage({ progress : progress });\\n}\\n\\nfunction handlerDoneTransfer() {\\n  var args = Array.prototype.slice.call(arguments);\\n  var lastArg = args.pop();\\n\\n  if (!(lastArg instanceof Array) && this.console) {\\n    console.error('Expected 2nd parameter of <doneCallback>.transfer() to be an array. Got:', lastArg);\\n  }\\n\\n  this.postMessage({ response : args }, lastArg);\\n}\\n\\nself.onmessage = function (event) {\\n  var scripts = event.data.scripts;\\n  if (scripts && scripts.length > 0 && typeof importScripts !== 'function') {\\n    throw new Error('importScripts() not supported.');\\n  }\\n\\n  if (event.data.initByScripts) {\\n    importScripts.apply(null, scripts);\\n  }\\n\\n  if (event.data.initByMethod) {\\n    var method = event.data.method;\\n    this.module.exports = Function.apply(null, method.args.concat(method.body));\\n\\n    if (scripts && scripts.length > 0) {\\n      importScripts.apply(null, scripts);\\n    }\\n  }\\n\\n  if (event.data.doRun) {\\n    var handler = this.module.exports;\\n    if (typeof handler !== 'function') {\\n      throw new Error('Cannot run thread logic. No handler has been exported.');\\n    }\\n\\n    var preparedHandlerDone = handlerDone.bind(this);\\n    preparedHandlerDone.transfer = handlerDoneTransfer.bind(this);\\n\\n    handler.call(this, event.data.param, preparedHandlerDone, handlerProgress.bind(this));\\n  }\\n}.bind(self);\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/threads/lib/worker.browser/slave-code.js\n// module id = 39\n// module chunks = 0","'use strict';\n\nexports.__esModule = true;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _eventemitter = require('eventemitter3');\n\nvar _eventemitter2 = _interopRequireDefault(_eventemitter);\n\nvar _slaveCodeUri = require('./slave-code-uri');\n\nvar _slaveCodeUri2 = _interopRequireDefault(_slaveCodeUri);\n\nvar _config = require('../config');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nif (_typeof(window.Worker) !== 'object' && typeof window.Worker !== 'function') {\n  throw new Error('Browser does not support web workers!');\n}\n\nfunction joinPaths(path1, path2) {\n  if (!path1 || !path2) {\n    return path1 + path2;\n  } else if (path1.charAt(path1.length - 1) === '/' || path2.charAt(0) === '/') {\n    return path1 + path2;\n  } else {\n    return path1 + '/' + path2;\n  }\n}\n\nfunction prependScriptUrl(scriptUrl) {\n  var prefix = (0, _config.getConfig)().basepath.web;\n  return prefix ? joinPaths(prefix, scriptUrl) : scriptUrl;\n}\n\nfunction convertToArray(input) {\n  var outputArray = [];\n  var index = 0;\n\n  while (typeof input[index] !== 'undefined') {\n    outputArray.push(input[index]);\n    index++;\n  }\n\n  return outputArray;\n}\n\nfunction logError(error) {\n  if (error.stack) {\n    console.error(error.stack); // eslint-disable-line no-console\n  } else if (error.message && error.filename && error.lineno) {\n    var fileName = error.filename.match(/^data:text\\/javascript/) && error.filename.length > 50 ? error.filename.substr(0, 50) + '...' : error.filename;\n    console.error(error.message + ' @' + fileName + ':' + error.lineno); // eslint-disable-line no-console\n  } else {\n    console.error(error); // eslint-disable-line no-console\n  }\n}\n\nvar Worker = function (_EventEmitter) {\n  _inherits(Worker, _EventEmitter);\n\n  function Worker() {\n    var initialScript = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    var importScripts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n    _classCallCheck(this, Worker);\n\n    // used by `run()` to decide if the worker must be re-initialized\n    var _this = _possibleConstructorReturn(this, _EventEmitter.call(this));\n\n    _this.currentRunnable = null;\n    _this.currentImportScripts = [];\n\n    _this.initWorker();\n    _this.worker.addEventListener('message', _this.handleMessage.bind(_this));\n    _this.worker.addEventListener('error', _this.handleError.bind(_this));\n\n    if (initialScript) {\n      _this.run(initialScript, importScripts);\n    }\n    return _this;\n  }\n\n  Worker.prototype.initWorker = function initWorker() {\n    try {\n      this.worker = new window.Worker(_slaveCodeUri2.default);\n    } catch (error) {\n      var slaveScriptUrl = (0, _config.getConfig)().fallback.slaveScriptUrl;\n      if (slaveScriptUrl) {\n        // try using the slave script file instead of the data URI\n        this.worker = new window.Worker(_slaveCodeUri2.default);\n      } else {\n        // re-throw\n        throw error;\n      }\n    }\n  };\n\n  Worker.prototype.run = function run(toRun) {\n    var importScripts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n    if (this.alreadyInitializedToRun(toRun, importScripts)) {\n      // don't re-initialize with the new logic if it already has been\n      return this;\n    }\n\n    if (typeof toRun === 'function') {\n      this.runMethod(toRun, importScripts);\n    } else {\n      this.runScripts(toRun, importScripts);\n    }\n\n    this.currentRunnable = toRun;\n    this.currentImportScripts = importScripts;\n\n    return this;\n  };\n\n  Worker.prototype.runMethod = function runMethod(method, importScripts) {\n    var methodStr = method.toString();\n    var args = methodStr.substring(methodStr.indexOf('(') + 1, methodStr.indexOf(')')).split(',');\n    var body = methodStr.substring(methodStr.indexOf('{') + 1, methodStr.lastIndexOf('}'));\n\n    this.worker.postMessage({\n      initByMethod: true,\n      method: { args: args, body: body },\n      scripts: importScripts.map(prependScriptUrl)\n    });\n  };\n\n  Worker.prototype.runScripts = function runScripts(script, importScripts) {\n    if (!script) {\n      throw new Error('Must pass a function or a script URL to run().');\n    }\n\n    // attention: array for browser, single script for node\n    this.worker.postMessage({\n      initByScripts: true,\n      scripts: importScripts.concat([script]).map(prependScriptUrl)\n    });\n  };\n\n  Worker.prototype.send = function send(param) {\n    var transferables = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n    this.worker.postMessage({\n      doRun: true,\n      param: param\n    }, transferables);\n    return this;\n  };\n\n  Worker.prototype.kill = function kill() {\n    this.worker.terminate();\n    this.emit('exit');\n    return this;\n  };\n\n  Worker.prototype.promise = function promise() {\n    var _this2 = this;\n\n    return new Promise(function (resolve, reject) {\n      var resolved = void 0,\n          rejected = void 0;\n      resolved = function resolved(result) {\n        _this2.removeListener('error', rejected);\n        resolve(result);\n      };\n      rejected = function rejected(err) {\n        _this2.removeListener('message', resolved);\n        reject(err);\n      };\n\n      _this2.once('message', resolved).once('error', rejected);\n    });\n  };\n\n  Worker.prototype.alreadyInitializedToRun = function alreadyInitializedToRun(toRun, importScripts) {\n    var runnablesMatch = this.currentRunnable === toRun;\n    var importScriptsMatch = this.currentImportScripts === importScripts || importScripts.length === 0 && this.currentImportScripts.length === 0;\n\n    return runnablesMatch && importScriptsMatch;\n  };\n\n  Worker.prototype.handleMessage = function handleMessage(event) {\n    if (event.data.error) {\n      this.handleError(event.data.error);\n    } else if (event.data.progress) {\n      this.handleProgress(event.data.progress);\n    } else {\n      var responseArgs = convertToArray(event.data.response);\n      this.emit.apply(this, ['message'].concat(responseArgs));\n      this.emit.apply(this, ['done'].concat(responseArgs)); // this one is just for convenience\n    }\n  };\n\n  Worker.prototype.handleProgress = function handleProgress(progress) {\n    this.emit('progress', progress);\n  };\n\n  Worker.prototype.handleError = function handleError(error) {\n    if (!this.listeners('error', true)) {\n      logError(error);\n    }\n\n    if (error.preventDefault) {\n      error.preventDefault();\n    }\n\n    this.emit('error', error);\n  };\n\n  return Worker;\n}(_eventemitter2.default);\n\nexports.default = Worker;\n//# sourceMappingURL=worker.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/threads/lib/worker.browser/worker.js\n// module id = 40\n// module chunks = 0","'use strict';\n\n/*eslint-env node*/\n/*\n * This file is only a stub to make './worker' resolve the './worker.node/worker' module.\n * Loading the browser worker into the browser bundle is done in the gulpfile by\n * configuring a browserify override.\n */\n\nif (typeof process !== 'undefined' && 'pid' in process) {\n  module.exports = require('./worker.node/worker');\n} else {\n  module.exports = require('./worker.browser/worker');\n}\n//# sourceMappingURL=worker.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/threads/lib/worker.js\n// module id = 41\n// module chunks = 0","'use strict';\n\nexports.__esModule = true;\n\nvar _child_process = require('child_process');\n\nvar _child_process2 = _interopRequireDefault(_child_process);\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nvar _eventemitter = require('eventemitter3');\n\nvar _eventemitter2 = _interopRequireDefault(_eventemitter);\n\nvar _config = require('../config');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Worker = function (_EventEmitter) {\n  _inherits(Worker, _EventEmitter);\n\n  function Worker(initialRunnable) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Worker);\n\n    var _this = _possibleConstructorReturn(this, _EventEmitter.call(this));\n\n    _this.slave = _child_process2.default.fork(_path2.default.join(__dirname, 'slave.js'), [], options);\n    _this.slave.on('message', _this.handleMessage.bind(_this));\n    _this.slave.on('error', _this.handleError.bind(_this));\n    _this.slave.on('exit', _this.emit.bind(_this, 'exit'));\n\n    if (initialRunnable) {\n      _this.run(initialRunnable);\n    }\n    return _this;\n  }\n\n  Worker.prototype.run = function run(toRun) {\n    if (typeof toRun === 'function') {\n      this.runMethod(toRun);\n    } else {\n      this.runScript(toRun);\n    }\n    return this;\n  };\n\n  Worker.prototype.runMethod = function runMethod(method) {\n    this.slave.send({\n      initByMethod: true,\n      method: method.toString()\n    });\n  };\n\n  Worker.prototype.runScript = function runScript(script) {\n    if (!script) {\n      throw new Error('Must pass a function or a script path to run().');\n    }\n\n    var prefixedScriptPath = _path2.default.join((0, _config.getConfig)().basepath.node, script);\n\n    // attention: single script for node, array for browser\n    this.slave.send({\n      initByScript: true,\n      script: _path2.default.resolve(prefixedScriptPath)\n    });\n  };\n\n  Worker.prototype.send = function send(param) {\n    this.slave.send({\n      doRun: true,\n      param: param\n    });\n    return this;\n  };\n\n  Worker.prototype.kill = function kill() {\n    this.slave.kill();\n    return this;\n  };\n\n  Worker.prototype.promise = function promise() {\n    var _this2 = this;\n\n    return new Promise(function (resolve, reject) {\n      var resolved = void 0,\n          rejected = void 0;\n      resolved = function resolved(result) {\n        _this2.removeListener('error', rejected);\n        resolve(result);\n      };\n      rejected = function rejected(err) {\n        _this2.removeListener('message', resolved);\n        reject(err);\n      };\n\n      _this2.once('message', resolved).once('error', rejected);\n    });\n  };\n\n  Worker.prototype.handleMessage = function handleMessage(message) {\n    if (message.error) {\n      var error = new Error(message.error.message);\n      error.stack = message.error.stack;\n\n      this.handleError(error);\n    } else if (message.progress) {\n      this.handleProgress(message.progress);\n    } else {\n      this.emit.apply(this, ['message'].concat(message.response));\n      this.emit.apply(this, ['done'].concat(message.response)); // this one is just for convenience\n    }\n  };\n\n  Worker.prototype.handleProgress = function handleProgress(progress) {\n    this.emit('progress', progress);\n  };\n\n  Worker.prototype.handleError = function handleError(error) {\n    if (!this.listeners('error', true)) {\n      console.error(error.stack || error); // eslint-disable-line no-console\n    }\n    this.emit('error', error);\n  };\n\n  return Worker;\n}(_eventemitter2.default);\n\nexports.default = Worker;\n//# sourceMappingURL=worker.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/threads/lib/worker.node/worker.js\n// module id = 42\n// module chunks = 0","import * as _ from \"lodash\";\n/* tslint:disable:no-var-requires */\nimport * as benchmark from \"benchmark\";\nconst platform = require(\"platform\");\n/* tslint:enable:no-var-requires */\n\nimport {mandelbrot as transpiledParallelMandelbrot} from \"./transpiled/mandelbrot\";\nimport {syncKnightTours, parallelKnightTours as transpiledParallelKnightTours} from \"./transpiled/knights-tour\";\nimport {syncMonteCarlo as simJsMonteCarlo, parallelMonteCarlo as simJsParallelMonteCarlo} from \"./transpiled/monte-carlo\";\n\nimport {parallelKnightTours as dynamicParallelKnightTours} from \"./dynamic/knights-tour\";\nimport {createMandelOptions, parallelMandelbrot as dynamicParallelMandelbrot, syncMandelbrot} from \"./dynamic/mandelbrot\";\nimport {IMonteCarloSimulationOptions, syncMonteCarlo as randomMonteCarlo, parallelMonteCarlo as randomParallelMonteCarlo, IProject} from \"./dynamic/monte-carlo\";\n\nimport {parallelJSMandelbrot} from \"./paralleljs/mandelbrot\";\nimport {parallelJSMonteCarlo} from \"./paralleljs/monte-carlo\";\nimport {parallelJSKnightTours} from \"./paralleljs/knights-tour\";\n\nimport {threadsMonteCarlo} from \"./threads/monte-carlo\";\nimport {threadsMandelbrot} from \"./threads/mandelbrot\";\nimport {threadsKnightTours} from \"./threads/knights-tour\";\nimport {Pool} from \"threads\";\n\nimport {mandelbrot as hamstersjsMandelbrot} from \"./hamstersjs/mandelbrot\";\nimport {parallelKnightTours as hamstersjsKnightTours} from \"./hamstersjs/knights-tour\";\nimport {parallelMonteCarlo as hamstersjsMonteCarlo} from \"./hamstersjs/monte-carlo\";\n\nlet Benchmark = (benchmark as any).runInContext({ _ });\n(window as any).Benchmark = Benchmark;\n\nconst runButton = document.querySelector(\"#run\") as HTMLInputElement;\nconst outputTable = document.querySelector(\"#output-table\") as HTMLTableElement;\nconst jsonOutputField = document.querySelector(\"#json-output\") as HTMLElement;\n\nconst setCheckboxes = document.querySelectorAll('[id*=\"-set\"]') as NodeListOf<HTMLInputElement>;\n\nconst knightRunner6x6 = document.querySelector(\"#knight-runner-6-6\") as HTMLInputElement;\n\ntype Deferred = { resolve: () => void };\n\nfunction addAsyncTest(suite: benchmark.Suite, optionsOrTitle: string | (benchmark.Options & { fn: (this: undefined) => PromiseLike<any> }), fn?: ((this: undefined) => PromiseLike<any>)) {\n    const options: benchmark.Options = typeof(optionsOrTitle) === \"string\" ? { name: optionsOrTitle, fn} : optionsOrTitle;\n    const asyncFn = options.fn as Function;\n\n    options.defer = true;\n    options.fn = function (this: benchmark, deferred: Deferred) {\n        const benchmark = this;\n        asyncFn.apply(undefined, [])\n            .then(function () { deferred.resolve() },\n                function (error: any) {\n                    console.error(error);\n                    benchmark.error = error;\n                    deferred.resolve();\n                }\n            );\n    };\n\n    return suite.add(options);\n}\n\n/**\n * Helper for threadjs tests. Creates the thread pool before the tests are run. A new thread pool for each test run is needed\n * to avoid caching of the environment across runs.\n */\nfunction addThreadJsTest(this: any, suite: benchmark.Suite, name: string, fn: (...args: any[]) => void, ...args: any[]) {\n    let argsWithPool: any[];\n    let pool: Pool;\n    addAsyncTest(suite, {\n        name,\n        setup: function () {\n            pool = new Pool();\n            argsWithPool = args.slice();\n            argsWithPool.push(pool);\n        },\n        fn: () => fn.apply(this, argsWithPool),\n        teardown: function () {\n            if (pool) {\n                pool.killAll();\n            }\n        }\n    });\n}\n\nfunction addKnightBoardTests(suite: benchmark.Suite) {\n    const boardSizes = knightRunner6x6.checked ? [5, 6] : [5];\n\n    for (const boardSize of boardSizes) {\n        const title = `Knights Tour (${boardSize}x${boardSize})`;\n        suite.add(`sync: ${title}`, function () {\n            syncKnightTours({x: 0, y: 0}, boardSize);\n        });\n\n        addAsyncTest(suite, `parallel-dynamic: ${title}`, () => dynamicParallelKnightTours({x: 0, y: 0}, boardSize));\n        addAsyncTest(suite, `parallel-transpiled: ${title}`, () => transpiledParallelKnightTours({x: 0, y: 0}, boardSize));\n        addAsyncTest(suite, `paralleljs: ${title}`, () => parallelJSKnightTours({x: 0, y: 0}, boardSize));\n        addThreadJsTest(suite, `threadsjs: ${title}`, threadsKnightTours, {x: 0, y: 0}, boardSize);\n        addAsyncTest(suite, `hamstersjs: ${title}`, () => hamstersjsKnightTours({x: 0, y: 0}, boardSize));\n    }\n}\n\nfunction addMonteCarloTest(suite: benchmark.Suite, options: IMonteCarloSimulationOptions & {numberOfProjects: number, numRuns: number}) {\n    const runOptions = _.extend(options, {\n        projects: createProjects(options.numberOfProjects)\n    });\n\n    const configName = `(projects: ${options.numberOfProjects}, runs: ${options.numRuns.toLocaleString()})`;\n\n    suite.add(`sync: Monte Carlo Math.random ${configName}`, function () {\n        randomMonteCarlo(options);\n    });\n\n    addAsyncTest(suite, `parallel-dynamic: Monte Carlo Math.random ${configName}`, () => randomParallelMonteCarlo(runOptions));\n    suite.add(`sync: Monte Carlo simjs ${configName}`, function () {\n        simJsMonteCarlo(options);\n    });\n\n    addAsyncTest(suite, `parallel-transpiled: Monte Carlo simjs ${configName}`, () => simJsParallelMonteCarlo(runOptions));\n    addAsyncTest(suite, `paralleljs: Monte Carlo simjs ${configName}`, () => parallelJSMonteCarlo(runOptions));\n    addThreadJsTest(suite, `threadsjs: Monte Carlo simjs ${configName}`, threadsMonteCarlo, runOptions);\n    addAsyncTest(suite, `hamstersjs: Monte Carlo Math.random ${configName}`, () => hamstersjsMonteCarlo(runOptions));\n}\n\nfunction addMonteCarloTests(suite: benchmark.Suite) {\n    const oneMillionRuns = (document.querySelector(\"#monte-carlo-1m\") as HTMLInputElement).checked;\n    const monteCarloOptions = {\n        investmentAmount: 620000,\n        numYears: 15,\n        performance: 0.0340000,\n        seed: 10,\n        volatility: 0.0896000\n    };\n\n    const runs = [10**4, 10**5];\n    if (oneMillionRuns) {\n        runs.push(10**6);\n    }\n\n    for (const numRuns of runs) {\n        for (const numberOfProjects of  [8, 16]) {\n            const options = _.extend({}, monteCarloOptions, { numberOfProjects, numRuns });\n            addMonteCarloTest(suite, options);\n        }\n    }\n}\n\nfunction addMandelbrotTests(suite: benchmark.Suite) {\n    const mandelbrotHeight = parseInt((document.querySelector(\"#mandelbrot-height\") as HTMLInputElement).value, 10);\n    const mandelbrotWidth = parseInt((document.querySelector(\"#mandelbrot-width\") as HTMLInputElement).value, 10);\n    const mandelbrotIterations = parseInt((document.querySelector(\"#mandelbrot-iterations\") as HTMLInputElement).value, 10);\n    const onlyDefaultScheduling = (document.querySelector(\"#mandelbrot-only-default-scheduling\") as HTMLInputElement).checked;\n\n    const mandelbrotOptions = createMandelOptions(mandelbrotWidth, mandelbrotHeight, mandelbrotIterations);\n\n    suite.add(`sync: Mandelbrot ${mandelbrotWidth}x${mandelbrotHeight}, ${mandelbrotIterations}`, function () {\n        syncMandelbrot(mandelbrotOptions, () => undefined);\n    });\n\n    const  taskSizes = onlyDefaultScheduling ? [undefined] : [undefined, 1, 150, 312, 625, 1250, 2500];\n    for (const valuesPerTask of taskSizes) {\n        const parallelOptions = { maxValuesPerTask: valuesPerTask, minValuesPerTask: valuesPerTask };\n        let title = `Mandelbrot ${mandelbrotOptions.imageWidth}x${mandelbrotOptions.imageHeight}, ${mandelbrotOptions.iterations}`;\n        if (valuesPerTask) {\n            title += ` (${valuesPerTask})`;\n        }\n\n        addAsyncTest(suite, `parallel-dynamic: ${title}`, () => dynamicParallelMandelbrot(mandelbrotOptions, parallelOptions));\n        addAsyncTest(suite, `parallel-transpiled: ${title}`, () => transpiledParallelMandelbrot(mandelbrotOptions, parallelOptions));\n    }\n\n    addAsyncTest(suite, `paralleljs: Mandelbrot ${mandelbrotWidth}x${mandelbrotHeight}, ${mandelbrotIterations}`, () => parallelJSMandelbrot(mandelbrotOptions));\n    addThreadJsTest(suite, `threadsjs: Mandelbrot ${mandelbrotWidth}x${mandelbrotHeight}, ${mandelbrotIterations}`, threadsMandelbrot, mandelbrotOptions);\n    addAsyncTest(suite, `hamstersjs: Mandelbrot ${mandelbrotWidth}x${mandelbrotHeight}, ${mandelbrotIterations}`, () => hamstersjsMandelbrot(mandelbrotOptions));\n}\n\nfunction measure() {\n    const runMonteCarlo = (document.querySelector(\"#monte-carlo\") as HTMLInputElement).checked;\n    const runMandelbrot = (document.querySelector(\"#mandelbrot-field\") as HTMLInputElement).checked;\n    const runKnightTour = (document.querySelector(\"#knight-runner\") as HTMLInputElement).checked;\n    const allTestsSuite = new Benchmark.Suite();\n\n    if (runMandelbrot) {\n        addMandelbrotTests(allTestsSuite);\n    }\n    if (runKnightTour) {\n        addKnightBoardTests(allTestsSuite);\n    }\n    if (runMonteCarlo) {\n        addMonteCarloTests(allTestsSuite);\n    }\n\n    const suite = allTestsSuite.filter((benchmark: benchmark  & {name: string }) => {\n        for (let i = 0; i < setCheckboxes.length; ++i) {\n            const checkbox = setCheckboxes[i];\n            const parts = checkbox.id.split(\"-\");\n            const name = parts.slice(0, parts.length - 1).join(\"-\");\n\n            if (checkbox.checked && benchmark.name.indexOf(name) === 0) {\n                return true;\n            }\n        }\n        return false;\n    });\n\n    suite.forEach((benchmark: benchmark) => {\n        const index = suite.indexOf(benchmark);\n        benchmark.on(\"cycle\", () => appendTestResults(benchmark, index));\n    });\n\n    suite.on(\"cycle\", function (event: benchmark.Event) {\n        const benchmark = event.target as (benchmark);\n        const index = (event.currentTarget as Array<benchmark>).indexOf(benchmark);\n        appendTestResults(benchmark, index);\n    });\n\n    suite.on(\"complete\", function (event: benchmark.Event) {\n        const benchmarks = (event.currentTarget as benchmark.Suite).map((benchmark: benchmark & {name: string }) => {\n            return {\n                info: benchmark.toString,\n                name: benchmark.name,\n                stats: benchmark.stats,\n                times: benchmark.times\n            };\n        });\n\n        jsonOutputField.textContent = JSON.stringify({ benchmarks, platform}, undefined, \"    \");\n        runButton.disabled = false;\n    });\n\n    suite.on(\"start\", initResultTable);\n\n    suite.run({async: true });\n}\n\nrunButton.addEventListener(\"click\", function (event: MouseEvent) {\n    event.preventDefault();\n    runButton.disabled = true;\n    measure();\n});\n\nfunction initResultTable(event: benchmark.Event) {\n    clearOutputTable();\n\n    function clearOutputTable() {\n        while (outputTable.tBodies.length > 0) {\n            outputTable.removeChild(outputTable.tBodies[0]);\n        }\n    }\n\n    const body = outputTable.createTBody();\n    (event.currentTarget as Array<benchmark.Options>).forEach(suite => {\n        const row = body.insertRow();\n        const [set, ...nameParts] = suite.name!.split(\":\");\n\n        row.insertCell().textContent = set;\n        row.insertCell().textContent = nameParts.join(\":\");\n        const columns = (outputTable.tHead.rows[0] as HTMLTableRowElement).cells.length;\n        for (let i = 0; i < columns; ++i) {\n            row.insertCell();\n        }\n    });\n}\n\nfunction appendTestResults(benchmark: benchmark, index: number) {\n    const body = outputTable.tBodies[0] as HTMLTableSectionElement;\n    const row = body.rows[index] as HTMLTableRowElement;\n\n    row.cells[2].textContent = benchmark.stats.deviation.toFixed(4);\n    row.cells[3].textContent = benchmark.stats.mean.toFixed(4);\n    row.cells[4].textContent = benchmark.stats.moe.toFixed(4);\n    row.cells[5].textContent = benchmark.stats.rme.toFixed(4);\n    row.cells[6].textContent = benchmark.stats.sem.toFixed(4);\n    row.cells[7].textContent = benchmark.stats.variance.toFixed(4);\n    row.cells[8].textContent = benchmark.stats.sample.length.toFixed(0);\n    row.cells[9].textContent = benchmark.hz.toFixed(4);\n}\n\nfunction createProjects(count: number): IProject[] {\n    const projects: IProject[] = [];\n\n    for (let i = 0; i < count; ++i) {\n        projects.push({\n            startYear: Math.round(Math.random() * 15),\n            totalAmount: Math.round(Math.random() * 100000)\n        });\n    }\n\n    return projects;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/performance-measurement.ts"],"sourceRoot":""}